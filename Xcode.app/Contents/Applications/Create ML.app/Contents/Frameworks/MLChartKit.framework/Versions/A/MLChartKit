@(#)PROGRAM:MLChartKit  PROJECT:MLUI-51
NNSAttributedStringKey
TextStyleOptionKey
NNSFontTextStyleOptionKey
Foundation
AppKit
MLChartKit
ChartMetadata
MLChartKit
CCChartViewWrapper
MLChartKit
ChartMetadataEntryType
MLChartKit
ChartData
MLChartKit
ChartMetadataEntry
MLChartKit
LineChartConfig
Color
Text
Strings
Keys
Rows
Fonts
FontSizes
FontDesigns
MLChartKit
ChartRootView
  "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
  "datasets": {
    "records": [],
    "snapshots": [],
    "snapshottableCheckpoints": [],
    "lastSavedCheckpoint": []
  },
  "width": "container",
  "height": "container",
  "data": { "name": "records" },
  "padding": 0,
  "encoding": {
    "x": {
      "field": "iteration",
      "type": "quantitative",
      "axis": {
        "title": "Iterations",
        "labelExpr": "datum.index === 0 ? '' : datum.label",
        "encoding": {
          "grid": {
            "y2": { "value": 0 },
            "y": { "signal": "-height - chartPadding.topShoulder" }
          }
        },
        "values": [1, { "signal": "maxIterations" }],
        "ticks": true
      },
      "scale": { "nice": false, "domain": [1, { "signal": "maxIterations" }] }
    }
  },
  "layer": [
    {
      "description": "Vertical snapshottable markers",
      "data": { "name": "snapshottableCheckpoints" },
      "transform": [
        {
          "calculate": "max(datum.validate, datum.train)",
          "as": "maxScore"
        }
      ],
      "mark": {
        "type": "rule",
        "style": "snapshottableCheckpoint",
        "opacity": { "signal": "lollipopIteration === datum.iteration && lollipopIteration === currentIteration && snapshotOrSnapshottableSelected ? 0 : 1" },
        "y": 0
      }
    },
    {
      "description": "Vertical snapshot markers",
      "data": { "name": "snapshots" },
      "transform": [
        {
          "calculate": "max(datum.validate, datum.train)",
          "as": "maxScore"
        }
      ],
      "mark": {
        "type": "rule",
        "style": "snapshot",
        "opacity": { "signal": "lollipopIteration === datum.iteration && currentIteration !== datum.iteration ? 0 : 1" },
        "y": 0
      }
    },
    {
      "transform": [
        { "filter": "datum.iteration === lollipopIteration" },
        {
          "calculate": "min(min(scale('x', datum.iteration), lollipopCornerRadius), min(width - scale('x', datum.iteration), lollipopCornerRadius))",
          "as": "cornerRadiusOffset"
        },
        {
          "calculate": "-chartPadding.lollipopChart - sqrt(pow(lollipopCornerRadius, 2) - pow(datum.cornerRadiusOffset, 2))",
          "as": "y2Offset"
        }
      ],
      "mark": {
        "type": "rule",
        "style": "currentIterationRule",
        "y": { "signal": "height" },
        "y2": { "signal": "datum.y2Offset" },
        "color": { "signal": "iterationMarkerColor" }
      }
    },
    {
      "transform": [
        {
          "calculate": "max(datum.train, datum.validate)",
          "as": "maxScore"
        },
        {
          "filter": "datum.iteration === currentIteration"
        }
      ],
      "mark": {
        "type": "rule",
        "style": "currentIterationRule",
        "color": { "signal": "createmlColor.currentIterationMarker" },
        "opacity": { "signal": "snapshotOrSnapshottableSelected && lollipopIteration === currentIteration ? 0 : 1" }
      },
      "encoding": {
        "y": {
          "type": "quantitative",
          "field": "maxScore",
          "axis": {
            "title": { "signal": "isAccuracy ? 'Accuracy' : 'Loss'" }
          },
          "scale": {
            "domain": {
              "fields": [
                { "data": "records", "field": "train" },
                { "data": "records", "field": "validate" },
                { "signal": "isAccuracy ? [0, 100] : [0, 0]" }
              ]
            }
          }
        }
      }
    },
    {
      "transform": [
        { "filter": "datum.validate !== null" }
      ],
      "encoding": {
        "y": {
          "field": "validate",
          "type": "quantitative"
        }
      },
      "layer": [
        {
          "mark": { "type": "line", "style": "validateSaved" },
          "transform": [
            { "filter": "lastSavedIteration === null || datum.iteration <= lastSavedIteration" }
          ]
        },
        {
          "mark": {
            "type": "line",
            "style": "validateUnsaved"
          },
          "transform": [
            { "filter": "lastSavedIteration !== null && datum.iteration >= lastSavedIteration" }
          ]
        },
        {
          "transform": [
            { "filter": "datum.iteration === currentIteration" }
          ],
          "mark": { "type": "circle", "style": "validateSaved" }
        }
      ]
    },
    {
      "encoding": {
        "y": {
          "field": "train",
          "type": "quantitative"
        }
      },
      "layer": [
        {
          "mark": { "type": "line", "style": "trainSaved" },
          "transform": [
            { "filter": "lastSavedIteration === null || datum.iteration <= lastSavedIteration" }
          ]
        },
        {
          "mark": {
            "type": "line",
            "style": "trainUnsaved"
          },
          "transform": [
            { "filter": "lastSavedIteration !== null && datum.iteration >= lastSavedIteration" }
          ]
        },
        {
          "transform": [
            { "filter": "datum.iteration === currentIteration" }
          ],
          "mark": { "type": "circle", "style": "trainSaved" }
        }
      ]
    },
    {
      "data": { "name": "records" },
      "encoding": {
        "y": { "value": 0 }
      },
      "transform": [
        { "filter": "datum.iteration === lollipopIteration" },
        {
          "calculate": "datum.train !== null && datum.validate !== null",
          "as": "doubleLine"
        },
        {
          "calculate": "datum.train === null ? '' : nativeNumberFormat(datum.train, numberFormat)",
          "as": "trainString"
        },
        {
          "calculate": "datum.validate === null ? '' : nativeNumberFormat(datum.validate, numberFormat)",
          "as": "validateString"
        },
        {
          "calculate": "datum.train === null ? 0 : nativeTextMetrics(datum.trainString, bodyRoundedTextDescriptor).width + (isAccuracy ? lollipopPadding.metricPercent + pad2Off + nativeTextMetrics('%', subheadlineDefaultTextDescriptor).width : 0)",
          "as": "trainMetricStringWidth"
        },
        {
          "calculate": "datum.validate === null ? 0 : nativeTextMetrics(datum.validateString, bodyRoundedTextDescriptor).width + (isAccuracy ? lollipopPadding.metricPercent + pad2Off + nativeTextMetrics('%', subheadlineDefaultTextDescriptor).width : 0)",
          "as": "validateMetricStringWidth"
        },
        {
          "as": "lollipopWidth",
          "calculate": "1 + lollipopPadding.left + (datum.doubleLine ? legendCircleWidthHeight + lollipopPadding.circleText : 0) + max(datum.doubleLine ? trainTextMetrics.width : singleTextMetrics.width, datum.trainMetricStringWidth) + (datum.doubleLine ? lollipopPadding.col1Col2 + legendCircleWidthHeight + lollipopPadding.circleText + max(validateTextMetrics.width, datum.validateMetricStringWidth) : 0) + lollipopPadding.right + 1"
        },
        {
          "calculate": "1 + lollipopPadding.left + (datum.doubleLine ? legendCircleWidthHeight + lollipopPadding.circleText : 0 ) + nativeTextMetrics(lollipopIterationTextPrefix + datum.iteration, caption1DefaultTextDescriptor).width + lollipopPadding.right + 1",
          "as": "lollipopWidthForIterationString"
        },
        {
          "calculate": "max(datum.lollipopWidth, datum.lollipopWidthForIterationString)",
          "as": "adjustedLollipopWidth"
        },
        {
          "calculate": "-lollipopHeight - chartPadding.lollipopChart",
          "as": "lollipopYOffset"
        },
        {
          "calculate": "scale('x', datum.iteration) - datum.adjustedLollipopWidth / 2",
          "as": "preLollipopStart"
        },
        {
          "calculate": "scale('x', datum.iteration) + datum.adjustedLollipopWidth / 2",
          "as": "preLollipopEnd"
        },
        {
          "calculate": "-min(0, datum.preLollipopStart) || min(0, width - datum.preLollipopEnd) ",
          "as": "boundaryOffset"
        },
        {
          "calculate": "datum.boundaryOffset - datum.adjustedLollipopWidth / 2",
          "as": "lollipopStartOffset"
        },
        {
          "calculate": "datum.boundaryOffset + datum.adjustedLollipopWidth / 2",
          "as": "lollipopEndOffset"
        },
        {
          "calculate": "datum.lollipopYOffset + lollipopPadding.top + pad2Off",
          "as": "lollipopContentYOffset"
        },
        {
          "calculate": "datum.lollipopStartOffset + lollipopPadding.left + pad2Off",
          "as": "lollipopContentXOffset"
        },
        {
          "calculate": "datum.lollipopContentXOffset + (datum.doubleLine ? legendCircleWidthHeight + lollipopPadding.circleText : 0)",
          "as": "lollipopContentTextXOffset"
        },
        {
          "calculate": "datum.lollipopContentTextXOffset + (datum.doubleLine ? max(trainTextMetrics.width, datum.trainMetricStringWidth) : singleTextMetrics.width) + lollipopPadding.col1Col2",
          "as": "lollipopContentSecondXOffset"
        },
        {
          "calculate": "datum.lollipopContentSecondXOffset + legendCircleWidthHeight + lollipopPadding.circleText",
          "as": "lollipopContentSecondTextXOffset"
        },
        {
          "calculate": "datum.lollipopContentYOffset + trainTextMetrics.height + lollipopPadding.row1Row2",
          "as": "lollipopContentRow2YOffset"
        },
        {
          "calculate": "datum.lollipopContentRow2YOffset + metricTextHeight + lollipopPadding.row2Row3",
          "as": "lollipopContentRow3YOffset"
        }
      ],
      "layer": [
        {
          "mark": {
            "type": "rect",
            "style": "lollipopRect",
            "yOffset": { "signal": "datum.lollipopYOffset" },
            "xOffset": { "signal": "datum.lollipopStartOffset" },
            "x2Offset": { "signal": "datum.lollipopEndOffset" }
          },
          "encoding": {
            "x2": {
              "field": "iteration",
              "type": "quantitative"
            }
          }
        },
        {
          "transform": [{ "filter": "datum.doubleLine" }],
          "mark": {
            "type": "circle",
            "size": { "signal": "legendCircleSize" },
            "color": { "signal": "createmlColor.train" },
            "dy": { "signal": "0.5 * legendCircleWidthHeight" },
            "yOffset": {
              "signal": "datum.lollipopContentYOffset + 0.5 * caption1DefaultTextStyle.pointSize"
            },
            "xOffset": {
              "signal": "datum.lollipopContentXOffset + 0.5 * legendCircleWidthHeight"
            }
          }
        },
        {
          "transform": [{ "filter": "datum.train !== null" }],
          "mark": {
            "type": "text",
            "style": "lollipopKeyText",
            "text": { "signal": "datum.doubleLine ? trainText : singleText" },
            "fontSize": { "signal": "caption1DefaultTextStyle.pointSize" },
            "yOffset": { "signal": "datum.lollipopContentYOffset" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset" }
          }
        },
        {
          "transform": [{ "filter": "datum.doubleLine" }],
          "mark": {
            "type": "circle",
            "size": { "signal": "legendCircleSize" },
            "color": { "signal": "createmlColor.validate" },
            "dy": { "signal": "0.5 * legendCircleWidthHeight" },
            "yOffset": {
              "signal": "datum.lollipopContentYOffset + 0.5 * caption1DefaultTextStyle.pointSize"
            },
            "xOffset": {
              "signal": "datum.lollipopContentSecondXOffset + legendCircleWidthHeight * 0.5"
            }
          }
        },
        {
          "transform": [{ "filter": "datum.validate !== null" }],
          "mark": {
            "type": "text",
            "text": { "signal": "datum.doubleLine ? validateText : singleText" },
            "style": "lollipopKeyText",
            "fontSize": { "signal": "caption1DefaultTextStyle.pointSize" },
            "yOffset": { "signal": "datum.lollipopContentYOffset" },
            "xOffset": { "signal": "datum.doubleLine ? datum.lollipopContentSecondTextXOffset : datum.lollipopContentTextXOffset" }
          }
        },
        {
          "transform": [{ "filter": "datum.train !== null" }],
          "mark": {
            "type": "text",
            "style": "lollipopMetricText",
            "fontSize": { "signal": "bodyRoundedTextStyle.pointSize" },
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset" },
            "text": { "signal": "datum.trainString" }
          }
        },
        {
          "transform": [{ "filter": "datum.validate !== null" }],
          "mark": {
            "type": "text",
            "style": "lollipopMetricText",
            "fontSize": { "signal": "bodyRoundedTextStyle.pointSize" },
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset" },
            "xOffset": { "signal": "datum.doubleLine ? datum.lollipopContentSecondTextXOffset : datum.lollipopContentTextXOffset" },
            "text": { "signal": "datum.validateString" }
          }
        },
        {
          "transform": [{ "filter": "datum.train !== null" }],
          "mark": {
            "type": "text",
            "text": { "signal": "isAccuracy ? '%' : ''" },
            "style": "lollipopMetricModifierText",
            "fontSize": { "signal": "subheadlineDefaultTextStyle.pointSize" },
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset + 1" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset + nativeTextMetrics(datum.trainString, bodyRoundedTextDescriptor).width + lollipopPadding.metricPercent + pad2Off" }
          }
        },
        {
          "transform": [{ "filter": "datum.validate !== null" }],
          "mark": {
            "type": "text",
            "text": { "signal": "isAccuracy ? '%' : ''" },
            "style": "lollipopMetricModifierText",
            "fontSize": { "signal": "subheadlineDefaultTextStyle.pointSize" },
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset + 1" },
            "xOffset": { "signal": "(datum.doubleLine ? datum.lollipopContentSecondTextXOffset : datum.lollipopContentTextXOffset) + nativeTextMetrics(datum.validateString, bodyRoundedTextDescriptor).width + lollipopPadding.metricPercent + pad2Off" }
          }
        },
        {
          "mark": {
            "type": "text",
            "text": {
              "signal": "lollipopIterationTextPrefix + nativeNumberFormat(datum.iteration, iterationNumberFormat)"
            },
            "style": "lollipopIterationText",
            "fontSize": { "signal": "caption1DefaultTextStyle.pointSize" },
            "baseline": "line-bottom",
            "yOffset": { "signal": "datum.lollipopContentRow3YOffset + iterationTextHeight" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset" }
          }
        }
      ]
    },
    {
      "mark": {
        "type": "rect",
        "opacity": 0,
        "x": 0,
        "x2": { "signal": "width" },
        "y": { "signal": "-(lollipopHeight + chartPadding.lollipopChart)" },
        "y2": { "signal": "height" }
      }
    },
    {
      "transform": [
        { "filter": "datum.iteration === currentIteration" }
      ],
      "mark": { "type": "rect", "opacity": 0, "width": 12 }
    },
    {
      "data": { "name": "snapshots" },
      "mark": { "type": "rect", "opacity": 0, "width": 12, "cursor": "pointer" }
    },
    {
      "data": { "name": "snapshottableCheckpoints" },
      "mark": { "type": "rect", "opacity": 0, "width": 12, "cursor": "pointer" }
    }
Training Accuracy
Validation Accuracy
Training Loss
Validation Loss
Accuracy
Loss
Style Loss
Content Loss
Snapshot at Iteration 
Can snapshot at Iteration 
Iteration 
Iteration
text
CCChartDataRow
@16@0:8
@24@0:8@16
@"NSArray"16@0:8
@24@0:8@"NSString"16
@"NSNumber"16@0:8
NSObject
c24@0:8@16
q16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
c24@0:8@"Protocol"16
@"NSString"16@0:8
MLChartKit/CCChartViewWrapper.swift
Fatal error
Chart not supported
v24@?0@"NSString"8@16
_TtC10MLChartKit9ChartData
_records
_snapshots
_snapshottableCheckpoints
_lastSavedIteration
_tickMinStep
MLChartKit/LineChartConfig.swift
color.systemGrayColor
color.windowBackgroundColor
color.controlAccentColor
color.textBackgroundColor
color.whiteColor
color.separatorColor
  "signals": [
    {
      "name": "hoverIteration",
      "on": [
        {
          "events": [
            {"markname": "layer_8_marks", "type": "mouseover"},
            {"markname": "layer_9_marks", "type": "mouseover"},
            {"markname": "layer_10_marks", "type": "mouseover"}
          ],
          "update": "clickIteration ? null : datum.iteration"
        },
        {
          "events": "@layer_7_marks:mousedown",
          "update": "null"
        },
        {
          "events": {"signal": "hovering"},
          "update": "!hovering ? null : hoverIteration"
        }
      ]
    },
    {
      "name": "clickIteration",
      "on": [
        {
          "events": "@layer_7_marks:mousedown, @layer_8_marks:mousedown",
          "update": "null"
        },
        {
          "events": "@layer_9_marks:mousedown, @layer_10_marks:mousedown",
          "update": "datum.iteration"
        }
      ]
    },
    {
      "name": "hovering",
      "value": false
    },
    {
      "name": "lastSavedIteration",
      "value": null
    },
    {
      "name": "currentIteration",
      "update": "length(data('records')) ? data('records')[length(data('records')) - 1].iteration : null"
    },
    {
      "name": "snapshotSelected",
      "update": "(hoverIteration || clickIteration) && (indata('snapshots', 'iteration', clickIteration) || indata('snapshots', 'iteration', hoverIteration))"
    },
    {
      "name": "snapshottableSelected",
      "update": "(hoverIteration || clickIteration) && (indata('snapshottableCheckpoints', 'iteration', clickIteration) || indata('snapshottableCheckpoints', 'iteration', hoverIteration))"
    },
    {
      "name": "snapshotOrSnapshottableSelected",
      "update": "snapshotSelected || snapshottableSelected"
    },
    {
      "name": "lollipopIteration",
      "update": "clickIteration || hoverIteration || currentIteration || hovering"
    },
    {
      "name": "createmlColor",
      "update": "{ train: 
, hoverLollipopBackground: 
, lollipopBackground: 
, oppositeText: 
, currentIterationMarker: 
, snapshotMarker: 
, snapshottableMarker: 
    },
    {
      "name": "chartPadding",
      "value": {
        "lollipopChart": 12,
        "axisLabelX": 4,
        "xAxisLabelY": 6,
        "topShoulder": 4
      }
    },
    {
      "name": "lollipopPadding",
      "value": {
          "top": 4,
          "bottom": 4,
          "left": 8,
          "right": 8,
          "row1Row2": 2,
          "row2Row3": 2,
          "circleText": 3,
          "col1Col2": 12,
          "metricPercent": 2
      }
    },
    {
      "name": "maxIterations",
      "value": 
    },
    {
      "name": "isAccuracy",
      "value": 
    },
    {
      "name": "lollipopHeight",
      "update": "1 + lollipopPadding.top + legendKeyTextHeight + lollipopPadding.row1Row2 + metricTextHeight + lollipopPadding.row2Row3 + iterationTextHeight + lollipopPadding.bottom + 1"
    },
    {
      "name": "legendCircleWidthHeight",
      "value": 6
    },
    {
      "name": "legendCircleSize",
      "value": 28.3
    },
    {
      "name": "trainText",
      "value": "
    },
    {
      "name": "validateText",
      "value": "
    },
    {
      "name": "singleText",
      "value": "
    },
    {
      "name": "iterationCurrentPrefixText",
      "value": "
    },
    {
      "name": "iterationSnapshotPrefixText",
      "value": "
    },
    {
      "name": "iterationSnapshottablePrefixText",
      "value": "
    },
    {
      "name": "legendKeyTextHeight",
      "update": "singleTextMetrics.height"
    },
    {
      "name": "trainTextMetrics",
      "update": "nativeTextMetrics(trainText, caption1DefaultTextDescriptor)"
    },
    {
      "name": "validateTextMetrics",
      "update": "nativeTextMetrics(validateText, caption1DefaultTextDescriptor)"
    },
    {
      "name": "singleTextMetrics",
      "update": "nativeTextMetrics(singleText, caption1DefaultTextDescriptor)"
    },
    {
      "name": "metricTextHeight",
      "update": "nativeTextMetrics('
', bodyRoundedTextDescriptor).height"
    },
    {
      "name": "iterationTextHeight",
      "update": "nativeTextMetrics('
', caption1DefaultTextDescriptor).height"
    },
    {
      "name": "lollipopBackgroundColor",
      "update": "(!snapshotOrSnapshottableSelected && createmlColor.lollipopBackground) || (clickIteration ? createmlColor.selection : hoverIteration ? createmlColor.hoverLollipopBackground : createmlColor.lollipopBackground)"
    },
    {
      "name": "lollipopOpacity",
      "update": "(!snapshotOrSnapshottableSelected && 1) || (clickIteration ? 1 : hoverIteration ? 0.05 : 1)"
    },
    {
      "name": "lollipopStrokeColor",
      "update": "(!snapshotOrSnapshottableSelected && createmlColor.currentIterationMarker) || (clickIteration ? 'transparent' : hoverIteration ? createmlColor.currentIterationMarker : createmlColor.currentIterationMarker)"
    },
    {
      "name": "lollipopTextColor",
      "update": "(!snapshotOrSnapshottableSelected && createmlColor.text) || (clickIteration ? createmlColor.oppositeText : hoverIteration ? createmlColor.text : createmlColor.text)"
    },
    {
      "name": "iterationMarkerColor",
      "update": "(!snapshotOrSnapshottableSelected && createmlColor.currentIterationMarker) || (clickIteration ? createmlColor.selection : hoverIteration ? createmlColor.currentIterationMarker : createmlColor.currentIterationMarker)"
    },
    {
      "name": "lollipopIterationTextPrefix",
      "update": "snapshotSelected ? iterationSnapshotPrefixText : snapshottableSelected ? iterationSnapshottablePrefixText : iterationCurrentPrefixText"
    },
    {
      "name": "lollipopIterationTextPrefixWidth",
      "update": "snapshotSelected ? nativeTextMetrics(iterationSnapshotPrefixText, caption1DefaultTextDescriptor).width : snapshottableSelected ?   nativeTextMetrics(iterationSnapshottablePrefixText, caption1DefaultTextDescriptor).width :  nativeTextMetrics(iterationCurrentPrefixText, caption1DefaultTextDescriptor).width"
    },
    {
      "name": "xAxisTickSize",
      "update": "chartPadding.xAxisLabelY + pad2Off + caption1DefaultTextStyle.pointSize"
    },
    {
      "name": "pad2Off",
      "value": 1
    },
    {
      "name": "caption1DefaultTextStyle",
      "update": "os.minorVersion >= 16 ? textStyle.caption1 : { fontName: '--apple-system', pointSize: 9, lineHeight: null, fontWeight: 400 }"
    },
    {
      "name": "caption1DefaultTextDescriptor",
      "update": "{ font: caption1DefaultTextStyle.fontName, fontSize: caption1DefaultTextStyle.pointSize, fontWeight: caption1DefaultTextStyle.fontWeight, fontStyle: caption1DefaultTextStyle.fontStyle }"
    },
    {
      "name": "bodyRoundedTextStyle",
      "update": "os.minorVersion >= 16 ? { fontName: '--apple-system-rounded', pointSize: textStyle.body.pointSize, lineHeight: textStyle.body.lineHeight, fontWeight: textStyle.body.fontWeight } : { fontName: '--apple-system-rounded', pointSize: 13, lineHeight: null, fontWeight: 400 }"
    },
    {
      "name": "bodyRoundedTextDescriptor",
      "update": "{ font: bodyRoundedTextStyle.fontName, fontSize: bodyRoundedTextStyle.pointSize, fontWeight: bodyRoundedTextStyle.fontWeight, fontStyle: bodyRoundedTextStyle.fontStyle }"
    },
    {
      "name": "subheadlineDefaultTextStyle",
      "update": "os.minorVersion >= 16 ? textStyle.subheadline : { fontName: '--apple-system-rounded', pointSize: 11, lineHeight: null, fontWeight: 400 }"
    },
    {
      "name": "subheadlineDefaultTextDescriptor",
      "update": "{ font: subheadlineDefaultTextStyle.fontName, fontSize: subheadlineDefaultTextStyle.pointSize, fontWeight: subheadlineDefaultTextStyle.fontWeight, fontStyle: subheadlineDefaultTextStyle.fontStyle }"
    },
    {
      "name": "axisLabelXPadding",
      "value": 4
    },
    {
      "name": "lollipopCornerRadius",
      "value": 6
    },
    {
      "name": "numberFormat",
      "update": "{ numberStyle: 'decimal', format: isAccuracy ? '##0.0' : '#,##0.000' }"
    },
    {
      "name": "iterationNumberFormat",
      "update": "{ numberStyle: 'decimal', format: '#,###,##0' }"
    }
  ],
  "line": { "strokeWidth": 4, "interpolate": "monotone" },
  "circle": { "size": 100, "opacity": 1 },
  "axis": {
    "labelFont": { "signal": "caption1DefaultTextStyle.fontName" },
    "labelFontSize": { "signal": "caption1DefaultTextStyle.pointSize" },
    "labelLineHeight": { "signal": "caption1DefaultTextStyle.lineHeight" },
    "labelFontWeight": { "signal": "caption1DefaultTextStyle.fontWeight" },
    "titleFont": { "signal": "caption1DefaultTextStyle.fontName" },
    "titleFontSize": { "signal": "caption1DefaultTextStyle.pointSize" },
    "titleLineHeight": { "signal": "caption1DefaultTextStyle.lineHeight" },
    "titleFontWeight": { "signal": "caption1DefaultTextStyle.fontWeight" },
    "titleColor": { "signal": "createmlColor.titles" },
    "labelColor": { "signal": "createmlColor.labels" },
    "translate": 0
  },
  "axisX": {
    "titleX": 5,
    "titleAlign": "left",
    "titleBaseline": "bottom",
    "titleY": { "signal": "xAxisTickSize" },
    "labelAlign": "right",
    "labelOffset": { "signal": "-chartPadding.axisLabelX - pad2Off" },
    "labelPadding": { "signal": "-xAxisTickSize + chartPadding.xAxisLabelY" },
    "grid": true,
    "gridWidth": 1,
    "tickWidth": 1,
    "domainWidth": 1,
    "gridColor": { "signal": "createmlColor.axis" },
    "tickColor": { "signal": "createmlColor.axis" },
    "domainColor": { "signal": "createmlColor.axis" },
    "domain": true,
    "tickSize": { "signal": "xAxisTickSize" }
  },
  "axisY": {
    "labelColor": { "signal": "createmlColor.labels" },
    "titleY": { "signal": "height + xAxisTickSize" },
    "titleBaseline": "bottom",
    "titleAlign": "right",
    "titleAngle": 0,
    "titleX": { "signal": "-chartPadding.axisLabelX - pad2Off" },
    "labelPadding": { "signal": "chartPadding.axisLabelX + pad2Off" },
    "grid": true,
    "gridColor": { "signal": "createmlColor.grid" },
    "gridWidth": 1,
    "title": false,
    "tickCount": 4,
    "tickExtra": true
  },
  "style": {
    "cell": { "stroke": "transparent" },
    "trainSaved": {
      "color": { "signal": "createmlColor.train" },
      "strokeCap": "round"
    },
    "validateSaved": {
      "color": { "signal": "createmlColor.validate" },
      "strokeCap": "round"
    },
    "trainUnsaved": {
      "color": { "signal": "createmlColor.train" },
      "strokeDash": [4, 1],
      "strokeCap": "butt"
    },
    "validateUnsaved": {
      "color": { "signal": "createmlColor.validate" },
      "strokeDash": [4, 1],
      "strokeCap": "butt"
    },
    "snapshot": {
      "color": { "signal": "createmlColor.snapshotMarker" },
      "strokeWidth": 1
    },
    "snapshottableCheckpoint": {
      "color": { "signal": "createmlColor.snapshottableMarker" },
      "strokeDash": [3, 3],
      "strokeWidth": 1
    },
    "currentIterationRule": {
      "color": { "signal": "createmlColor.currentIterationMarker" }
    },
    "lollipopRect": {
      "height": { "signal": "lollipopHeight" },
      "color": { "signal": "lollipopBackgroundColor" },
      "stroke": { "signal": "lollipopStrokeColor" },
      "opacity": { "signal": "lollipopOpacity" },
      "baseline": "top",
      "strokeWidth": 1,
      "cornerRadius": { "signal": "lollipopCornerRadius" }
    },
    "lollipopKeyText": {
      "color": { "signal": "lollipopTextColor" },
      "align": "left",
      "baseline": "top",
      "font": { "signal": "caption1DefaultTextStyle.fontName" },
      "fontWeight": { "signal": "caption1DefaultTextStyle.fontWeight" },
      "lineHeight": { "signal": "caption1DefaultTextStyle.lineHeight" },
      "opacity": 1
    },
    "lollipopMetricText": {
      "color": { "signal": "lollipopTextColor" },
      "align": "left",
      "baseline": "top",
      "font": { "signal": "bodyRoundedTextStyle.fontName" },
      "fontWeight": { "signal": "bodyRoundedTextStyle.fontWeight" },
      "lineHeight": { "signal": "bodyRoundedTextStyle.lineHeight" },
      "opacity": 1
    },
    "lollipopMetricModifierText": {
      "color": { "signal": "lollipopTextColor" },
      "align": "left",
      "baseline": "top",
      "font": { "signal": "subheadlineDefaultTextStyle.fontName" },
      "fontWeight": { "signal": "subheadlineDefaultTextStyle.fontWeight" },
      "lineHeight": { "signal": "subheadlineDefaultTextStyle.lineHeight" },
      "opacity": 1
    },
    "lollipopIterationText": {
      "color": { "signal": "lollipopTextColor" },
      "align": "left",
      "baseline": "top",
      "font": { "signal": "caption1DefaultTextStyle.fontName" },
      "fontWeight": { "signal": "caption1DefaultTextStyle.fontWeight" },
      "lineHeight": { "signal": "caption1DefaultTextStyle.lineHeight" },
      "opacity": 1
    },
    "selectedCheckpointRule": {
      "color": { "signal": "createmlColor.selection" }
    },
    "selectedCheckpointText": {
      "color": { "signal": "createmlColor.oppositeText" },
      "fontWeight": 600,
      "opacity": 1,
      "fontSize": 9
    }
Contradictory frame constraints specified.
snapshottableCheckpoints
lastSavedIteration
swift_getObjCClassMetadata
_TtCs12_SwiftObject
swift_getTypeContextDescriptor
swift_getExistentialTypeMetadata
objc_addLoadImageFunc
__TEXT
__swift5_proto
So8NSStringC
_ypt
So6NSFontCG
ySSSaySo14CCChartDataRow_pGG
ySSyypSgcG
ySSypG
SS_ypt
$sSY
$ss21_ObjectiveCBridgeableP
SDySSypG
ySnySiGG
ySDySSypGG
ypSgIegn_
ypSg
SSSg
So14CCChartDataRow_p
SS3key_yp5valuetSg
ypSgytIegnr_
So11CCChartViewC
SDySSyypSgcG
SDySSSaySo14CCChartDataRow_pGG
$s7SwiftUI19NSViewRepresentableP
$s7SwiftUI4ViewP
SaySDySSypGG
ySaySDySSypGGG
ySaySDySSypGG_G
SiSg
ySiSgG
ySiSg_G
ySiG
ySi_G
$s7Combine16ObservableObjectP
SdSg
ySS_yptG
_So6NSFontCtG
_So6NSFontCt
3key_yp5valuetSg
_yptSg
ySbG
ySicSg
ySbGSg
ySo14CCChartDataRow_pG
_rawValue
RawValue
_ObjectiveCType
spec
config
signalValues
signalListeners
datasets
NSViewType
Coordinator
Body
primary
secondary
both
_records
_snapshots
_snapshottableCheckpoints
_lastSavedIteration
_tickMinStep
ObjectWillChangePublisher
iteration
primary
secondary
maxIterations
isAccuracy
trainingAccuracy
validationAccuracy
trainingLoss
validationLoss
accuracy
loss
styleLoss
contentLoss
iterationSnapshotPrefix
iterationSnapshottablePrefix
iterationCurrentPrefix
metricPlaceholder
iterationPlaceholder
text
three
RawValue
_chartData
_hovering
onCheckpointClick
maxIterations
isAccuracy
lastCheckpoint
metric
spec
Body
columnsInChartView
chartViewDataValueForColumn:
chartViewDataRowID
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
init
initWithSpec:config:
setNamedDataset:rows:
begin
addListener:toSignalWithName:
commit
setSignalWithName:toValue:
systemFontOfSize:
fontDescriptor
fontDescriptorWithDesign:
fontWithDescriptor:size:
sizeWithAttributes:
systemFontOfSize:weight:
preferredFontForTextStyle:options:
pointSize
iteration
train
validate
checkpoint
color.textColor
color.gridColor
color.textColor
color.textColor
color.textColor
color.textColor
color.gridColor
color.gridColor
