@(#)PROGRAM:AXTapToSpeakTime  PROJECT:Accessibility-1
@ffffff
?333333
?333?
v8@?0
Localizable
TAPTIC_CHIMES_TITLE
TAPTIC_CHIMES_ON_THE_HOUR_DESCRIPTION
TAPTIC_CHIMES_ON_THE_HALF_HOUR_DESCRIPTION
TAPTIC_CHIMES_ON_THE_QUARTER_HOUR_DESCRIPTION
TAPTIC_CHIMES_SCHEDULE_TITLE
TAPTIC_CHIMES_SOUNDS_TITLE
TAPTIC_CHIMES_ON_THE_HOUR_LABEL
TAPTIC_CHIMES_ON_THE_HALF_HOUR_LABEL
TAPTIC_CHIMES_ON_THE_QUARTER_HOUR_LABEL
TAPTIC_CHIMES_SOUND_BELLS_LABEL
TAPTIC_CHIMES_SOUND_BIRDS_LABEL
TAP_TO_SPEAK_TITLE
TAP_TO_SPEAK_DESCRIPTION
TAP_TO_SPEAK_RESPECT_MUTE_LABEL
TAP_TO_SPEAK_ALWAYS_LABEL
TAPTIC_TIME_TITLE
TAPTIC_TIME_UNAVAILABLE_DESCRIPTION
TAPTIC_TIME_DISABLED_DESCRIPTION
TAPTIC_TIME_MUTE_DESCRIPTION
TAPTIC_TIME_ALWAYS_DESCRIPTION
TAPTIC_TIME_VOICEOVER_DESCRIPTION
TAPTIC_TIME_DISABLED
TAPTIC_TIME_ENCODING_DECIMAL_DESCRIPTION
TAPTIC_TIME_ENCODING_TERSE_DESCRIPTION
TAPTIC_TIME_ENCODING_MORSE_DESCRIPTION
TAPTIC_TIME_ENCODING_DECIMAL_LABEL
TAPTIC_TIME_ENCODING_TERSE_LABEL
TAPTIC_TIME_ENCODING_MORSE_LABEL
com.apple.accessibility.AXTapticChimesScheduler.ChimeFire
com.apple.accessibility.AXTapticChimesScheduler
com.apple.accessibility.AXTapticChimesScheduler.Event.ChimeFired
com.apple.accessibility.TapticChimesScheduler-%@
v16@?0@"NSNotification"8
NanoTimeKitFaceDefaultsChangedDarwinNotification
TapticChimesPreWakeOverride
TapticChimesPrePlayAudioOverride
com.apple.NanoTimeKit.face
NTKFacePreferencesTimeOffsetKey
chime-wake-fired
AssertType
PreventUserIdleSystemSleep
AssertName
FrameworkBundleID
com.apple.AXTapToSpeakTime.TapticChimesScheduler
TimeoutAction
TimeoutActionRelease
TimeoutSeconds
StartTime
chime-playback
Audio/Video
Alert
expected_chime_to_actual_chime_start_time
wake_vs_expected_wake_time
wake_to_chime_start_time
chime_start_to_end_time
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
/System/Library/../../AppleInternal/Library/Frameworks/AXFlashScreenUIServices.framework/AXFlashScreenUIServices
/System/Library/../../AppleInternal/Library/Frameworks/AXFlashScreenUIServices.framework/Contents/MacOS/AXFlashScreenUIServices
AXFlashScreenUIServices
Unable to find class %s
com.apple.accessibility.AXTapToSpeakTimeManager
jjmm
v12@?0i8
PTQ+ABwag03BwO/CKvIK/A
vsSpeechSynthesizer
T@"VSSpeechSynthesizer",R,N,V_vsSpeechSynthesizer
dateFormatter
T@"NSDateFormatter",R,N,V_dateFormatter
tapticTimeManager
T@"AXTapticTimeManager",R,N,V_tapticTimeManager
nowPlayingController
T@"NMRNowPlayingController",R,N,V_nowPlayingController
Default
Compact
Premium
Mickey
Minnie
Two Finger Hold
One Finger Tap
com.apple.springboard.ringerstate
ChimeAssets
Bells
Birds
Bell.caf
Bell.plist
Bird%02d.caf
Bird%02d.plist
QuarterBell.caf
QuarterBell.plist
QuarterBird.caf
QuarterBird.plist
Atoms
<%@: %p; audioFilePath = "%@", volume = "%f", prePlayTimeInterval = "%f" hapticDictionary = "%@">
hapticDictionary
T@"NSDictionary",R,N,V_hapticDictionary
audioFilePath
T@"NSString",R,N,V_audioFilePath
prePlayTimeInterval
Td,R,N,V_prePlayTimeInterval
volume
Tf,R,N,V_volume
hapticAtomEntries
T@"NSArray",R,N
unexpected nil preference key!
unexpected object type! is=%@, expected=%@
unexpected nil domainAccessor!
unexpected empty domain!
Taptic Chimes frequency changed, will re-schedule chimes
Taptic Chimes sound type changed, will preview chimes
VoiceOver status changed!
Taptic Chimes enabled, will begin scheduling chimes
Taptic Chimes disabled, will stop scheduling chimes
Buddy not yet complete! suppresing chime
ClockFace not scheduling chimes because VoiceOver is enabled
checking DND state...
current DND state: %@
suppressing this chime - attempting to reschedule
failed to get current DND behavior due to %@. ignoring current DND state
Using PreWakeOverride value: %f
Using PrePlayAudioOverride value: %f
Using face display time for current date: %@, with time offset=%f
Previewing chimes
Clearing chime timer
failed to deactivate audio session due to: %@
failed to reset audio category (%@) due to: %@
Scheduling chime timer
Scheduling wake!! Wake time: %@ (%f seconds), Chime time: %@ (%f seconds)
chime wake timer fired: %@
scheduling NEXT chime in %f seconds
created power assertion with name: %@, timeout: %f, ID: %d
releasing power assertion with ID: %d
cannot activate taptic chimes
chime starting: %@, isRingerMuted=%@
ringer NOT muted, setting up audio session
Using VoiceOver's current audio session
failed to set audio session category (%@) due to: %@
failed to set audio session active due to: %@
[START] prewarming audio player: (%f seconds away)
failed to prepare audio player
[END] prewarming audio player: (%f seconds away)
[START] schedule chime time: %@ (%f seconds away)
failed to schedule chime playback
[END] schedule chime time: (%f seconds away)
expected haptic time: %@ (%f seconds away)
haptics completed!
ringer IS muted, not waiting for audio player callback
TapticChime-Output
chimeAsset: %@, for chime date: %@
failed to retrieve volume for audio/video category
failed to retrieve volume for alert category
Normalizing audio from %f -> %f (alert volume)
Denormalizing audio to %f
TapticChime-Complete
chime event: %@
wake to chime start took over %f seconds! actual time: %f seconds. wake delta: %f seconds
chime did complete
audioPlayerDidFinishPlaying: successfully: %@
chime failed to play successfully
new wrist state: %@
NTK defaults changed
tap to speak time is disabled
availability = always. ignoring ringer state
availability = respect mute, ringerIsMuted = %@
ringer is muted, will NOT speak time
tapticTimeEnabled = %@
Attempting to start time output: %@, for preferredVoice: %@, with gesture: %@
Stopping (any) existing output
currentLanguage=%@, foundAssetLanguage=%@
using found premium asset: %@
Tap to speak time - voice services
speechRequest: %@
failed to speak time due to %@
canOutputPremiumVoice: %@
Normalizing audio from %f -> %f
Setting up audio session for %@
Speech output did complete
did start VSSpeechRequest: %@
did finish VSSpeechRequest: %@, successfully: %@, phonemesSpoken: %@, error: %@
did pause VSSpeechRequest: %@
did continue VSSpeechRequest: %@
will speak range: %@ for request %@
failed to find asset for sound type: %li, hour: %lu
failed to find quarter hour asset for sound type: %li
empty haptic dictionary at path: %@
created system sound id: %u, with haptic dictionary: %@
softlink:o:path:/System/Library/../../AppleInternal/Library/Frameworks/AXFlashScreenUIServices.framework/AXFlashScreenUIServices
zPLR
zPLR
AXTimeOutputPreferences
AXTapticChimesScheduler
AVAudioPlayerDelegate
NSObject
CSLSOnWristMonitorDelegate
AXTapToSpeakTimeManager
VSSpeechSynthesizerDelegate
CSLSBacklightObserver
AXTapticChimeAsset
sharedInstance
initWithDomain:
_npsValueForPreferenceKey:expectedClass:
accessibilityDomainAccessor
synchronize
objectForKey:
domain
length
setObject:forKey:
arrayWithObjects:count:
setWithArray:
synchronizeNanoDomain:keys:
_npsValueForPreferenceKey:
boolValue
integerValue
voiceOverEnabled
tapToSpeakTimeEnabled
setTapToSpeakTimeEnabled:
numberWithBool:
_preferenceKeyForSelector:
_setNPSValue:preferenceKey:
tapToSpeakTimeAvailability
setTapToSpeakTimeAvailability:
numberWithInteger:
voiceOverTapticTimeMode
setVoiceOverTapticTimeMode:
voiceOverTapticTimeEncoding
setVoiceOverTapticTimeEncoding:
voiceOverTapticChimesEnabled
setVoiceOverTapticChimesEnabled:
voiceOverTapticChimesFrequencyEncoding
setVoiceOverTapticChimesFrequencyEncoding:
voiceOverTapticChimesSoundType
setVoiceOverTapticChimesSoundType:
bundleForClass:
localizedStringForKey:value:table:
localizedStringForKey:
localizedStringForTapticChimesFrequencyEncoding:
localizedStringForTapticChimesSoundType:
tapticTimeIsAvailable
array
addObject:
_voiceOverIsEnabled
_voiceOverIsInTripleClick
componentsJoinedByString:
localizedStringForTapticTimeEncoding:
_npsBoolValueForPreferenceKey:defaultValue:
_npsIntegerValueForPreferenceKey:defaultValue:
tapticChimesFrequencyOptions
tapticChimesSoundsOptions
tapToSpeakAvailabilityOptions
tapticTimeEncodingOptions
tapticChimesLocalizedTitle
tapticChimesLocalizedDescription
tapticChimesLocalizedCurrentFrequency
tapticChimesLocalizedCurrentSounds
tapticChimesScheduleLocalizedTitle
tapticChimesSoundsLocalizedTitle
tapToSpeakTimeLocalizedTitle
tapToSpeakTimeLocalizedDescription
localizedStringForTapToSpeakTimeAvailability:
tapticTimeLocalizedTitle
tapticTimeLocalizedDescription
tapticTimeLocalizedCurrentMode
tapticTimeModeLocalizedDescription
_init
init
processIsAllowedToScheduleChimes
stringWithFormat:
_tapticChimesStateDidChange:
registerUpdateBlock:forRetrieveSelector:withListener:
_scheduleChimeTimer
canPlayScheduledTapticChime
_previewChimes
defaultCenter
mainQueue
addObserverForName:object:queue:usingBlock:
serviceForClientIdentifier:
initWithOptions:
beginObservingOrigins
setDelegate:
activate
endObservingOrigins
_unregisterForNotifications
_clearChimeTimer
dealloc
_registerForNotifications
canPlayTapticChime
canScheduleTapticChimes
setIdentifier:
resolveBehaviorForEventDetails:error:
interruptionSuppression
floatValue
date
dateByAddingTimeInterval:
_currentDate
dateWithTimeInterval:sinceDate:
_previewChimesForStartDate:chimeDate:frequency:soundType:
nextChimeAssetForStartDate:frequency:soundType:timeIntervalUntilChime:
_outputTapticChime:atDate:
_releasePowerAssertionIfPossible:
stop
setActive:withOptions:error:
setCategory:error:
_denormalizeVolumeIfNecessary
invalidate
_preWakeTimeInterval
dateWithTimeIntervalSinceNow:
_prePlayAudioTimeInterval
_chimeWakeTimerFired:
initWithTimeInterval:serviceIdentifier:target:selector:userInfo:
setUserVisible:
mainRunLoop
scheduleInRunLoop:
_createPowerAssertionWithName:timeout:
numberWithDouble:
dictionaryWithObjects:forKeys:count:
carouselServer
isRingerMuted
volume
category
_normalizeVolumeIfNecessary
setActive:error:
audioFilePath
URLWithString:
initWithContentsOfURL:error:
setVolume:
timeIntervalSinceNow
prepareToPlay
deviceCurrentTime
playAtTime:
createSystemSoundIDForStartTime:
tapticTimeInternalFlashScreenEnabled
hide
_chimeDidFinishPlaying
show
hapticAtomEntries
countByEnumeratingWithState:objects:count:
objectForKeyedSubscript:
doubleValue
flashWithDuration:
currentCalendar
components:fromDate:
dateFromComponents:
earlierDate:
hour
minute
quarterHourAssetForType:
hourAssetForType:hour:
timeIntervalSinceDate:
prePlayTimeInterval
activeNowPlayingOrigin
nowPlayingStateForOrigin:
isPlaying
isLocal
sharedAVSystemController
getVolume:forCategory:
setVolumeTo:forCategory:
initializeIfNeeded
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
audioPlayerDidFinishPlaying:successfully:
audioPlayerDecodeErrorDidOccur:error:
audioPlayerBeginInterruption:
audioPlayerEndInterruption:withOptions:
audioPlayerEndInterruption:withFlags:
audioPlayerEndInterruption:
onWristMonitor:didUpdateOnWristState:fromState:
.cxx_destruct
_pcServiceIdentifier
_chimeTimer
_audioPlayer
_previousAudioSessionCategory
_currentChimeAsset
_audioPlaybackPowerAssertionID
_lastExpectedWakeTime
_lastActualWakeTime
_lastExpectedChimeTime
_lastActualChimeTime
_lastMediaVolume
_onWristMonitor
_lastOnWristState
_dndEventBehaviorResolutionService
_nowPlayingController
autoupdatingCurrentLocale
dateFormatFromTemplate:options:locale:
setDateFormat:
_ringerStateChanged
addObserver:
_canTapticTime
stopOutput
_outputTapticTime:
removeObserver:
outputTime:preferredVoice:
outputTime:preferredVoice:withGesture:
_canSpeakTimeForVoice:andGesture:
_speakTime:preferredVoice:
vsSpeechSynthesizer
isSpeaking
stopSpeakingAtNextBoundary:synchronously:error:
tapticTimeManager
isCurrentlyOutputting
stopCurrentOutput
_setupAudioSessionForVoice:
_currentLanguageCode
componentsSeparatedByString:
firstObject
lowercaseString
isEqualToString:
_getPremiumVoiceAsset
languages
gender
footprint
type
dateFormatter
stringFromDate:
setText:
setLanguageCode:
setGender:
setFootprint:
setVoiceType:
startSpeakingRequest:
sharedPreferences
assistantIsEnabled
inProgressOutputVoice
outputVoice
languageCode
VSVoiceAsset
outputHoursAndMinutes:
localeIdentifier
nowPlayingController
setCategory:withOptions:error:
speechOutputDidComplete
speechSynthesizer:didStartSpeakingRequest:
speechSynthesizer:withRequest:didReceiveTimingInfo:
speechSynthesizer:didFinishSpeakingRequest:successfully:phonemesSpoken:withError:
speechSynthesizer:didFinishSpeakingRequest:withInstrumentMetrics:
speechSynthesizer:didPauseSpeakingRequest:
speechSynthesizer:didContinueSpeakingRequest:
speechSynthesizer:willSpeakRangeOfSpeechString:forRequest:
speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error:
speechSynthesizer:didStartPresynthesizedAudioRequest:
speechSynthesizer:didStopPresynthesizedAudioRequest:atEnd:error:
speechSynthesizer:didFinishPresynthesizedAudioRequest:withInstrumentMetrics:error:
speechSynthesizer:didFinishPrewarmRequest:withError:
speechSynthesizer:didFinishSynthesisRequest:withError:
speechSynthesizer:didStopPresynthesizedAudioRequestAtEnd:error:
speechSynthesizerDidStartSpeaking:
speechSynthesizer:didFinishSpeaking:phonemesSpoken:withError:
speechSynthesizer:didFinishSpeaking:withError:
speechSynthesizer:didFinishSpeakingRequest:successfully:withError:
speechSynthesizerDidPauseSpeaking:
speechSynthesizerDidContinueSpeaking:
speechSynthesizer:willSpeakRangeOfSpeechString:
backlightDidChange:from:to:
backlightDidTurnOn:forReason:
backlightDidTurnOff:forReason:
outputTime:
_speakTime:withCharacterVoiceIdentifier:
_canOutputPremiumVoice
_ringerStateNotifyToken
_cachedRingerIsMuted
_queue
_vsSpeechSynthesizer
_dateFormatter
_tapticTimeManager
bundlePath
stringByAppendingPathComponent:
_assetPathForChimeSoundType:fileName:
_initWithChimeSoundType:audioFilePath:hapticsFilePath:
dictionaryWithContentsOfFile:
lastObject
hapticDictionary
dictionaryWithDictionary:
setObject:forKeyedSubscript:
_volume
_audioFilePath
_prePlayTimeInterval
_hapticDictionary
@16@0:8
@24@0:8@16
@32@0:8@16#24
v32@0:8@16@24
B28@0:8@16B24
q32@0:8@16q24
B16@0:8
v20@0:8B16
q16@0:8
v24@0:8q16
@24@0:8q16
v16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v28@0:8@16B24
v24@0:8@16
v32@0:8@16Q24
v28@0:8@"AVAudioPlayer"16B24
v32@0:8@"AVAudioPlayer"16@"NSError"24
v24@0:8@"AVAudioPlayer"16
v32@0:8@"AVAudioPlayer"16Q24
v40@0:8@16@24@32
v40@0:8@"CSLSOnWristMonitor"16@"CSLSOnWristState"24@"CSLSOnWristState"32
d16@0:8
v48@0:8@16@24q32q40
I32@0:8@16d24
v20@0:8I16
B32@0:8@16@24
@48@0:8@16q24q32^d40
@"NSString"
@"PCSimpleTimer"
@"AVAudioPlayer"
@"AXTapticChimeAsset"
@"NSDate"
@"CSLSOnWristMonitor"
@"CSLSOnWristState"
@"DNDEventBehaviorResolutionService"
@"NMRNowPlayingController"
v52@0:8@16@24B32@36@44
v48@0:8@16{_NSRange=QQ}24@40
v48@0:8@16@24@32@40
v44@0:8@16@24B32@36
v36@0:8@16B24@28
v44@0:8@16B24@28@36
v40@0:8@16{_NSRange=QQ}24
v32@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24
v40@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"NSArray"32
v52@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24B32@"NSString"36@"NSError"44
v40@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"VSInstrumentMetrics"32
v48@0:8@"VSSpeechSynthesizer"16{_NSRange=QQ}24@"VSSpeechRequest"40
v48@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"VSInstrumentMetrics"32@"NSError"40
v32@0:8@"VSSpeechSynthesizer"16@"VSPresynthesizedAudioRequest"24
v44@0:8@"VSSpeechSynthesizer"16@"VSPresynthesizedAudioRequest"24B32@"NSError"36
v48@0:8@"VSSpeechSynthesizer"16@"VSPresynthesizedAudioRequest"24@"VSInstrumentMetrics"32@"NSError"40
v40@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"NSError"32
v36@0:8@"VSSpeechSynthesizer"16B24@"NSError"28
v24@0:8@"VSSpeechSynthesizer"16
v44@0:8@"VSSpeechSynthesizer"16B24@"NSString"28@"NSError"36
v44@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24B32@"NSError"36
v40@0:8@"VSSpeechSynthesizer"16{_NSRange=QQ}24
v40@0:8@16q24q32
v40@0:8@"NSString"16q24q32
v32@0:8@"NSString"16Q24
B32@0:8Q16Q24
v40@0:8@16Q24Q32
v24@0:8Q16
@"NSObject<OS_dispatch_queue>"
@"VSSpeechSynthesizer"
@"NSDateFormatter"
@"AXTapticTimeManager"
@32@0:8q16@24
@32@0:8q16Q24
@40@0:8q16@24@32
I24@0:8d16
f16@0:8
@"NSDictionary"
