@(#)PROGRAM:IMDaemonCore  PROJECT:IMDaemonCore-
?UUUUUU
IMDMessagePTaskStoreAddedProcessingTask
IMDAccount
Creating account id: %@    defaults: %@    on service: %@
IMDAccount: incoming 'defaults' is not a dictionary, %@, %@
AccountManaged
%@ - write account defaults: %@
accountID
accountDefaults
capabilities
serviceLoginStatus
serviceLoginStatusMessage
buddyProperties
groups
Registration
IMDaemonCore
%@: Account is restricted, not creating session
%@: Created active session: %@ of service type: %@   (Session class: %@)
%@: Reused existing session: %@
Session
%@: Telling session it became active
%@: Setting initial status: %@
%@: Forcing login
%@: Done setting up session: %@
Away
DaemonCoreLocalizable
Default Away message
-[%@ _forceSetLoginStatus:%d message:%@ reason:%d properties:%@] session=%@
isLoading
TB,N,V_isLoading
wasDisabledAutomatically
TB,N
shouldPublishNowPlaying
TB,R,N
registrationStatus
Ti,R,N
registrationError
registrationAlertInfo
T@"NSDictionary",R,&,N
statusToSave
statusToPost
accountInfoToPost
T@"NSDictionary",R,&,N,V_accountDefaults
T@"NSString",R,&,N,V_account
loginID
T@"NSString",R,&,N
service
T@"IMDService",R,&,N,V_service
session
T@"IMDServiceSession",&,N,V_session
isActive
isDisabled
isManaged
TB,N,V_isManaged
canMakeDowngradeRoutingChecks
status
TI,R,N,V_loginStatus
serviceDisconnectReason
Ti,R,N,V_disconnectReason
T@"NSString",R,&,N,V_loginStatusMessage
accountType
Tq,R,N
IMDMessageHistorySyncTaskLiveFactory: Cannnot create task of unknown type: %uld
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v12@?0B8
read-receipt-tracking
v8@?0
IMDAccountController
Loading services: %@ (First load: %@)
Loading service: %@
service: %@ has been discontinued. Loading default disabled account
   Creating account with ID: %@
   Creating persistent session with ID: %@
  Service wants new accounts active, setting active: %@
 Not loading accounts from defaults, appears to be IDS Based: %@
 Found accounts: %@
 Loading: %@
 Done
  Setting active accounts: %@
  Service wants accounts always active, setting active: %@
Logging in previously logged in accounts: %@
  * Logging in previously logged in account: %@
  * No account found for account ID: %@
Done loading service: %@
iMessage
iMessage service found: %@    accounts: %@
PlaceholderAccount
   Empty iMessage accounts, created one: %@
   Added, and moving along
   No account created
   We have iMessage acounts, good to go
No iMessage service found
Done loading all services
Activating accounts: %@
   Found account: %@
      => Disabled, continuing
      Found service: %@
      => Service discontinued, skipping.
      Adding account: %@ to active set: %@
Reusing session: %@
      Active account set is: %@
      Building sesssion
      Enable the associated account
Deactivating accounts: %@
Tried to deactivate an account, but found no account: %@
Tried to deactivate an account, but found no service; %@
Add account: %@
*** Removing placeholder account: %@
Remove account: %@
B16@?0@8
@16@?0@8
activeSessions = %@
Could not find a service session for string: %@, account: %@, allAccounts: %@
IMDAccountController: Could not find a service for string: %@
IMDAccountController: Could not find an account for serviceString: %@, accountsForService: %@, accounts: %@
IMDAccountController: Could not find a session for account: %@
Rebuilding operational accounts, old: (%@)  new: (%@)
Operational accounts changed
__kIMDBadgeUtilitiesOperationalAccountsChangedNotification
com.apple.madrid
IDS account %@ is active %@ can send %@ is madrid account %@
calling setNetwork %@
  => broadcasting
TB,R,N,V_isLoading
accounts
T@"NSArray",R,N
activeAccounts
connectedAccounts
connectingAccounts
activeSessions
networkDataAvailable
TB,N,V_networkDataAvailable
FaceTime
mapReceivingIDForSpamFilter
Receiving id (%@) with country code (%@) is a candidate for spam filtering.
Receiving id (%@) with country code (%@) is not a candidate for spam filtering.
Receiving id (%@) with region (%@) is a candidate for spam filtering.
Receiving id (%@) with region (%@) is not a candidate for spam filtering.
Found an account (%@) that isn't IMDIDS (%@), can't determien region -- falling through.
IMDCKUtilitiesErrorDomain
CKSubType
IMD-IDS-Aliases
selectedAliases
allAliases
com.apple.Messages
IMDCKUtilities
%@/CKMessagesLogDump/
key roll pending check returned: %@
Added key roll pending error to sync state
Not performing key roll check didKeyRollPendingCheck %@ cloudKitSyncingEnabled %@
fetchCloudKitAccountStatusAndCheckForAccountNeedsRepairWithCompletion failed with error: %@
v24@?0q8@"NSError"16
updating key roll pending state
shouldForceArchivedMessagesSync
v20@?0B8@"NSError"12
Get file size on path: %@
Check if there is enough iCloud quota
User quota completion block return with available Quota %llu, and Error: %@
Available Quota in bytes:  and message database size: %llu, %llu
v24@?0Q8@"NSError"16
Madrid server bag does not allow us to sync. Our client version %d server client version %ld
_shouldiCloudSwitchBeEnabled is FALSE as iCloud and iMessage accounts do not match up
_shouldiCloudSwitchBeEnabled is FALSE because server does not allow sync
_shouldiCloudSwitchBeEnabled is FALSE because we are in exit state. Is moc feature enabled %@
We are not in exit state, _shouldiCloudSwitchBeEnabled is based on whether feature is enabled or not: %@
ck-client-min-version
**** cloudKitSyncingEnabled is turned off in this build
Setting cloudkit enabled: %@
Starting initial sync
IMDCKCacheDeleteManager
Attachment watermark reset to 0
ck-submit-metrics-min-version
ck-submit-analytics-min-version
ck-submit-analytics-details-min-version
server allows submitting metrics result %@ clientVersion %@ serverVersion %@
server allows submitting analytics result %@ clientVersion %@ serverVersion %@
server allows submitting analytics details result %@ clientVersion %@ serverVersion %@
Keep Messages value should be altered from %@ to 0
Resetting Keep Message setting to Keep forever.  VersionID: %ld
ck-cache-delete-version-V3
server allows cached delete check result %@ clientVersion %@ serverVersion %@
ck-enable-attachment-validation
enableAttachmentMetricCollection overridden by iMessage server
Should enable attachment metric-ing %@
CacheDeleteEnabled %@
ck-remove-from-backup-version-V3
server allows removal from backup result %@ serverVersion %@
This is an internal install so overriding server bag check and defaulting to yes
Removal from back up allowed %@
com.apple.private.IMDCKUtilitiesInternal
accountIsVerifiedForMOCAndSafeForCacheDelete
Checking if account is verified
Return account validForCD with error: %@ accountStatus: %@
About to wait for accountIsVerifiedForMOCAndSafeForCacheDelete call
Finished blocking accountIsVerifiedForMOCAndSafeForCacheDelete with time: %@ and accountValidForCD %@
AKAppleIDAuthenticationController
AuthKit
isEligibleForTruthZoneOverride
Overriding isEligibleForTruthZone: %@
Fetched cloud kit account status: %@, error: %@
Fetched cloud kit account status: %@
Fetching cloud kit account info with cloudkit api
accountInfoWithCompletionHandler called with accountInfo %@, error %@
Checking for cloudkit account info failed with error: %@ 
failed fetching account status
Checking for cloudkit eligibility returned: %@ inCarry: %@
v24@?0@"CKAccountInfo"8@"NSError"16
ck-account-repair-override
account needs repair override is: %@
account repair overridden
MiC is disabled, does not need repair
Account needs repair: %@ (account status: %@)
Got local account security level %@
Not checking account for needed repair because fetching account status returned an error: %@
Fetching security level and updating mic switch eligible on imagent launch
Server allowing %@: %@
Defaults over allowing %@: %@
should-ttr-on-icloud-kit-error
should-dump-logs-on-icloud-kit-error
should-dump-logs-daily-if-havent-synced
disable-dumping-logs-daily-for_restore_failures
msgs_on_icloud_logs@icloud.com
log-collector-handle
%@%@
IMDCKUtilities recordNameForMessageWithGUID invalid parameters [key length] %@ guid %@
%@-%@-%@-%@
RecoverableError
NonRecoverableError
******** IMDCKUtilities not a partial error %@
isRecoverableCloudKitError should not be called with nil error
Error %@ is not recoverble
Error userInfo has a retry interval %@
Error userInfo had 0 as retry interval. Falling back to default %@
Using default retry interval %@
Error %@ recoverable %@
Resetting last sync date to nil
Last sync date was reset to nil
*** Error indicates failed creating chat zone
ACAccountStore
AppleAccount
IMDaemon_CloudKit
Force switching icloud switch to %@ since default has not been set.
Trying to set iCloud Settings Swtich to enabled ? %@
Error saving enabling for kAccountDataclassMessages.
Success saving enabling for kAccountDataclassMessages.
Found primary account: %@ error: %@
v24@?0@"ACAccount"8@"NSError"16
fetchiCloudAccountPersonID returning with error: %@
Found DSID: %@
Account has backup enabled: %@
ck-sync-paused
Is syncing paused override: %@
syncing paused because syncing override is YES
syncing not paused because syncing not enabled
syncing not paused because we have a valid sync date
syncing not paused because we are syncing
syncing not paused because we are connected wifi and device is charging
syncing paused: connected to Wifi: %@, device is charging: %@
PCSReportKeyRollPending
ProtectedCloudStorage
Linked linkedPCSReportKeyRollPending ok: %@
Messages3
isOnWifiAndPower %@, Is charging %@ , isOnWifi %@ , lastSyncDate %@ lastCompleteSyncedDBDate %@
isOnWifiAndPower %@, Is charging %@ , isOnWifi %@ 
Found duplicate record while syncing or record does not have a record name. Dropping record: %@
Found duplicate recordID while syncing or recordID does not have a record name. Dropping record: %@
active
inActive
Active state %@ last activity date %@
IMCKUtilities
********** Encryption identiy missing error ***********
Error does not indicate device is missing TLK
Error indicates missing TLKs.
Just send
Notify me each time
Messages on iCloud Debug UI
User chose to always auto send logs
User chose to show pop up before sending logs
v16@?0@"IMUserNotification"8
ZoneCreateDate-%@
Can only message log dump on internal ios device
Returning %@ for logDumpIsExpcted - _isLogDumpAllowed: %@, _isOnPowerAndWifi: %@, _isRunningInAutomation: %@
For some reason we do not have the sync counts prior to syncing
All items have been synced, noting down last complete synced DB date %@
Could not log db sync date because not all items synced: chatsLeftToSync %@ | messagesLeftToSync %@ | attachmentsLeftToSync %@
LogDump
<StartSyncStats> syncedChatDifference %@ | syncedMessageDifference %@ | syncedAttachmentDifference %@ <EndSyncStats>
Log dump needed -- didn't sync enough items | syncedMessages %@ | syncedChats %@ | syncedAttachments %@
PCSReportManateeStatus
Linked linkedPCSReportManateeStatus ok: %@
Failed to weak link ProtectedCloudStorage, this should not happen
PCSReportManateeStatus--1
%@-PCSReportManateeStatus-Timeout
PCSReportManateeStatus-Timeout
Engram
%@-PCSReportManateeStatus-%d
PCSReportManateeStatus-%d
%@-%@
v16@?0@"NSString"8
AKAccountManager
D:%@
iCloud DSID %@
iMessage account DSID %@
iCloud account %@ and iMessage account %@ DO NOT match up
We found one that matches up (icloud: %@, iMessage: %@)
enableMOCIfNeeded was called, but this is now a no-op bailing
/**---DISABLING MESSAGES ON ICLOUD---**/
Fetching eligibility for truth zone before attempting to sync
Not eligible for truth zone
***** Timed out checking truth zone eligibility *******
eligibleForTruthZone %@
com.apple.imagent
ck-demo-mode
Attempt to disable MOC across all devices
Unable to request exit record when trying to disable all devices. Error: %@
DisableAllDevices
AKAuthenticationSecurityLevelKey
Calculating selected/all aliases
Saving (domain %@) selected aliases %@
didKeyRollPendingCheck
TB,N,V_didKeyRollPendingCheck
lockdownManager
T@"IMLockdownManager",&,N,V_lockdownManager
serverBag
T@"IDSServerBag",&,N,V_serverBag
deviceSupport
T@"FTDeviceSupport",&,N,V_deviceSupport
imDefaults
T@"IMDefaults",&,N,V_imDefaults
isInCloudKitDemoMode
useDeprecatedApi
TB,N,V_useDeprecatedApi
syncState
T@"IMDCKSyncState",R,N,V_syncState
isSyncingPaused
keyRollPending
TB,R,N,GisKeyRollPending
deviceCharging
TB,R,N,GisDeviceCharging
deviceOnWifi
TB,R,N,GisDeviceOnWifi
IMDCKAccountStatusUnknown
IMDCKAccountStatusLoggedOut
IMDCKAccountStatusLoggedInWithNoD2DEncryptionSupport
IMDCKAccountStatusLoggedInWithD2DEncryptionSupport
AKAppleIDSecurityLevelUnknown
AKAppleIDSecurityLevelPasswordOnly
AKAppleIDSecurityLevelStandard
AKAppleIDSecurityLevelHSA1
AKAppleIDSecurityLevelHSA2
AKAppleIDSecurityLevelManaged
%@: Start sync should not be called more than once.  Ignoring request.
MessageProcessing
%@: Begin syncing IDS transaction log history for %ld services
%@: Starting sync task for %@ service 
%@:Received a batch of %lu messages to process.
%@: Finished processing batch of %lu messages.
v24@?0@"NSArray"8@?<v@?q>16
v24@?0@"NSArray"8@?<v@?@"NSArray">16
%@: Finished sync task for %@ service. Error: %@
%@: Finished Syncing all services for task
v16@?0@"NSError"8
accountController
T@"IMDAccountController",&,N,V_accountController
taskGroupedByServiceName
T@"NSMutableDictionary",&,N,V_taskGroupedByServiceName
syncTaskCompletionBlock
T@?,C,N,V_syncTaskCompletionBlock
IMDMessageHistoryCKChatSyncTask: Start sync should not be called more than once.  Ignoring request.
IMDMessageHistoryCKChatSyncTask
Back online, start syncing chats
IMDCKSyncStatsCollector
Refreshing CloudKit sync statistics from the database
Skipping the refresh of CloudKit sync statistics from the database
inMemorySyncStatistics
T@"NSMutableDictionary",&,N,V_inMemorySyncStatistics
%@-syncStoreVersion
IMDCKSyncTokenStore
Migrating sync token {key: %@, db: %@, version: %ld}
IMDCKChatSyncController
Found token data, saving to sms.db {key: %@}
No token data found {key: %@}
Failed to unarchive ckserver change token. Error: %@
Fetched token {key: %@, token: %@}
Persisting token {key: %@, token: %@}
Loading internal party service with bundle: %@
ServiceProperties
plist
%@: Loading request for service bundle: %@   Loaded: %@
%@: Loading service bundle: %@   Loaded: %@   identifier: %@
%@: Load success: %@    (Error: %@)
%@: Session class: %@
%@: Service properties: %@
Warning
%@: Load failed! Disabling any active accounts  (Error: %@)
   => Disabling: %@
Discontinued-%@
%@.%@
Service
Missing session class for service: %@    properties: %@    bundle: %@
%@Defaults
IMDService
Clearing one time accounts for %@: %@
Saving %@'s connected accounts: %@
Saving %@'s connecting accounts: %@
Saving %@'s settings: %@
Saving %@'s status: %@
%@AccountDefaults
IMDService (%@)
Backup started, blocking pref writing
Under memory pressure, blowing caches
serviceProperties
T@"NSDictionary",&,N,V_serviceProperties
sessionClass
T#,R,N
accountClass
bundle
T@"NSBundle",R,&,N,V_bundle
internalName
serviceDomain
isIDSBased
isLegacy
discontinued
TB,R,N,GisDiscontinued
serviceDefaults
serviceDefaultsForSetup
defaultAccountSettings
serviceRequiresSingleAccount
shouldCreateActiveAccounts
serviceWantsNullHostReachability
serviceIgnoresNetworkConnectivity
shouldForceAccountsActive
shouldForceAccountsConnected
serviceNeedsLogin
serviceNeedsPassword
serviceShouldBeAlwaysLoggedIn
serviceRequiresHost
serviceSupportsRegistration
serviceSupportsAuthorization
serviceChatsIgnoreLoginStatus
serviceSupportsPresence
serviceSupportsOneSessionForAllAccounts
supportsDatabase
disallowDeactivation
serviceProtocolVersion
Bailing!!. Trying to init IMDMessageActiveDevice with null device %@ or date %@
[%@: <Device%@ activeDate:%@ readReceipt:%@, read ReceiptDate %@>]
idsDestination
T@"NSString",&,N,V_idsDestination
latestActiveDate
T@"NSDate",&,N,V_latestActiveDate
hasReceivedReadReceipt
TB,N,V_hasReceivedReadReceipt
latestReadReceipt
T@"NSDate",&,N,V_latestReadReceipt
OTCManager
Asked to track a new OTC with guid %@
Asked to track a OTC but code appears to be invalid %@
Send out OTC to all interested clients.
Clearing code for GUID: %@
Asked to consume code for guid %@, but unable, current code count: %@
Timer fired to clear code with GUID: %@
v16@?0@"NSTimer"8
validCodes
T@"NSArray",&,N,V_validCodes
codeInvalidationTimer
T@"NSTimer",&,N,V_codeInvalidationTimer
broadcaster
T@"<IMDaemonListenerProtocol>",&,N,V_broadcaster
broadcasterOverride
T@"<IMDaemonListenerProtocol>",&,N,V_broadcasterOverride
otcUtilities
T@"IMOneTimeCodeUtilities",&,N,V_otcUtilities
com.apple.internalBlacklistQueue
com.apple.messages.phishingBlacklist
Phishing
Got called to check in for loading phishing blacklist
Got called to load phishing blacklist (%@)
We did not set the state of xpc_activity from core duet to continue successfully for blacklist load
Set state for chat syncing with result %d
v16@?0@"NSObject<OS_xpc_object>"8
blacklist
Loaded internal phishing blacklist from disk: %@
Failed to unarchive internal phishing data. Error: %@
Failed to loaded internal phishing blacklist from disk: %@
Already had the phishing blacklist: %@
https://gnl7irrymf.execute-api.us-west-2.amazonaws.com/dev/v1/config
internal-phishing-blacklist-endpoint
Phishing endpoint overidden by server bag: %@
hrgkzU7yBW2YDm7xABEwRaW1fe9WIaw937BfGmhN
internal-phishing-blacklist-apikey
Phishing API key overidden by server bag
Ignoring blacklist sync request, we did it %f seconds ago
Loading the internal phishing blacklist
X-API-KEY
Response came back: status(%ld), data: %@, error: %@
domains
Setting blacklist: %@
v40@?0@"NSURLResponse"8q16@"NSData"24@"NSError"32
Phishing: failed persisting serialized blacklist %@ %@
Successfully serialized the blacklist
Phishing: failed serializing blacklist %@
Phishing: failed persisting serialized blacklist %@
Loading blacklist timed out.
Found a match: %@
remoteURLConnection
T@"IMRemoteURLConnection",&,V_remoteURLConnection
T@"NSArray",&,V_blacklist
lastBlacklistSync
Td,V_lastBlacklistSync
blacklistDiskQueue
T@"NSObject<OS_dispatch_queue>",&,V_blacklistDiskQueue
~/Library/SMS
com.apple.internal.phishing.blacklist.plist
IMDSoundUtilities
Play message sent sound type: %@, for message: %@
Acknowledgment
Unable to find a sound action ID for %@  errorResult: %d
Unable to set property on sound ID   errorResult: %d
com.apple.MobileSMS
SuppressingSendSoundMessageGUIDs
Setting timer to evaluate deferred message processing in: %f
Checking for deferred message processing task
MessageProcessing: Unable to retrieve ptask from store
Found %ld messages that need processing
Scheduling next batch of messages to process
Finished processing deferred messages
pTaskStore
T@"<IMDMessagePTaskStore>",&,N,V_pTaskStore
processingTimer
T@"NSTimer",&,N,V_processingTimer
Chat
Item sender = %@
Overiding sender uri to be %@ using Last addressed handle %@
truncating spam message length to max of %ld
message-format-version
message-id
sender-uri
time-of-message
message-has-image
message-length
message-text
message-app-bundle-id
message-spam-model-version
message-spam-model-detected-spam
Did not find transfer for Message, unable to include it in ReportSpam
mmcs-url
mmcs-signature-hex
mmcs-owner
file-size
decryption-key
mmcs-owner-id
mmcs-file-size-string
mmcs-symmetric-key
mmcs-UTI-type
message-attachment-info
conversation-group-size
payment-info
is-self
is-payment
is-informal
message-service
notify-security
notify-security is ON
v32@?0@"NSString"8@"NSArray"16^B24
Possibly more spam messages left, resetting everything
IDSReportiMessageUnknownSenderWithBlackholeStatus
PKPeerPaymentMessageTypeFromDataURL
PassKitCore
PKPeerPaymentMessageDictionaryRepresentationFromDataURL
strictDecoding
strict-decoding 007 _enableStrictSecureDecodingMode called
strict-decoding 007 exception/error after _enableStrictSecureDecodingMode: [%@]
Failed to unarchive surf url. Error: %@
Failed to unarchive message payload data. Exception: %@
__kIMDaemonWillShutdownNotification
__kIMDManagedPreferencesChangedNotification
v32@?0@"CUTWeakReference"8Q16^B24
@16@?0@"CUTWeakReference"8
v32@?0@"IMDServiceSession"8Q16^B24
IMDServiceSession
initWithAccount: %@       service:%@  defaults: %@
DEALLOC: %@
[%@ addAccount:%@]
[%@ removeAccount:%@]
[%@ sessionDidBecomeActive]
Scheduling watchdog timer before first unlock
Not scheduling routing, expire and watchdog timer before first unlock
[%@ sessionWillBecomeInactiveWithAccount:%@]
-[IMDServiceSession _connectionMonitor] monitor: %@:%@
_updateConnectionMonitorWithRemoteHost: %@:%@
Creating connection monitor to global reachability: %@
Forcing an invocation of connectionMonitorDidUpdate 10 seconds after setting it up.
Already have connection monitor to global reachability: %@
Going disconnected for connection monitor: %@
_reconnectIfNecessary: %@:%@
  shouldAlwaysBeLoggedIn: %@    shouldReconnect: %@   wasLikelyNetworkError: %@  loginStatus: %d  disconnectReason: %d
%@: we're disconnected properly - and we're supposed to try to reconnect now, 
IMConnectionMonitor
%@       forcing disconnect
%@: Network connection to %@ is down -- disconnecting
%@       Data connection is active, going into login server ready
%@       I can be reached
%@ connectionMonitorDidUpdate: Currently connected: %@   (Reachable: %@  Data Active: %@  On Call: %@  Data+Voice: %@   Result: %@)
Network
                                        remoteHost: %@
                            isDataConnectionActive: %@
                                       isReachable: %@
                                          isOnCall: %@
                  supportsSimultaneousDataAndVoice: %@
                            isImmediatelyReachable: %@
                               awaitingDataContext: %@
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   (Ignoring network)
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   ([[%@]_connectionMonitor isImmediatelyReachable])
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   (Fallback)
Refreshing capabilities: %@
account
T@"IMDAccount",R,&,N,V_account
T@"NSArray",R,&,N,V_accounts
password
T@"NSString",R,&,N,V_password
serverHost
T@"NSString",R,&,N,V_serverHost
serverPort
TS,R,N,V_serverPort
proxyType
Tq,R,N,V_proxyType
proxyHost
T@"NSString",R,&,N,V_proxyHost
proxyPort
TS,R,N,V_proxyPort
proxyAccount
T@"NSString",R,&,N,V_proxyAccount
proxyPassword
T@"NSString",R,&,N,V_proxyPassword
useSSL
TB,R,N,V_useSSL
displayName
accountNeedsLogin
accountNeedsPassword
accountShouldBeAlwaysLoggedIn
allowedAsChild
networkConditionsAllowLogin
overrideNetworkAvailability
replyDelegate
T@"<IMDAutoReplyDelegate>",W,N
IMDSpamController
Instantiated IMDSpamController
Performing server query with alias: %@, count: %@
Server request returned status: %ld, abusive: %@, delay: %f, error: %@
v36@?0q8B16d20@"NSError"28
Stopping spam check for chatGUID: %@ interval: %f
Scheduling a spam check with interval: %f for chatGUID: %@
message-spam-check-timer
disable-auto-detect-spam
hasViewedPotentialSpamChat
detectSpam for Chat Identifier: %@
wasAutoDetectedForSpam
shouldn't retry again: %@
don't try to detect spam for chat: %@, disabled: %@, properties: %@
chatGUIDToSpamCheckTimerMap
T@"NSMutableDictionary",&,V_chatGUIDToSpamCheckTimerMap
chatGUIDToCountMap
T@"NSMutableDictionary",&,V_chatGUIDToCountMap
spamExtensionCutoffTime
Td,N,V_spamExtensionCutoffTime
SyncCompletedRecently
SyncNotCompletedRecently
SyncInProgress
SyncDueToIMAuto
SyncCompleted30Hours
IMNotSyncDueToIMAuto
Recent
Power
Wifi
Syncing
FirstUnlock
Crash
LastCompleteDBCKSyncWasWithin3Days
LastCompleteDBCKSyncWasNotWithin3Days
LastCompleteDBCKSyncWasWithin7Days
LastCompleteDBCKSyncWasNotWithin7Days
LastCKSyncWasWithin3Days
LastCKSyncWasNotWithin3Days
LastCKSyncWasWithin7Days
LastCKSyncWasNotWithin7Days
FullSyncInitiated
FullSyncFailed
FullSyncCompleted
FullChatSyncStarted
FullChatSyncFailed
PeriodicChatSyncStarted
PeriodicChatSyncCompleted
PeriodicChatSyncFailed
MessageSyncStarted
MessageSyncFailed
MessageSyncStoppedDueToDeviceConditions
AttachmentSyncStarted
AttachmentSyncFailed
AttachmentSyncStoppedDueToDeviceConditions
ManateeNotAvailable
NotStartingCoreDuetSync
BackUpCompletedRecently
BackUpNotCompletedRecently
InitialSyncInitiated
InitialSyncCompleted
InitialChatSyncInitiated
InitialChatSyncFailed
InitialMessageSyncInitiated
InitialMessageSyncFailed
InitialAttachmentSyncInitiated
InitialAttachmentSyncFailed
FirstSyncInitiated
FirstSyncCompleted
FirstChatSyncFailed
FirstMessageSyncInitiated
FirstMessageSyncFailed
FirstAttachmentSyncInitiated
FirstAttachmentSyncFailed
FirstSyncFailed
RecievedMissingMessageNotification
PostingMissingMessageData
CrashDuringFirstSync
MaxRecoverableAttemptReached
PCSIdentityWasLost
ManateeIdentityFetchAttemptFullSync
ManateeIdentityFetchAttemptFullSyncFailed
ManateeIdentityFetchAttemptRestoreSync
ManateeIdentityFetchAttemptRestoreSyncFailed
FullSyncInitiatedWithOver20HoursOfPowerAndWifi
FullSyncCompletedWithOver20HoursOfPowerAndWifi
RestoredAllContentFromCloudKit
com.apple.ProtectedCloudStorage.mobileBackupStateChange
com.apple.ProtectedCloudStorage.test.mobileBackupStateChange
com.apple.ProtectedCloudStorage.test.mobileBackupStateChange.success
com.apple.ProtectedCloudStorage.PendingKeyRoll
PCSBackupDisabledKeyroll
PCSBackupDisabledUserToggledKeyroll
PCSBackupDisabledTestToggledKeyroll
PCSBackupDisabledSuccessfulKeyroll
PCSPendingKeyroll
com.apple.private.IMDCKExitManager
IMDCKExitManager
Exit Record date has been modified, changing it from %@ to %@. Are we in exit state ? %@
Error fetching exit record date has been modified, changing it from %@ to %@
Handling notification for subscriptionID: %@
Calling writeExitRecordWithDate. ExitDate: %@
writeExitRecordWithDate, must be called with a non-nil exit date ignoring request
We were not able to create the subscription, we'll still try to write the exit record as we'll retry updating the subscription on imagent launch
writeExitRecordWithDate returned with error: %@
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
writeExitRecordWithDate scheduling opperation
******* Failed writeExitRecordWithDate salt zone was not present *********
Calling exitRecordDateWithCompletion date: %@ error: %@ fetchedExitDateOnLaunch: %@
Updating our exit date to %@  with error %@. fetchedExitDateOnLaunch [%@] or previous errorFetchingDate [%@]
v24@?0@"NSDate"8@"NSError"16
Dispatching back to main queue exitDate: %@ error: %@
Already on main queue exitDate: %@ error: %@
Calling _fetchExitRecordDateWithCompletion
** Error fetching exit record %@
Done fetching exit record successfully
Exit date has been modified from %@ to %@, attempting to toggle icloud settings toggle
Unable to fetch exit zone record Error: %@
ExitRecord
v24@?0@"NSDictionary"8@"NSError"16
_fetchExitRecordDateWithCompletion scheduling opperation %@
Calling deleteExitRecordCompletionBlock
deleteExitRecordWithCompletion returned with error: %@
deleteExitRecordWithCompletion scheduling opperation
QOS: 0x%lX target qos: 0x%lX
Checking if salt zone needs to be created
Error creating salt zone %@
***** Timed out creating salt zone *******
Checking if exit zone subscription needs to be created
Error creating exit zone subscription %@
***** Timed out creating exit zone subscription *******
writeInitialSyncCompletedRecordIfNeeded Not doing under first unlock
initialSyncRecordHasBeenWritten
writeInitialSyncCompletedRecordIfNeeded Requesting last sync date for metrics: %@
Last sync was within the last 7 days
Wrote last sync date to CK first time, success %@, error %@
writeInitialSyncCompletedRecordIfNeeded last sync date %@ was not in last 7 days
writeInitialSyncCompletedRecordIfNeeded No last sync date
writeInitialSyncCompletedRecordIfNeeded We have already done this. Not doing again unless you do defaults delete com.apple.madrid initialSyncRecordHasBeenWritten
IMDCKSubmitMetric
Submitted metric with opGroupName %@ useManatee:%@ Error %@
*** submitCloudKitMetricWithOperationGroupName not submitting MOC enabled: %@, serverAllowsSubmission: %@
Error creating analytic zone %@
***** Timed out creating analytic zone *******
IMDCKSubmitAnalytic
Request to submit dictionary (%@) opGroupName %@
Analytic zone does not exist, so creating it before resubmitting metric.
Successfully created analytic zone so trying to submit metric again.
Issue, we created the zone and we got back same error again.
Submitted metric with opName %@, dict: %@
Reporting errors: %@
syncErrors
Failed to create analytic zone.
*** submitCloudKitMetricWithOperationGroupName not submitting as analytic submission is not enabled
Performing metric operation name %@ using Manatee %@ using DB %@
Trying to submit CK metric operation with ID %@
Completion called for submittion metric operation with ID %@. ignoreZoneNotFoundError %@ OperationError %@
IMDCKSyncCompletion
We should not be submitting metrics to CloudKit: serverAllowsMetricSubmission: %@ isInternal: %@ isSeed: %@
Metrics are currently disabled for Watch, returning NO
Writing up sync metric using opGroup %@ useManatee %@
We should not be submitting metrics to CloudKit so calling completion with success.
Failed to serizlize analyticdict as JSON %@. Posting operationGroupName %@ only.
Writing up sync analytic using opGroup %@ useManatee %@
Not submitting metrics to CloudKit because notAllowed: %@ noJsonData: %@ so calling completion with success.
sendCloudKitZoneFetchRequestToNoteFeatureIsOn
sendCloudKitZoneFetchRequestToNoteFeatureIsOn not pinging CK as feature is off
Pinging cloudkit to tell feature is on.
Messages_Enabled
Messages Enabled Ping
sendCloudKitZoneFetchRequestToNoteFeatureIsOn: Fetch zone operation error %@
Scheduling ping cloudkit fetch zone operation %@
exitRecordID
T@"CKRecordID",&,N,V_exitRecordID
saltZoneCreatedOverride
T@"NSNumber",&,N,V_saltZoneCreatedOverride
subscriptionCreatedOverride
T@"NSNumber",&,N,V_subscriptionCreatedOverride
ckQueue
T@"NSObject<OS_dispatch_queue>",R,N,V_ckQueue
recordZoneManager
T@"IMDRecordZoneManager",&,N,V_recordZoneManager
databaseManager
T@"IMDCKDatabaseManager",&,N,V_databaseManager
exitRecordDate
T@"NSDate",&,N,V_exitRecordDate
errorFetchingExitDate
T@"NSError",&,N,V_errorFetchingExitDate
fetchedExitDateOnLaunch
TB,N,V_fetchedExitDateOnLaunch
ExitRecordKeyManateeZoneSubscription
Exit
com.apple.Messages.IMDCKExitManagerErrorDomain
CloudKitExitOnDate
CloudKitExitRecord
SyncCompleteRecord
AnalyticZoneRecord
SyncCompleteRecordType
SyncCompleteDateKey
AnalyticDataRecordType
AnalyticDataKey
chatManateeZone
attachmentManateeZone
messageManateeZone
analyticManateeZone
RecordKeyManateeZone
MetricsManateeZone
com.apple.imagent.aps
We couldn't create the push connection for the IMDRecordZoneManager
com.apple.icloud-container.
IMDCKRecordManager
Created push connection %@ with enabled topics %@
APSConnection didReceivePublicToken
APSConnection didReceiveIncomingMessage pushPayload: %@ ckNotification: %@
Received a notification for an unsupported notitifcation type: %@
Received a notification for zoneID: %@ for subscriptionID: %@
Received a notification for zoneID we haven't set up: %@ subscriptionID: %@
Creating subscription: %@ for zoneID: %@
We failed to create the subscription: %@  with error: %@
We successfully created subscription: %@
v24@?0@"CKSubscription"8@"NSError"16
We are already subscribed to: %@
We are not subscribed to subscriptionID: %@ so let's create it
_checkRecordZoneExists invalid parameter: recordZoneID %@
IMDRecordZoneManager
Created CKFetchRecordZonesOperation operation ID %@ zoneID %@
Did not get back a zone for recordZoneID %@
IMRecordZoneManager
Found zone %@
Error initializing fetchOperation 
Successfully created zone %@ 
***** Failed to createzone %@ %@ 
Zone %@ already exists
createRecordZoneIfNeededWithCompletionBlock zone %@ exists %@ error %@
Attempting to create zone %@
Successfully deleted zone IDs%@
Failed to delete zone IDs%@ error %@
Going to create subscription on deDupe zone for subscriptionID: %@ recordType: %@
Request to delete zones %@ for database %@
Result of deleting all zones
Successfully deleted zone IDs%@ DB %@
Failed to delete zone IDs%@ error %@ DB %@
Attempting to infer manatee status by fetching chat zone.
Error obtaining zones %@
******* Error indicates device does not have keys to sync *****
Not a fatal manatee error. Proceeding
dataBaseManager
T@"IMDCKDatabaseManager",&,N,V_dataBaseManager
pushConnection
T@"APSConnection",&,N,V_pushConnection
chatRecordZoneID
T@"CKRecordZoneID",R,N,V_chatRecordZoneID
chatRecordZone
T@"CKRecordZone",R,N,V_chatRecordZone
attachmentRecordZoneID
T@"CKRecordZoneID",R,N,V_attachmentRecordZoneID
attachmentRecordZone
T@"CKRecordZone",R,N,V_attachmentRecordZone
messageRecordZoneID
T@"CKRecordZoneID",R,N,V_messageRecordZoneID
messageRecordZone
T@"CKRecordZone",R,N,V_messageRecordZone
analyticRecordZoneID
T@"CKRecordZoneID",R,N,V_analyticRecordZoneID
analyticRecordZone
T@"CKRecordZone",R,N,V_analyticRecordZone
deDupeSaltZoneID
T@"CKRecordZoneID",R,N,V_deDupeSaltZoneID
deDupeSaltRecordZone
T@"CKRecordZone",R,N,V_deDupeSaltRecordZone
metricZoneID
T@"CKRecordZoneID",R,N,V_metricZoneID
com.apple.private.IM.IMRecordZoneManagerErrorDomain
IMDCKMessageSyncCKOperationFactory
Created fetch message operation ID %@ operationGroupName %@
MessagesSaved
Created modify message operation ID %@ operationGroupName %@
MessageDelete
MessagesDeleted
Created deleted message operation ID %@
Created fetched archived operation ID %@ using zone id %@
com.apple.distnoted.matching
IMDChatVocabularyUpdater
Not updating SiriKit vocabulary on an unsupported platform.
Received request to update vocabulary for added chat, but chat registry is not yet loaded. Deferring update. Added Chat: %@
Updating SiriKit group name vocabulary for added chat: %@
Received request to update vocabulary for deleted chat, but chat registry is not yet loaded. Deferring update. Deleted Chat: %@
Updating group name vocabulary for deleted chat: %@
Received request to update vocabulary for renamed chat, but chat registry is not yet loaded. Deferring update. Renamed Chat: %@
Updating group name vocabulary for renamed chat: %@
Chat registry was reloaded, but merge is not yet completed (e.g. we're still under first data protection). Not updating vocabulary.
Chat registry has finished loading. Updating group name vocabulary due to a deferred update request.
Chat registry has finished loading. No deffered update request.
q24@?0@"IMDChat"8@"IMDChat"16
Updated the SiriKit group names vocabulary with %lu named group chats
Performing initial group name vocabulary update
chatRegistry
T@"IMDChatRegistry",&,N,V_chatRegistry
vocabulary
T@"_INVocabulary",&,N,V_vocabulary
haveDeferredUpdateRequest
TB,N,V_haveDeferredUpdateRequest
spokenPhrase
T@"NSString",R,N
pronunciationHint
vocabularyIdentifier
alternativeSpeakableMatches
identifier
com.apple.private.alloy.electrictouch
IMDLegacyDTController
Loaded dtService: %@
_senderIDFromToken invalid input
_senderIDFromToken could not split into legitimate components %@
Received incoming DT message service %@ account %@ [data length] %@ fromID %@ context %@
IMDLegacyDTController No data %@ or fromID %@ on DT message. Bailing early
IMDLegacyDTController could not get senderID from fromID:%@
Got senderID %@
Created new DT message %@
Processed message %@ with session  %@
Could not find suitable session to process message %@
dtService
T@"IDSService",&,N,V_dtService
@16@?0@"IDSURI"8
im_registeredURIs
IMDCKMockRecordKeyZone
Dispatching operation %@
handleOperation : %@
Mocking writing up Cloudkit metrics
Mock fetching exit record
/var/mobile/Library/SMS/CloudKitMetaData/AttachmentSyncZoneMetaData.db
com.apple.IMCore.IMDCKAttachmentSyncController
AssetFetchFailure
com.apple.private.IMDCKAttachmentSyncController
IMDCKAttachmentSyncController
_shouldMarkAllAttachmentsAsNeedingSync %@
ck-max-number-of-attachment-batches
 overriding max number of attachment batches to fetch %@
Marking any unsuccessfully synced attachments as needing sync
Finished Marking any unsuccessfully synced attachments as needing sync
Not marking unsuccessful attachments as needing sync. Last attempt date %@
IMDCKInitialAttachmentSyncController
overriding max number of attachment metadata batches to fetch as this is in demo mode.
ck-max-number-of-attachment-metadata-batches
overriding max number of attachment metadata batches to fetch %@
Initiating attachment syncing with type %ld
Attachment Sync
SyncStep
syncAttachmentsWithSyncType with type %ld finished
Initial attachment sync succeeded. Proceeding with metadata only sync.
Initial attachment sync failed. skipping metadata only sync.
*** Called into to do initial sync ****
fetchAttachmentDataForTransferGUIDs %@ useNonHSA2ManateeDatabase %@ HQ %@
fetchAttachmentDataForTransfers: we weren't able to create a ckrecord from a transfer. Could the salt be missing? Salt:(%@)
v24@?0@"NSError"8@"NSArray"16
accepting file transfer %@
Transfer %@ - %f complete of %llu bytes
v32@?0@"IMFileTransfer"8f16B20@"NSError"24
Won't download assets, we are optimizing attachment storage.
We have a nil salt so we can't download assets anyway -- bailing
CloudKit Asset download already in progress, ignoring request
Won't download download assets, we don't meet the resource conditions currently
Starting attachment download batch with %lu items useNonHSA2ManateeDatabase %@ retries %@
Finished download of assets with Error: %@
Found a fatal partial error: %@
Kicking off another asset download batch in %f seconds useNonHSA2ManateeDatabase %@
Attachment download can't start at this time, so stopping attachment sync
Failed downloading batch of assets, not kicking off another batch. (number of retries: %lu) Error was %@
No assets to downloand
v28@?0B8Q12@"NSArray"20
purgedAttachmentsForChat Request to download purged assets for chats %@ on services %@
Got %@ purged assets to download
No assets that have been purged
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as synced ***
purgedAttachmentsCountForChat Request to get count of purged assets for chats %@ on services %@
Request to download purged assets for chats %@ on services %@
ck-client-download-purged-attachments-batch-size
Got %@
Done downloading purged attachments for chat %@
Found records to donwload {%@}
This is a periodic sync and deviceConditionstoCheck is set to IMCheckNoDeviceConditions, changing it to IMCheckAllDeviceConditions
This is an initial sync but current batch count [%@] >= maxBatchCount [%@] and deviceConditionstoCheck is set to IMCheckNoDeviceConditions, changing it to IMCheckAllDeviceConditions
Setting xpc_activity_t to XPC_ACTIVITY_STATE_DEFER because conditions are no longer met
Error forcing xpc_activity_t to XPC_ACTIVITY_STATE_DEFER
Attachment sync: device conditions allow sync: %@ deviceConditionsToCheck %@
Fixed up guid for transfer old guid: %@ new guid: %@
******** Marking attachment as synced up, as we could not update it's guid %@ (rowid %@)
Writing up a batch of attachments to cloudKit
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as clean ***
Got %lu dirty results to sync, filtered to %lu
Fixing up attachment GUIDs if needed
Removing attachments that were marked as clean 
Transfer to sync %@ 
Got %lu records to sync, filtered to %lu unique records
*** This is the last batch of attachments to write up. Number of records to write %lu < max batch size %lu
Got error %@ writing attachment records. Stopping further writes
NO error writing attachment records.
Kicking off another batch of attachments to write
** This was the last batch of attachment writes as the number of attachments to write up was less than max batch size Not writing more.
No Attachments to sync up at the moment
Device conditions dont allow us to sync
Fetching assets for %@ on stingray %@ useNonHSA2ManateeDatabase %@
OptimizeRedownload
v24@?0@"CKRecordID"8d16
v32@?0@"CKRecord"8@"CKRecordID"16@"NSError"24
Fetching attachment batch count %@ (max: %@) syncType %@ batch size %@ token %@
FullRestore
PeriodicSync
AttachmentSync
*** Exceeded max number of attachment batches to fetch. Stopping attachment fetch ***
Downloading asset while performing periodic syncing with cloudkit
v16@?0@"CKRecord"8
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24
recordZoneChangeTokensUpdatedBlock should not get called
v24@?0@"CKRecordID"8@"NSString"16
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
Scheduling a fetch operation from attachment zone
Device conditions dont allow sync OR continueFetching %@. Disk Space Available: %@
v24@?0@"CKRecord"8d16
v24@?0@"CKRecord"8@"NSError"16
Attempting to write %@ records to truth zone 
Error creating attachment zone %@
***** Timed out creating attachment zone *******
ChangeTokenExpired
IMDCKMessageSyncController
Kicking off an attachment write after fetching messages
Not kicking off a write because cachedSalt is not present.
Not writing up messages as sync type does not allow it
recordZoneChangeTokensUpdatedBlock recordZoneID %@ serverChangeToken %@ clientChangeToken %@ moreComing %@ recordZoneError %@
Saving sync token %@
Done fetching attachments in initial fetch
Kicking off another fetch of attachments
No more attachments to pull down. Setting IMCKFinishedFetchingAttachmentsFromCloudKit and kicking off a write
No more attachments to pull down. Should write back changes was no *****
We got back a change token has expired for processing the record zone for attachments going to try and fetch again
We got a %@ error while fetching attachments. %@
user deleted zone
zone not created
Resetting local attachment sync state & last sync date after received user deleted zone error
Attachment zone missing, attempting to create it
****** Failed creating attachment zone
//---*** Error fetching attachments from CloudKit with error: %@ ---- ***//
Attachment per-record completion %@ changeTag %@ error %@
_writeCKRecordsToAttachmentZone uploaded record successfully
AttachmentChanged
_writeCKRecordsToAttachmentZone had a conflict 
Server's GUID was different than we expected; aligning with the server's data
On conflict, the server record's GUID (%@) was different than the record we tried to update with GUID (%@); marking local attachment as synced, to skip it
Conflicting serverRecord was different than the one being updated (server: %@, local: %@)
Record had invalid arguments, we'll try this record again on the next sync
AttachmentUnableToSync
Record had unknown error code. Clearing out CK metadata
We couldn't find the attachment zone for this record so marking the attachment as dirty and clearing the state
_writeCKRecordsToAttachmentZone perRecordCompletionBlock encountered an error.  Will try this record again on next sync. %@
_processFetchRecordChangesCompleted error %@
_processRecordDeletion deleted record %@
_processRecordChanged changed recordID:%@ for attachmentGUID %@
recordZoneChangeTokensUpdatedBlock recordZoneID %@ serverChangeToken %@ clientChangeToken %@
Modify attachment had errors we can deal with, so treating this as a non error case
_processModifyRecordCompletion error: %@
Number of records saved %@ with error %@
Asset fetch complete for %@ error %@
Attachment batch fetch complete with error %@
Attachments to process %@
Finalizing asset download for transfer %@
We failed to fetch asset from CloudKit -- failing the transfer: %@
Removing attachment at path '%@' for %@ from iCloud backups
Attachment at path '%@' for %@ not found, NOT removing from iCloud backups
Going to fetch the asset for transfer guid at the end of this batch: %@
** No IMFileTransfer found for GUID %@
v32@?0@"NSString"8Q16^B24
attachmentZoneChangeToken
attachmentZoneChangeTokenForMetadata
attachmentZoneStingRayChangeToken
Clearing local chat sync state, flags 0x%x
We fetched a record that we didn't try to fetch!! we wanted (guid %@) for recordName: %@
We successfully fetched and validated that we can delete the transfer with guid: %@
We failed to validate that we can delete transfer with guid: %@
We got to the last object in the array so we will call our completion block with transfers to delete count: %@
v32@?0@"CKRecord"8Q16^B24
Attempting to fetch a nil file transfers from CloudKit for attachment purging
Validating attachment downloads with stingray container: %@
Adding transfer to fetch: %@ with record name: %@
Couldn't retrieve CKRecordID from file transfer %@
We got an error back from CloudKit trying to fetch recordID: %@ with error: %@ transfer: %@
Attachment zone ID is nil
recordID
No GUIDs passed in to delete
Deleting attachment operation deletedRecordIDs %@
@16@?0@"CKRecordID"8
Adding additional deleted record IDs from error
Kicking off deleted of recordIDs %@
Cloudkit sync is not enabled. Not deleting attachments
Got %lu recordIDs to sync, filtered to %lu unique recordID
No pending messages to delete from CloudKit
********* Error while deleting messages %@
Rate limited while deleting
Kicking off another batch delete to cloudKit
CKOperationFactory
T@"IMDCKAttachmentSyncCKOperationFactory",&,N,V_CKOperationFactory
syncTokenStore
T@"<IMDCKSyncTokenStore>",&,N,V_syncTokenStore
completionBlocksForAssetFetchOperations
T@"NSMutableDictionary",&,N,V_completionBlocksForAssetFetchOperations
recordIDToTransferMap
T@"NSMutableDictionary",&,N,V_recordIDToTransferMap
perTransferProgress
T@?,C,N,V_perTransferProgress
assetDownloadInProgress
TB,N,V_assetDownloadInProgress
downloadAssetsForTransferGUIDs
T@"NSMutableArray",&,N,V_downloadAssetsForTransferGUIDs
deviceConditionsToCheck
TQ,N,V_deviceConditionsToCheck
activity
T@"NSObject<OS_xpc_object>",V_activity
IMDCKSyncState
Exception while adding syncError. exception:%@, error:%@
ProductBuildVersion
Setting object %@ for key %@ in analyticDict.
Setting ProductBuildVersion %@ for key %@ in analyticDict.
Removing keys %@ %@ from analyticDict.
Request to set analytic sync date for object %@ and key %@ shouldOverrideIfExists %@
Errors(%lu total)
NewUser
RestoringUser
syncAttempts
syncSuccess
%@, isFeatureEnabled: %@, isSyncing: %@, isEligibleForTruthzone %@, isSyncingEnabled: %@, isRemovedFromBackup: %@, isInExitState: %@, exitDate: %@, isStartingDisabledDisableDevice: %@, lastSyncDate: %@, isSyncingPaused: %@, startingChangingEnabledSetting: %@, isPaused: %@, syncControllerSyncState: %@, syncControllerRecordType: %@, syncType: %@, accountStatus: %@, syncErrors: %@
Account needs repair
syncControllerSyncState
TQ,D,N
syncControllerRecordType
Tq,D,N
syncing
TB,D,N,GisSyncing
startingPeriodicSyncSetByCloudKitHooks
TB,D,N,GisStartingPeriodicSyncSetByCloudKitHooks
startingInitialSyncSetByCloudKitHooks
TB,D,N,GisStartingInitialSyncSetByCloudKitHooks
keyValueCollection
T@"IMKeyValueCollection",R,N,V_storage
delegate
T@"<IMDCKSyncStateDelegate>",W,N,V_delegate
featureEnabled
TB,D,N,GisFeatureEnabled
createdChatZone
TB,D,N
deletedZones
eligibleForTruthZone
TB,D,N,GisEligibleForTruthZone
syncingEnabled
TB,D,N,GisSyncingEnabled
removedFromBackup
TB,D,N,GisRemovedFromBackup
inExitState
TB,D,N,GisInExitState
syncingPaused
TB,D,N,GisSyncingPaused
exitDate
T@"NSDate",C,D,N
disablingDevices
TB,D,N,GisDisablingDevices
startingEnabledSettingChange
TB,D,N,GisStartingEnabledSettingChange
analyticSyncDatesDictionary
T@"NSDictionary",C,D,N
lastSyncDate
accountStatus
syncControllerSyncType
IMDMessageHistoryFirstUnlockReplaySyncTask: Begin replaying first unlock database for %ld services
__kIMDFileTransferCreatedNotification
__kIMDFileTransferAcceptedNotification
__kIMDFileTransferStoppedNotification
__kIMDFileTransferRemovedNotification
__kIMDFileTransferUpdatedNotification
__kIMDFileTransferArchiveSucceededNotification
__kIMDFileTransferArchiveFailedNotification
__kIMDFileTransferHighQualityDownloadInitiatedNotification
__kIMDFileTransferHighQualityDownloadCompletedNotification
__kIMDFileTransferHighQualityDownloadCompletedSuccessKey
__kIMDFileTransferHighQualityDownloadCompletedFileURLKey
IMDFileTransferCenter
Did not remove wrapper for transfer at local URL %@
Attachments
IMDFileTransfer posting recoverable error state for IMFileTransfer
IMDFileTransfer reset file transfer to waiting state
Marking transfer %@ as failing preview generation
Updating transfer %@ with size %@
New attribution info is %@
Attachments - Failed to update transfer preview size for %@, transfer not found
IMDFileTransfer posting recoverable error state (%zd) for IMFileTransfer %@
Failed to consume sandbox token, %@ token: %@
file-read-data
Denying transfer, (check %d, errno %d) client with audit token: %u not allowed to access request path: %@
Failed to release sandbox token, %@ token: %@
_handleFileTransfer accepted %@
ForceAllTransfersExpired
IMFileTransferCenter
stopping transfer to guid
MessageService Failed writing attachment to disk on incoming: %@
%s Requested to size with zero transferGUIDs
-[IMDFileTransferCenter sizePreviewsForTransferGUIDs:]
overall
Attempting to generate size for guid %@
Generated size for guid %@ size %f-%f error %@
v36@?0B8{CGSize=dd}12@"NSError"28
IMDFileTransferCenter - Timed out sizing transfer with guid %@, failing!
%s Skipping sizing guid %@. Needs sizing %@ hasLocalURL %@
Sizing complete, timing %@
Found message GUId %@ from IMFileTransferGUID %@ so that we can upadte the transfer. Record hasAsset %@
Updating an attachment(Msg GUID:%@) for which we do not have an asset.  We'll try updating this record again on the next sync.
Fetched from CK. Updating existing transfer %@ for message GUID %@
Fetched from CK. Creating new transfer %@ from CKRecord. Associating with message guid %@ hasAsset: %@
Do we want to download the transfer later? downloadAsset: %@, shouldDownloadAssetForTransfer: %@, hasAsset: %@
Going to auto downloading asset at the end of batch fetch for transfer: %@ for messageItem: %@ groupPhotoUpdate: %@
Nil CKRecord
markTransferAsNotSyncedSuccessfullyUsingCKRecord transferGUID %@
Could not find transferGUID %@ to mark as not synced successfully
markTransferAsNotSyncSuccessfullyDownloadedFromCloud transfer %@
resetSyncStateForRecord transfer %@ toNewState:%ld
Tried to clear the sync state for a transfer we don't have on disk transfer: %@ record: %@
Couldn't get local asset URL from CKRecord: %@
IMFileTransfer+CKRecord
Failed to create attachment persistent path for aux video source, bad transfer/data (assetPath %@ mimeType %@ utiType %@ guid %@)
Failed to get valid attachment aux filename for aux video copy dest, bad transfer/data (auxAssetPath %@)
Failed to move file from %@ to %@ error %@
Stored aux video for transfer %@, finalAssetPath %@
contextStamp
T@"NSString",&,N,V_contextStamp
hasActiveFileTransfers
{CGSize=dd}
IMDCKAttachmentSyncCKOperationFactory
Created fetch attachment operation  ID %@ fetch operation dictionary %@
PeriodicAttachmentSync
BackfillAttachmentSync
AttachmentsSaved
Created modify attachment operation ID %@ operationGroupName %@
AttachmentDelete
AttachmentsDeleted
Created deleted attachment operation ID %@
com.apple.private.alloy.messagesquickswitch
MessagesQSwitch
tempSMS.db
tempDowngradedSMS.db
QuickSwitch
Instantiated IMDQuickSwitchController
Current db version is %ld
Recents
compressedNanoSMSRecents.zip
compressedNanoSMSDB.zip
QuickSwitch Could not determine file size as path was nil
QuickSwitch Could not determine file size at path %@ with error %@
Size of file at path %@ is %lu
QuickSwitch We got a nil path to truncate to.
QuickSwitch Could not delete DB at path %@
QuickSwitchTruncating
Messages
Started truncating quick switch DB
QuickSwitch Could not trim DB with error %@ 
Finished truncating quick switch DB
QuickSwitch we were given a nil path to delete
QuickSwitch Could not delete file at path %@ with error domain '%@' code: %ld
Deleted file at path %@ 
Cleaning up temporary files
QuickSwitch Could not delete DB at path %@ %@
QuickSwitch. We do not expect file to already exist. Clearing it.
QuickSwitch Could not delete zipped file DB at path %@ with error %@
QuickSwitchZipping
Finished zipping quick switch DB
QuickSwitch Could not create zipped DB
v16@?0@"IMFileCopier"8
Started zipping quick switch DB
QuickSwitch. We do not expect file to already exist.
Finished unzipping quick switch DB
QuickSwitch Could not create unzipped DB
Started unzipping quick switch DB
QuickSwitch. We tried to initiate quickswitch on a watch. This is really bad!
Could not send initiate QuickSwitch message. Bailing!
Could not send QuickSwitch Recents request. Bailing!
Finished with success %@
QuickSwitch. We tried to _handleDBVersionResponse on a watch. This is really bad!
Copying from %@ to %@
QuickSwitch could not copy path to temp directory with error %@. Bailing!!
QuickSwitch we could not create zip file
QuickSwitch could not send file over to gizmo. Bailing
QuickSwitch tried to _handleQuickSwitchCompleted on a watch. This is really bad!
QuickSwitch Incoming DB doesn't exist at path %@, Really bad! 
QuickSwitch. Incoming db file already exists at %@. Removing it before copying over it.
QuickSwitch Could not copy  incoming file with error %@. Bailing!!
Moved incoming DB file %@ to path %@ 
QuickSwitch. Could not unzip incoming file
Unzipped file to location %@
QuickSwitch. Incoming recents directory already exists at %@. Removing it before copying over it.
QuickSwitch Could not delete recents %@ with error %@
QuickSwitch Could not copy incoming recents folder with error %@. Bailing!!
Moved incoming recents folder %@ to path %@ 
QuickSwitch. Could not unzip incoming directory
Unzipped directory to location %@
Moving path: %@ to location: %@
QuickSwitch Failed to remove path %@ for replacement with error %@
QuickSwitch Could not move unzipped directory %@ to location %@. Error: %@
Sending file at URL %@ to local account (identifier %@)  (error %@)  (metadata %@) success: %@
Sending message to local account (identifier %@)  (error %@)  (request %@) success: %@
service %@, account %@, incomingData %@ fromID %@ context %@
Not an IDSDevice: fromID %@. Bailing
Got request %@
Got IMDQuickSwitchControllerCommandInitiateQuickSwitch
Got IMDQuickSwitchControllerCommandResponeDBVersion
Got IMDQuickSwitchControllerCommandRequestRecents
Got IMDQuickSwitchControllerCommandQuickSwitchCompleted
QuickSwitch got unknown request over quick switch service %ld
service %@, account %@, resourceURL %@ metadata %@ fromID %@ context %@
Got IMDQuickSwitchControllerCommandIncomingDB at url %@
Got IMDQuickSwitchControllerCommandIncomingRecents at url %@
QuickSwitch got unknown resource ULR callback over quick switch service %ld
message sent with identifier %@ 
Checking if we are in proxy mode
Not in proxy mode. Found active iMessage account signed into email %@ 
In proxy mode. Did not find any active iMessage account logged in using email.
Found default paired device %@
QuickSwitch Did not find default paired device
QuickSwitch _notifyPSYWithResult not available on this platform
QuickSwitch _notifyPSYDataSent not available on this platform
quickSwitchIDSService
T@"IDSService",&,N,V_quickSwitchIDSService
Playing
Location
file
Name
Album
Artist
Genre
Year
Store URL
Display String
DisplayString
Stream Title
Player State
playerInfo
T@"NSMutableDictionary",N,V_playerInfo
isEnabled
messageFormat
__kCKRecordIMMessageIncompatibleDeleteNotification
guid
time
sender
chatID
SubType
SubTypeMsg
msgType
subject
body
pdata
esid
tRead
tDelivered
tPlayed
flags
msgSummaryInfo
msgProto
msgProto2
dcId
rGuid
eCode
MessageEncryptedV3
***Error _populateCKRecordWithIMMessageItemFields called on object %@ %@
***Error _populateCKRecordWithIMMessageItemFields (reply data) called on object %@ %@
***Error compressedProtobufDataForGroupTitleChangeItem called on object %@ %@
***Error _populateCKRecordWithIMGroupTitleChangeItemFields called on object %@ %@
***Error compressedProtobufDataForParticipantChangeItem called on object %@ %@
***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@
***Error compressedProtobufDataForLocationShareStatusChangeItem called on object %@ %@
***Error compressedProtobufDataForGroupActionItem called on object %@ %@
***Error compressedProtobufDataForMessageActionItem called on object %@ %@
Failed to unarchive ckrecord. Error: %@
IMItem+CKRecord
Cannot create record from recordID because it is nil %@
Cannot sync item because it is an incompatible action type %lld
***** Error Tried to generate a CKRecord from class %@ ******
****** initiWithCKRecord called with unsupported message type %@ *****
We don't have a valid guid for the message record we want to reset sync state: %@
IMItem_CKRecord
Phone number destination callerID [%@] is unselected on phone but phone does not have SIM inserted and caller ID is a phone number so will store message [%@] anyways
We have an iMessage account that is not backed by an ids account ---- please file a radar
v32@?0@"IMDAccount"8Q16^B24
Skipping shouldStore check, destinationCallerID: %@
We should not store the message [%@] because our destination callerID [%@] has been unselected from list of available aliases
AIMToSuperParser
FZPersonProfile
loadOldStatusStore
T@"NSDictionary",R,N
CacheDelete
Is already updating file sizes, returning
attachment-filesize-update-not-allowed
Server bag does not allow attachment filesize updating, retunring
attachment-filesize-update-max-iterations
Calling IMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark with rowID %@ iteration %@
filename
rowID
No more attachment fileSizes to fix up, got a -1 watermark
Previous batch of attachment filesize updates completed, setting new watermark to be %@
Current iteration count %@ is >= to maxIterations %@, stopping filesize update. Set state attachment filesizes updated activity result %d
Registering with cache delete upon launch
Setting up cache delete callbacks cache delete enabled %@
com.apple.imagent.cache-delete
com.apple.messages-cache-delete
~/Library/Messages
Purge event: %@
rescan
historyDone
Purge notification - All done
path
v16@?0r^{__CFSet=}8
CacheDelete -- purgeable block called with urgency: %d info: %@ isMainThread: %@
purgeable callback dictionary: %@
r^{__CFDictionary=}20@?0i8r^{__CFDictionary=}12
CacheDelete -- purge block called with urgency: %d info: %@ isMainThread: %@
Purge callback with callback dictionary: %@
CacheDelete -- periodic block called with info: %@ and urgency: %d isMainThread: %@
AttachmentWatermarkResetDone50600874
CACHE_DELETE_GUIDANCE
CACHE_DELETE_GUIDANCE_DO_NOT_EXPAND_CACHE
Cache delete  guidance %@ requested size %@
CACHE_DELETE_VOLUME
Purgeable callback -- purgeableSpace: %lld purgeableNumber: %@
CACHE_DELETE_AMOUNT
Purge callback -- Deleted bytes: %lld, volume: %@ is running on main thread: %@
nothingToPurgeDictionary -- volume: %@ purgeableSpace: %@
_purgeableSpaceGivenUrgency -- Bytes available to purge: %lld result: %lld urgency: %d
We somehow got back a negative number of bytes to delete so we don't want to delete anything
Tried to obtain purgeable attachments without proper default ---- please set them: defaults write com.apple.madrid EnableCacheDelete -bool YES
Purgeable space %@
Tried to purge attachments without proper default ---- please set them: defaults write com.apple.madrid PurgeWithCacheDelete -bool YES
PurgeWithCacheDelete default not enabled
purgeAttachments with bytes: %lld
We got back %lld records from persistence to delete which resulted in %lu file transfers to delete
No attachments to delete
 We didn't get back any attachments to purge
We failed to create an IMFileTransfer for IMDAttachmentRecordRef with identifier: %lld
Tried to call _deleteFilesOnDiskAndUpdateTransfers without proper default ---- please set them: defaults write com.apple.madrid EnableCacheDelete -bool YES
We are removing the file at path: %@ for transfer: %@
We attempted to delete a path that was not safe to delete for guid: %@ path: %@
There was an error trying to remove the file: %@
We successfully removed the file - setting the transfer state to waiting for accept
The transfer we want to remove does not exist at its local path -- transfer (%@) local path (%@)
existsAtLocalPath
localPath
transferState
success
Created %lu dictionarie(s) for transfer info of deleted attachment(s)
Did NOT metric fetching synced attachments from CloudKit. CK Enabled %@ , device conditions allow sync %@
We are going to try and fetch attachments we would want to delete from local disk with bytes to free up: %lld
We got a fileTransfer that doesn't exist that we think we can delete for CacheDelete: %@
Going to try and fetch from sync controller with %ld batches to fetch
We disconnected from power or wifi in between batches, so cutting the batches short
_fetchTransfers with totalTransferCount: %@ index of transfers: %@ number of batches to fetch: %@
Completed fetching batch with starting index: %@ index of next batch: %@ for number of batches: %@
/*-------Fetched all transfers we wanted to validate------*/
alreadyCapturedErrorWithAutoBugCapture
TB,N,V_alreadyCapturedErrorWithAutoBugCapture
allowsWritingToDisk
TB,N,V_allowsWritingToDisk
deviceLowOnDiskSpace
TB,N,GisDeviceLowOnDiskSpace,V_deviceLowOnDiskSpace
isUsingCentralizedModel
TB,N,V_isUsingCentralizedModel
isUpdatingAttachmentFileSizes
TB,V_isUpdatingAttachmentFileSizes
recordKeyZone
chatEncryptedv2
attachment
IMDCKMockDatabase
Adding operation %@
Did not find mock database for operation %@ zoneID %@
identifierToZoneMap
T@"NSDictionary",R,N,V_identifierToZoneMap
ChatSync
IMDCKChatSyncCKOperationFactory
fetchChatZoneChangesCKOperationUsingToken was passed in a nil zone
Created fetch chat operation ID %@
writeChatsOperationUsingRecordsToSave was passed in a nil records array
ChatsSaved
Created modify chat operation ID %@
ChatsDeleted
Created deleted chat operation ID %@
Registering bundle: %@
   => Internal service with name: %@
allServices
mcSV
mcAK
mcEK
mcNFK
mcIFK
pnHK
nRID
nBWV
pRID
IMDMeCardUpdatedNotification
Nickname feature is turned off, don't load nickname info into memory
nickNameKeyStore.db
nicknamekeystore
handledNicknamesKeyStore.db
handledNicknamesStore
pendingNicknamesKeyStore.db
pendingNicknameUpdatesStore
handleSharingPreferences.db
handleSharingPreferences
Nicknames
Evaluating account state for feature eligibility {refreshediCloudAndAppleIDMatch: %@ currentiCloudAndAppleIDMatch: %@}
Received aliases did change hasMultiplePhoneNumbers %@
nickname-reupload-profile-version
UseOldProfilesContainer
We successfully reuploaded our local nickname %@ %@
We were not successful in reuploading our nickname to the new container
Told this device just signed into iMessage, we need to ask our peers for nickname info requestedInfoBefore %@ retry count %@
Successfully sent request to peers for nickname info
We did not have the IDSDevices to send the request to, going to try again in %@
We do not have enough retries to get nickname info, not trying again
Told this device signed out of iMessage, we need to reset the bit that we've asked for the nickname feature info
Nickname sharing is not enabled or trying to verify on a group chat -- bailing verifying record ids
Going to verify if truncated record ID %@ is equivalent to our personal record id %@ current truncated id %@ recordIDS are equals %@
Truncated record id does not match, marking this chat as dirty so we send a nickname on the next message send
Beginning upload of nickname profile to CloudKit
Nickname is still uploading after time out %@ setting upload to done
Nickname upload has completed -- sending out of band nickname updates
We couldn't find a chat to send nickname info to for guid %@
Client request to store new personal nickname %@ path%@
Trying to set a personal nickname when the feature is off
Uploading Personal Nickname
Successfully Uploaded Personal Nickname
Unable to store in Public Database, aborting fanout to other devices
Failed Uploading Personal Nickname
Error: %@
 Fallback nickname: %@
v44@?0B8@"IMNickname"12@"NSString"20@"NSData"28@"NSError"36
Loaded pending nickname from disk: %@ and uploading
Found Pending Nickname Upload
No pending nickname found.
Resetting handle white/blacklist
Going to retreive the current nickname from CloudKit
v24@?0@"IMNickname"8@"NSError"16
Nickname feature is disabled, not fetching current nickname
Failed to fetch public nickname {error: %@, recordName: %@}
Failed Personal Nickname Fetch
recordID: %@
decryptionKey: %@
error: %@
Got personal nickname from IMTransferAgent: %@
Fetched Personal Nickname
Nickname Download
Public Nickname fetched or failed in time: %f
Name+Photo sharing feature is disabled, not fetching CloudKit record
We are missing parameters to fetch the CloudKit record (recordID: %@) (URI: %@) (decryptionKey: %@)
Already have this one, no need to grab it again from CloudKit with recordID %@
Retreiving nickname from IMTransferAgent with recordID %@
Fetched Nickname for %@
Nicknames - Failed getting nickname for record ID %@ from transfer agent with error %@
Failed Nickname Fetch for %@
recordID: %@
error:%@
The nickname feature is disabled, we shouldn't make any requests to CloudKit
Client request to delete personal nickname with recordID
Transfer agent succeeded in deleting public nickname from CloudKit
Did not succeed in deleting public nickname from CloudKit!
The nickname feature is disabled, not taking updates coming from madrid
audienceValue %@ enabledValue %@ nameForked %@ imageForked %@
Going to update Me Card preferences %@
Sharing Preferences Changed
Not enabled, deleting local recordID and cache
Transporting sharingEnabled %@
Transporting meCardSharingAudience %@ nicknameVersion %@ decryptionKey %@ nickNameID %@ nameForked %@ imageForked %@
Marking nickname as handled %@
updateHandledNicknamesIfneeded incomingPendingNicknameVersion %@ currentPendingNicknameUpdatesVersion %@
Our current pending handles %@ our incoming pending handles %@
We need to mark the following handles as having been updated %@
Peer Device Updated Handled Nicknames
Alert header: %@
Alert message: %@
Finished personal nickname fetch with nickname: %@, updating key store
Failed fetching new personal nickname: %@
Received newer version number (%lu, old: %lu), updating the blacklist/whitelist store
Blacklist added: %@
Blacklist removed: %@
Whitelist added: %@
Whitelist removed: %@
Blacklist
 and 
Whitelist
 Updated from Peer Device
handleBlacklist
handleWhitelist
Broadcasting changes to the blacklist and whitelist
Received older version number (%lu, old: %lu), dropping blacklist/whitelist update
Nickname feature is disabled, ignoring updates from peer device
Nickname Updates from Peer Device
We got a request to send nickname info to a specific device %@
Nicknames not enabled, deleting the one we know about.
No nickname stored locally. Not querying CK.
Nicknames enabled, and we already have one in cloudkit. Broadcasting to my other devices.
We should send personal nickname info to all of our own devices
Nickname feature is disabled, not sending updates to peers
Sending nickname info to destinations %@
We could not find a service session for imessage to send the nickname info or no contents in message dictionary %@ %@
We are still uploading the nickname to iCloud, queue to send info out of band for chat %@
Nickname feature is disabled, not sending personal nickname to chat
Sending nickname info to chat %@
We didn't have a session to send the nickname info over
Writing %lu nicknames to whitelist
We have an iMessage chat for guid so sending nickname info %@
Writing %lu nicknames to blacklist
Nicknames - We had a problem writing a handle list update with key %@ -  %@
Nicknames - We had a problem archiving handle list for key %@ error %@
We could not replace incoming nickname in our handled map, add to pending
We replaced userNickname in our handled map w/ an existing handled record
We got a pending nickname to handle %@
We don't have a pending nickname to clear for handle ID %@
We got a malicious pending nickname to handle %@
We don't have a malicious pending nickname to clear for handle ID %@
Tried to add a nil nickname to our pending map
New pending nickname has no image %@
New pending nickname name hasn't changed, silently updating record ID for previously handled nickname %@
Adding new nickname to our pending map %@
add nickname to pending updates %@ %@
Existing nickname %@ and new nickname %@ are different %@
Marking nickname %@ as handled
Trying to update a nil nickname
Replacing handled nickname for handle id %@ from record id %@ to new record id %@
For nickname %@, deleting old avatar image at path during mark as updated %@. Error %@
writing nickname %@ to kvstore %@
We had a problem writing the nickname to the pendingNicknameUpdatesKVStore %@
We had a problem archiving the nickname object %@
We got an error trying to remove %@ from the pending map %@
We got an error trying to remove %@ from the handled map %@
Got called to clean up nickname for id %@
Removing %@ from whitelist 
Removing %@ from blacklist 
Removing %@ from pending nickname updates
Removing %@ from handled nickname updates
Sending updated handled and pending nicknames to peers and client
Nickname feature is disabled, not loading nickname info from disk
Unable to successfully load nickname info from disk
Device is under first unlock so we need to put updates into a temporary map until we leave first unlock
We are not under first unlock so we are able to load all data
Not going to load personal nickname, feature is disabled
Limit to load of nicknames %@
Setting the IMDNicknameController scrutiny flag
Clearing the IMDNicknameController scrutiny flag
We did not have success loading handled nicknames %@ or updates %@
created handled nickname map %@
created pending nickname map %@
Nicknames - We got an error loading the handle whitelist data store %@
Nicknames - We got an error loading the handle blacklist data store %@
Nicknames - Failed to unarchive whitelist %@
No whitelist data to load
Nicknames - Failed to unarchive blacklist %@
No blacklist data to load
Successfully loaded %lu whitelist handles %lu blacklist handles
We got an error loading the nicknames data store %@
We had an error %@ unarchiving data %@
Storing personal nickname %@ and recordID %@ on disk
Writing nickname data of size %lu, recordID data of size %lu, and encryption key of size %lu to disk
NicknameRecordID
NicknameRecordKey
NicknameDataKey
Error writing data to KVStore %@ %@
Error writing personal nickname data to KVStore %@
Personal nickname data is nil, not writing to disk
Storing pending nickname %@ while waiting on upload
NicknamePendingKey
Error writing data to kvStore %@
Error reading pendingNickname %@
Error unarchiving storedPersonalNickname %@
Error deleting data from kvStore %@
Error deleting data from KVStore %@
Error reading nickNameDecryptionKey %@
Error reading storedPersonalNickname %@
Error Loading Personal Nickname From Disk
Stored personal nickname doesn't exist
No Personal Nickname On Disk
Loaded Personal Nickname From Disk
Nickname loaded from disk did not have a recordID. Attempting to load recordID from disk.
Error reading nickname for pending upload %@
Error unarching pending nickname upload %@
Error deleting nickname avatar from path: %@
Passed in empty recordID
Did not find nickname for recordID %@
Found existing nickname
No nickname for handle %@
I'm being asked for handleURI %@
System did leave first unlock, loading maps into memory
FakeID
First
Last
kvStore
T@"IDSKVStore",&,N,V_kvStore
lastMeContactStoreSync
Td,N,V_lastMeContactStoreSync
handledNicknamesKVStore
T@"IDSKVStore",&,N,V_handledNicknamesKVStore
pendingNicknameUpdatesKVStore
T@"IDSKVStore",&,N,V_pendingNicknameUpdatesKVStore
handleSharingKVStore
T@"IDSKVStore",&,N,V_handleSharingKVStore
handledNicknames
T@"NSMutableDictionary",&,N,V_handledNicknames
pendingNicknameUpdates
T@"NSMutableDictionary",&,N,V_pendingNicknameUpdates
T@"NSMutableSet",&,N,V_handleWhitelist
T@"NSMutableSet",&,N,V_handleBlacklist
personalNickname
T@"IMNickname",&,N,V_personalNickname
needToLoadMapsInfoFromDisk
TB,N,V_needToLoadMapsInfoFromDisk
chatsToSendNicknameInfoTo
T@"NSMutableArray",&,N,V_chatsToSendNicknameInfoTo
nicknameIsUploadingToCK
TB,N,V_nicknameIsUploadingToCK
whitelistedHandlesForSharing
T@"NSSet",R,N
blacklistedHandlesForSharing
IMDMessageSortOrderAssigner
%s assigning %@ sortID %@
-[IMDMessageSortOrderAssigner compareMessageToOtherMessagesWithSameReplyToGUIDAndAssignSortID:existingMessagesWithSameReplyToGUID:]
-[IMDMessageSortOrderAssigner assignSortIDToIncomingMessageWithNoExistingMessagesWithSameReplyToGUID:onChat:]
Performing initial database housekeeping
Daemon
Registering for the DB reconnect notification.
Got a mandatory DB reconnect notification, I will now exit.
  => Failing all unsent, unfailed messages
  => Database was full, waiting to post
  => Posting database full
Resetting _cachedUnreadMessageCount because _updateModificationDate
Updating cache for message guid: %@ calculateUnreadCount %@
  **** Updating this chat!
Storing Aux image transfer %@
_storeAttachmentsForMessage did not find Aux video transfer %@
Updating transfer: %@
Posting resulting transfer to clients; %@
Not storing: %@
Stored item to database: %@:%@
Stored message: %@
Updated from %@->%@  on service: %@
IMDMessageRecordCopyMessagesForAssociatedGUID resulted in a non-associated message item: %@
************* Please file a radar!!!!!!!!!!! *******************************
A message returned by IMDMessageRecordCopyMessagesForAssociatedGUID is associated to %@ instead of the requested GUID %@.
GUID we got from IMDMessageRecordCopyMessagesForGUIDs wasn't one of the guids we requested. IMItem we got back was: %@, IMDMessageRecordRef guid we got was: %@, requested guids was: %@
history query
Requesting history with guid: %@ handles: %@ services: %@ limit: %llu thread identifier: %@ only messages: %@
generate chat items
IMTiming
history query timing: %@
_messagesWithRoomNames: %@ onServices %@ limit %d recordStoreRecords: %@
paged history query
Requesting history with guid: %@ handles: %@ services: %@ number before: %llu number after: %llu thread identifier: %@
_limitedNumberOfMessagesWithHandles: %@ services: %@ messageGUID: %@ numberOfMessagesBefore: %d, numberOfMessagesAfter: %d record count: %d
paged history query timing: %@
_unreadMessagesWithHandles: %@ onServices %@ limit %d recordStoreRecords: %@
_unreadMessagesWithRoomNames: %@ onServices %@ limit %d fallbackGUID %@ recordStoreRecords: %@
Ensure transfers(count=%lu) with GUIDs registered: %@ for message: %@
Existing transfer: %lu/%lu %@
Found saved transfer from DB: %@
New transfer: %@
Not registering %lu/%lu transfers, too many for one message
Should load attachments for associated messages %@
Found messages with associated guids: %@  (%@)
Found messages with guids: %@  (%@)
Have stored message for guid (%@): %@
Fetched item from database for guid (%@): %@
Stored message for guid (%@): %@
Found existing message: %@ similar to: %@   (Skip Services: %@   Skip GUIDs: %@   Within Time Interval: %f)
No existing message similar to: %@   (Skip Services: %@   Skip GUIDs: %@   Within Time Interval: %f)
Stored message for replace ID (%d): %@
Found %d messages with handles: %@ on services: %@  limit: %d
Found %d messages with room names: %@ on services: %@  limit: %d
messagesWithHandlesBeforeAndAfterGUID found %d messages for number of ids: %d on number of services: %d numberOfMessagesBefore: %d numberOfMessagesAfter: %d
Found last message: %@ with handles: %@ on services: %@
Found %d messages with handle: %@ on service: %@  limit: %d
Found last message: %@ with room names: %@ on services: %@
Found %d filenames with handles: %@ on services: %@
Found %d filenames with room names: %@ on services: %@ 
Found %d message action items for original message guid: %@
MessageStore
Adding message GUID to readReceiptsForMissingMessage cache: %@ (size: %lu)
Found chat guids: %@ for message guid: %@
Couldn't find existing chat with guid: %@ in IMDChatRegistry for messageGUID: %@
   Found Chats: %@
Found chat guids: %@ for message identifier: %lld
Couldn't find existing chat with guid: %@ in IMDChatRegistry for messageIdentifier: %lld
PNIsValidPhoneNumberForCountry
CorePhoneNumbers
Cleaning up symbols from unformatted phone number %@ based on phoneNumberIsValid %d and phoneNumberIsShortCode %d
Deleted %d messages with guids: %@ in chat: %@
Deleted %d messages with guids: %@
Deleting batch %d of messages for chatIdentifiers %@ onServices %@. %d messages will be deleted.
deleteMessageswithChatIdentifiers: %@ onServices: %@
Found %d messages to delete
Deleted %d messages with replace ID: %d from handle: %@ on service: %@
Marked %@ as unread
Marked %d messages as read with handles: %@ on service: %@  from me: %@
Marked %d messages as read with chat guid: %@ from me: %@
Returning _cachedUnreadMessageCount %@
Computed _cachedUnreadMessageCount %@
suppress DB update timer fired
setSuppressDatabaseUpdates called with suppressUpdates %d 
Scheduling a suppress DB invalidation timer
Going to retract user notifications for read messages
Going to post user notifications
Rebuilding lastFailedMessageDateChanged with new value: %lld 
Suppressed: Rebuilding lastFailedMessageDateChanged with new value: %lld 
Rebuilding/Broadcasting unreadCountChanged with new value: %lld 
Suppressed: Rebuilding/Broadcasting unreadCountChanged with new value: %lld 
Broadcasting unreadCountChanged with new value: %lld 
Broadcasting lastFailedMessageDateChanged with new value: %lld 
Suppressed: Broadcasting unreadCountChanged with new value: %lld 
Suppressed: Broadcasting lastFailedMessageDateChanged with new value: %lld 
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/Messages-1125.19.0.3/IMCore/IMDaemonCore/IMDMessageStore.m
-[IMDMessageStore replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:]
Unexpected nil '%@' in %s at %s:%d. %@
newGUID
ASSERTION FAILED: %@
associatedMessageGUID
Database
"Database": Will delete old ack %@: %@: %lld
"Database": Will NOT delete old ack %@: %@: %lld
Deleting previous acknowledgments failed with error: %@
B16@?0@"IMItem"8
Breadcrumbs
Observed more than one unconsumed breadcrumb: %@ for '%@' session %@
B16@?0@"IMAssociatedMessageItem"8
History query found breadcrumb %@ with payload history: %tu items.
IMDMessageStore
************* We hit max number of attempts to load dirty messages. Bailing for now
load messages needing CK sync with limit %ld, attemptCount %lu usingStingRay %@
**** Marking message with rowID %lld as clean ***
**** We had corrupt messages amongst dirty messages. Trying to load messages again. numberOfAttempts %lu
loaded %lu messages needing CK sync with limit, messages %@
Clearing tombstone message table
SMS_FULL_WARNING
IMSharedUtilities
DISMISS
modificationStamp
T@"NSString",&,V_modificationStamp
__kIMDMessageStoreHandleUnformattedIDKey
__kIMDMessageStoreHandleCanonicalIDKey
__kIMDMessageStoreHandleCountryCodeKey
@"NSString"24@?0@"NSString"8@"NSString"16
Built IMItem: %@    from IMDMessageRecordRef: %@
 => Not storing item, service: %@  does not support a database
 => Not storing message, service: %@  does not support a database
EngroupCreationDateKey
wasDetectedAsSMSSpam
SMSCategory
wasDetectedAsiMessageSpam
shouldForceToSMS
smsSpamExtensionName
numberOfTimesRespondedtoThread
LSMD
RBHE
smsHandshakeState
messageHandshakeState
GPUFC
%s (%@)
-[IMDChat initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:srServerChangeToken:srCloudKitSyncState:cloudKitRecordID:srCloudKitRecordID:isBlackholed:]
Created chat: %@
-[IMDChat dealloc]
Dealloc chat: %@
chatIdentifier
serviceName
roomName
groupID
engramID
serverChangeToken
cloudKitSyncState
originalGroupID
lastReadMessageTimeStamp
lastAddressedLocalHandle
lastAddressedSIMID
properties
style
state
unreadCount
isBlackholed
isFiltered
hasHadSuccessfulQuery
lastMessageTimeStampOnLoad
participants
Chat: %@  Adding participants: %@
Trying to add participants: %@ to 1:1 chat :%@
Chat: %@  Removing participants: %@
Trying to remove participant from a group chat with 2 or less participants %@
Chat: %@  Resetting to participants: %@
Reassociating chat: %@  to account: %@
IMDChat: %p GUID: %@ Style: %c State: %d Participants: %@  Room Name: %@  Display Name: %@  Identifier: %@  Unread count: %d  Row ID: %lld  Group ID: %@, originalGroupID: %@ lastAddressedHandle: %@ lastAddressedSIMID: %@ isFiltered: %d, hasHadSuccessfulQuery: %@, Engram ID: %@, serverChangeToken:%@, cKSate:%@ lastReadTime:%@ engroupCreationDate: %@ %@ cloudKitRecordID, isBlackholed: %@ groupPhotoGuid: %@
lastMessage
Chat: %@   Updating last message: %@
Chat: %@   Property update: %@
     Resulting properties: %@
     => Saving changes
ChatRegistry
   Generating group ID for chat: %@    groupID: %@
   Generating group ID for chat: %@    groupID: %@  using IDs = %@
IMDChat
Updating lastReadMessaeTimeStamp from: %@ to: %@ for chat: %@
Updating record change tag (etag) from: %@ to: %@ for chat: %@
Updating SR record change tag (etag) from: %@ to: %@ for chat: %@
Updating ck record ID from: %@ to: %@ for chat: %@
resetting CK Sync state
Updating last addressed handle ID from %@ to %@. force update %@
Updating last addressed sim ID from %@ to %@
Updating isFiltered to: %d
Checking if last seen message guid needs updating, old %@ new %@
Trying to persist legacy mergedID-based merged chats - 48047873
For handle [%@] we found another handle [%@] with contactID [%@] that has the same mergedID: [%@]
handle [%@] gets a mergedContactID: [%@]
handle [%@] doesn't have mergedID siblings
PersonID %@ for unamed group chat %@
personCentricID %@ for chat %@
%@:%@
<IMDChat %p _ckUniqueID %@, ckSyncState %ld recordChangeTag %@>
Loaded message profile: %@
msgNicknames
The meCard has been edited
T@"NSString",C
T@"NSString",C,SsetGroupID:
T@"NSString",C,SsetEngramID:
T@"IMMessageItem",&
T@"NSDictionary",&
TQ,S_setUnreadCount:
Tq,S_setRowID:
T@"NSArray",C
isUnnamedChat
numMessagesSent
TQ,V_numMessagesSent
meCardUpdated
TB,V_meCardUpdated
T@"NSString",C,N
persistentID
deviceIndependentID
pinningIdentifier
cloudKitRecordID
T@"NSString",C,V_cloudKitRecordID
srCloudKitRecordID
T@"NSString",C,V_srCloudKitRecordID
Tq,N
lastSeenMessageGuid
T@"NSString",R,C,V_lastSeenMessageGuid
srServerChangeToken
T@"NSString",C,V_srServerChangeToken
srCloudKitSyncState
Tq,V_srCloudKitSyncState
serviceSession
T@"IMDServiceSession",R,&
T@"IMDAccount",R,&
T@"IMDService",R,&
dictionaryRepresentation
T@"NSDictionary",R,&
chatProperties
isArchived
TB,R
createEngramGroupOnMessageSend
TB,V_createEngramGroupOnMessageSend
pendingENGroupParticipantUpdate
TB,V_pendingENGroupParticipantUpdate
personCentricID
nicknamesForParticipants
T@"NSDictionary",R,N,V_nicknamesForParticipants
wasReportedAsJunk
TB,V_wasReportedAsJunk
com.apple.private.Messages.IMDCKRecordSaltManager
IMDCKRecordSaltManager
Starting salt fetch on internal queue
*** Error fetching user ID %@
Cached salt : %@
** Fetched salt was 0 length **
v24@?0@"CKRecordID"8@"NSError"16
CloudKit syncing is disable. Not syncing salt. Is under first unlock %@
Request to update salt
Request Salt
Fetched salt %@
cachedSalt
T@"NSString",&,V_cachedSalt
Received first unlock merge complete notification, re-syncing chats
Resetting LastBulletinboardPostedMessageRowID: %lld
LastBulletinboardPostedMessageRowID
Not Resetting LastBulletinboardPostedMessageRowID: %lld
v20@?0i8Q12
Received merge complete notification, re-syncing chats
com.apple.imdpersistenceagent.notification.mergecompleted
com.apple.imdpersistenceagent.notification.switchcompleted
com.apple.automatichistorydeletion.deleted
Deleted history automatically, re-syncing chats
com.apple.imdpersistenceagent.notification.lastaddressedidsmodified
Last addressed handle/simIDs of chats got modified, force reloading chats
B16@?0@"IMDChat"8
handle: %@  account: %@  chatIdentifier: %@  guid: %@
Found existing chat: %@
Created chat: %@ lastAddressedHandle %@
handles: %@  account: %@  chatIdentifier: %@  guid: %@
room: %@  account: %@  chatIdentifier: %@  guid: %@
 Hint message for last message was older than the current last message: %@, current: %@
 Querying db for last message: %@
 => Using last message: %@ for chat: %@
 Updating unread count for chat: %@ to: %d
Updating the unread count on chat: %@
Forcing unread count to zero on chat: %@
We believe the failed message might have changed, lets rebuild with fromMessage: %@
    => toMessage: %@
Registering chat: %@
@"NSString"16@?0@"IMDHandle"8
IMDChatRegistry
Adding handle %@ handleCNID  %@ to chat %@
Unregistering chat: %@
Deleting chat: %@
CloudKit syncing is on. Writing deleted chat to deleted sync table
%s: item: %@ chat: %@
-[IMDChatRegistry addItem:toChat:]
%s: message: %@ chat: %@
-[IMDChatRegistry addMessage:toChat:deferSpotlightIndexing:]
******* Not storing message %@ to chat %@
******* IMDMessageStore cannot store message %@ to chat %@
Storing SMS chat %@ old display name %@, old group ID %@ new display name %@, new group ID %@
Found SMS chat with different participants than its iMessage sibling. Chat: %@. Updating participants using %@
Attempting to fix up chat participants if needed
*********** Caught exception while fixing up chat participants on client connection %@ **********
Could not retrieve chats in range (%ld,%ld) as there are not that many, so retrieving all chats, range (%ld,%ld).
Retrieving %ld most recent chats out of %ld chats
********* Calling setInitialLoadForTesting in non unit tests is not supported ***** 
com.apple.IMDaemonCore.unsupportedAction
Would have ignored reload of chats but has zero chats, forcing reload
Forcing reload of chats _isLoading: %d _doneLoadingAfterMerge: %d forced: %d
Dropping all chats in registry
Unsuspending MobileSMS if necessary for chat reload
Updating database clients
Posting the update chat registry to all listeners
=> Done notifying clients
NOT forcing reload of chats _isLoading: %d _doneLoadingAfterMerge: %d forced: %d
Loading Chats...
DidRegenerateGroupID63841559
Should fix unnamed groupID: %@
 Found %d chats
No service found, looking at name: %@
No service found for name: %@: removing this chat [%@]
No account: removing this chat [%@]
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/Messages-1125.19.0.3/IMCore/IMDaemonCore/IMDChatRegistry.m
-[IMDChatRegistry loadChatsWithCompletionBlock:]
generatedGroupID
Unnamed group with non UUID style groupID, lets fix this chat: %@
    New groupID: %@
=> Done Loading %d Chats
try to persist mergeID merged chats for [%lu] handles
Actually saving chat store
Kicking off deferred save
Will not add malformed IMHandle:%@ to IMDHandleRegistry
Unable to add IMDHandle to _idToHandlesMap due to exception %@ -- nilling idToHandlesMap
Removing IMDHandle:%@ from IMDHandleRegistry
Device left first unlock, re-syncing chats
calling update routing, expire and watch dog after first unlock
Done fetching latest salt after unlock
Performing one time account check after upgrade
systemDidUnlock
DidMakeAllAttachmentsClassC
Making all attachments class C
/var/mobile/Library/SMS/Attachments
Failed making file class C: %@ with error %@
ForkMerge
Found %ld unnamed chats needing new groupIDs: %@
generatedGroupID is nil
updated unnamed chat groupID from %@ to %@ => %@
No unnamed duplicate groups found needing new groupIDs
did not find winner %@ in list of duplicates %@
Finding group chats
Found %ld duplicate chats needing merging: %@
winningChat unexpectedly nil
losingChats is unexpectedly nil
found winning chat %@, and losing chats %@, in list of chat duplicates: %@
will merge losing chats %@ into winning chat id %@
repairing duplicate chats failed: %@
merged losing chats %@ into winning chat id %@
Deleted unwanted chat %@
finished merging %ld duplicate chats
No duplicate chats found to merge
-[IMDChatRegistry repairDuplicateChatsIfNeeded]
Unexepectedly true '%@' in %s at %s:%d. %@
_isLoading
DidCheckForDuplicateChats
will check for duplicate chats after checking pref key %@:merged-duplicate-chats
Set pref for duplicate check (%@:merged-duplicate-chats) to YES
Finished repairing duplicate chats in %f seconds
Will NOT check for duplicate chats after checking pref key %@:merged-duplicate-chats
DidMarkGroupPhotosAsUnpurgeable
NOT Using person centric grouped chats cache
Using person centric grouped chats cache
Truncating person centric grouped chats to %ld chats.
q24@?0@"NSArray"8@"NSArray"16
Current item to last map count %@
groupChats
sortChats
Done timing chat grouping %@ created %@ sorted chats
mergedPinningIdentifiers
pcmid
Number of person centric chats created to send to client %@
Group photo inconsistency detected among merged chats. Attempting to repair
    Chat %@ has groupPhotoGuid %@
Could not find file transfer matching group photo guid: %@
Have file transfer matching groupPhotoGuid: %@. FileTransfer: %@
Accepting groupPhotoGuid %@ as the initial preferred group photo.
Preferring %@ over %@ because the creation date is newer.
Not preferring %@ over %@ because the creation date is older.
Not preferring %@ because it does not have a creation date
The preferred groupPhotoGuid is %@. Transfer: %@
Applying groupPhotoGuid %@ to chat %@ which previously had groupPhotoGuid %@
Chat %@ already had groupPhotoGuid %@, leaving as is.
Completed repair of group photo inconsistency.
Could not determine a preferred group photo among inconsistent merged chats. Leaving inconsistency as is.
Chat is not SMS or iMessage -- so no need to sync to cloudkit: %@
We already have a chat to upload for groupID: %@ so we need to compare last message time's
The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current Guid: %@ Sibling GUID: %@
IMChatRegistry
We are going to replace the current chat: %@ with: %@ so we should mark it as modified so we don't modify it twice
Did not find chat for GUID %@
Searching for the newest chat with OriginalGroupID:%@ on service:%@
Found newer chat match for Original Group ID: %@
Found existing chat for CKRecord: %@
IMDChatRegistry: Found an existing chat that's not in the registry. This is likely because the registry failed it's chat load. OriginalGroupID:%@ Chat:%@
TriedToInsertDuplicateChat
Won't _ensureNoExistingGroupForCKRecord style:%hhu, originalGroupID:%@ service:%@
Found groupd_id fork for chat while applying changes from cloudKit %@
Marking fork as clean %@
Found original_groupd_id fork for chat while applying changes from cloudKit %@
Chat already exists: %@ to apply changes to
Creating new chat %@ with record %@
Marking existing chat %@ as deferred 
Marking existing chat %@ as needing sync from deferred state 
Resetting sync state for chat: %@
/***--Trying to clear sync state on a chat not on disk: guid [%@] record [%@]
IMDChatRegistry-PcmidMerge
mapOfAllPCMIDsToHandles count %@
key: %@ value %@
Going to update person centric id of this handle %@
Updated handle %@
Not going to repair person centric ids on all chats
DidMigratePersonCentricIDs
Going to write down that we tried to migrate the person centric ids for all handles
handlesThatNeedPCMIDUpdated count %@
Going to update the person centric id on %@ handles
updating handle %@
tel:%@
updated person centric id on handle, new handle rep %@
We tried to update a handle whose ID length is not > 0 or is not a phone number. handle %@
We tried to update a handle whose pcmid length is not > 0 handle %@
Tried to update the pcmid of a null handle
updating handle on iMessage service in db %@ with new id %@
updating handle on SMS service in db %@ with new id %@
Setting sort id %@ for message %@ on chat %@ synced from CloudKit
Found item that is incompatible with the current device version: %@
Found GUID for attachment part, associating with attachment: %@ at part id %lu
v24@?0@"NSString"8Q16
Updated msg %@ to have CKSyncState %@ stored message: %@
Clearing pending chat delete table
Found iMessage chat %@ for chatID %@ style %@
Did not find iMessage chat for ID %@ and style %@
No handles or servicename to receive a message from: {handles: %@ serviceName: %@}
No session for serviceName %@ -- can't simulate receive
Invalidating person centric grouped chats cache
ContactStore history token updated.
Not updating the ContactStore history token with %@
All handles and CachedAliasToCNIDMap
iMessage;-;%@
SMS;-;%@
Contacts based merging is disabled.
Contacts changed notification %@ 
v24@?0@"NSMutableArray"8@"NSArray"16
Computed chats to merge. Broadcasting to clients
No chats to merge/un-merge. NOT Broadcasting to clients
aliasMap
historyToken
v16@?0@"NSMutableDictionary"8
# chats that need update after contacts changed notification %@
No CNContact for alias %@
IMDChatRegistry_Nickname
Clean up nickname for alias %@
@16@?0@"IMDHandle"8
Hawking: New contact (%@) added, removing chat (%@) from blackhole.
type
Chat %@ needs to be merged / un-merged
No of entries in chat dictionary %@
Update MeCard for all IMDChats
idToHandlesMap
T@"NSMutableDictionary",&,N,V_idToHandlesMap
T@"NSData",R,N,V_historyToken
ckUtilities
T@"IMDCKUtilities",&,N,V_ckUtilities
chatStore
T@"IMDChatStore",&,N,V_chatStore
hasDumpedLogsForNoExisitingGroup
TB,N,V_hasDumpedLogsForNoExisitingGroup
messageProcessingController
T@"IMDMessageProcessingController",R,N,V_messageProcessingController
messageHistorySyncController
T@"IMDMessageHistorySyncController",R,N,V_messageHistorySyncController
personCentricGroupedChatsCache
T@"NSMutableDictionary",&,N,V_personCentricGroupedChatsCache
cachedAliasToCNIDMap
T@"NSMutableDictionary",&,N,V_cachedAliasToCNIDMap
conversationManager
T@"TUConversationManager",R,N,V_conversationManager
chats
allChats
blackholedChats
blackholedChatsExist
countOfAllChats
TQ,R,N
IMDCKDatabaseManager
**** Initializing dev container with ID %@
com.apple.messages.cloud
Initializing production container %@
Manatee container %@
use-old-nickname-container
Server says to use new container? %@ {serverbagValue: %@ version: %@}
com.apple.internal.messages.memoji
com.apple.messages.profiles
**** Initializing dev nick name container with ID %@
Using Manatee Container
Nicknames NOT enabled, returning nil public database
manateeContainer
T@"CKContainer",R,N,V_manateeContainer
nonHSA2ManateeContainer
T@"CKContainer",R,N,V_nonHSA2ManateeContainer
nickNameContainer
T@"CKContainer",R,N,V_nickNameContainer
truthContainer
T@"CKContainer",R,N
useStingRay
%@/%@
/var/mobile/Library/SMS/CloudKitMockStore/
IMDCKMockRecordZone
Mock Handle operation %@ identifier %@
Adding random delay of %@ seconds
Failed to unarchive mock ck record data. Error: %@
ID %@ MOCK Handling fetchRecordZoneChangesOperation
%@ Error reading from MOCK store %@ 
About to give back %@ records moreComing %@ fetchAllChanges %@
%@ Error deleting from MOCK store %@ 
Introducing random error %@
%s: Unable to archive record %@, error %@
-[IMDCKMockRecordZone _serializedCKRecordData:]
ID %@ MOCK Handling modifyRecordsOperation
Error persisting record %@ error %@
Successfully persisted record %@ 
T@"NSString",R,N,V_identifier
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
recordStore
T@"IDSKVStore",&,N,V_recordStore
com.apple.private.Messages.IMDCKRampManager
metadata_zone
metadata_rampstate_v2
IMDCKRampManager
Starting ramp state fetch on internal queue
FeatureAllowed
FeaturePromoted
FeatureVisible
RetryAfter
Sending request as priority
RampPriority
Not a priority ramp request
Ramp operation %@ Desired keys %@
Fetch operation records %@ fetchError %@
Fetch ramp state - featureAllowed %@, featurePromoted: %@, featureVisible: %@, retryAfter: %ld
Couldn't find CKRecord for ramp. Defaulting to not ramped in
FetchRampState
Attempting to fetch ramp state from CloudKit with operation %@
Writing cachedRampState featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
scheduling new timer with retryAfter %f
retry timer fired
Not setting up new retryAfter, last one is firing at %@
Not Requesting ramp state. Is under first unlock.
Request to fetch ramp state
Cached featureAllowed and featurePromoted are true and there wasn't an error fetching state from the server last time. Not fetching again
calling recordFetchedCompletionBlock
Not fetching from server, next one is firing at %@
Cached values: featureAllowed(%@) featurePromoted(%@). Something is not YES, or we had a server error last time(%@) so fetching from server
Fetched ramp record
Scheduling retry: %@
v36@?0B8B12B16q20@"NSError"28
v24@?0B8B12B16B20
RampStateOverride
Defaults override, returning YES
cachedRampState featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
retryTimer
T@"NSTimer",&,N,V_retryTimer
Not enough time passed since last jettison
Max number of failure occurrences exceeded
Max time since failure occurrence exceeded
Max time or occurrences not yet met
Context has expired
context
T@,W,N
firstOccurrence
T@"NSDate",R,V_firstOccurrence
count
TQ,N,V_count
IMDInconsistency
Setting inconsistency handler
Noticed inconsistency at context %@ (count = %llu)
Resolving inconsistency at context %@
LastJettisonTimeInterval
Finished initialization, last jettison was %@
v32@?0@"IMDInconsistency"8Q16^B24
Enabling timer, since we have inconsistencies we need to check up on
Disabling timer, all inconsistencies resolved
Checking our inconsistencies to see if it's time to jettison state
Too many inconsistencies found in imagent, jettisoning state and starting over (reason: %@)
Inconsistencies aren't bad enough to merit a jettison (reasons: %@)
Removing expired inconsistencies: %@
Unable to create IMFileTransfer from NULL IMDAttachmentRecordRef.
This transfer doesn't have a filename, returning nil.
This transfer doesn't have a guid, returning nil.
Exception raised while attempting to create IMFileTransfer: %@
Created: %@ from attachment record: %@
Unable to create IMDAttachmentRecordRef from nil IMFileTransfer.
Local path: %@, filename: %@
v32@?0@"NSString"8@"NSString"16@"NSString"24
Persisting transfer failed.
Not creating entry in DB for Aux video transfer %@
IMFileTransfer
Creating video complement for transfer %@ at path %@
 ** Error creating video complement for file transfer %@ %@
Created: %@ from imfiletransfer: %@
Updating %@ from %@
 Storing transfer at path: %@
 File eligible for purging: %@
 File NOT eligible for purging: %@, updatedPurgeableState: %@
 ** Not storing transfer
Unable to find an attachment record for guid: %@.
We are downgrading an attachment from finished to waiting accept --> so we've deleted the path on disk and should not store the attachment
Request to store transfer: %@
  => Updating existing : %@
  => Created new : %@
  ** Associated transfer GUID %@ with message GUID: %@
Over ridiing return val in storeAttachment for Aux transfer %@
Request to unassociate transfer: %@ from message guid: %@
Request to update transfer: %@
  => Updating existing: %@ with: %@
  => Found no transfer, storing instead
Not marking path as eligible for cachedelete, cloudkit syncing is not on
Not marking attachment path for cachedelete, last component is Attachments
GroupPhotoImage
Not marking path as eligible for cachedelete, last path component matches group photo file name. path: %@
Not marking attachment path for cachedelete, not in attachment store: %@
pluginpayload
pluginpayloadattachment
Not marking path as eligible for cachedelete, file extension is a plugin payload. path: %@
Not marking path as eligible for cachedelete, file extension is an audio message. path: %@
Request for attachment with guid: %@
Request for attachment with attachmentRecord: %@
updateLegacyTransferGUID failed to get a matching record
updateLegacyTransferGUIDOnMessageIfNeeded got something thats not a IMMessageItem: %@
Re-targeting transfer GUID at %lu to %@
_updateAttachmentGUID completed with success %@
We are updating the in-memory transfer's guid that we will sync to CloudKit in-memory transfer: %@ partKey %lu newGUID: %@
Couldn't find guid %@ in list of fileTransferGUIDs to update; aborting. Body part (id %lu) contains reference to attachment not in DB, and we've updated the transfer to reflect.
Got null attachment record for %@
We may have failed to update a message (guid %@) in the DB, and orphaned its attachments whose GUIDs we just updated %@
Message body attachment attributes update %@!
succeeded
FAILED (maybe)
Request to delete attachments with guids: %@
Request to delete attachment with guid: %@
Request to check if the attachment path is safe: %@
Transfer is group photo? %@ transfer: %@
kCMTimeInvalid
CoreMedia
isSyncing
TB,N,V_isSyncing
isUsingStingRay
T@"IMDCKSyncState",R,N
T@"<IMDCKAbstractSyncControllerDelegate>",W,V_delegate
com.apple.sms
Attempted to create IMDChatRecordRef from NIL IMDChat.
Found chat fork with same groupID (%@) and service (%@) at rowID: %lld
Updating chat with participants: %@
 Adding handle: %@   (%@)
 Removing handle: %@
You passed me a NULL chat record ref. No IMDSavedChat for you!
Archiving chat: %@
No chat record found to archive for chat: %@
Unarchiving chat: %@
No chat record found to unarchive for chat: %@
Blackholing chat: %@
Unblackholing chat: %@
Transfer already exists in transfer center. not overwriting. Transfer: %@
loadAllChatsForChatStore
v16@?0^{_IMDChatRecordStruct=}8
v32@?0@"IMDChat"8Q16^B24
Loading all chats took %f seconds for %lu chats
Lookup failed, NIL or empty message GUID.
Couldn't find chat for message guid: %@
Couldn't find message for guid: %@
Couldn't find chat for message identifier: %lld
Association failed, NIL or empty message GUID.
Association failed, NIL or empty chat GUID.
Associating message guid: %@ to chat: %@
Disassociation failed, NIL or empty message GUID.
Disassociation failed, NIL or empty chat GUID.
chat
-[IMDChatStore deleteChat:]
"Database": ASSERTION FAILED: %s is unexpectedly nil in "%s" at line %d [%@]
"Database": Deleted chat in %f seconds (%@) 
Setting chat isFiltered failed, nil chat guid
MergeIT
Not persisting merge id due to override
Updating handle(%@) from:%@ to:%@
Writing to DB
Done
Reloading chat registry due to merge ID change is disabled
T@"NSString",&,V_lastModificationStamp
messagePTaskStore
T@"<IMDMessagePTaskStore>",&,V_messagePTaskStore
Going to add location item: %@ to the corresponding chats with handleID: %@ hasStoredItem: %@ broadcastChanges: %@
Not sharing location group chat %@
Not sharing location with non-iMessage chat %@
Found matching participant: %@<=>%@ in chat: %@
Storing item: %@
Associating item: %@ to chat: %@
No matching chat found, ignoring
/var/mobile/Library/SMS/CloudKitMetaData/MessageSyncZoneMetaData.db
/var/mobile/Library/SMS/CloudKitMetaData/MessageSyncArchivedRecordMetaData.db
com.apple.Messages.MessageSyncErrorDomain
com.apple.private.IMDCKMessageSyncController
ck-max-number-of-message-batches
 overriding max number of message batches to fetch %@
**** Message %lu CKRecord size exceeds max limit.
**** We hit max number of attempts to creat CKRecords
**** Message [%@] could not be converted to CKRecord, marking it as clean and moving on.
**** Message %@ is too big. Marking it as clean and moving on
We had invalid records attempting to load records again. Attempt count %lu
Error creating message zone %@
***** Timed out creating message zone *******
Wrote message with GUID %@, error %@, recordName:%@
Encountered an unknown error.  We'll try syncing this message again on the next sync. Error code: %llu
Modify message had conflicts or the zone was not found, so treating this as a non error case
_processModifyRecordsCompletion error %@
Kicking off another batch of message writes to cloudKit
We completed writing messages. isLastBatch %@, write error %@, writeSuccess %@
PeriodicMessageSync
BackFillMessageSync
Got %@ records to sync, filtered to %@ unique records
**** We completed writing up messages. No more messages to write up. ***
Number of messages to upload %lu < max batch size. %lu 
**** This is the last batch of messages we will write
Did not schedule a write. Device Conditions suitable to write:%@
Fetched message record with GUID %@
Found parentChatID: %@, updatedLastMessageCount: %d
MessagesUpdated
This is a coreduet sync at currentBatchCount %@, coreduet says to defer syncing
This is a coreduet sync at currentBatchCount %@, coreduet says to continue syncing
Message sync: device conditions allow sync: %@ deviceConditionsToCheck %@ currentBatchCount %@
Message sync: Not checking device conditions for full sync at current batch count %@ isCoreDuetSync %@
Message sync: Not checking device conditions for initial sync at current batchCount %@
Message sync: Stop syncing because feature is not enabled.
archivedMessagesChangeToken
messagesChangeToken
Resetting the archived message sync token to nil
messageSRChangeToken
Resetting the message sync token to nil
processArchivedRecordsFetchCompletionZoneID serverChangeToken %@ moreComing %@ recordZoneError %@
There are more changes to fetch from archived zone. Kicking off another batch of fetching
No more archived records to fetch. Resetting defaults to fetch archived records
Record Zone Error says that the change token has expired
//---** Error fetching archived messages: %@
****** We are done fetching archived messages as max batch attempt limit reached ********
Fetching archived currentBatchCount %@ maxNumberOfBatches %@
******** Fetching archived records ***** sync token is %@
Fetch archived record %@ guid %@
v24@?0@"CKRecordZoneID"8@"CKServerChangeToken"16
** THIS SHOULD NOT GET CALLED WHILE FETCHING ARCHIVED RECORDS **
v36@?0@"CKRecordZoneID"8@"CKServerChangeToken"16B24@"NSError"28
Did not fetch archived records from message zone as device condition does not allow sync
Did not fetch archived records from message zone as no archived hint present
*** Encountered error while fetching archived records %@
*** Did not encounter error while fetching archived records
recordZoneFetchCompletionBlock serverChangeToken %@ moreComing %@ recordZoneError %@ archivedRecordsHintIsPresent %@, currentBatchCount %@ maxNumberOfBatches:%@
Setting shouldFetchArchivedRecords to true
There are more changes to fetch. Kicking off another batch of fetching
Done fetching changes from message zone.
Done fetching changes from message zone during an initial sync. Let's not write up
Done fetching live records. Will now fetch archived records
We got a %@ error while fetching messages. %@
Resetting local message sync state & last sync date after received user deleted zone error
Messages zone does not exist. Attempting to create one
//---** Error creating  messages zone
//---** Error fetching messages: %@
Failed fetching messages %@
_processFetchRecordZoneChangesCompletionWithError with no error
****** We are done fetching live messages as max batch attempt limit reached ********
shouldForceArchivedMessagesSync is YES, fetched max live record batches but will also fetch initial sync archived records if needed: %@
Since we fetched max live batch records, we will not fetch archived records
We completed fetching %@ batches of messages during a full sync, setting fullPartialSyncFirstCompletedDate to %@
Fetching live messages, currentBatchCount %@ maxNumberOfBatches %@
***recordZoneChangeTokensUpdatedBlock should not get called
*** Deleted recordID %@ type %@
Scheduling a fetch operation from message zone, using token %@
Did not fetch changes from message zone. Device condition allows sync %@. Disk Space Available %@
Need to kick off a sync of deletes because we had an incompatible message earlier.
Finished a sync of deletes because we had an incompatible message earlier (%@): %@
Mark all incompatible messages for deletion from cloudkit
_shouldMarkAllMessagesAsNeedingSync %@
Kicking off a message write after fetching messages
Completed message write %@ %@
syncMessagesWithSyncType with type %ld deviceConditionsToCheck %@
Message Sync
*** We were called to do an initial sync. Let's only fetch the first set of messages ***
Marking any unsuccessfully synced messages as needing sync
Finished Marking any unsuccessfully synced messages as needing sync
Done fetching archived records.
 ****** This was an initial fetch. Not writing messages *****
Not calling write messages on second callback from fetch archived records
******** Failed fetching archived messages with CKError %@ completionBlockCalledWhenFetchFailed %@
v24@?0B8B12@"NSError"16
******** Failed fetching live messages with CKError %@ completionBlockCalledWhenFetchFailed %@
v28@?0B8B12B16@"NSError"20
Unsupported sync type
Clearing local sync tokens for Messages
Delete message callback with error %@
Deleted recordIDs %@
Not doing CloudKit message deletes as CK syncing is off
latestSyncToken
T@"CKServerChangeToken",&,N
T@"IMDCKMessageSyncCKOperationFactory",&,N,V_CKOperationFactory
archivedRecordSyncToken
T@"CKServerChangeToken",&,N,V_archivedRecordSyncToken
visitedChats
T@"NSMutableDictionary",&,N,V_visitedChats
encounteredIncompatibleMessage
TB,N,V_encounteredIncompatibleMessage
action
incomingMessageProcessedByDaemon
Exception forwarding to target: %@
_targets
T@"NSMutableArray",&,N,V_targets
_lock
T@"NSLock",&,N,V_lock
aguid
avid
pathc
auxpathc
vers
mimet
IMFileTransfer_CKRecord ***** Failed to write md5 hash of file at path: %@ with exception: %@
Cannot initialize CKRecord using derived record ID because salt is nil.
Initializing CKRecord using derived record ID
Initialed CKRecord %@ for transfer %@ using record data from DB
IMFileTransfer_CKRecord
**** File a radar **** Asset last path component %@ from url %@ is empty
**** File a radar **** Asset last path component from url %@ is nil so cannot save it to metadata
IMFileTransfer_CKRecord **** Transfer did not have URL or asset was missing on disk. URL %@
Transfer file path %@
%@ transfer has an aux video asset
**** File a radar **** Aux asset last path component from url %@ is nil so cannot save it to metadata
No transfer metadata found for record:%@
Moving transfer asset from CK cache to final spot
Failed to move file from %@ to %@, error %@
Created transfer %@, finalAssetPath %@
Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@
Failed to write aux asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@
Failed to write record image asset to %@ GUID:%@
Got IMFileTransfer record with guid %@ with no file name
Invalid record passed to initWithCKRecord %@
Trying to create imfiletransfer ckrecord with guid %@ and filename %@
Invalid record passed to utiTypeForRecord %@
Invalid record passed to sizeOfAssetForRecord %@
Invalid record passed to transferGUIDOfRecord %@
Invalid record passed to attachmentRecordHasAsset %@
Invalid record passed to md5HashForRecord: %@
We didn't have an md5 hash for fetched record: %@
IMFileTransfer_CKRecord ***** Failed to grab hash of file at path: %@ with exception: %@ when validating attachment
IMFileTransfer_CKRecord *** asset was nil for record id: %@
IMFileTransfer_CKRecord *** fileName [%@] or utiType [%@] is nil
We failed to validate md5HashOfCKAsset: %@ md5HashStoredOnRecord: %@
__kIMDReplayControllerErrorDomain
IMDReplayContoller
Request to store replay message %@ type %d
IMDReplayContoller message was nil
IMDReplayContoller Incorrect message type %d
IMDReplayContoller Unable to archive message object: %@
Warning, missing %@ to add to %s
dict
IMDReplayMessageController. Storing message %@ failed with error %@
IMDReplayContoller: Found an empty message payload while replaying
IMDReplayContoller Trying to replay message of unknown type %@ %d
v16@?0q8
IMDReplayController
Request received to replay messages.
Deleting replay DB after replaying messages
deleteReplayDBIfNotUnderFirstUnlock isUnderFirstUnlock %@
Not deleting replay DB
Deleting replay DB on imagent launch after first unlock
Setting up new replay database at path: %@
Unable to setup replayStorageController, previous store controller with database at path %@ remains active
An replay database was already overriding the default, ending previous override
Restoring default replay database
Attempted to restore a database when no override database was set
Starting to recording replay database
End recording replay database
syncTaskByServiceName
T@"NSDictionary",&,N,V_syncTaskByServiceName
heldDeletionContext
T@"IMDReplayStorageIterationContext",&,N,V_heldDeletionContext
automationCompletionBlock
T@?,C,N,V_automationCompletionBlock
storageController
T@"IMDReplayStorageController",&,N,V_storageController
isRecordingReplayDB
TB,R,N,V_isRecordingReplayDB
/var/mobile/Library/SMS/replayDB.db
com.apple.protectedcloudstorage.roll.Messages3
ck-client-max-time-to-defer-nightly-sync
IMDCKSyncController
Max Time to defer from server bag %@
Max Time to defer default value %@
_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch
Posting sync in progress to CloudKit
Last synced date %@ timeInterval %@
Received iCloud Account change notification, updating state
Account status is: %ld. Error: %@
Registering for account notifications
Registered for cloudkit account change notifications
ck-imahd-sync-interval
_IMAHDAgentFallbackInterval %@
Last synced date %@ timeInterval %@, syncNotCompletedRecently %@
Submitting not syncing metric %@
***** Did not submit not sync metrics as string was nil %@
Scheduling nightlySyncTimer. Firing time: in %f sec.
nightlySyncTimer fired, starting to sync.
Got notified from IMAutomaticHistoryDeletionAgent to sync. But NOT Syncing isUnderFirstUnlock %@ isSyncing %@, deviceConditionsAllowSync %@
Ignoring request to kick off of eager sync, since syncing is disabled
attempting to kick off an eager sync in %@ seconds
Kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@
Not kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@
Init IMDCKSyncController
Got notified to kick off a sync due to IMAutomaticDeletionAgent
Not doing account check on launch as device is locked
performInitialSyncOnFirstConnectionOfImagentIfNeeded {hasPerformedInitialSync: %@ hasTriedToEnableCKAndSyncForFirstTime: %@ cloudKitEnabled: %@
This is our first time connecting to imagent on this device (either first time ever or from a restore) and cloudkit is disabled --- will attempt to enable and perform initial sync -- we won't do this again
Request to beginInitialSync
**** Has performed initial sync, or we aren't enabled. Not kicking off initial sync *** | isEnabled %@, hasPerformedInitalSync %@
InitialSync
We aren't ready to perform an initial sync.  We've tried %ld times.  We'll try again in %ld seconds 
We'e tried %ld times to begin an initial sync.  Giving up.
BeginInitialSync
NoManateeOnRestore
*** Manatee keys not available not kicking off initial sync
MissingTLK
MissingTLKNoInitalSync
Restore Fail
IMDCKRestoreDomain
Request to begin chat sync isPeriodic:%@
forceOverrideChatSync
Not syncing chats from xpc activity -- {mocEnabled: %@ syncDeletes as one device only: %@
We synced recently chats not syncing again after coming back online
CoreduetChatPeriodic
ManualChatSync
We dont have manatee TLK. Not kicking off chat only sync
Request to determine if we should mark all incompatibleMessagesForDeletion, set version (%ld) current version (%d)
Request to begin full sync CoreDuet Sync:%@
CloudKit allows sync, beginning periodic sync attempt 0
CoreduetFullPeriodic
ManualFullSync
Set state full sync activity result %d
ck-stop-online-sync
ck-chat-sync-interval
_minimumChatComingOnlineSyncInterval %@
Last coming online chat sync date %@
Server override prevents us from syncing chats when coming back online
ck-block-single-device-limitation
The server is not allowing us to block chat syncing for iMessage accounts with only one device: %@
Number of devices for iMessage account: %@
Cleaning up tombstone table as CloudKit syncing is off
Request to beginChatSync from coming back online
Not syncing chats from coming back online -- syncing deletes only -- one device for this iMessage account
Proceeding with coming back online sync
ComingBackOnlineChatSync
kickOffCloudKitSyncIfNeededOnImagentLaunch using the Manatee container: %@
disableSyncRetryOnCrash
Not attempting to kick off periodic sync as we are under first unlock AND/OR we have a defaults set com.apple.madrid disableSyncRetryOnCrash
Crashed with an in-flight IMAHD sync timer in flight
Not kicking off a sync as this is a periodic sync and coreduet should decide whether to kick off a sync again
CrashedDuringSync
duringPeriodicSync
We were in the middle of a manual sync and we respawned.
duringManualSync
Is charging %@ , isOnWifi %@
We are on power and wifi. Kicking off a sync
ContinuingManualFullSyncAfterLaunch
NOT Kicking off a periodic sync after we got back as we are not on battery and wifi
Not kicking off a sync as there was no sync in progress or we hit max limit attempts of sync
IMDKCSyncController
We came back up after crashing during a restore. Logging metric %@
clearLocalCloudKitSyncState
ResetSyncDate
disable-mic-ui-refresh-during-sync
RefreshConversationList
Server disallows refreshing UI while syncing
disable-mic-ui-refresh-timer-during-sync
Server disallows refreshing UI while syncing using timer
Setting up a timer to reload the UI
Refreshing UI after time because device is unlocked
Not Refreshing UI after time because device is locked
Invalidating reload timer.
Refreshing UI after unlock
Requesting last sync date for metrics: %@
Last sync was within the last 3 days
Last sync was not within the last 3 days
Last sync was not within the last 7 days
Last sync was %li days.
Requesting last complete synced DB date for metrics: %@
Last complete synced DB date was within the last 3 days
Last complete synced DB date was not within the last 3 days
Last complete synced DB date was within the last 7 days
Last complete synced DB date was not within the last 7 days
Last complete synced DB date was %li days.
Dumped logs in past hour
Dumped restore failure logs in past hour
Current hour %@
Deleted restore failures directory at path %@
Failed to delete restore failures directory at path %@ with error %@
Dumping restore failure logs
Feature is on, time to send restore failure logdumps, found %@ to send
RestoreFailuresDump
Sending restore failure log (guid %@) at path %@ to recipient %@
Checking we whould send logs. allowedToSendLogs %@ withinAnHourOfLogDumpHour %@ hasDumpedRestoreFailureLogsInPastHour %@
It is dump log time but feature is off, deleting restore failures directory
Not auto dumping Restore Failure MOC logs withingLogDumpHour %@ hasDumpedLogsInPastHour %@ lastLogDumpTime %@
Checking if we need to dump logs using LastErrorDate:%@ and LastSyncDate%@
We haven't reported any errors in the last 24 hours and haven't syned.  Dumping logs 
NoSyncFor24Hours
Not auto dumping MOC logs withingLogDumpHour %@ hasDumpedLogsInPastHour %@ lastLogDumpTime %@
Beginning initial new device sync with CloudKit. , attemptCount %@
Max attempts to sync due to recoverAble error exceeded
Messages: Failed syncing to CloudKit please file a radar
Retry
Successfully synced chats after new device bringup
Successfully synced messages after new device bringup
Successfully synced attachments after new device bringup
Failed syncing attachments with error %@
Failed syncing Messages attachments, please file a radar
Failed syncing messages with error: %@
MessageSync
Failed syncing Messages, please file a radar
IMDCKSyncDomain
Failed synced chats error %@
 Not posting restore rate metrics for zone not present
Failed syncing Messages Chats, please file a radar
Not nuking CK Data from watch
Attempting periodicSync for attemptCount %@ so setting fullSyncAttempted date.
We need to dump logs after syncing
LowSyncStats
We don't need to dump logs
Log metrics for successful sync if mic is enabled
First full sync is complete, noting down date %@
****** Manatee keys not available. Not syncing %@ ******
NoManateeOnFullSync
MissingTLKNoSync
Doing an attachment metadata only sync before we continue with the full sync
Attachment metadata only sync failed with error: %@
Attachment metadata only sync succeeded
First full sync has completed - lets just do a normal sync flows
Initiating full sync with CloudKit. Core Duet Sync %@, attemptCount %@, deviceConditionsToCheck %@ useStingRay %@
Asked to sync to sting ray but we are not allowed to do so
stopManateeSync
Asked to sync  to Manatee but we are not allowed to do so
Max attempts to sync due to recoverable error exceeded
FullMessageSync
RetryAttemptExceeded
Successfully synced chats
Successfully synced messages
Successfully synced attachments
Kicking off another sync for recoverable error %@ , with interval %@
Kicking off delete sync to CloudKit
Done deleteing chat with error %@
ChatDeletionComplete
Done deleteing messages with error %@
MessageDeletionComplete
Done deleteing attachments with error %@
AttachmentDeletionComplete
Request to sync all chats
Synced chats with success:%@
Done syncing deletes, setting sync state to finished
Ramping says we are allowed
Unable to check exit zone record Error: %@
We are downgrading the security level, downgrade date %@, we should download all attachments from nonHSA2ManateeDatabase
Entered exit zone at %@. Aborting sync, downloading all attachments. {shouldDownloadAssets: %@}
Not in exit state, continuing sync
** We are already performing a sync.  Ignoring current request to sync.
 Syncing Self:%@ Chat:%@ Message:%@ Attachment:%@ Exit:%@
Cache says featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
The ramp cache says we are not rampped.  Let us try to fetch the ramp state one more time.
fetchedFeatureAllowed: %@ fetchedFeaturePromoted: %@ fetchedFeatureVisible: %@ secondFetchHadServerError: %@
IMDCKSyncControlelr
We were ramped in on second fetch -- continuing
We were not ramped in or encountered another error trying to fetch the ramp state. Failing
v28@?0B8B12B16B20B24
Could not fetch salt, aborting cleaning up MOC
v20@?0B8Q12
Successfully synced attachments after downgrading security level, clearing IMCloudKitAppleIDSecurityLevelDowngradeDate
NSDebugDescription
Noting down sync started. Initial value Key %@ value %@
Noting down sync started. After setting value Key %@ value %@
IMDCKSyncController: We started a second sync before a previous one was finished.  Likely there is an exit path that isn't calling _noteMeticsForSyncEndedWithSuccces
Started by %@, running since: %@:
LongRunningSync
Noting sync ending
_periodicSyncAttemptCount %@
_manualSyncAttemptCount %@
Chats, messages, and attachments have synced successfully, sync time: %@ usingManatee %@
Updating sync date for Manatee sync %@
NOT Updating sync date for SR sync %@
We completed downloading all content after a restore
Wrote sync date success to CloudKit %@ error %@
Request to syncChats from XPC
sync-state-user-defaults
sync-statistics-from-database
assembled sync state debugging info: %@
IMDCKUtilites
Handling event with name %@ userInfo %@
Got user signed into HSA2 account notification
exitRecordDateWithCompletion in updateDowngradedDateIfNeeded failed with error: %@
Finished updating security level with error: %@
Handling AKUserInfoChangedNotification with user info: %@
Account level changed to %@
We are downgrading from HSA2 -- turning off messages on iCloud
Account level changed to unknown, not turning off messages in iCloud or refreshing values associated with IMCloudKitAppleIDSecurityLevelHSA2.
Finished checking for possible security level downgraded with error: %@. Broadcasting new state if needed.
iCloud and iMessage account match up ? %@
iCloud and iMessage accounts do not match up. Turning off MOC
Messages in iCloud not available
Messages in iCloud not available as iCloud and iMessage accounts do not match
Messages in iCloud is not available because iCloud and iMessage accounts are different.
Messages in iCloud not available due to mismatched accounts alert
OK Button Title
com.apple.IMDCKSyncController
performOneTimeAccountUpgradeCheckIfNeeded
Will performing MOIC account check on upgrade after %f seconds
Clear analytic defaults and local sync state
version
User has completed a first full sync so device has started doing periodic syncs. Logging full periodic sync metric.
completedPeriodicSyncSinceFirstFullSync
analytic-zone-periodic-sync-logging-not-allowed
analytic-zone-daily-state-logging-not-allowed
Not logging analytics
dailySyncState-
Device will be uploading %@ analytic dict %@ to CK. CreatedZones: %@ DeletedZones:%@
Not uploading daily sync state.
Will be uploading dailySyncState-PeriodicSync analytic dict %@ to CK.
dailySyncState-PeriodicSync
Not uploading periodic sync activity.
syncStartDate
T@"NSDate",&,N,V_syncStartDate
longRunningSyncTimer
T@"NSTimer",&,N,V_longRunningSyncTimer
nightlySyncTimer
T@"IMTimer",&,N,V_nightlySyncTimer
initialSyncAttempts
Tq,N,V_initialSyncAttempts
lastLogDumpDate
T@"NSDate",&,N,V_lastLogDumpDate
lastRestoreFailureLogDumpDate
T@"NSDate",&,N,V_lastRestoreFailureLogDumpDate
shouldReloadConversations
TB,V_shouldReloadConversations
reloadTimer
T@"NSTimer",&,V_reloadTimer
Received key roll pending state did change event notification
Handling Backup State Did Change
We did not have an IMDCKSyncController when trying report _PCSBackupStateDidChange
Handling Test Backup State Did Change
We did not have an IMDCKSyncController when trying report _PCSTestBackupStateDidChange
Handling Successful Keyroll from Backup
We did not have an IMDCKSyncController when trying report _PCSBackupStateKeyrollSuccessful
Handling Pending Keyroll Notification
We did not have an IMDCKSyncController when trying report _PCSPendingKeyroll
Handling TLK keys available notification, name: %@, userInfo: %@
com.apple.private.Messages.IMMessagesToTrack
recentMessageIDs
T@"NSMutableOrderedSet",&,N,V_recentMessageIDs
internalQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_internalQueue
maxNumberOfMessages
currentNumberOfMessages
Registering chat identifier: %@   style: %d  hash: %@ handleInfo: %@ lastAddressedHandle %@ lastAddressedSIMID %@
 => Found chat, but it had no particpants. Updating with handleInfo: %@
********** Created bad chat: %@ *************
1:1 chat identifier mismatch
 => We already have one, nothing to do here. Chat: [%@]
Is chat (%@) registered locally: %@  registry: %@  hash:%@  chats: %@
Session unregistering chat identifier: %@   style: %d
Failed to canonicalize chat identifier
Failed to find chat for hash hash %@ with chatIdentifier: %@, style: %c
Updating account ID from: %@ => %@
v28@?0B8@"IMMessageItem"12@"IMMessageItem"20
  => Message was stored. Input: %@   Output: %@
  => No result? Using the requested message: %@
com.apple.imessage
DropSendingMessage
 ** DropSendingMessage is enabled, failing send message
Not sending message up to client because this message is being retried. Guid %@
Removing message: %@   from chat: %@ due to send on different service
v16@?0@"IMMessageItem"8
Not sending delivery receipt
Not handling, subclass for iMessage should handle
Chat_GroupPhoto
Not requesting group photo, subclass for iMessage should handle
Did leave chat: %@  style: %c setting state: %d
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@ lastAddressedHandle %@ lastAddressedSIMID %@
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@  category %ld extensionName %@
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@
error: %d  message: %@  force error: %@
Found old message: %@  for error: %d
Updated message: %@
Message is already delivered, and we're not forcing an error here (%@)
Unable to mark error: %d, no messages found for guid: %@
message: %@
Found old message for read receipt: %@
Unable to mark send of read receipt, message is on a different service: %@ vs %@
Unable to mark send of read receipt, no messages found for guid: %@
Found old message for played receipt: %@
Expire received message played on local device: %@
Unable to mark send of played receipt, message is on a different service: %@ vs %@
Unable to mark send of played receipt, no messages found for guid: %@
Found old message for saved receipt: %@
Unable to mark send of saved receipt, message is on a different service: %@ vs %@
Unable to mark send of saved receipt, no messages found for guid: %@
   Found message from chat: %@
   Message was already marked as delivered, ignoring
   Message was already marked as black holed, ignoring
Found old message for delivery receipt: %@
MessageService
Received delivery receipt for message: %@
Delivery receipt time was: %f
MessageLogStatistic
FTServices
Message had error: %d
Updated message: %@  had error: %@
B8@?0
MessageSuppression
No message found for guid: %@ to mark as delivered, trying again in a bit
Second to last try, waiting longer
Last try, waiting a lot longer
No message ever found for guid: %@ to mark as read, bailing
Found chats to mark as read: %@
Updating local chat (fromMe: %@): %@
Returning early in _didReceiveMessageReadForMessageID because !_activated
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageReadForMessageID:date:attempts:useMessageSuppression:completionBlock:]
Returning early in _didReceiveMessageReadForMessageID because messageID: %@, [[self service] supportsDatabase]: %@, service: %@
Found chats for messageID: %@   chats: %@
Found no chats for messageID: %@
Found chat for messageID: %@, chat: %@
Received reflected read receipt. Setting suppression flag for chat %@
Noting received reflected read receipt for: %@ (%@)  (self: %@)
Remaining messages: %@
  Also adding message: %@
  Skipping message: %@
No message found for guid: %@ to mark as read, trying again in a bit
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:]
Found chat for messageID: %@   chat: %@
Unable notify about message, message is on a different service: %@ vs %@
Unable notify about message, no message found
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessagePlayedForMessageID:date:attempts:useMessageSuppression:completionBlock:]
Received reflected played receipt. Setting suppression flag for chat %@
Noting received reflected played receipt for: %@ (%@)  (self: %@)
No message found for guid: %@ to mark as played, trying again in a bit
No message ever found for guid: %@ to mark as played, bailing
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessagePlayedReceiptForMessageID:date:attempts:completionBlock:]
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:useMessageSuppression:account:completionBlock:]
   Message was already marked as saved, ignoring
Received reflected saved receipt. Setting suppression flag for chat %@
Noting received reflected saved receipt for: %@ (%@)  (self: %@)
v16@?0@"IMItem"8
Stored item: %@     Actually stored: %@
Posting received message: %@
Item was not stored, ignoring
v28@?0B8@"IMItem"12@"IMItem"20
Message with guid %@ has been deleted!
No message found for guid: %@ to mark as saved, trying again in a bit
No message ever found for guid: %@ to mark as saved, bailing
-[IMDServiceSession(IMDServiceSession_Chat) didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:]
Not notifying for message: %@   this is a typing indicator, and we've already stored a completed message
Not notifying for message: %@   this is a typing indicator, and it failed
Automatically saving message sent from local device: %@
Expire message sent from local device: %@
Updating date on message guid %@ to be: %@
Updating isFiltered to NO, replying to chatId: %@
Posting sent message: %@
"Database": Replacing previous message acknowledgements with new acknowledgment for sent message; sender: '%@':'%@'
-[IMDServiceSession(IMDServiceSession_Chat) notifyDidSendMessageID:account:shouldNotify:]
Updated sent message: %@   duration: %@
Unable notify about message, no messages found for guid: %@
Noting messages for chat GUID %@ marked as read
Suppressed messages now marked as read: %@
Cleared suppression flag for chat %@
Watch has chat %@ with read timestamp  %@ in suppression beyond timer, removing from suppression
%@ ending message suppression for all outstanding timers: %@
v32@?0@8@16^B24
%@ _endMessageSuppressionForChatGUID: %@
Found old message: %@
Removed read flag: %@
Updating chat: %@
Message is already not read: %@
Message suppression timer fired for chat guid %@
Setting suppressed message: %@
Can't delete on this service %@
name: %@   fromID: %@  toIdentifier:%@  identifier: %@ style: %d
Ignoring name update, already the current name
The existing message was read, let's mark the new one is read
The existing message has a time: %@, so lets set the new message to have the same time
We are setting the reply to guid for message %@ to be %@ as a reply to guid has not been set
Assigning sort id %@ to message %@ for chat %@
messages: %@
Chat's last read message time date (%@) guid (%@) timestamp: (%@) Messages time date (%@) timestamp: (%@)
Setting message as read as incoming message is older than the chat's last read message time
Marking message as failed due to preflight rendering
v12@?0I8
Automatically saving message sent from linked device: %@
Expire message sent from linked device: %@
Found existing message: %@
Date last call ended: %@
Looking for a similar message %f seconds back
Found similar message? %@
Bailing, we had a similar message: %@
Service was SMS, let's move it over to iMessage
Broadcasting service update for message with GUID %@ after suppression
*** Bailing, we already had a finished message for this in the database. ***
Should suppress message: %@
Found suppression timer %@ for chat %@
message-suppression-timer %lu
Suppressing message: %@
Setting suppressed message flag: %@
The input message disagrees with the "from me" attribute, creating a new message ID
@"IMMessageItem"16@?0@"IMMessageItem"8
No timing information available for incoming message processing with guid %@
  Ensuring the app is alive here
Stored message: %@     Actually stored: %@
"Database": Replacing previous message acknowledgements with new acknowledgment for received message; sender: '%@':'%@':'%@'
Message was not stored, ignoring
Updating invitation message after DB store: %@
Invalid chat identifier, ignoring
Chat: %@  status update: %d  style: %c lastAddressedHandle %@ lastAddressedSIMID %@
Chat: %@  member: %@ from member: %@ unformated: %@ country: %@ status update: %d  style: %c
Storing participant leave: %@
Storing %@ participant change item  %@ => %@
invite
remove
Hawking: New participant (%@) added to chat (%@) is a known contact.
Hawking: New participant (%@) added to chat (%@) is not a known contact.
_CDSpotlightItemRecorder
CoreDuet
Going to remove chat guid from core duet %@
done deleting searchable items with domain identifiers %@. success %@ error %@
No chat to update downgrade properties for.
Handling routing dictionary: %@
Chat: Got a missing service in routing dictionary for GUID (%@): %@
Chat: could not find a session to route message GUID: %@
Chat: Could not re-route missing message GUID: %@
Chat: Could not find a chat for message: %@
Not routing message (%@) because it is not sent and has no error, not a candidate for routing
Re-routing message (guid:%@):%@   chat:%@   service:%@   session:%@
No chat registered, creating on one on service %@  identifier: %@   style: %c  (Chat: %@)
Generated handle info: %@ for group chat: %@
Found iMessage chat [%@], will use lastAddressedHandle %@ lastSIMID %@
No iMessage chat found for chat identifier: %@
Chat: could not find iMessage session to find iMessage chat.
Chat already exists for the other session, nothing to do here: %@
Sending message to session: %@  chatGUID: %@
v24@?0@"NSDictionary"8d16
Scheduling a routing check with interval: %f
message-routing-timer
Handling expire state dictionary: %@
Chat: Could not expire missing message GUID: %@
Not deleting message (%@) because was already saved
Not expiring message (%@) because its expire state %d is already %d
Expire message (guid:%@):%@   chat:%@   session:%@
   delete expired messages: %@
   deleted expired messages: %@
Don't schedule expire state check with interval: %f, one is already scheduled with interval: %f
Scheduling an expire state check with interval: %f
message-expire-state-timer
Handling watchdog dictionary: %@
Chat: Could not watchdog missing message GUID: %@
Don't schedule watchdog check with interval: %f, one is already scheduled with interval: %f
Scheduling a watchdog check with interval: %f
message-watchdog-timer
Going to user user notifications to notify for urgent messages
Scheduling a storage invalidation timer in: %f
We have pending read receipts to process after storage timer fired
Storage timer fired, guids we need to process: %@
Chat: Missed lastItemProcessed.  This time is likely off by the last storage timer
Noting suppressed item updated while processing messages from storage (%@)
Noting item from storage (%@)
This is the first item from stroage starting timer
ProcessingMessagesFromStorage
Noting last item from storage (%@)
Finished processing %lu items from storage%@
Incremented pending read receipt to %lu
Decremented pending read receipt to %lu
Setting pending read receipt to %lu
Storing message: %@
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/Messages-1125.19.0.3/IMCore/IMDaemonCore/IMDServiceSession_Chat.m
void _IMDStoreMessage(IMDService *__strong, IMMessageItem *__strong, BOOL, BOOL, BOOL, BOOL, FZMessageFlags, __strong _IMDMessageStoreShouldStoreBlock, __strong _IMDMessageStoreDidStoreBlock, __strong _IMDMessageStoreCompletionBlock)
_IMDStoreMessage
Unexpected false '%@' in %s at %s:%d. %@
[resultMessage isKindOfClass:[inMessage class]]
input and output message types are not the same. input message has type %@. output message has type %@
  => Result message: %@
Set avatar likeness data for message %@
Set biz intent data for message %@
Set locale data for message %@
Set meCard sharing preferences data for message %@
%@;%c;%@
Found messages guids to mark as read: %@
Notifying about messages: %@
Found message to mark as played: %@
Automatically saving received message played on linked device: %@
Expire received message played on linked device: %@
Found chats to mark as played: %@
Notifying about message: %@
Found message to mark as saved: %@
Found chats to mark as saved: %@
  => Result item: %@
IMTransferServicesController_Preview
Generating preview OOP with tmpURL %@ finalURL %@ previewURL %@ maxWidth %f scale %f
IMTranscoderAgent OOP generation completed with error %@
OOP preview generation failed in imagent with error %@
Storing size value %@ for previewURL %@
Transcoder Preview Generation Failure
IMPreviewGeneratorDomain
Timed out getting preview from IMTranscodeController in imagent
Not pregenerating preview, no persistedPreviewURL
Not pregenerating preview, utiSupported %@ aux Video %@, calling completion directly
Generated preview, success %@ error %@
v44@?0@"NSString"8B16{CGSize=dd}20@"NSError"36
receiveFileTransfer: completed, will generate preview for transfer %@
Not pregenerating preview, downloadSucceeded %@ generatePreview %@
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
com.apple.MobileSMSPreview
IMFailPreviewGeneration
Initial sync device conditions check if CloudKit sync is enabled: %d
Initial sync device conditions ignoring feature enabled: always TRUE
Initial sync. Not writing up attachments
syncToken
T@"CKServerChangeToken",&,N,V_syncToken
IMDMessageHistorySyncController
ReplayController requested a history Sync
ReplayController already has sync in flight ignoring request
IDS Transport Log requested a history Sync
IDS Transport Log already has sync in flight ignoring request
Cloudkit Chat Controller requested a history Sync
Cloudkit Chat Controller  already has sync in flight ignoring request
Checking if any sync task need to be started
Already performing a sync task, waiting for that to complete before kicking off the next task
Starting Sync
Finished Sync
v16@?0Q8
No Message History to sync.
Will check in %u seconds if another sync needs to be done
replayControllerNeedsSync
TB,N,V_replayControllerNeedsSync
ckChatSyncControllerNeedsSync
TB,N,V_ckChatSyncControllerNeedsSync
idsTransportLogNeedsSync
TB,N,V_idsTransportLogNeedsSync
currentlyExecutingSyncTask
T@"<IMDMessageHistorySyncTask>",&,N,V_currentlyExecutingSyncTask
syncTaskFactory
T@"<IMDMessageHistorySyncTaskFactory>",&,N,V_syncTaskFactory
/var/mobile/Library/SMS/CloudKitMetaData/ChatSyncZoneMetaData.db
com.apple.Messages.ChatSyncErrorDomain
com.apple.private.IMDCKChatSyncController
************ CREATING CHAT LOCK RECORD **************** OH BOY **************
changeToken
SRChatChangeToken
**** Do not call -[IMDCKChatSyncController _chatsToUpload] on main thread *******
Error creating chat zone %@
***** Timed out creating chat zone *******
per record completion block record %@ changeTag %@ error %@
We are setting the lock record on the callback for processing records
We got back error [%@] on the lock record, setting the lock record to nil to re-generate on next sync
Error %@ while writing up record %@ 
Extracted record from server error%@ 
Got a conflict while fetching lock record %@
modifyRecordsCompletionBlock error %@
Number of records saved %@
We got back that we have exceeded quota in chat sync -- failing to continue writes
We only had partial error and the whole batch failed 
lock record is present amongst chats
******** LOCK RECORD IS NOT PRESENT ******
We failed to sync Chats due to op lock Not doing ABC %@
Number of chats to write up %@ (sr:%@)
Chat to sync up %@
This is the last batch of chats to write up
Adding lock record %@
Kicking off another batch of chats to write up (sr:%@)
*** This was the last batch of chats to write up. Done writing up chats
**** Error %@ writing chat records %@ to cloudKit *****
No chats to sync up at this moment
No completion block to call
Creating a fetch chat record operation using sync token %@ for zone %@ limit %@
**** _processRecordDeletion:Dropping delete as IDS syncs it real time. ***
** We got the lock record %@ **
_processRecordChanged changed recordID:%@ for ChatGUID %@
ChatsChanged
Kicking off chat write
Not writing up chats as sync type does not allow it
We got a %@ error while fetching chats. %@
Resetting local chat sync state & last sync date after receiving user deleted zone error
Attempting to create chat zone
Attempting to create chat zone so setting createdChatZone BOOL to YES
** Failed to create chat zone **
We completed fetching changes from chat zone with no error
We got an expired server change token back so resetting local sync state, and fetching the chats again %@
********* We got an error fetching changes from chat zone %@
Resetting the sync token to nil
Scheduling a fetch chat zone changes operation %@ (sr:%@)
chatExistsWithCompletion (batch size %d)
ChatsExistCheck
Fetched record %@
Completed query %@ with error: %@, foundRecord: %d
Scheduled fetch changes operation to check for the existence of a single chat with identifier: %@ (batch size %d)
chat sync controller checking eligibility
Received error checking eligibility: %@
Returning cached value: %@
_shouldMarkAllChatsAsNeedingSync %@
IMCKChatSyncController
Resetting fetched chats bool to NO
Starting chat sync attempt count %@
Exceeded number of chat sync attempts
Chat Sync
**** Not Eligible For Truth Zone, but earlier we were able to fetch the chat zone. Something is up! ****
Syncing chats in new device bring up scenario
Chat sync error %@
*********** we failed to sync Chats due to op lock %@, kicking off another chat sync
Not syncing chats due to missing defaults. Please do following as mobile and try again - defaults write com.apple.madrid enableCKSyncingV2 YES
Marking all chats as dirty
_handleChatDeletionCompletionForRecordIDs error %@
Deleted chat with recordID %@
Error deleteing chats from CloudKit %@
CloudKit Syncing is disable
com.apple.IMDCKChatSyncController
Got %lu recordIDs to sync, filtered to %lu unique recordIDs
No pending chats at this moment
***** WE should not get record completion block in delete operation
T@"CKServerChangeToken",&,N,V_latestSyncToken
T@"IMDCKChatSyncCKOperationFactory",&,N,V_CKOperationFactory
lockRecord
T@"CKRecord",&,N,V_lockRecord
manateeLockRecord
T@"CKRecord",&,N,V_manateeLockRecord
stingRayLockRecord
T@"CKRecord",&,N,V_stingRayLockRecord
fetchedChatsDuringLastSync
TB,N,V_fetchedChatsDuringLastSync
chatLockRecordName
chatLockRecordType
lRKey
IMDMessageHistorySyncNotifyReplayControllerWantsSync
IMDMessageHistorySyncNotifyCKChatSyncControllerWantsSync
IMDMessageHistorySyncNotifyIDSTransactionLogWantsSync
task_flags
T@"NSString",R,N,V_guid
taskFlags
TQ,R,N,V_taskFlags
/var/mobile/Library/SMS/Stickers
IMDStickerRegistry
Deleting legacy Sticker folder at path %@, error %@
Initialized IMDStickerStore
_isRecipeBasedSticker invalid properties
Retrieve sticker with properties %@, completionBlock %@
IMDStickerRegistry. No completion block passed in.
sticker found in cache %@
Received ME-sticker from balloon %@
IMDStickerRegistry. Failed retrieving sticker me-sticker with error %@, outputURLS %@
Received transcoded output from balloon bundle id %@ path %@
v40@?0@"NSArray"8@"NSString"16@"NSError"24B32B36
Sticker not found in cache
Invalid sticker properties passed to retrieveStickerWithProperties %@
stickerPackGUIDToPackMap
T@"NSMutableDictionary",&,V_stickerPackGUIDToPackMap
com.apple.private.IMDaemonCore.IMDStickerRegistry
typing-indicator-cleanup
IMDRecents
 Found expired session for %@, pruning
Removing expired sessions: %@
   We still have live sessions (%@) extending timer
 => It looks like we've recently communicated with %@, expires on %@
 => We have no ongoing session to %@
 * Noting message session for %@, will expire at %@
Nil device %@ or handle %@ passed to updateLatestActiveDevice
 => We have expired
Tried to change property %@ with nil buddy ID
Tried to change empty property for buddy ID: %@
Tried to change IDProperty for buddy ID: %@   bailing
IMDServiceSession_BuddyList.m
Too many calls to [IMDService endBuddyChanges]!
allBuddies
T@"NSArray",R,&,N
buddyPictures
Tried inserting a nil MessagePTask into store.
Unable to retreive MessagePTask from store.
Error while trying to delete completed processing task
Tried to store nil IMDMessagePtask
Error while trying to update processing task: %@
Keychain
Abandoning password fetcher with request ID: %@  session: %@
No pending password fetch requests for session: %@
IMDServiceSessionBase
/*-------calling into leaveiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into invitePersonInfoToiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into sendGroupPhotoUpdate from legacy service session, please file a radar-------*/
/*-------calling into retryGroupPhotoUpload from legacy service session, please file a radar-------*/
/*-------calling into removePersonInfoFromiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into closeSessionForChat from legacy service session, please file a radar-------*/
/*-------calling into sendNicknameUpdatesToPeerDevices: from service that doesn't support it. File a radar-------*/
/*-------calling into sendNicknameInfoToChatID: from service that doesn't support it. File a radar-------*/
__kIMDReplayMessageStorageControllerErrorDomain
deleteContext
T@"IDSKVDeleteContext",&,N,V_deleteContext
passing in nil filePath to initWithFilePath
IMDReplayStorageController
IMDReplayStorageController was asked to store nil dictionary
Deleting replay db with path %@
store
T@"IDSKVStore",&,N,V_store
filePath
T@"NSString",R,&,N,V_filePath
IMDCKInitialMessageSyncController
Initial sync device Not writing up messages
UserInfo
IMDXPCEventStreamHandler
%@ received event with name %@ and user info %@.
delegateToQueue
T@"NSMapTable",R,N,V_delegateToQueue
__ksFirewallUserNotificationIdentifier
RememberPassword
Not Connected
Unexpectedly disconnected
Disconnecting...
Connecting...
Connecfted
-[IMDServiceSession disallowReconnection] %@
Auto-Reconnect Request: %@:%@
Auto-Reconnect failed (Network conditions don't allow it): %@:%@
Reconnecting account: %@:%@
Do Login: %@:%@  (serviceLoginStatus: %d)
Ignoring Login: %@:%@  (serviceLoginStatus: %d)
_login_serverSettingsReadyWithAccount: %@:%@
The account name or server is not valid.
Error message: Invalid Jabber account name or server
  setting service status to disconnected, account or server is invalid
****** No IMConnectionMonitor for login of account: %@
A network error occurred.
Alert message: network error
_data_connection_ready: %@:%@
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
_login_usernameAndPasswordReady: %@:%@
_login_checkUsernameAndPassword: %@:%@  has pass: %@   bad pass: %@
_login_checkUsernameAndPassword: connectionMonitor says we're not reachable
Skipping login, we're not activated
Strange, we're here, but already logged in
Building password notification dialog for: %@   (has pass: %@   has login: %@  bad pass: %@)
v76@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56B64B68B72
autoLogin: %@:%@
Login request: %@:%@ (Setting should reconnect flag = YES)
-[IMDServiceSession logoutServiceSession]: %@, account:%@
-[%@ logoutWithAccount:%@] (activated = %@)
Tried to logout: %@  but we're not supposed to, reflecting this!
<<Connected>>
** %@: clearing _shouldReconnectFlag at logout
%@: Login status changed to %@ (%@)
__kIMDBadgeUtilitiesLoginStatusChangedNotification
-[IMDServiceSession _autoReconnectTimer]: %@
 => Network appears to be up, we'll try to auto reconnect
 ** Network does not appear to be up, we'll skip this attempt
-[IMDServiceSession _clearAutoReconnectTimer]: %@
<%@:%@:%@>
[%@: <%@:%@:%@:%@>]
T@"NSString",&,N,V_id
unformattedID
T@"NSString",&,N,V_unformattedID
countryCode
T@"NSString",&,N,V_countryCode
handleInfo
T@"NSString",&,N,V_personCentricID
CNContactID
T@"NSString",C,N,V_CNContactID
IMDServiceSesssion. ******* We tried replaying message %@ via IMDServiceSession 
IMDServiceSesssion. ******* We tried adding a completion call back via IMDServiceSession
IMDServiceSesssion. ******* We tried adding a TransactionLogSyncTask via IMDServiceSession
ogid
name
filt
sqry
prop
ptcpts
*********Cannot create record without a salt
@"NSData"16@?0@"IMDHandle"8
@"IMDHandle"16@?0@"NSData"8
applying changes on chat %@ 
Local last read timestamp %lld record last read timestamp %@
Is local copy of chat:%@ in sync with CK? %@
Chaning SR record change tag from %@ to %@, and cloudkit record id from %@ to %@
Applying ecord change tag %@, cloudkit record id %@ changes
IMDBadgeUtilities
-[IMDBadgeUtilities updateBadgeForUnreadCountChangeIfNeeded:]
Unread count changed from %d to %d
-[IMDBadgeUtilities _postBadgeNumber:]
Call notification center to post badge number %@
-[IMDBadgeUtilities _postBadgeNumber:]_block_invoke
Notification Center post badge number with error: [%@]
-[IMDBadgeUtilities _postBadgeString:]
Call notification center to post badge string %@
-[IMDBadgeUtilities _postBadgeString:]_block_invoke
Notification Center post badge string with error: [%@]
StoreDemoMode
com.apple.demo-settings
notificationCenter
T@"UNUserNotificationCenter",&,N,V_notificationCenter
sharedDefaultsInstance
T@"IMDefaults",&,N,V_sharedDefaultsInstance
v24@?0@"TUConversation"8^B16
ChatRegistry_CallManagement
Persisting conversation as an item: %@
** --- We did not find an iMessage group to store the TU call bubble in TUConvo UUID: %@ TUConvo groupID: %@
lastTUConversationCreatedDate
Storing conversationItem: %@ for chat %@
Conversation initiator handle value %@
Callback for conversation state changing conversation %@
We already have a TU Conversation item for this UUID: %@ item: %@
CKRecordUtilities
Computed message record name hash %@ from guid %@ and salt %@
Could not compute message record name hash %@ from guid %@ and salt %@ as one or both are nil
+10000000000
R:US
writeAccountDefaults - Started with %@ as the login ID
writeAccountDefaults - Setting %@ as the login ID
writeAccountDefaults - Removing login ID %@
<IMDIDSAccount:%p, ID:%@, idsAccount:%@ >
idsAccount
T@"IDSAccount",R,&,N,V_idsAccount
Adding registration delegate for account %@
P:%@
E:%@
Unknown account type %d for login %@, can't build loginID
IMDAccount added %@, adding corresponding IDSAccount %@
IMDAccount removed %@, removing corresponding IDSAccount %@
Enabling IDSAccount %@
Disabling IDSAccount %@
Received account added %@
Received account updates %@
Received accountRemoved %@
** Received account removed for account: %@, but we can't find an account for it
Received accountEnabled %@
** Received account enabled for account: %@, but we can't find an account for it
Received accountDisabled %@
** Received account disabled for account: %@, but we can't find an account for it
IMDIDSService received registration status changed: %@ (%@)
IMDIDSService received aliases changed to %@: %@ (%@)
IMDIDSService received vetted aliases changed: %@ (%@)
IMDIDSService received profile changed to %@: %@ (%@)
IMDIDSService received login changed to %@: %@ (%@)
IMDIDSService received display name changed to %@: %@ (%@)
 => Registration failed, deactivating...: %@ (%@)
IMDIDSService received refresh registration: %@ (%@)
subService
T@"IMDIDSService",&,N,V_subService
subServiceName
T@"NSString",&,N,V_subServiceName
mainService
T@"IMDIDSService",N,V_mainService
accountsLoadedFromIdentityServices
activeAccountsFromIdentityServices
isSubService
iMessageBusiness
imessage
%@: Initialized!  (Environment: %@)
Dealloc service session: %@
********** We don't have an IDSAccount, please file a radar ********** State: service session = %@, accounts = %@
********** We couldn't find an IMDAccount for the IDSAccount, please file a radar ********** State: service session = %@, IDSAccount = %@, accounts = %@
********** Requesting registered URIs but we don't have an IDSAccount, please file a radar ********** State: service session = %@, accounts = %@
-[IMDAppleServiceSession sessionDidBecomeActive]
Session activating: %@ on Environment: %@
-[IMDAppleServiceSession sessionWillBecomeInactiveWithAccount:]
Session deactivating: %@ on Environment: %@
AppleServiceSession
AppleServiceSession: %@
Client requested re-authenticate (Environment: %@) account: %@
Found account to re-authenticate account: %@
Client requested re-register (Environment: %@)
Found account to re-register account: %@
Client requested de-register (Environment: %@)
Found account to de-register account: %@
Client requested password updated (account: %@)
Found account to update password account: %@
Client updateAuthorizationCredentials (account: %@)
Found account to updateAuthorizationCredentials: %@
Client request to remove aliases: %@ account: %@
Found account to remove aliases: %@  account: %@
Client request to add aliases: %@  account: %@
Found account to add aliases: %@  account: %@
Client request to validate: %@  account: %@
Found account to validate aliases: %@  account: %@
Client request to unvalidate: %@  account: %@
Found account to unvalidate aliases: %@  account: %@
Client request to validate profile info: %@
Found account to validate profile info account: %@
Checking specified caller ID: %@ on account: %@, accountDefaults: %@
Caller ID isn't validated, clearing caller ID settings
 Caller ID is valid, registered and in good shape, moving along
No caller ID specified, moving along
@16@?0@"NSString"8
IMDAppleServiceSession
%@ callerID - choosing %@ from %@, idsAccount %@
%@ callerID - choosing %@ from %@
 ** Selected display ID: %@  was not in URIs set: %@
callerURI - No bindings !!, idsAccount %@ registeredURIs %@
CallerID
IDS Account (%@) registered for: %@ but registration status was wrong. Saving for later
IDS Account (%@) not registered for: %@, serviceName: %@, moving on
T@"IDSAccount",R,&,N
aliases
vettedAliases
callerURI
registeredURIs
GUID
T@"NSString",R,&,N,V_GUID
%@: Account is restricted, not creating session
%@: Created active session: %@ of service type: %@   (Session class: %@)
%@: Reused existing session: %@
%@: Done setting up session: %@
iMessage service found: %@    accounts: %@
   Empty iMessage accounts, created one: %@
   Added, and moving along
   No account created
   We have iMessage acounts, good to go
No iMessage service found
Activating accounts: %@
Deactivating accounts: %@
*** Removing placeholder account: %@
Created IMDCKSyncState in IMDCKUtilities
will update sync state: %@
broadcasting current sync state: %@
broadcasting final requested update: %@
Loading internal party service with bundle: %@
%@: Loading request for service bundle: %@   Loaded: %@
%@: Loading service bundle: %@   Loaded: %@   identifier: %@
%@: Load success: %@    (Error: %@)
%@: Session class: %@
%@: Service properties: %@
%@: Load failed! Disabling any active accounts  (Error: %@)
   => Disabling: %@
                                        remoteHost: %@
                            isDataConnectionActive: %@
                                       isReachable: %@
                                          isOnCall: %@
                  supportsSimultaneousDataAndVoice: %@
                            isImmediatelyReachable: %@
                               awaitingDataContext: %@
syncing finished
clearing all sync states
Set starting periodic sync
Set starting initial sync
Setting controller sync type to %@ for record type: %@
Key value store will update: %@
Updating syncing to: %@
Key value store did update value: %@
broadcasting sync state changed event: %@
Account in need of repair detected, setting sync error
"Database": Will delete old ack %@: %@: %lld
"Database": Will NOT delete old ack %@: %@: %lld
handle: %@  account: %@  chatIdentifier: %@  guid: %@
handles: %@  account: %@  chatIdentifier: %@  guid: %@
room: %@  account: %@  chatIdentifier: %@  guid: %@
"Database": ASSERTION FAILED: %s is unexpectedly nil in "%s" at line %d [%@]
"Database": Deleted chat in %f seconds (%@) 
error: %d  message: %@  force error: %@
message: %@
"Database": Replacing previous message acknowledgements with new acknowledgment for sent message; sender: '%@':'%@'
name: %@   fromID: %@  toIdentifier:%@  identifier: %@ style: %d
messages: %@
Automatically saving message sent from linked device: %@
Expire message sent from linked device: %@
Found existing message: %@
Date last call ended: %@
Looking for a similar message %f seconds back
Found similar message? %@
 enableTelemetry=YES 
IncomingMessage
"Database": Replacing previous message acknowledgements with new acknowledgment for received message; sender: '%@':'%@':'%@'
%@ - write account defaults: %@
writeAccountDefaults - Started with %@ as the login ID
writeAccountDefaults - Setting %@ as the login ID
writeAccountDefaults - Removing login ID %@
Adding registration delegate for account %@
IMDAccount added %@, adding corresponding IDSAccount %@
IMDAccount removed %@, removing corresponding IDSAccount %@
Enabling IDSAccount %@
Disabling IDSAccount %@
Received account added %@
Received account updates %@
Received accountRemoved %@
** Received account removed for account: %@, but we can't find an account for it
Received accountEnabled %@
** Received account enabled for account: %@, but we can't find an account for it
Received accountDisabled %@
** Received account disabled for account: %@, but we can't find an account for it
IMDIDSService received registration status changed: %@ (%@)
IMDIDSService received aliases changed to %@: %@ (%@)
IMDIDSService received vetted aliases changed: %@ (%@)
IMDIDSService received profile changed to %@: %@ (%@)
IMDIDSService received login changed to %@: %@ (%@)
IMDIDSService received display name changed to %@: %@ (%@)
 => Registration failed, deactivating...: %@ (%@)
IMDIDSService received refresh registration: %@ (%@)
%@: Initialized!  (Environment: %@)
Dealloc service session: %@
Session activating: %@ on Environment: %@
Session deactivating: %@ on Environment: %@
AppleServiceSession: %@
Client requested re-authenticate (Environment: %@) account: %@
Found account to re-authenticate account: %@
Client requested re-register (Environment: %@)
Found account to re-register account: %@
Client requested de-register (Environment: %@)
Found account to de-register account: %@
Client requested password updated (account: %@)
Found account to update password account: %@
Client updateAuthorizationCredentials (account: %@)
Found account to updateAuthorizationCredentials: %@
Client request to remove aliases: %@ account: %@
Found account to remove aliases: %@  account: %@
Client request to add aliases: %@  account: %@
Found account to add aliases: %@  account: %@
Client request to validate: %@  account: %@
Found account to validate aliases: %@  account: %@
Client request to unvalidate: %@  account: %@
Found account to unvalidate aliases: %@  account: %@
Client request to validate profile info: %@
Found account to validate profile info account: %@
Checking specified caller ID: %@ on account: %@, accountDefaults: %@
Caller ID isn't validated, clearing caller ID settings
 Caller ID is valid, registered and in good shape, moving along
No caller ID specified, moving along
%@ callerID - choosing %@ from %@
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
IMDAccount
IMSystemMonitorListener
IMDMessageHistorySyncTaskLiveFactory
IMDMessageHistorySyncTaskFactory
NSObject
IMReadReceiptsMetrics
IMDAccountController
IDSAccountDelegate
Mentions
IMSpamFilterHelper
IMDCKUtilities
IMDCKSyncStateDelegate
IMDMessageHistoryIDSTransactionLogSyncTask
IMDMessageHistorySyncTask
IMDMessageHistoryCKChatSyncTask
IMDCKSyncStatsCollector
IMDCKSyncTokenStore
IMDService
IMDMessageActiveDevice
IMDOneTimeCodeManager
IMDInternalPhishingController
IMDSoundUtilities
IMDMessageProcessingController
IMDSpamMessageCreator
IMDServiceSession
IMConnectionMonitorDelegate
IMServiceSessionProtocol
IMDCarAutoReplier
IMDAutoReplying
IMDSpamController
IMDCKExitManager
IMDRecordZoneManager
APSConnectionDelegate
IMDCKMessageSyncCKOperationFactory
IMDDistributedNotificationXPCEventStreamHandler
IMDChatVocabularyUpdater
INSpeakable
IMDLegactDTController
IDSServiceDelegate
IMDCallerIDUtilities
IMDCKMockRecordKeyZone
DeferredSavingAdditions
IMDCKAttachmentSyncController
IMDCKSyncState
IMKeyValueCollectionDelegate
IMDMessageHistoryFirstUnlockReplaySyncTask
IMDFileTransferCenter
IMFileCopierDelegate
IMPowerLogChatDescription
IMDCKAttachmentSyncCKOperationFactory
IMDQuickSwitchController
TunesController_Additions
IMTunesController
IMItem_CKRecord
Additions
IMDCKCacheDeleteManager
IMDCKMockDatabase
IMDCKChatSyncCKOperationFactory
IMDServiceController
IMDNicknameController
IMDMessageSortOrderAssigner
IMDMessageStore
IMDChat
IMDCKRecordSaltManager
IMDChatRegistry
IMDCKDatabaseManager
CKRecord_IMDaemonCore
IMDCKMockRecordZone
IMDCKRampManager
IMDInconsistency
IMDAttachmentStore
IMDCKAbstractSyncController
MessageProcessing
IMDChatStore
IMDLocationSharingController
IMDCKMessageSyncController
IMDaemonCoreMessageReceivedTimingAdditions
IMDaemonCoreIncomingMessageTracking
IMDInvocationForwarder
IMFileTransfer_CKRecord
IMDReplayController
IMDCKSyncController
IMDXPCEventStreamHandlerDelegate
IMDCKAbstractSyncControllerDelegate
IMMessagesToTrack
IMDServiceSession_Chat
IMTransferServicesController_PreviewGeneration
IMDCKInitialAttachmentSyncController
IMDMessageHistorySyncController
IMDCKChatSyncController
IMDMessagePTask
IMDStickerRegistry
IMDRecentsController
IMDServiceSession_BuddyList
IMDMessagePTaskXPCStore
IMDMessagePTaskStore
IMDServiceSession_Base
IMDReplayStorageIterationContext
IMDReplayStorageController
IMDCKInitialMessageSyncController
IMDXPCEventStreamHandler
IMDServiceSession_Firewall
IMDServiceSession_LoginManagement
IMDHandle
IMDServiceSession_MessageReplay
IMDChat_CKRecord
IMDBadgeUtilities
IMDChatRegistry_CallManagement
TUConversationManagerDelegate
CKRecordUtilities
IMDIDSAccount
IMDIDSService
IDSAccountControllerDelegate
IDSAccountRegistrationDelegate
IMDAppleServiceSession
init
numberWithInt:
initWithObjectsAndKeys:
sharedTunesController
addListener:
sharedInstance
mutableCopy
dealloc
defaultCenter
removeObserver:name:object:
removeListener:
loginID
rangeOfString:
service
serviceSupportsAuthorization
numberWithBool:
dictionaryWithObject:forKey:
writeAccountDefaults:
sharedAccountController
accountID
isAccountActive:
accountDefaults
objectForKey:
boolValue
sharedDaemon
parentalControls
disableAccount:
count
allKeys
countByEnumeratingWithState:objects:count:
isNull
length
removeObjectForKey:
addEntriesFromDictionary:
broadcasterForService:messageContext:
account:defaultsChanged:
session
accountDefaultsChanged:
isManaged
delayedSaveSettings
postAccountCapabilitiesToListener:
broadcasterForTarget:forService:messageContext:
blockList
allowList
blockingMode
blockIdleStatus
statusToPost
capabilities
serviceLoginStatus
serviceLoginStatusMessage
account:defaults:blockList:allowList:blockingMode:blockIdleStatus:status:capabilities:serviceLoginStatus:loginStatusMessage:
numberWithUnsignedLongLong:
buddyProperties
copy
groups
isDisabled
wasDisabledAutomatically
setWasDisabledAutomatically:
mainService
serviceSupportsOneSessionForAllAccounts
existingServiceSessionForService:
sessionClass
initWithAccount:service:
internalName
addAccount:
sessionDidBecomeActive
status
changeMyStatus:changedKeys:
shouldForceAccountsConnected
login
sessionWillBecomeInactiveWithAccount:
intValue
setObject:forKey:
__stringByStrippingControlCharacters
stringValue
addObject:
removeObjectsForKeys:
keysOfChangedEntriesComparedTo:
isActive
allObjects
account:statusChanged:
isEqualToDictionary:
shouldPublishNowPlaying
playerInfo
messageFormat
isEqualToString:
dictionaryWithObjectsAndKeys:
changeStatus:
isSystemIdle
systemIdleTime
dateWithTimeIntervalSinceNow:
setIdleTime:
_updateIdle
_registrationInfo
_forceSetLoginStatus:message:reason:properties:
setLoginStatus:message:reason:properties:
__forceSetLoginStatus:oldStatus:message:reason:properties:account:
systemDidBecomeIdle
systemDidBecomeUnidle
screenSaverDidStart
screenSaverDidStop
screenLocked
screenUnlocked
systemWillSleep
systemDidWake
systemDidEnterMemoryPressure
systemDidLeaveMemoryPressure
systemWillShutdown
systemApplicationDidEnterBackground
systemApplicationWillEnterForeground
systemApplicationDidBecomeActive
systemApplicationWillResignActive
systemApplicationDidSuspend
systemApplicationDidResume
systemApplicationDidSuspendForEventsOnly
systemApplicationDidResumeForEventsOnly
notificationCenterWillAppear
notificationCenterDidDisappear
systemDidStartBackup
systemDidStopBackup
systemDidFinishMigration
systemRestoreStateDidChange
systemDidFastUserSwitchOut
systemDidFastUserSwitchIn
systemDidLogout
systemDidLock
systemDidUnlock
systemScreenDidPowerUp
systemScreenDidPowerDown
systemDidLeaveFirstDataProtectionLock
systemDidLeaveDataProtectionLock
systemDidEnterDataProtectionLock
initWithAccountID:defaults:service:
accountType
setIsManaged:
canMakeDowngradeRoutingChecks
postAccountCapabilities
accountInfoToPost
createSessionIfNecessary
releaseSession
statusToSave
tunesController:playerInfoChanged:
setRegistrationStatus:error:alertInfo:
registrationStatus
registrationError
registrationAlertInfo
setLoginStatus:message:
isLoading
setIsLoading:
setSession:
serviceDisconnectReason
_accountDefaults
_account
_accountType
_service
_session
_myStatus
_lastPostedStatus
_isLoading
_isManaged
_loginStatusMessage
_loginStatus
_disconnectReason
_initWithCKSyncController:accountController:replayController:
_newFirstUnlockReplaySyncTask
_newIDSTransactionLogSyncTask
_newKChatSyncTask
initWithCKSyncController:
initWithReplayController:accountController:
initWithAccountController:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
newSyncTaskForType:
_ckSyncController
_accountController
_replayController
_readReceiptTrackingEnabled
dictionary
numberWithInteger:
setObject:forKeyedSubscript:
sendServerMessage:command:fromAccount:
containsMessageID:completion:
sharedInstanceForBagType:
isInternalInstall
_IMDTrackMetric:ForMessageGUID:
_daemonWillShutdown:
addObserver:selector:name:object:
idsAccount
removeDelegate:
save
allServices
arrayByApplyingSelector:
isDiscontinued
createDiscontinuedAccount
isIDSBased
serviceDefaults
accountsForService:
serviceRequiresSingleAccount
accountForAccountID:
defaultAccountSettings
loadOldStatusStore
serviceProperties
stringGUID
shouldCreateActiveAccounts
activateAccount:
accountsLoadedFromIdentityServices
activeAccountsFromIdentityServices
activateAccounts:
disallowDeactivation
shouldForceAccountsActive
serviceWithName:
_checkPowerAssertion
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
saveSettings
containsObject:
lastObject
loginWithAccount:
enableAccount:
activeAccountsForService:
activeAccountsChanged:forService:
_rebuildOperationalAccountsCache
removeObject:
logout
removeAccount:
deactivateAccounts:
deactivateAccounts:force:
_isAccountActive:forService:
accountAdded:defaults:service:
accountAdded:
isEqualToIgnoringCase:
accounts
addDelegate:queue:
allKeysForObject:
deactivateAccount:force:
accountRemoved:
allValues
caseInsensitiveCompare:
__imArrayByFilteringWithBlock:
activeAccounts
aliasStrings
uniqueID
__imArrayByApplyingBlock:filter:
__imFirstObject
_operationalAccounts
isEqualToSet:
_isOperationalForAccount:
serviceSupportsRegistration
profileValidationStatus
serviceName
canSend
_nicknameController
newDeviceDidSignIntoiMessage
deviceSignedOutOfiMessage
broadcasterWithMessageContext:
networkDataAvailabilityChanged:
account:isActiveChanged:
account:devicesChanged:
account:nearbyDevicesChanged:
account:connectedDevicesChanged:
load
deferredSave
deactivateAccount:
setupAccount:
accountsForLoginID:onService:
accountForHandle:
connectedAccounts
connectedAccountsForService:
connectingAccounts
connectingAccountsForService:
accountForIDSAccountUniqueID:
activeSessions
sessionForAccount:
anySessionForServiceName:
setNetworkDataAvailable:
networkDataAvailable
_accounts
_activeAccounts
_operationalAccountsCache
_isFirstLoad
_networkDataAvailable
activeAliases
regionID
accountRegionIsCandidateForHawking:
receiverIsCandidateForHawking:
mapID:usingKey:
activeAccountsAreEligibleForHawking
hasActivePhoneAccount
logHandle
truthContainer
truthDatabase
_authenticationController
initWithServerBag:lockDownmanager:deviceSupport:imDefaults:
stringWithFormat:
initWithDomain:
initWithKeyValueStorage:
initWithKeyValueCollection:
setDelegate:
cloudKitSyncingEnabled
setSyncingEnabled:
isSyncingPaused
setSyncingPaused:
setRemovedFromBackup:
didKeyRollPendingCheck
setDidKeyRollPendingCheck:
isKeyRollPending
setErrorToKeyRollingError
syncState
broadcastSyncState
_startBatchChange
syncStateWillUpdate:
_finishBatchChange
fetchCloudKitAccountStatusAndUpdateEligibilityAndNeedsRepairStatusWithCompletion:
clearSyncErrors
broadcastCloudKitStateAfterFetchingAccountStatus
lockdownManager
integerValue
anyChatExistsOnServerWithCompletion:
setQualityOfService:
setDiscretionaryNetworkBehavior:
setAutomaticallyRetryNetworkFailures:
setAllowsCellularAccess:
setConfiguration:
messageDatabaseSize
setFetchUserQuotaCompletionBlock:
_truthDatabase
addOperation:
_mininimumServerBagClientValue
isFeatureEnabled
iCloudAccountMatchesiMessageAccount
setFeatureEnabled:
_serverAllowsSync
_mocFeatureEnabled
_isInExitState
serverBag
_resetKeepMessagesSettingandBroadcastToAllDevices
beginInitialSync
markAllAttachmentsAsNotPurgeable
evalToggleiCloudSettingsSwitch
unsignedIntegerValue
numberWithUnsignedInteger:
_getKeepMessagesValue
_shouldDisplayPopUpForResettingKeepMessages
_allowDestructiveMOCFeaturesBasedOnDSID
_serverAllowsCacheDelete
_serverAllowsRemovalFromBackUp
startTimingForKey:
internalQueue
fetchCloudKitAccountStatusWithCompletion:
stopTimingForKey:
cacheDeleteEnabled
supportsDeviceToDeviceEncryption
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
_truthContainer
accountStatus
_createAccountError:
_checkEligibilityWithAccountInfo:
accountPartition
trackEvent:withCount:
accountInfoWithCompletionHandler:
standardUserDefaults
_accountNeedsRepairOverride
isSyncingEnabled
_primaryiCloudAccountSecurityLevel
setAccountStatus:
setEligibleForTruthZone:
_setEligibleToToggleMiCSwitch:
shouldRepairAccountWithAccountStatus:securityLevel:
setErrorToAccountNeedsRepair
fetchAccountStatusAndUpdateMiCSwitchEligibility
_checkIfEnabledByServerBagOrDefault:
_isLogDumpAllowed
logCollectorAddress
reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:reasonString:
domain
code
userInfo
valueForKey:
_isCKErrorPartialFailure:
_errorsFromPartialError:
CKPartialError:onlyHasErrorCodes:
errorIndicatesQuotaExceeded:
errorIndicatesDeviceConditionsDontAllowSync:
arrayWithObjects:
objectForKeyedSubscript:
recordName
removeObjectFromAnalyticSyncDatesDictionaryForKey:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:
clearConnectedToPowerWifiOver20Hours
_shouldiCloudSwitchBeEnabled
_setiCloudSettingsSwitchEnabled:
_accountStore
aa_primaryAppleAccountWithPreloadedDataclasses
setEnabled:forDataclass:
saveVerifiedAccount:withCompletionHandler:
localizedDescription
aa_primaryAppleAccountWithCompletion:
_personIdFromAccount:
_fetchPrimaryAccountWithCompletion:
aa_personID
isEnabledForDataclass:
isDeviceCharging
isDeviceOnWifi
_isSyncingPausedOverride
lastSyncDate
isSyncing
getAnalyticSyncDatesObjectForKey:
initWithCapacity:
recordID
_deviceActive
date
timeIntervalSinceDate:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
response
addUserNotification:listener:completionHandler:
cachedSalt
postSyncStateToCloudKit:useManatee:legacyOnly:
exitManager
submitCloudKitMetricWithOperationGroupName:useManatee:
serverAllowsAnalyticDetailsSubmission
syncReportDictionary
submitCloudKitAnalyticWithOperationGroupName:useManatee:analyticDictionary:
setAnalyticSyncDatesDictionaryObject:forKey:shouldOverrideIfExists:
serverAllowsMetricSubmission
syncFailureMetricString:isRecoverable:error:
addSyncError:
serverAllowsAnalyticSubmission
syncReportDictionaryForAttempt:withSuccess:
isCKPartialError:
logDumpAndSendMessageTo:forHours:reason:isInitialSync:requirePreviousPrompt:willSendBlock:
deviceConditionsAllowPeriodicSync
_isRunningInAutomation
logDumpIsExpected
ckStatisticCalculations
_metricForPCSReportManateeStatusWithReason:linkedFunction:timeoutInSec:completion:
metricForPCSReportManateeStatusWithReason:completion:
aa_primaryAppleAccount
_primaryiCloudAccount
_accountManager
altDSIDForAccount:
_primaryiCloudAccountAltDSID
authKitAccountWithAltDSID:
securityLevelForAccount:
dsid
profileID
setCloudKitSyncingEnabled:
autoBugCaptureWithSubType:errorPayload:
writeExitRecordWithDate:completion:
initWithService:
objectForKey:inDomain:
setWithArray:
IMPhoneNumbersEnabledForMultipleSubscriptionDevice
addObjectsFromArray:
_idsAccountController
im_registeredURIs
vettedAliases
calculateAliasesForDefaults
setObject:forKey:inDomain:
restoreFailuresDirectory
im_AKSecurityLevelKey
readAliasesFromDefaults
calculateAndSaveAliasesToDefaults
syncStateDidUpdate:
deviceSupport
imDefaults
broadcastCloudKitState
broadcastCloudKitStateAfterClearingErrors
keyRollPendingStateDidChange
shouldUseDevContainer
shouldUseDevNickNameContainer
shouldForceArchivedMessagesSync
shouldSyncToSRContainer
overrideNumberOfChatsToFetch
overrideNumberOfChatsToWrite
isFirstSyncWithCompletion:
checkiCloudQuota:
cloudKitSyncDownloadAssetsOnly
enableAttachmentMetricCollection
removeFromBackUpAllowed
accountIsVerifiedForMOCAndSafeForCacheDelete
fetchAccountStatusAndUpdateMiCSwitchEligibilityIfNeededOnImagentLaunch
shouldPresentTTROnCloudKitError
shouldLogDumpOnCloudKitError
shouldCollectDailyLogDump
shouldCollectDailyLogDumpForRestoreFailures
reportMOCDebuggingErrorWithString:internalOnly:
_askToTapToRadarWithString:internalOnly:
recordNameForMessageWithGUID:usingSalt:
extractServerRecordFromCKServerErrorRecordChanged:
CKPartialError:hasErrorCode:
CKPartialErrorOnlyHasQuotaExceededError:
isRecoverableCloudKitError:withRetryInterval:
acceptableErrorCodeWhileDeleting:
extractRecordIDsDeletedFromCKPartialError:
errorIndicatesZoneNotCreated:
errorIndicatesUserDeletedZone:
resetLastSyncDate
errorIndicatesChatZoneCreationFailed:
checkCloudkitEnabledStatusAndToggleiCloudSwitchIfNeeded
fetchiCloudAccountPersonID:
primaryAccountHasiCloudBackupEnabledWithCompletion:
deviceConditions
newfilteredArrayRemovingCKRecordDupes:
newfilteredArrayRemovingCKRecordIDDupes:
lastDeviceBackUpDate
deviceActiveString
errorIndicatesIdentityWasLost:
errorIndicateDeviceDoesNotHaveKeysToSync:
_showCKLogNotificationWithCompletion:
shouldKickOffWriteForSyncType:
isLocalCachedSaltPresent
postSyncStateToCloudKit:
postSyncStateToCloudKit:useManatee:
postSyncStateToCloudKit:legacyOnly:
reportZoneCreation:
reportErrorForSyncType:syncStep:isRecoverable:error:
reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:
findRootCause:
logDumpAndSendMessageTo:forHours:reason:
logDumpAndSendMessageTo:forHours:reason:requirePreviousPrompt:willSendBlock:
logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:
logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:
logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:syncAttemptCount:
logDumpIsNecessaryAfterSync
submitPCSReportManateeStatuMetricWithPrefix:andReason:
signedIntoiCloudAndiMessageAndiCloudAccountMatchesiMessageAccount
enableMOCIfNeeded
downgradingFromHSA2AndDisablingMOC
eligibleForTruthZoneWithCompletion:
isInCloudKitDemoMode
disableAllDevicesWithCompletion:
setLockdownManager:
setServerBag:
setDeviceSupport:
setImDefaults:
useDeprecatedApi
setUseDeprecatedApi:
.cxx_destruct
_didKeyRollPendingCheck
_useDeprecatedApi
_syncState
_lockdownManager
_serverBag
_deviceSupport
_imDefaults
setSyncTaskCompletionBlock:
_setupAndBeginSync
dictionaryWithCapacity:
setTaskGroupedByServiceName:
_createProcessBatchBlockWithServiceSession:
_createKnownRecordBlock
_createSyncCompletionBlockForServiceSession:
setBatchProcessingBlock:
setKnownRecordIDsFromList:
setCompletionBlock:
setValue:forKey:
scheduleTransactionLogTask:
replayMessage:
enqueReplayMessageCallback:
startSyncTask:
syncTaskType
accountController
setAccountController:
taskGroupedByServiceName
syncTaskCompletionBlock
_className
_taskGroupedByServiceName
_syncTaskCompletionBlock
_startICloudSync
beginComingBackOnlineSync
inMemorySyncStatistics
_incrementCountsForColumnSyncedKey:syncedColumnAmountToIncrease:totalColumnAmountKey:totalColumnAmountToIncrease:
refreshWithDBSyncStatistics
currentInMemorySyncStatistics
incrementSyncedChatCount:incrementTotalChatCount:
incrementSyncedMessageCount:incrementTotalMessageCount:
incrementSyncedAttachmentCount:incrementTotalAttachmentCount:
setInMemorySyncStatistics:
_inMemorySyncStatistics
migrateKey:fromDatabase:
tokenForKey:
persistToken:forKey:
stringByExpandingTildeInPath
initWithPath:storeName:dataProtectionClass:
dataForKey:error:
deleteDatabase
initForReadingFromData:error:
initWithCoder:
initRequiringSecureCoding:
encodeWithCoder:
encodedData
_copyServicePropertiesFromIMServiceBundle:
synchronizeServiceDefaults
unloadServiceBundle
pathForResource:ofType:
dictionaryWithContentsOfFile:
isLoaded
_reallyUnloadServiceBundle
bundleIdentifier
loadAndReturnError:
unload
initWithFormat:
serviceProtocolVersion
_serviceDomain
oldInternalName
loadServiceBundle
principalClass
defaultManager
fileExistsAtPath:
initWithContentsOfFile:
_defaultDefaults
serviceDomain
_serviceDefaultsForDomain:
_oldServiceDomain
array
defaultsChanged:forService:
purgeMemoryCaches
initWithBundle:
accountClass
isLegacy
serviceDefaultsForSetup
clearOneTimeImportAccounts
newAccountWithAccountDefaults:accountID:
supportsDatabase
serviceIgnoresNetworkConnectivity
serviceWantsNullHostReachability
serviceNeedsLogin
serviceNeedsPassword
serviceShouldBeAlwaysLoggedIn
serviceRequiresHost
serviceChatsIgnoreLoginStatus
serviceSupportsPresence
bundle
setServiceProperties:
_bundle
_sessionClass
_internalName
_serviceDefaults
_serviceProperties
_cachedServiceDefaults
_cachedSetupServiceDefaults
_blockPrefWriting
idsDestination
_hasReceivedReadReceiptRecently
initWithIDSDestination:latestDate:latestReadReceiptDate:hasReceivedReadReceipt:
shouldSendTypingIndicator
shouldDisplayAttachmentDownloadFailure
shouldDisplayRemoteDecryptionFailure
setIdsDestination:
latestActiveDate
setLatestActiveDate:
hasReceivedReadReceipt
setHasReceivedReadReceipt:
latestReadReceipt
setLatestReadReceipt:
_hasReceivedReadReceipt
_idsDestination
_latestActiveDate
_latestReadReceipt
setValidCodes:
setOtcUtilities:
setBroadcasterOverride:
initWithBroadcaster:otcUtilities:
codeInvalidationTimer
invalidate
setCodeInvalidationTimer:
setBroadcaster:
otcUtilities
isValidOneTimeCode:
_setNewCodeAndPrepareInvalidationTimer:
broadcastCodeStatusToClients
broadcaster
validCodes
oneTimeCodesDidChange:
firstObject
broadcasterOverride
arrayWithObjects:count:
consumeCodeWithGuid:
scheduledTimerWithTimeInterval:repeats:block:
startTrackingCode:
_validCodes
_codeInvalidationTimer
_broadcaster
_broadcasterOverride
_otcUtilities
_hasAppleConnect
_isAppleInternal
allowPhishingCheck
setBlacklistDiskQueue:
loadBlacklistFromDiskAsync:
fetchBlacklistFromNetworkWithCompletion:
blacklist
dataWithContentsOfFile:
setWithObjects:
unarchivedObjectOfClasses:fromData:error:
setBlacklist:
blacklistDiskQueue
timeIntervalSinceReferenceDate
lastBlacklistSync
setLastBlacklistSync:
setRemoteURLConnection:
_endpoint
initWithString:
initWithURL:
setHTTPMethod:
_apiKey
setValue:forHTTPHeaderField:
JSONObjectWithData:options:error:
_persistBlacklist:
initWithURLRequest:completionBlock:
archivedDataWithRootObject:requiringSecureCoding:error:
writeToFile:options:error:
containsString:
blacklistMessage:
remoteURLConnection
_remoteURLConnection
_blacklist
_lastBlacklistSync
_blacklistDiskQueue
stringByAppendingPathComponent:
_soundTypeForMessage:
guid
_playSoundType:
sharedToneManager
currentToneIdentifierForAlertType:
_playSMSSound
_playAcknowledgmentSentSound
bundleForClass:
URLForResource:withExtension:
flags
associatedMessageGUID
associatedMessageType
playMessageSentSoundIfNeeded:
_smsSoundsToPlay
_installSystemSound:
_isSMSMessage:
_wasDowngraded:
_isSuppressedForGUID:
_stopSuppressingForGUID:
_isAssociatedMessage:
_isAcknowledgmentMessage:
_isAutoPlay:
messageProcessingTaskAdded:
initWithMessagesPTaskStore:
removeObserver:
_scheduleDeferredProcessingWithTimeInterval:
mainThread
_processingTimerFired
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
__im_performBlock:
loadMostRecentMessagePTasks
_indexSpotlightIfNeedForPTask:
deleteAllCompletedTasks
scheduleInitialProcessingCheck
_xpc_IMDCoreSpotlightAddMessageGUID:
_pref_IMDCoreSpotlightHasMigrated
pTaskStore
setPTaskStore:
processingTimer
setProcessingTimer:
_pTaskStore
_processingTimer
transferForGUID:
type
isTypingMessage
fileTransferGUIDs
plainBody
dataUsingEncoding:
body
string
data
sender
_stripFZIDPrefix
_bestGuessURI
isFromMe
account
time
timeIntervalSince1970
getBytes:length:
dataWithBytes:length:
numberWithDouble:
balloonBundleID
messageSummaryInfo
isSpam
transferForGuid:
_stringForKey:
participants
surfURLForIMMessageItem:
metaDataForSurfURL:
isSurfPayment:
hasDataDetectedInformalPayment:
isBlackholed
reportUnknownToIDS:messageID:isBlackholed:messageServerTimestamp:toURI:
enumerateKeysAndObjectsUsingBlock:
messageContainsSurfDD:
payloadData
_enableStrictSecureDecodingMode
decodeObjectOfClasses:forKey:
reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:onlyReportForiMessageService:notifyInternalSecurity:
object
enumerateObjectsUsingBlock:
removeObjectsInArray:
__allServiceSessionsWeakReferenceArray
weakRefWithObject:
__imArrayByApplyingBlock:
allServiceSessions
enableNotifications
lock
_setAutoReconnectTimer
chats
chatIdentifier
style
_newHashForChat:style:
unlock
_managedPrefsNotification:
_networkChanged:
_callMonitorStateChanged:
setWatchesSystemLockState:
__registerNewServiceSession:
_processConnectionMonitorUpdate
cancelPreviousPerformRequestsWithTarget:
_abandonSystemProxySettingsFetcher
_abandonPWFetcher
_clearAutoReconnectTimer
_clearConnectionMonitor
setReplyDelegate:
_updateConnectionMonitorFromAccountDefaultsIgnoringProxy:
isUnderFirstDataProtectionLock
_updateWatchdogTimerWithInterval:
leaveAllChats
clear
initWithRemoteHost:delegate:
connectionMonitorDidUpdate:
remoteHost
goConnectedWithLocalSocketAddress:remoteSocketAddress:
server
initWithHost:port:delegate:
retrieveProxySettings
stringByRemovingWhitespace
_updateConnectionMonitorWithRemoteHost:
_reconnectIfNecessaryWithAccount:
accountShouldBeAlwaysLoggedIn
_doLoginIgnoringProxy:withAccount:
isImmediatelyReachable
overrideNetworkAvailability
goDisconnected
logoutServiceSessionWithAccount:
isDataConnectionActive
isOnCall
supportsSimultaneousVoiceAndDataRightNow
processNetworkDataAvailabilityChange:
_setPendingConnectionMonitorUpdate
_processPotentialNetworkChange
isNetworkUp
autoReconnectWithAccount:
disableServiceSession:
active
allowedAsChild
lowercaseString
canonicalFormOfID:
account:capabilitiesChanged:
currentMessageContext
broadcasterForListenersWithCapabilities:
broadcasterForChatListeners
initWithTargets:
broadcasterForListenersWithCapabilities:forService:messageContext:
null
updateProperties:chat:style:
chatForChatIdentifier:style:
properties
chat:propertiesUpdated:
autoLogin
autoReconnect
logoutWithAccount:
holdBuddyUpdates
resumeBuddyUpdates
authenticateAccount:
registerAccount:
unregisterAccount:
requestGroups
changeGroups:
changeGroup:changes:
renameGroup:to:
acceptSubscriptionRequest:from:
requestSubscriptionTo:
startWatchingBuddy:
stopWatchingBuddy:
requestProperty:ofPerson:
setValue:ofProperty:ofPerson:
updateAuthorizationCredentials:token:account:
joinChatID:handleInfo:identifier:style:joinProperties:
joinChatID:handleInfo:identifier:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:
leaveChatID:identifier:style:
leaveiMessageChatID:identifier:style:
removeChatID:identifier:style:
invitePersonInfo:withMessage:toChatID:identifier:style:
invitePersonInfoToiMessageChat:withMessage:toChatID:identifier:style:
sendGroupPhotoUpdate:toChatID:identifier:style:account:
retryGroupPhotoUpload:toChatID:identifier:style:account:
removePersonInfo:chatID:identifier:style:
removePersonInfoFromiMessageChat:chatID:identifier:style:
declineInvitationToChatID:identifier:style:
updateDisplayName:fromDisplayName:forChatID:identifier:style:
eagerUploadTransfer:recipients:
eagerUploadCancel:
sendMessage:toChatID:identifier:style:
sendLogDumpMessageAtFilePath:toRecipient:shouldDeleteFile:withCompletion:
sendReadReceiptForMessage:toChatID:identifier:style:
sendPlayedReceiptForMessage:toChatID:identifier:style:
sendSavedReceiptForMessage:toChatID:identifier:style:
noteMessagesMarkedAsReadForChatWithGUID:
setProperties:ofParticipant:inChatID:identifier:style:
setBlockingMode:
setAllowList:
setBlockList:
setBlockIdleStatus:
passwordUpdatedWithAccount:
importMessage:isRead:
sendFileTransfer:toPerson:
sendCommand:withProperties:toPerson:
sendCommand:withProperties:toPerson:toChatID:identifier:style:
sendDeleteCommand:forChatGUID:
requestVCWithPerson:properties:conference:
respondToVCInvitationWithPerson:properties:conference:
cancelVCRequestWithPerson:properties:conference:reason:
sendCounterProposalToPerson:properties:conference:
sendVCUpdate:toPerson:conference:
sendAVMessageToPerson:sessionID:type:userInfo:conference:
relay:sendInitateRequest:toPerson:
relay:sendUpdate:toPerson:
relay:sendCancel:toPerson:
addAliases:account:
removeAliases:account:
validateAliases:account:
unvalidateAliases:account:
validateProfileWithAccount:
enrollDeviceInSMSRelay:
unEnrollDeviceInSMSRelay:
enrollSelfDeviceInSMSRelay
closeSessionChatID:identifier:style:
sendNicknameUpdatesToPeerDevices:toDestinations:
sendNicknameInfoToChatID:
sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:
_blastDoorProcessingWithIMMessageItem:chat:account:fromToken:fromIDSID:fromIdentifier:toIdentifier:participants:groupName:groupID:isEncrypted:isFromMe:isLastFromStorage:isFromStorage:hideLockScreenNotification:wantsCheckpointing:needsDeliveryReceipt:messageBalloonPayloadAttachmentDictionary:inlineAttachments:attributionInfoArray:nicknameDictionary:messageContext:completionBlock:
requestGroupPhotoIfNecessary:incomingGroupPhotoCreationTime:toIdentifier:fromIdentifier:messageIsFromStorage:
accountNeedsLogin
accountNeedsPassword
displayName
updateConnectionMonitorWithLocalSocketAddress:remoteSocketAddress:
_reconnectIfNecessary
_IDSService
networkConditionsAllowLogin
canonicalFormOfChatRoom:
equalID:andID:
refreshServiceCapabilities
broadcasterForBlackholeStatus:
broadcasterForChatObserverListeners
broadcasterForAVConferenceListeners
broadcasterForACConferenceListeners
broadcasterForVCConferenceListeners
_clearDowngradeMarkersForChat:
serverHost
serverPort
proxyType
proxyHost
proxyPort
proxyAccount
proxyPassword
useSSL
password
_lock
_localProperties
_changedBuddies
_registeredChats
_groupChatIdentifierToChatRoomMap
_chatRoomToGroupChatIdentifierMap
_chatSuppressionFlagMap
_chatSuppressionTimerMap
_suppressedMessages
_messageRoutingTimer
_messageExpireStateTimer
_messageWatchdogTimer
_messageAutoReplier
_storageTimer
_messagesReceivedDuringStorage
_pendingReadReceiptFromStorageCount
_timingComingBackFromStorage
_messagesProcessedComingBackFromStorage
_connectionMonitor
_reconnectTimer
_loginID
_pwRequestID
_systemProxySettingsFetcher
_buddyChangeLevel
_activated
_saveKeychainPassword
_awaitingDataContext
_shouldReconnect
_badPass
_buddies
_proxyHost
_proxyAccount
_proxyPassword
_password
_serverHost
_proxyType
_proxyPort
_useSSL
_serverPort
processMessages:inChat:
replyDelegate
_replyDelegate
setChatGUIDToSpamCheckTimerMap:
setChatGUIDToCountMap:
setSpamExtensionCutoffTime:
_spamCheckTimerFired:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
detectSpam:chatGUID:
chatRegistry
existingChatWithGUID:
_isDisabled
chatGUIDToCountMap
updateProperties:
_updateSpamCheckTimerWithInterval:forChatGUID:
__queryServerForID:count:completion:
shouldCheckForSpamWithExtensionInChat:fromIdentifier:toIdentifier:
checkForSpamWithExtensionInChat:forMessageBody:sender:withCompletion:
chatGUIDToSpamCheckTimerMap
spamExtensionCutoffTime
_chatGUIDToSpamCheckTimerMap
_chatGUIDToCountMap
_spamExtensionCutoffTime
initRecordZoneManager:databaseManager:
_setUpSubscription
ckQueue
recordZoneManager
createSubscriptionIfNeededOnDeDupeZoneForSubscription:recordType:completionBlock:
exitRecordDate
isEqualToDate:
initWithSerializedError_im:
errorFetchingExitDate
serializedError_im
_fetchExitRecordDateWithCompletion:
_saltZoneCreated
_subscriptionCreated
exitRecordID
initWithRecordType:recordID:
initWithRecordsToSave:recordIDsToDelete:
exitConfiguration
setExitRecordDate:
setErrorFetchingExitDate:
setModifyRecordsCompletionBlock:
_scheduleOperation:
fetchedExitDateOnLaunch
setFetchedExitDateOnLaunch:
currentThread
isMainThread
setIsSyncing:
initWithRecordIDs:
_evalToggleiCloudSettingsSwitch
setFetchRecordsCompletionBlock:
setAtomic:
setSavePolicy:
deDupeSaltZoneID
initWithRecordName:zoneID:
metricZoneID
analyticRecordZoneID
qualityOfService
derivedQualityOfService
databaseManager
createDeDupeSaltZoneIfNeededWithCompletionBlock:
differenceFromDate:
writeSyncCompletedRecordWithDate:useManatee:completion:
submitCloudKitMetricWithData:operationGroupName:useManatee:completion:
ckUtilities
createAnalyticZoneIfNeededWithCompletionBlock:
_analyticZoneCreated
submitCloudKitAnalyticWithDictionary:operationGroupName:useManatee:completion:
manateeDataBase
group
name
stringByAppendingString:
_sharedCKUtilities
setName:
setGroup:
operationID
_scheduleMetricOperation:useManate:
_canSubmitCloudKitMetric
_modifiedOpGroupName:useManatee:
syncCompleteRecordID
_submitCloudKitMetricWithOperationGroupName:record:useManatee:ignoreZoneNotFoundError:completion:
_canSubmitCloudKitAnalytic
isValidJSONObject:
dataWithJSONObject:options:error:
analyticZoneRecordID
initWithZoneName:ownerName:
initWithRecordZoneIDs:
setDefaultConfiguration:
setQuantity:
setFetchRecordZonesCompletionBlock:
handleNotificationForSubscriptionID:
exitRecordDateWithCompletion:
deleteExitRecordWithCompletion:
writeInitialSyncCompletedRecordIfNeeded
sendCloudKitZoneFetchRequestToNoteFeatureIsOn
setExitRecordID:
saltZoneCreatedOverride
setSaltZoneCreatedOverride:
subscriptionCreatedOverride
setSubscriptionCreatedOverride:
setRecordZoneManager:
setDatabaseManager:
_fetchedExitDateOnLaunch
_exitRecordDate
_errorFetchingExitDate
_exitRecordID
_saltZoneCreatedOverride
_subscriptionCreatedOverride
_ckQueue
_recordZoneManager
_databaseManager
initWithZoneID:
_setUpPushConnection
initWithEnvironmentName:namedDelegatePort:queue:
pushConnection
mainBundle
executablePath
lastPathComponent
setEnabledTopics:
notificationFromRemoteNotificationDictionary:
notificationType
recordZoneID
subscriptionID
_handleNotificationForZoneID:subscriptionID:
initWithZoneID:subscriptionID:
setRecordType:
dataBaseManager
saveSubscription:completionHandler:
_createSubscriptionForZoneID:subscriptionID:recordType:completionBlock:
fetchSubscriptionWithID:completionHandler:
recordZoneIDs
initWithRecordZonesToSave:recordZoneIDsToDelete:
setModifyRecordZonesCompletionBlock:
zoneID
zoneName
_createRecordZone:completionBlock:
_checkRecordZoneExists:completionBlock:
_deleteZone:forDatabase:
chatRecordZone
_createRecordZoneIfNeeded:completionBlock:
_deleteZone:
attachmentRecordZone
messageRecordZone
analyticRecordZone
deDupeSaltRecordZone
_createSubscriptionIfNeededForZoneID:subscriptionID:recordType:completionBlock:
_deleteAllZonesForDatabase:
chatRecordZoneID
messageRecordZoneID
attachmentRecordZoneID
initWithObjects:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
createChatZoneIfNeededWithCompletionBlock:
deleteChatZone
createAttachmentZoneIfNeededWithCompletionBlock:
deleteAttachmentZone
createMessageZoneIfNeededWithCompletionBlock:
deleteMessageZone
deleteAnalyticZone
deleteDeDupeSaltZone
deleteAllZones
fetchChatZoneToCheckManateeStatus:
setDataBaseManager:
setPushConnection:
_chatRecordZoneID
_chatRecordZone
_attachmentRecordZoneID
_attachmentRecordZone
_messageRecordZoneID
_messageRecordZone
_analyticRecordZoneID
_analyticRecordZone
_deDupeSaltZoneID
_deDupeSaltRecordZone
_metricZoneID
_dataBaseManager
_pushConnection
setDesiredKeys:
setPreviousServerChangeToken:
setResultsLimit:
setFetchNewestChangesFirst:
_messageFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
initWithRecordZoneIDs:configurationsByRecordZoneID:
setXpcActivity:
_operationGroupWithName:
setFetchAllChanges:
updateEvent:addToCount:forKey:
_fetchOptionsDictionaryWithFetchOptions:andZoneID:
fetchMessageZoneChangesCKOperationUsingToken:zoneID:resultsLimit:operationGroupName:activity:
saveMessagesCKOperationUsingRecordsToSave:operationGroupName:activity:
deleteMessageCKOperationUsingRecordIDstoDelete:activity:
fetchArchivedRecordsOperationWithSyncToken:zoneID:activity:
initWithEventStreamName:
doesNotRecognizeSelector:
initWithChatRegistry:vocabulary:
doneLoadingAfterMerge
_updateVocabularyExcludingChat:completionHandler:
state
compareBySequenceNumberAndDateDescending:
sortUsingComparator:
setVocabulary:ofType:
performInitialUpdateIfNeeded
updateVocabularyForAddedChat:completionHandler:
updateVocabularyForDeletedChat:completionHandler:
updateVocabularyForRenamedChat:completionHandler:
updateVocabularyForDeferredUpdateRequestIfNecessaryWithCompletionHandler:
setChatRegistry:
vocabulary
setVocabulary:
haveDeferredUpdateRequest
setHaveDeferredUpdateRequest:
_haveDeferredUpdateRequest
_chatRegistry
_vocabulary
spokenPhrase
pronunciationHint
vocabularyIdentifier
alternativeSpeakableMatches
identifier
componentsSeparatedByString:
objectAtIndexedSubscript:
_senderIDFromToken:
initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:
setPayloadData:
setBalloonBundleID:
didReceiveMessage:forChat:style:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
dtService
setDtService:
_dtService
accountRegisteredURIs
unprefixedURI
recordsToSave
queue
recordIDs
_handleFetchingExitRecordOperation:
_operationIsCloudKitMetricsOperation:
_handleWritingCloudKitMetrics:
modifyRecordsCompletionBlock
fetchRecordsCompletionBlock
handleOperation:
synchronize
delayedSynchronize
setPerTransferProgress:
_migrateSyncToken
initWithSyncTokenStore:
_shouldMarkAttachmentsAsNeedingReupload
updateEvent:updateValue:forKey:
setActivity:
setDeviceConditionsToCheck:
_numberOfMetadataBatchesOfAttachmentsToFetchInInitialSync
latestSyncTokenForSyncType:
_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:completionBlock:
_shouldMarkAllAttachmentsAsNeedingSync
clearLocalSyncState:
_hasMarkedAllAttachmentsAsNeedingSync
setLatestSyncToken:forSyncType:
_writeAttachmentsToCloudKit:
_markAllUnsuccessFullSyncAttachmentsAsNeedingSync
_numberOfBatchesOfAttachmentsToFetchInInitialSync
_attachmentZoneID
_attachmentZoneSalt
copyCKRecordRepresentationWithZoneID:salt:useStingRay:
recordIDToTransferMap
_fetchAttachmentZoneRecords:desiredKeys:useNonHSA2ManateeDatabase:completion:
fetchAttachmentDataForTransfers:highQuality:useNonHSA2ManateeDatabase:perTransferProgress:completion:
totalBytes
updateTransfer:currentBytes:totalBytes:
fetchAttachmentDataForTransfers:highQuality:perTransferProgress:completion:
__shouldOptimizeAttachmentDefault
assetDownloadInProgress
_deviceConditionsAllowsMessageSyncIgnoreFeatureEnabled:
_downloadAttachmentAssetsWithActivity:restoringAttachments:useNonHSA2ManateeDatabase:retryCount:numAttachmentsDownloaded:transfers:completion:
setAssetDownloadInProgress:
__databaseRequestForAttachmentsWithAssets
fileTransferCenter
removeTransferForGUID:
doubleValue
_attachmentDownloadCanStart:withActivity:
_downloadAttachmentAssetsWithActivity:restoringAttachments:useNonHSA2ManateeDatabase:retryCount:numAttachmentsDownloaded:completion:
addTransfer:forGUID:
downloadAttachmentAssetsWithActivity:restoringAttachments:useNonHSA2ManateeDatabase:completion:
numberWithLong:
purgedAttachmentsForChat:services:limit:
_numberOfAttachmentsToDownload
deviceConditionsToCheck
_updateDeviceConditionsToCheckIfNeededForCurrentBatchCount:maxBatchCount:
_deviceConditionsAllowsMessageSync
_ckUtilitiesInstance
activity
_recordKeyManagerSharedInstance
updateLegacyTransferGUIDIfNeeded:
_markAttachmentWithROWIDAsSyncedWithCloudKit:
_deviceConditionsAllowsMessageSyncForCurrentBatchCount:maxBatchCount:
setBroadcastedSyncStateToUploading
_numberOfAttachmentsToWriteUp
isUsingStingRay
numberWithLongLong:
_updateAttachmentGUIDIfNeededAndReturnTransfersToForceMarkAsSync:transfersToSyncRowIDs:
addNewAttachmentsSyncedCount:
_writeCKRecordsToAttachmentZone:withCompletion:
CKOperationFactory
fetchAttachmentZoneRecords:desiredKeys:operationGroupName:activity:
_processAssetFetchPerRecordProgressBlock:progress:
setPerRecordProgressBlock:
_processAssetFetchPerRecordCompletionBlock:recordID:error:
setPerRecordCompletionBlock:
_processAssetFetchOperationCompletionBlock:operationID:error:
completionBlocksForAssetFetchOperations
nonHSA2ManateeDatabase
canWriteFileOfEstimatedSize:refreshCachedValue:
_fetchedAllChangesFromCloudKit
shouldDownloadAssetsOfSize:refreshCachedValue:
setBroadcastedSyncStateToDownloading
fetchAttachmentZoneChangesCKOperationUsingToken:zoneID:resultsLimit:desiredKeys:operationGroupName:activity:
_processRecordChanged:
setRecordChangedBlock:
setRecordZoneChangeTokensUpdatedBlock:
_processRecordDeletion:
setRecordWithIDWasDeletedBlock:
_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:shouldWriteBackChanges:desiredKeys:syncType:error:currentBatchCount:maxBatchCount:completionBlock:
setRecordZoneFetchCompletionBlock:
_processFetchRecordChangesCompleted:completionBlock:
setFetchRecordZoneChangesCompletionBlock:
saveAttachmentsCKOperationUsingRecordsToSave:activity:
_processModifyPerRecordCallBack:error:
_processModifyRecordCompletion:deletedRecordIDs:error:completionBlock:
_deleteStingRayToken
_kickOffWriteOnCKQueueWithCompletion:
_kickOffAssetFetchForTransfersIfNeeded
syncBatchCompleted:
setBool:forDomain:forKey:
_kickOffWriteIfNeededForSyncType:completion:
_attachmentZoneCreated
recordChangeTag
_updateTransferUsingCKRecord:wasFetched:
transferGUIDOfRecord:
_resetAttachmentSyncStateForRecord:toState:
_markTransferAsNotBeingAbleToSyncUsingCKRecord:
_operationErrorForModifyingRecordCompletion:
perTransferProgress
markTransferAsNotSuccessfullyDownloadedFromCloud:
_recordIDsToProcessWithError:error:
filename
populateLocalURLsForTransfer:fromCKRecord:
setFilename:
endTransfer:overrideFinalFileName:
updateTransferAsWaitingForAccept:
arrayByExcludingObjectsInArray:
attachmentWithGUID:
cloudKitSyncState
localPath
fileExistsAtPath:isDirectory:
updateTransfersWithCKRecord:recordWasFetched:downloadAsset:
_removeTransferFromiCloudBackupWithGuid:
downloadAssetsForTransferGUIDs
acceptTransfer:path:
removeAllObjects
setDownloadAssetsForTransferGUIDs:
markTransferAsNotSyncedSuccessfully:
resetSyncStateForRecord:toState:
syncTokenStore
_changeTokenKeyForSyncType:
deleteAttachmentSyncToken
markAllAttachmentsAsNeedingCloudKitSync
_needsToMarkAllAttachmentsAsNeedingSync
validateMD5HashForRecord:
metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:
_validateTransferFromCloudKit:localTransfer:validateCompletion:
ckRecordIDFromExistingMetadata
numberWithUnsignedInt:
_processAndValidateAttachmentRecordsEligibleForPurge:recordIDsToTransfers:capturedWithABC:completion:
_constructAttachmentRecordIDUsingTombStoneDictionary:
setBroadcastedSyncStateToDeleting
deleteAttachmentCKOperationUsingRecordIDstoDelete:activity:
_attachmentDeleteBatchSize
_copyRecordIDsToDeleteWithLimit:
syncAttachmentDeletesToCloudKit:
_deleteAttachmentsWithRecordIDs:completion:
syncControllerRecordType
syncAttachmentsWithSyncType:deviceConditionsToCheck:activity:completionBlock:
acceptFileTransfer:completion:
downloadAttachmentAssetsWithActivity:restoringAttachments:
purgedAttachmentsCountForChat:services:
downloadAttachmentAssetsForChatIDs:services:style:completion:
__databaseRequestResetAllAttachmentsInFaiedCloudDownloadState
_processRecordZoneChangeTokenUpdated:zoneID:clienChangeToken:syncType:
_markTransferAsNotBeingAbleToSync:
_fetchAndValidateFileTransfersFromCloudKit:capturedWithABC:completion:
setCKOperationFactory:
setSyncTokenStore:
setCompletionBlocksForAssetFetchOperations:
setRecordIDToTransferMap:
_assetDownloadInProgress
_CKOperationFactory
_syncTokenStore
_completionBlocksForAssetFetchOperations
_recordIDToTransferMap
_perTransferProgress
_downloadAssetsForTransferGUIDs
_deviceConditionsToCheck
_activity
keyValueCollection
boolForKey:withDefault:
setBool:forKey:
integerForKey:withDefault:
setInteger:forKey:
errorArrayForKey:
addErrorToArray:forKey:
_startBatchWrite
_commitBatchWrite
productBuildVersion
keyEnumerator
hasSuffix:
analyticSyncDatesDictionary
initWithDictionary:
_removeObjectForKey:forDictionary:
setAnalyticSyncDatesDictionary:
_setObject:forKey:forDictionary:shouldSetBuild:
syncErrors
_describeErrors:
appendFormat:
createdChatZone
deletedZones
_shouldReportNewUserIfCreatedChatZones:deletedZones:
dictionaryWithDictionary:
removeBuildObjectsFromDict:
syncUserType
describeErrors
isEligibleForTruthZone
isRemovedFromBackup
isInExitState
exitDate
isDisablingDevices
isStartingEnabledSettingChange
syncControllerSyncState
syncControllerSyncType
setStartingPeriodicSyncSetByCloudKitHooks:
setStartingInitialSyncSetByCloudKitHooks:
setSyncControllerSyncState:
setSyncControllerRecordType:
setSyncControllerSyncType:
setStartingEnabledSettingChange:
setDisablingDevices:
_setStartingSync
setSyncControllerSyncState:withRecordType:
setSyncing:
delegate
serializedRepresentation
broadcasterForListenersWithCapabilities:messageContext:
updateCloudKitStateWithDictionary:
keyValueCollection:willUpdateValues:
keyValueCollection:didUpdateValues:
setCreatedChatZone:
setDeletedZones:
setInExitState:
isStartingPeriodicSyncSetByCloudKitHooks
isStartingInitialSyncSetByCloudKitHooks
setExitDate:
setLastSyncDate:
setSyncingFinished
clearLocalCloudKitSyncState
setStartingPeriodicSyncWithRecordType:
setStartingInitialSyncWithRecordType:
_storage
_delegate
scheduleSyncTaskForServices:
setContextStamp:
_updateContextStamp
_dictionaryRepresentation
fileTransfer:updatedWithProperties:
__mainThreadPostNotificationName:object:
localURL
initWithInputURL:outputURL:identifier:operation:delegate:
start
_setTransferState:
_postUpdated:
_archiveFileTransfer:
didErrorOccur
failTransfer:reason:
outputURL
defaultHFSFileManager
path
attributesOfItemAtPath:error:
_setLocalURL:
fileSize
_setCurrentBytes:totalBytes:
otherPerson
_addGatekeeperProperties:toFileAtPath:
enumeratorAtPath:
_needsWrapper
stringByDeletingLastPathComponent
stringByDeletingPathExtension
createUniqueDirectoryWithName:atPath:ofType:
writeToFile:atomically:encoding:error:
fileURLWithPath:
addDefaultGatekeeperPropertiesToDirectory:
_addSpotlightPropertiesFromFileTransfer:toDirectory:
moveItemAtPath:toPath:uniquePath:error:
removeItemAtPath:error:
cleanup
_transferTimerTick:
averageTransferRate
currentBytes
_lastAveragedInterval
_lastAveragedBytes
_setAveragedTransferRate:lastAveragedInterval:lastAveragedBytes:
_setLastUpdatedInterval:
fileTransfer:updatedWithCurrentBytes:totalBytes:averageTransferRate:
_initWithGUID:filename:isDirectory:localURL:account:otherPerson:totalBytes:hfsType:hfsCreator:hfsFlags:isIncoming:
fileHFSTypeCode
fileHFSCreatorCode
fileHFSFlags
fileTransfers:createdWithLocalPaths:
makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
makeNewOutgoingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
_setAccount:otherPerson:
fileTransfer:createdWithProperties:
transferState
_addActiveTransfer:
_setError:
isIncoming
_createWrapperForTransfer:
resetTransfer:andPostReason:
_setStartDate:
_addTransferringTransfer:
_attachmentStoreSharedInstance
updateAttachment:
isSafeToDeleteAttachmentAtPath:
_removeWrapperForTransfer:
_setDirectory:hfsType:hfsCreator:hfsFlags:
_removeActiveTransfer:
_removeTransferringTransfer:
startFinalizingTransfer:
isFinished
storeAttachment:associateWithMessageWithGUID:
_completeProgressForTransferGUID:
_clearProgressForTransferGUID:
attributionInfo
setAttributionInfo:
_setErrorDescription:
_handleFileTransfer:acceptedWithPath:autoRename:overwrite:postNotification:
_dictionaryRepresentationsForFileTransfers:toSave:
dictionaryWithObjects:forKeys:
shouldForceArchive
_doesLocalURLRequireArchiving:
_updateWithDictionaryRepresentation:
sandboxToken
UTF8String
transferredFilename
setTransferredFilename:
_swizzleTransferStateIfMissingAttachmentCanBeDownloadedFromCloudKit
_randomTemporaryPathWithFileName:
error
_handleFileTransferStopped:
hasPrefix:
setMessageGUID:
setHideAttachment:
stringByAppendingPathExtension:
stringByResolvingAndStandardizingPath
fileURLWithPath:isDirectory:
guidForNewOutgoingTransferWithLocalURL:
_getNewFileTransferForStoredAttachmentPayloadDataWithTransferGUID:messageGUID:
broadcastTransfersWithGUIDs:atLocalPaths:
postNotificationName:object:
_transferRequiresPreviewSizing:
fixIMTranscoderAgentPriorityInversion
_transcodeControllerSharedInstance
_clientPreviewConstraints
sizePreview:constraints:completionBlock:blockUntilReply:
updateTransfer:withPreviewSize:forConstraints:
_statsCollector
isAudioMessage
isSticker
hideAttachment
isLocation
isContact
useStingRay
attachmentRecordHasAsset:
_messageStoreSharedInstance
messageWithGUID:
itemWithGUID:
actionIsGroupPhoto
groupPhotoEnabled
updateLegacyTransferGUIDOnMessageIfNeeded:
md5HashForRecord:
_usingStingRay
setSrCloudKitRecordID:
setSrCloudKitSyncState:
copyEncodedSystemFields
setSrCloudKitServerChangeTokenBlob:
setCloudKitRecordID:
setCloudKitSyncState:
setCloudKitServerChangeTokenBlob:
moveTransferAssertFromRecord:
_shouldUpdateSyncStats:originalSyncState:
_updateSyncStatsForAttachments:incrementTotalAttachmentCount:
initWithCKRecord:writeAssetToDisk:
_shouldDownloadAssetForTransfer:forMessageItem:
_assetForKey:
fileURL
_setLocalPath:
transferMetaDataFromRecord:
im_lastPathComponent
mimeType
moveItemAtPath:toPath:error:
fileCopierDidStart:
fileCopierDidFinish:
_progressForTransferGUID:allowCreate:path:
archiveFileTransfer:
_addGatekeeperProperties:toDirectory:
hasActiveFileTransfers
guidForNewIncomingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
guidForNewOutgoingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
assignTransfer:toAccount:otherPerson:
removeUnassignedTransfers
startTransfer:
updateTransfer:
isSafeToDeleteTransferAttachmentPath:
endTransfer:
failTransferPreviewGeneration:
resetTransferAndPostError:error:
setRecoverableErrorForTransfer:error:
failTransfer:error:
_allFileTransfers
_handleSendFileTransfer:
_handleFileTransfer:createdWithProperties:withAuditToken:
_handleFileTransfer:updatedWithProperties:
_handleFileTransferRemoved:
guidsForStoredAttachmentPayloadData:messageGUID:
guidsForStoredAttachmentPayloadDataURLs:messageGUID:
markAttachment:sender:recipients:isIncoming:
initiateHighQualityDownload:
sizePreviewsForTransferGUIDs:
contextStamp
_guidToCopierMap
_guidToSimpleCopierMap
_guidToTransferMap
_activeTransfers
_contextStamp
_transferTimer
_transferringTransfers
valueWithBytes:objCType:
isBusiness
powerLogConversationType
_attachmentFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:desiredKeys:
_desiredKeysArrayForType:
_defaultsSayWeHaveSyncedOnce
_cleanUpTemporaryFiles
_getFileSizeAtPath:
_getTempDBPath
_deleteFileAtPath:
_getTempRecentsPath
_getZippedDBPath
_getZippedRecentsPath
_getTruncatedDBPath
_getDowngradedDBPath
initWithInputURL:outputURL:identifier:operation:completionBlock:queue:
_sendIDSMessage:
_quickSwitchCompleted:
_getCurrentDBVersion
_sendDBVersionResponse:
_sendQuickSwitchCompletedWithResult:
_sendIDSFile:withCommand:
stringByStandardizingPath
copyItemAtPath:toPath:error:
_sendZippedFileAtPath:withCommand:
_notifyPSYDataSent
_compressFileAtPath:toPath:withCompletionBlock:
_sendRecentsRequest
_decompressFileAtPath:toPath:withCompletionBlock:
setWithObject:
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
_FTCopyGzippedData
sendData:toDestinations:priority:options:identifier:error:
deviceForFromID:
_FTOptionallyDecompressData
_handleQuickSwitchInitiateRequest
_handleDBVersionResponse:
_handleRecentsRequest
_handleQuickSwitchCompleted:
_handleIncomingDB:
_handleIncomingRecents:
_appearsToBeEmail
devices
isDefaultPairedDevice
dummyMethod
_truncateDBToPath:
_initiateQuickSwitch
_isPairedDeviceInProxyMode
_defaultPairedDevice
_notifyPSYWithResult:
quickSwitchIDSService
setQuickSwitchIDSService:
_quickSwitchIDSService
setAsString:forKey:
substringWithRange:
_updateMessage
objectAtIndex:
timeIntervalSinceNow
_playerChanged:
isEnabled
_playerChangedNotification:
setPlayerInfo:
_lastChange
_lastInfo
_playerInfo
_listeners
_messageFormat
paddingForMessageOfSize:
setPadding:
setVersion:
timeExpressiveSendPlayed
__im_nanosecondTimeInterval
setTimeExpressiveSentPlayed:
timePlayed
setTimePlayed:
timeRead
setTimeRead:
timeDelivered
setTimeDelivered:
setBaloonBundleId:
expressiveSendStyleID
setExpressiveSendId:
setMessageBody:
bodyData
setMessageBodyData:
subject
setMessageSubject:
setMessageSummaryInfo:
expireState
setExpireState:
setAssociatedMessageGuid:
setAssociatedMessageType:
associatedMessageRange
setAssociatedMessageRangeLocation:
setAssociatedMessageRangeLength:
compressedProtobufDataWithPadding:
callStackSymbols
threadIdentifier
setThreadIdentifier:
initWithData:
protobufForCompressedData:
timeExpressiveSentPlayed
__im_dateWithNanosecondTimeIntervalSinceReferenceDate:
setTimeExpressiveSendPlayed:
baloonBundleId
expressiveSendId
setExpressiveSendStyleID:
messageBodyData
setBodyData:
messageSubject
setSubject:
associatedMessageGuid
setAssociatedMessageGUID:
associatedMessageRangeLocation
associatedMessageRangeLength
setAssociatedMessageRange:
protobufForCompressedDataP2:
_setCKRecordString:forKey:
_setCKRecordDate:forKey:
parentChatID
destinationCallerID
replyToGUID
dateWithTimeIntervalSinceReferenceDate:
_setUnencryptedCKRecordNumber:forKey:
_setCKRecordNumber:forKey:
compressedProtobufDataForMessage
_setCKRecordData:forKey:
messageSyncP2Enabled
compressedProtobufDataForMessageP2
errorCode
groupTitleChangeProtobufForCompressedData:
groupTitle
setTitle:
otherHandle
setOtherHandle:
title
setGroupTitle:
compressedProtobufDataForGroupTitleChangeItem
participantChangeProtobufForCompressedData:
participantChangeType
setChangeType:
changeType
setParticipantChangeType:
compressedProtobufDataForParticipantChangeItem
locationShareStatusChangeProtobufForCompressedData:
shareDirection
setDirection:
shareStatus
setStatus:
setShareStatus:
direction
setShareDirection:
compressedProtobufDataForLocationShareStatusChangeItem
groupActionProtobufForCompressedData:
groupActionType
setActionType:
actionType
setGroupActionType:
compressedProtobufDataForGroupActionItem
messageActionChangeProtobufForCompressedData:
messageActionType
originalMessageGuid
setOriginalMessageGUID:
setMessageActionType:
originalMessageGUID
setOriginalMessageGuid:
compressedProtobufDataForMessageActionItem
cloudKitServerChangeTokenBlob
srCloudKitRecordChangeTag
srCloudKitRecordID
recordNameForRecordChangeTag:ckRecordID:salt:guid:
cloudKitRecordChangeTag
cloudKitRecordID
_recordType
recordIDUsingName:zoneID:
setEtag:
setKnownToServer:
_populateCKRecordWithIMItemFields:
_populateCKRecordWithIMMessageItemFields:
_populateCKRecordWithIMGroupTitleChangeItemFields:
_populateCKRecordWithIMParticipantChangeItemFields:
_populateCKRecordWithIMLocationShareStatusChangeItemFields:
_populateCKRecordWithIMGroupActionItemFields:
_populateCKRecordWithIMMessageActionItemFields:
_dateForKey:
whitespaceAndNewlineCharacterSet
stringByRemovingCharactersFromSet:
_dataForKey:
_numberForKey:
unsignedIntValue
initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:errorType:threadIdentifier:
recordType
populateIMMessageItemWithProtobufFields:withProtobufData:
populateIMMessageItemWithProtobufFields:withProtobufDataP2:
initWithSenderInfo:time:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:type:
populateIMGroupTitleChangeItem:withProtobufData:
initWithSender:time:guid:type:
populateIMParticipantChangeItem:withProtobufData:
populateIMLocationShareStatusChangeItem:withProtobufData:
setSender:
populateIMGroupActionItem:withProtobufData:
populateIMMessageActionItem:withProtobufData:
setService:
setDestinationCallerID:
setReplyToGUID:
setParentChatID:
setSrCloudKitRecordChangeTag:
setCloudKitRecordChangeTag:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:
storeItem:forceReplace:
deviceType
SIMInserted
callerIDShouldBeCheckedForRegistration:
_accountControllerSharedInstance
_shouldDownloadIfPhoneNumberAndNoSIM:
_recordFromServerChangeToken
copyCKRecordRepresentationWithZoneID:salt:
shouldStoreMessage
isCompatibleWithMiC
createItemWithCKRecord:
resetSyncStateForMessage:toState:
_legacy_parseAIMLString:
_IMAgentObjectForKey:
_superFormatFromAIML:
isUpdatingAttachmentFileSizes
setIsUpdatingAttachmentFileSizes:
longLongValue
_deviceConditionsAllowsAttachmentFileSizeUpdateForActivity:
markAttachmentPurgeable:
_cacheDeleteSetUp
_ckUtilitiesSharedInstance
isUsingCentralizedModel
setIsUsingCentralizedModel:
fileSystemRepresentation
__wrapperAroundCacheDeletePurgeNotificationCallback:
__wrapperAroundCacheDeletePurgeableCallback:urgency:
createDictionaryForNotDeletingAnyAttachments:urgency:
setDeviceLowOnDiskSpace:
__wrapperAroundCacheDeletePurgingCallback:urgency:
numberWithUnsignedLong:
_cacheDeleteRequestCacheableSpaceGuidanceWithID:diskVolume:urgency:requestedSize:
setAllowsWritingToDisk:
allowsWritingToDisk
_purgeableSpaceGivenUrgency:
_deleteAttachmentsAndReturnBytesDeleted:
purgeableAttachmentSize
purgeAttachments:
reportAvailableSpaceToBeDeleted:urgency:
deleteAttachmentsAndReturnBytesDeleted:urgency:
_copyRecordRef:
_postTransferInfoOfDeletedTransfers:
postCoreAutomationNotificationFinishedPurgingAttachments:withErrorString:
_fileTransfersToDelete:
_deleteFilesOnDiskAndUpdateTransfers:
arrayWithCapacity:
existsAtLocalPath
_fileTransfersToValidate:
_fetchTransfersFromCloudKit:
_fetchTransfersFromCloudKit:indexOfTransfers:numberOfBatchesToFetch:withCompletion:
initWithIndexesInRange:
_getIndexSetForBatch:indexOfTransfers:
objectsAtIndexes:
_indexOfNextBatch:totalTransfers:indexOfTransfers:
_shouldFetchNextBatch:totalTransfers:
updateAttachmentFileSizesWithActivity:
registerWithCacheDelete
resetAttachmentWatermark
isUsingCentralizeCacheDelete
metricAttachmentsToPurge:
alreadyCapturedErrorWithAutoBugCapture
setAlreadyCapturedErrorWithAutoBugCapture:
isDeviceLowOnDiskSpace
_alreadyCapturedErrorWithAutoBugCapture
_allowsWritingToDisk
_deviceLowOnDiskSpace
_isUsingCentralizedModel
_isUpdatingAttachmentFileSizes
_initWithContainer:scope:
initWithIdentifier:
_zoneManager
_zoneIdentifierForOperation:
identifierToZoneMap
_identifierToZoneMap
_chatSyncOperationGroupWithName:
_chatFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
_chatFetchRecordZoneChangesCKConfiguration:
fetchChatZoneChangesCKOperationUsingToken:zone:resultsLimit:groupName:activity:
_chatWriteRecordsCKConfiguration:
_chatSyncOperationGroup
fetchChatZoneChangesCKOperationUsingToken:zone:resultsLimit:activity:
saveChatsCKOperationUsingRecordsToSave:activity:
deleteChatCKOperationUsingRecordIDstoDelete:activity:
initWithBundle:subServiceName:
registerSessionClassWithBundle:
_services
_nicknameFeatureEnabled
_ckAccountChanged:
_loadAllInfoFromDiskIfAble
evaluateAccountStateForFeatureEligibility
defaults
getValueFromDomain:forKey:
setValue:forDomain:forKey:
multiplePhoneNumbersTiedToAccount
aliasesDidChange:
getBoolFromDomain:forKey:
personalNickname
_tryToReuploadPersonalNicknameWithRetryCount:reuploadVersion:
setPersonalNickname:completionBlock:
_reuploadLocalProfileVersionNumber
_newDeviceDidSignIntoiMessageWithRetryCount:
_sendMessageDictionary:toDevice:
_retryPeerRequestWithRetry:
_deletePublicNicknameLocationAndKey
substringRecordIDForNickname:
meCardHasUpdated
_storePendingNicknameForUpload:
_deletePendingNicknameForUpload
chatsToSendNicknameInfoTo
sendPersonalNicknameToChat:
updatePersonalNickname:
avatar
imageFilePath
_isNicknamesSharingEnabled
transferServicesController
setPersonalNickname:oldRecordID:completionBlock:
_beginNicknameUpload:
nickNameRecordID
_showDebugAlertWithHeader:message:
setPersonalNickname:
_resetHandleSharingList
_storePublicNickname:nicknameLocation:encryptionKey:
_endNicknameUpload
postNotificationName:object:userInfo:
sendPersonalNicknameRecordIDAndVersionToAllPeers
_getPendingNicknameForUpload
_clearSharingLists
_updateWhitelistBlacklistHandlesVersion
_syncHandleWhitelistBlacklistToOtherDevices
handlesSharingNicknamesDidChange
handleWhitelist
handleBlacklist
handleSharingKVStore
nickNameDecryptionKey
currentPersonalNicknameWithRecordID:decryptionKey:completionBlock:
getNicknameWithRecordID:decryptionKey:completionBlock:
totalTimeForKey:
nicknameForRecordID:handle:
saveNicknameForRecordID:handleID:userNickname:
deleteAllPersonalNicknamesWithCompletion:
pendingNicknameUpdates
initWithDictionaryRepresentation:
_markNicknameAsUpdated:incrementPendingNicknameVersion:
_markNicknameAsUpdatedForHandleID:
stringWithString:
appendString:
_updateHandleList:withHandles:forKey:broadcastUpdates:
_requestingToSendLocalNicknameInfo:
sendPersonalNicknameRecordIDAndVersionRequestedByDevice:
_updateSharingPreferencesIfNeededFromMadridMessage:
_updateCloudKitRecordIDAndDecryptionKeyIfNeededFromMadridMessage:
_updateHandledNicknamesIfNeeded:
_updateHandleBlacklistWhitelistIfNeeded:
_updateMessageDictionaryWithPendingNicknameUpdates:
storedPersonalNickname
deleteAllPersonalNicknames:withCompletion:
messageDictionaryWithPersonalRecordIDAndVersion
nicknameIsUploadingToCK
broadcastHandlesSharingNicknamesDidChange
unionSet:
persistData:forKey:error:
setRecordID:
setHandle:
replacedNicknameForHandleIDInHandledMapIfNeeded:nickname:
addNicknameToPendingUpdates:
markNicknameAsUpdated:
_updatePendingNicknameVersion
sendPendingNicknameUpdatesDidChange
setFirstName:
setLastName:
initWithImageName:imageFilePath:
setAvatar:
pendingNicknamesOrHandledNicknamesDidChange
hasImage
handledNicknames
handle
isUpdateFromNickname:withOptions:
dictionaryRepresentation
handledNicknamesKVStore
_writeNicknameToKVStore:nickname:
pendingNicknameUpdatesKVStore
_broadcastPendingMapChanged
_updateNicknameInHandledMap:
_deleteNicknameFromPendingMap:
_deleteHandleIDFromPendingMap:
_deleteHandleIDFromHandledMap:
_isUnderScrutiny
_deviceUnderFirstUnlock
loadPersonalNicknameIfNeeded
reuploadProfileIfNeeded
loadHandledNicknamesAndPendingUpdates
loadSharingHandlesPrefs
_evaluateIfAccountHasMultiplePhoneNumbers
_uploadPendingNicknameIfNecessary
currentPersonalNicknamewithCompletionBlock:
_setUnderScrutiny:
_populateNicknameDictionary:forKVStore:limitToLoad:
unarchivedObjectOfClass:fromData:error:
datasUpToLimit:deleteContext:error:
_strictlyUnarchivedObjectOfClasses:fromData:error:
dataRepresentation
kvStore
initWithData:encoding:
arrayByAddingObjectsFromArray:
allNicknames
nicknameForRecordID:
nicknameForHandle:
substringToIndex:
verifyTruncatedRecordIDMatchesPersonalNickname:forChat:
NicknameWithRecordID:URI:decryptionKey:withCompletionBlock:
handleNicknameUpdatesFromPeerDevice:fromPeerDevice:
sendNicknamePreferencesDidChange
queueChatToSendNicknamePostUploadIfNeeded:
whitelistedHandlesForSharing
blacklistedHandlesForSharing
whitelistHandlesForSharing:onChatGUIDs:
blacklistHandlesForSharing:
clearPendingNicknameForHandleID:
ignorePendingNicknameForHandleID:
cleanUpNicknameForID:
pendingPersonalNickname
_deleteAvatarForNickname:
nicknameForHandleURI:
markAllNicknamesAsPending
setKvStore:
lastMeContactStoreSync
setLastMeContactStoreSync:
setHandledNicknamesKVStore:
setPendingNicknameUpdatesKVStore:
setHandleSharingKVStore:
setHandledNicknames:
setPendingNicknameUpdates:
setHandleWhitelist:
setHandleBlacklist:
needToLoadMapsInfoFromDisk
setNeedToLoadMapsInfoFromDisk:
setChatsToSendNicknameInfoTo:
setNicknameIsUploadingToCK:
_needToLoadMapsInfoFromDisk
_nicknameIsUploadingToCK
_personalNickname
_kvStore
_lastMeContactStoreSync
_handledNicknamesKVStore
_pendingNicknameUpdatesKVStore
_handleSharingKVStore
_handledNicknames
_pendingNicknameUpdates
_handleWhitelist
_handleBlacklist
_chatsToSendNicknameInfoTo
messagesWithReplyToGUID:
isOlderThanItem:
compare:
messageID
sortID
setSortID:
copyOfMessagesWithReplyToGUID:
lastMessage
compareMessageToOtherMessagesWithSameReplyToGUIDAndAssignSortID:existingMessagesWithSameReplyToGUID:
assignSortIDToIncomingMessageWithNoExistingMessagesWithSameReplyToGUID:onChat:
assignSortIDToIncomingMessage:onChat:
persistMessage:
assignAndPersistSortIDForIncomingMessage:onChat:
setModificationStamp:
performInitialHousekeeping
databaseFull
updateLastMessageForChat:hintMessage:
updateStateForChat:fromMessage:toMessage:forcePost:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:setUnreadCountToZero:
isAuxImage
AuxGUIDFromFileTransferGUID:
messageGUID
_itemsWithGUIDs:
updateStamp
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:reindexMessage:
_storeAttachmentsForMessage:
_updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:
notificationIDSTokenURI
setNotificationIDSTokenURI:
initWithArray:
anyObject
_fileTransferCenter
messagesWithAssociatedGUID:shouldLoadAttachments:
_itemsWithAssociatedGUID:shouldLoadAttachments:
registerTransfersWithGUIDs:forMessageGUID:
_hasMessagesWithGUIDs:
messageWithGUID:registerAttachments:
__stringByStrippingAttachmentAndControlCharacters
existingChatsForIDs:onService:style:
messagesWithHandles:onServices:messageGUID:threadIdentifier:limit:
_messagesWithHandles:onServices:messageGUID:threadIdentifier:limit:onlyMessages:
messagesWithRoomNames:onServices:messageGUID:threadIdentifier:limit:
_messagesWithRoomNames:onServices:messageGUID:threadIdentifier:limit:onlyMessages:
_messagesWithHandlesBeforeAndAfterGUID:handles:onServices:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:
_unreadMessagesWithHandles:onServices:limit:fallbackGUID:
_unreadMessagesWithRoomNames:onServices:limit:fallbackGUID:
_missingMessageReadReceiptCache
chatForMessageGUID:
chatForMessageGUID:enableVerboseLogging:
_chatsForMessageGUID:enableVerboseLogging:
chatsForMessageGUID:
chatsGUIDsForMessageWithGUID:
_chatsForMessageIdentifier:
chatsGUIDsForMessageWithIdentifier:
_isValidPhoneNumber:forCountryCode:
_copyHandle:onService:
countryCode
unformattedID
_cleanUnformattedPhoneNumber:countryCode:
im_stripCategoryLabel
deleteMessageGUIDs:
removeMessage:fromChat:
deleteInteractionsWithMessageGUIDs:
subarrayWithRange:
broadcasterForChatListenersWithMessageContext:isBlackholed:
historicalMessageGUIDsDeleted:chatGUIDs:queryID:
_deleteMessagesWithGUIDs:chatIdentifiers:style:onServices:batchNumber:completion:
_performBlock:afterDelay:
deleteMessagesWithChatIdentifiers:style:onServices:completion:
messageWithReplaceMessageID:fromHandle:onService:
hasStoredMessageWithGUID:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:
markMessagesAsReadWithChatGUIDs:upToGUID:readDate:fromMe:
initWithLongLong:
_suppressDBUpdateTimerFired
__postDBUpdate
broadcasterForChatDatabaseListenersWithMessageContext:
modificationStamp
databaseUpdated:
postCountChanges
notificationContext
_updateModificationDate
_postDBUpdate
databaseChatSpamUpdated:
lastFailedMessageDate
lastFailedMessageDateChanged:
unreadMessagesCount
unreadCountChanged:
_shouldUseBadgeUtilities
updateBadgeForUnreadCountChangeIfNeeded:
pluginSessionGUID
setConsumedSessionPayloads:
consumedSessionPayloads
_isUsingStingRay
_itemClassShouldUpdateTransferForItem:
_messagesThatNeedSyncWithCloudKitWithLimit:attemptCount:
_displayDatabaseFullAlert
localizedStringWithFormat:
databaseNoLongerFull
_chatRegistrySharedInstance
updateFileTransfer:
updateUnformattedID:forBuddyID:onService:
messagesWithAssociatedGUID:
messagesWithGUIDs:
canStoreItem:onService:
canStoreMessage:onService:
existingMessageSimilarToMessage:skipServices:skipGUIDs:withinTimeInterval:participants:
markMessageAsDeduplicated:
messagesWithHandles:onServices:limit:
messagesWithHandles:onServices:messageGUID:limit:
messagesWithRoomNames:onServices:limit:
messagesWithRoomNames:onServices:messageGUID:limit:
messagesWithHandles:onServices:messageGUID:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:
lastMessageWithHandles:onServices:
unreadMessagesWithHandles:onServices:limit:fallbackGUID:
unreadMessagesWithRoomNames:onServices:limit:fallbackGUID:
lastMessageWithRoomNames:onServices:
attachmentsWithHandles:onServices:
attachmentsWithRoomNames:onServices:
messageActionItemsForOriginalMessageGUID:
frequentRepliesForForChatIdentifiers:onServices:limit:
addMissingMessageReadReceipt:
popReadReceiptForMissingGUID:
chatForMessage:
chatsForMessage:
chatForMessageIdentifier:
resolveUnformattedRepresentationsForHandles:onService:message:completionBlock:
deleteMessageGUIDs:inChat:
deleteMessagesWithChatIdentifiers:style:onServices:
deleteMessagesWithReplaceMessageID:fromHandle:onService:
markMessageGUIDUnread:
markMessagesAsReadWithIdentifiers:onServices:chatStyle:upToGUID:readDate:fromMe:
cleanseAttachments
isSuppressDatabaseUpdates
setSuppressDatabaseUpdates:
retractPostedNotificationsForMessageGUIDs:
rebuildLastFailedMessageDate
rebuildUnreadMessageCount
replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:
loadConsumedSessionPayloadsForItems:
messagesThatNeedSyncWithCloudKitWithLimit:
markAllMessagesAsNeedingCloudKitSync
copyMessagesThatNeedToBeDeletedInCloudKitWithLimit:
deleteMessagesFromTombStoneTableWithRecordIDs:
clearMessagesTombStoneTable
markMessageAsCleanWithROWID:
markMessageAsIgnoreButNeedingSyncWithROWID:
lastSyncedMessageRowID
_modificationStamp
_cachedUnreadMessageCount
_cachedLastFailedMessageDate
_suppressedUpdates
_pendingDBUpdatePost
_suppressedUpdatesTimer
sortUsingSelector:
componentsJoinedByString:
SHA1HexString
setGroupID:
setEngramID:
setProperties:
isBusinessChat
setDisplayName:
setIsFiltered:
setLastAddressedLocalHandle:
setLastAddressedSIMID:
setChatIdentifier:
setState:
setServiceName:
setStyle:
setParticipants:
setGuid:
setHasHadSuccessfulQuery:
setCreateEngramGroupOnMessageSend:
setPendingENGroupParticipantUpdate:
setRoomName:
setAccountID:
_updateCachedParticipants
setServerChangeToken:
setOriginalGroupID:
setLastReadMessageTimeStamp:
setLastMessageTimeStampOnLoad:
setSrServerChangeToken:
setIsBlackholed:
setWasReportedAsJunk:
numberWithChar:
handleInfo
compareIDs:
indexOfObject:matchingComparison:
isBetterDefinedThan:
replaceObjectAtIndex:withObject:
storeChat:
invalidatePersonCentricGroupedChatsCache
arrayWithObject:
addParticipants:
removeObjectAtIndex:
removeParticipants:
isGroupChat
groupID
persistentID
isSMS
_sortedParticipantIDHashForParticipants:usesPersonCentricID:
deviceIndependentID
personCentricID
lastMessageTimeStampOnLoad
roomName
unreadCount
rowID
originalGroupID
lastAddressedLocalHandle
lastAddressedSIMID
isFiltered
hasHadSuccessfulQuery
engramID
serverChangeToken
lastReadMessageTimeStamp
engroupCreationDate
groupPhotoGuid
copyDictionaryRepresentation:
copyDictionaryRepresentation
setLastMessage:
setLastSentMessageDate:
chat:updated:
storeAndBroadcastChatChanges
chat:engramIDUpdated:
srServerChangeToken
updateLastAddressedHandle:forceUpdate:
trimmedString
chat:lastAddressedHandleUpdated:
chat:lastAddressedSIMIDUpdated:
updateDisplayName:sender:
chat:chatPersonCentricID:displayNameUpdated:sender:
chat:isFilteredUpdated:
leftChat:
dictionaryRepresentationIncludingLastMessage
chatLoadedWithChatIdentifier:chats:
checkBlackholedChatsExistAfterUpdatingChatWithAdd:
getNumberOfTimesRespondedToThread
updateIsFiltered:
lastSeenMessageGuid
groupPhotoUploadFailureCount
isEqualToNumber:
CNContactID
setCNContactID:
sortedArrayUsingSelector:
existingChatsWithGroupID:
_personIdentity
_ckUniqueID
tearDownSessionForChatIdentifier:
chat:nicknamesUpdated:
setMeCardUpdated:
initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:srServerChangeToken:srCloudKitSyncState:cloudKitRecordID:srCloudKitRecordID:isBlackholed:
_setUnreadCount:
isArchived
_setRowID:
addParticipant:
removeParticipant:
resetParticipants:
serviceSession
pinningIdentifier
_sortedParticipantIDHashForParticipants:
isOlderThan:
isNewerThan:
chatProperties
_updateLastMessage:
generateNewGroupID
isUnnamedChat
updateGroupID:
updateEngramID:
updateEngroupCreationDate:
updateLastReadMessageTimeStampIfNeeded:
updateServerChangeToken:
updateSRServerChangeToken:
updateCloudKitSyncState:
updateSRCloudKitSyncState:
updateOriginalGroupID:
updateCloudKitRecordID:
updateSrCloudKitRecordID:
resetCKSyncState
updateLastAddressedHandle:
updateLastAddressedSIMID:
updateDisplayName:
updateIsBlackholed:
updateNumberOfTimesRespondedToThread
updateIsiMessageSpam:
updateSMSCategory:
updateShouldForceToSMS:
updateSMSSpamExtensionNameChatProperty:
updateReceivedBlackholeError:
updateSMSHandshakeState:
updateMessageHandshakeState:
isiMessageSpam
isSMSSpam
lastSentMessageDate
receivedBlackholeError
smsHandshakeState
messageHandshakeState
lastSeenMessageGUID
updateLastSeenMessageGuidIfNeeded:
updateHasHadSuccessfulQuery:
updateGroupPhotoGuid:
updateGroupPhotoUploadFailureCount:
_persistMergedIDMergedChatsIfNeeded:
cloudKitChatID
cloudKitDebugDescription
tearDownToneNotificationSessionIfNeeded
updateNicknamesForParticipants:
srCloudKitSyncState
createEngramGroupOnMessageSend
pendingENGroupParticipantUpdate
nicknamesForParticipants
wasReportedAsJunk
numMessagesSent
setNumMessagesSent:
meCardUpdated
_accountID
_serviceName
_properties
_chatIdentifier
_guid
_groupID
_engramID
_roomName
_displayName
_lastAddressedLocalHandle
_lastAddressedSIMID
_participants
_lastMessage
_chatInfo
_state
_unreadCount
_rowID
_cloudKitSyncState
_originalGroupID
_serverChangeToken
_lastReadMessageTimeStamp
_lastMessageTimeStampOnLoad
_style
_createEngramGroupOnMessageSend
_pendingENGroupParticipantUpdate
_isArchived
_isFiltered
_isBlackholed
_hasHadSuccessfulQuery
_wasReportedAsJunk
_meCardUpdated
_cloudKitRecordID
_srCloudKitRecordID
_lastSeenMessageGuid
_srServerChangeToken
_srCloudKitSyncState
_nicknamesForParticipants
_numMessagesSent
_container
setCachedSalt:
fetchUserRecordIDWithCompletionHandler:
fetchLatestRecordKeyFromCKAndCreateIfKeyDoesNotExistWithCompletion:forceFetch:
_CKUtilitiesSharedInstance
_fetchLatestSaltFromCloudKitAndPersistWithCompletion:
clearLocalSyncState
fetchLatestRecordKeyFromCKAndCreateIfKeyDoesNotExistWithCompletion:
deleteDeDupeRecordZone
_cachedSalt
_forceReloadChats:
replayMessages
initialize
_contactsChanged:
updateMeCardHasUpdatedForAllChats
_chatsWithBlackholed:
blackholedChats
existingChatForID:account:
addChat:
isInternationalSpamFilteringEnabled
existingSMSChatForID:withChatStyle:
addIMDHandleToRegistry:
existingChatWithIdentifier:account:
existingChatForRoom:account:
existingiMessageChatForID:withChatStyle:
allChats
existingChatForIDs:account:displayName:groupID:style:
allChatsWithIdentifier:style:serviceNames:
updateLastMessageForChat:hintMessage:historyQuery:
unreadCountForChat:
isBeingSetup
updateUnreadCountForChat:
_sharedMessageStore
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:
__removeChatFromGroupIDChatIndex:
__addChatToGroupIDChatIndex:
blackholedChatsExist
blackholedChatsExist:
addChat:firstLoad:
personCentricGroupedChatsCache
_contactsBasedMerginEnabled
_updateCachedCNIDMapForHandles:
cachedAliasToCNIDMap
deleteChat:
deleteInteractionsWithChatGUIDs:
removeIMDHandleFromRegistry:
addMessageWithGUID:toChat:
removeMessageWithGUID:fromChat:
updateStateForChat:hintMessage:
addMessage:toChat:deferSpotlightIndexing:
addMessageWithGUID:toChat:deferSpotlightIndexing:
_fixSMSGroupChatAndStoreIfNeeded:iMessageChat:chatToRegenerate:
chatStore
_chatGUIDToChatMapForChats:
_siblingChatForChat:usingChatGUIDToChatMap:
fixedUpSMSChatsWithGroupIDMap:
_fixUpChatParticipantsIfNeeded:usingChatGUIDToChatMap:
stringForChatStyle:
_chatInfoInRange:wantsBlackholed:
sortedArrayUsingComparator:
__imDeepCopy
exceptionWithName:reason:userInfo:
countOfAllChats
loadChatsWithCompletionBlock:
acquireAssertionToUnsuspendProcess
postSetupToAllListeners
_saveChats
loadAllChats
initWithUUIDString:
_populateContactIDOnHandles
_persistMergeIDMergedChatsIfNeeded
_markGroupPhotosAsUnpurgeableIfNecessary
initWithMessageHistorySyncTaskFactory:
setUpInitialConversationManager
_allHandles
allExistingChatsWithIdentifier:style:
indexOfObject:
_makeAllAttachmentsClassC
_updateRoutingTimerWithInterval:
_updateExpireStateTimerWithInterval:
fetchLatestRampStateFromCK:
performOneTimeAccountUpgradeCheckIfNeeded
nextObject
setAttributes:ofItemAtPath:error:
_createGroupChatsArray
findDuplicateUnnamedGroups:
updateGroupIDForChat:newGroupID:
_chat:isDuplicateOfChat:
findDuplicateChats:
_findChatWinnerInDuplicateChatArray:fixDisplayName:
_findLosingChatGUIDsInArrayOfChats:withWinner:
removeChat:
_mergeDuplicateGroupsIfNeeded
markAttachmentUnpurgeable:
groupChatsBasedOnIdentity:
setPersonCentricGroupedChatsCache:
uppercaseString
groupChatsBasedOnIdentityUsingCacheIfApplicable:
sortPersonCentricChatGroups:
truncateSortedChatsGroupedByPersonCentricID:toMaximumNumberOfChats:
_repairInconsistentGroupPhotoGuidOnMergedChatsIfNecessary:
_haveInconsistentGroupPhotoGuidOnMergedChats:
createdDate
initWithCKRecord:isUsingStingRay:
_updateSyncStatisticsForChat:incrementTotalCount:
_existingChatWithOriginalGroupID:onService:
newestChatWithOriginalGroupID:onService:
hasDumpedLogsForNoExisitingGroup
setHasDumpedLogsForNoExisitingGroup:
_existingChatForCKRecord:
applyChangesUsingCKRecord:isUsingStingRay:
_markForksAsSyncedForChat:
_shouldUpdateSyncStatsForChat:originalSyncState:
_ensureNoExistingGroupForCKRecord:
_insertChatUsingCKRecord:
_shouldMigrateIMDHandlesPersonCentricIDsOnAllChats
_noteDownAttemptToMigratePersonCentricIDsOnIMDHandles
_pcmidToHandlesMapForChats:
_handlesThatNeedPCMIDsUpdatedGivenMap:
_updatePCMIDOnHandles:
_addHandlesToPCMIDMapForChatParticipants:pcmidToHandleMap:
_handlesThatNeedPCMIDUpdatedGivenArray:
_updatePCMIDForHandle:
_personCentricIDForHandleID:
_updateHandleInDBWithPCMID:handle:
setPersonCentricID:
addLocationShareItemToMatchingChats:
addItem:toChat:
processMessageUsingCKRecord:updatedLastMessageCount:
_itemFromCKRecord:
_parentChatIDFromCKRecord:
_lookupChatUsingID:
_existingItemRequiresUpgrade:itemFromCKRecord:
_adoptUpdatedStateForExistingItem:itemFromCKRecord:
_shouldUpdateSyncStatsForMessage:originalSyncState:
_updateSyncStatisticsForMessage:incrementTotalCount:
_setSortIDOnIncomingMessage:forChat:
setFlags:
enumerateAttachmentGUIDsWithBlock:
_addItemToParentChatIfNotLocationItem:parentChat:updatedLastMessageCount:
numberWithUnsignedChar:
__im_dateWithCurrentServerTime
generatedRoomNameForGroupChat
didJoinChat:style:displayName:groupID:handleInfo:account:isBlackholed:
setHistoryToken:
isEqualToData:
aliasToCNIDMap
_updateCachedAliasToCNIDMap:withHistoryToken:completionHandler:
idToHandlesMap
_aliasToCNIDMapForAliases:
_generateCurrentAliasToCNIDDictionary
setCachedAliasToCNIDMap:
logHandleIDs:
logDictionary:
_extractHandlesFromMap:usingCNID:
existingOneOnOneChatsWithIdentifiers:
existingUnnamedGroupChatsContainingHandles:
_checkForContactChanges
chatsNeedRemerging:groupedChats:
_chatGUIDsThatNeedRemergingWithCompletionHandler:
_chatGUIDsThatNeedRemerging:chatDictionaryArray:aliasMap:
_updateCurrentAliasToCNIDDictionaryAndHistoryTokenWithCompletionHandler:
_handlesWithChangedContactsOriginalMap:newMap:
_chatsContainingHandles:
trackEvent:withDictionary:
personCentricGroupedChatsArrayWithMaximumNumberOfChats:skipsLastMessageLoading:usingChats:useCachedChatGroups:
chatForHandle:account:chatIdentifier:guid:lastAddressedHandle:lastAddressedSIMID:isBlackholed:
chatForHandles:account:chatIdentifier:style:groupID:displayName:guid:lastAddressedHandle:lastAddressedSIMID:isBlackholed:
chatForRoom:account:chatIdentifier:guid:
existingiMessageChatForID:
existingSMSChatForID:
existingChatWithEngramID:
existingChatForIDs:account:style:
allExistingSupportedServiceChatsWithIdentifier:style:
updateNotificationUnreadCountForChat:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:setUnreadCountToZero:
updateStateForChat:forcePost:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:setUnreadCountToZero:
removeItem:fromChat:
addMessage:toChat:
_fixUpChatParticipantsIfNeeded:
_chatInfoForConnection
_allChatInfo
_chatInfoForNumberOfChats:
_blackholedChatInfoForNumberOfChats:
_chatInfoForSaving
_setInitialLoadForTesting:
refreshUIWhileSyncing
saveChats
allHandlesForID:
_updateDuplicateUnnamedGroupsWithNewGroupIDIfNeeded
repairDuplicateChatsIfNeeded
_aliasToHandlesMap:
chatIdToLastMessageMapOfOldChats
chatsToUploadToCloudKitWithLimit:isUsingStingRay:
updateChatWithGUID:serverChangeToken:recordID:
updateChatUsingCKRecord:
markChatAsDeferredForSyncingUsingCKRecord:
markDefferredChatsAsNeedingSync
resetChatSyncStateForRecord:
repairPersonCentricIDsOnChatsIfNeeded
messagesToUploadToCloudKitWithLimit:
processMessageUsingCKRecord:
copyRecordIDsAndGUIDsPendingCloudKitDelete
clearPendingDeleteTable
_existingiMessageChatForChatIdentifier:style:
simulateMessageReceive:serviceName:groupID:handles:sender:
setIdToHandlesMap:
historyToken
setCkUtilities:
setChatStore:
messageProcessingController
messageHistorySyncController
conversationManager
_chatsLock
_handlesLock
_chats
_doneLoadingAfterMerge
_blackholedChatsExistCache
_chatsByGroupID
_hasDumpedLogsForNoExisitingGroup
_idToHandlesMap
_historyToken
_ckUtilities
_chatStore
_messageProcessingController
_messageHistorySyncController
_personCentricGroupedChatsCache
_cachedAliasToCNIDMap
_conversationManager
initWithContainerIdentifier:environment:
setMmcsEncryptionSupport:
setUseZoneWidePCS:
initWithContainerID:options:
setForceEnableReadOnlyManatee:
_serverSaysToUseOldContainer
_nickNameContainerIdentifier
privateCloudDatabase
publicCloudDatabase
manateeContainer
nonHSA2ManateeContainer
_nickNameContainer
truthPublicDatabase
nickNamePublicDatabase
fetchCurrentUserForNicknameContainer:
nickNameContainer
_manateeContainer
_nonHSA2ManateeContainer
encodeSystemFieldsWithCoder:
finishEncoding
cStringUsingEncoding:
_kvStorePath
_handleFetchZoneChangesOperation:
_handleModifyRecordsOperation:
configurationsByRecordZoneID
_fetchRecordZoneChangesOptionsFromOperation:
resultsLimit
fetchAllChanges
_fetchResultLimit:
recordStore
_ckRecordFromData:
recordChangedBlock
deleteBatchWithContext:error:
recordZoneChangeTokensUpdatedBlock
recordZoneFetchCompletionBlock
fetchRecordZoneChangesCompletionBlock
_serializedCKRecordData:
perRecordCompletionBlock
setRecordStore:
_identifier
_queue
_recordStore
retryTimer
setRetryTimer:
initWithZoneName:
_rampUpRecordID
_shouldSendPriorityRequest
desiredKeys
isValid
timerWithTimeInterval:repeats:block:
mainRunLoop
addTimer:forMode:
fireDate
_writeRampStateAllowed:promoted:visible:fetchHadServerError:
_performRampCheckWithRetryAfter:
_persistRampFetchServerError:
_fetchLatestRampStateFromCK:
cachedRampState:
_retryTimer
context
firstOccurrence
setContext:
shouldJettison:
setCount:
_contextWeakReference
_firstOccurrence
_count
initWithFormat:arguments:
setType:
setCreatedDate:
setIsIncoming:
setUserInfo:
setTotalBytes:
setIsSticker:
setStickerUserInfo:
setOriginalGUID:
saveAttachmentsForTransfer:chatGUID:storeAtExternalLocation:completion:
isAuxVideo
guidByStrippingAuxPrefix:
initWithPathToVideo:pathToImage:imageDisplayTime:pairingIdentifier:
writeToBundleAtURL:error:
startDate
stickerUserInfo
srCloudKitServerChangeTokenBlob
originalGUID
_transferCanBeMarkedPurgable:
storeAttachment:associateWithMessageWithGUID:chatGUID:storeAtExternalLocation:
updateAttachment:chatGUID:storeAtExternalPath:
fileTransferWithAttachmentRecordRef:
_cloudkitSyncingEnabled
pathExtension
markAttachment:purgeable:
markFile:asPurgeable:
getAuxVideoPath:
_updateLegacyTransferGUIDOnMessageIfNeeded:andUpdateTransfer:
_shouldEarlyReturnForWrongItemType:
_loadAttachmentRecordForGUID:
_newFileTransferFromIMDAttachmentRecordRef:
_IMTransferGUIDForMessageGUID:andIndex:
_updateAttachmentGUID:withGUID:
_updatedMessageBody:replacingGuid:withGuid:
setBody:
setFileTransferGUIDs:
characterAtIndex:
attribute:atIndex:effectiveRange:
removeAttribute:range:
addAttribute:value:range:
deleteAttachmentsForTransfer:
isSafeToDeleteAttachmentPath:
canMarkPurgable
removeAttachment:fromMessageWithGUID:
_fileEligibleForCacheDelete:
_reindexMessage:completion:
deleteAttachmentsWithGUIDs:
deleteAttachmentDataForTransfer:
deleteAttachmentWithGUID:
setBroadcastedSyncStateStateToStarting
setBroadcastedSyncStateStateToFinished
addSyncDebuggingInfoToDictionary:
syncController:syncBatchCompleted:
setBroadcastedSyncStateToStartingPeriodicSync
setBroadcastedSyncStateToStartingInitialSync
syncStateDebuggingInfo:
_isSyncing
addBlock:withTimeout:forKey:description:
im_enqueuiMessageBlock:withTimeout:description:
im_enqueuSMSBlock:withTimeout:description:
initWithID:unformattedID:countryCode:personCentricID:
loadAllChatsProgressivelyEnabled
_addGroupPhotoToTransferCenterForChat:
updateHandle:forMessage:WithPC:onService:
_broadcastUpdateForMergedChatWithPersonCentricIDIfNeeded:updatedHandleID:
archiveChat:
unarchiveChat:
blackholeChat:
unblackholeChat:
chatsWithHandle:onService:
chatsWithRoomname:onService:
remapMessageError:toError:forChat:completion:
setChatIsFiltered:withChatGuid:
updatePersonCentricIDForHandlesInChatWithMessage:fromIdentifier:personCentricID:chat:
_allHandlesOnAllChats
_broadcastToForceReloadChats
messagePTaskStore
setMessagePTaskStore:
_lastModificationStamp
_messagePTaskStore
_addLocationShareItemToMatchingChats:handleID:hasStoredItem:broadcastChanges:
account:chat:style:chatProperties:messageUpdated:
_generateLocationSharingItemWithHandleID:direction:action:
receivedIncomingLocationSharePacket:
_forwardMappingPacket:toID:account:
_migrateSyncTokens
incompatibleMessageDeleteDetected:
size
_numberOfMessagesToUpload
_messageZoneID
_messageRecordSalt
_sharedIMDMessageStore
_isValidCKRecordToSync:
_recordsToSaveWithAttemptCount:
addNewMessagesSyncedCount:
_writeDirtyMessagesToCloudKitWithCompletion:
_recordsToSave
_syncOperationGroupName
_processRecordWriteCompletionForRecord:NSError:
_processModifyRecordsCompletion:deletedRecordIDs:operationError:isLastBatchOfWrite:writeCompletionBlock:
_deviceConditionsAllowsMessageSyncForActivity:deviceConditionsToCheck:currentBatchCount:maxBatchCount:
_isCoreDuetSyncForMaxBatchCount:
_shouldDeferCoreDuetMessagesSync
_numberOfBatchesOfMessagesToFetchInInitialSync
setArchivedRecordSyncToken:
_changeTokenKey
setLatestSyncToken:
_fetchArchivedRecordsIfNeeded:currentBatchCount:maxNumberOfBatches:WithCompletionBlock:
_resetArvchivedRecordSyncToken
archivedRecordSyncToken
_processRecordChange:
setRecordFetchedBlock:
_processArchivedRecordsFetchCompletionZoneID:serverChangeToken:moreComing:currentBatchCount:maxNumberOfBatches:NSError:completionBlock:
_processFetchArchivedRecordCompletionWithError:WithCompletionBlock:
setFetchArchivedRecordsCompletionBlock:
_fetchMessageZoneChangesSyncType:currentBatchCount:maxNumberOfBatches:completionBlock:
_messageZoneCreated
recordZoneIDsWithPendingArchivedRecords
_doesAnyRecordZoneIDHavePendingArchivedRecords:
_numberOfRecordsToFetchForSyncType:
_isDiskSpaceAvailableForSyncType:currentBatchCount:
latestSyncToken
_shouldFetchArchivedRecords:
_processRecordZoneFetchCompletionZoneID:serverChangeToken:clientChangeTokenData:moreComing:NSError:syncType:currentBatchCount:maxNumberOfBatches:shouldFetchArchivedRecords:completionBlock:
_processFetchRecordZoneChangesCompletionWithError:completionBlock:
encounteredIncompatibleMessage
setEncounteredIncompatibleMessage:
syncDeletedMessagesToCloudKitWithCompletion:
_noteSyncEnded
_shouldMarkAllMessagesAsNeedingSync
_hasMarkedAllMessagesAsNeedingSync
_markAllUnsuccessFullSyncMessagesAsNeedingSync
_deleteStingRaySyncToken
deleteMessageSyncToken
_needsToMarkAllMessagesAsNeedingSync
_processRecordDeletionCompletion:error:completionBlock:
_constructMessageRecordIDUsingTombStoneDictionary:
_messageDeleteBatchSize
_deleteMessagesWithRecordIDs:completion:
_resetSyncToken
_markAllIncompatibleMessagesForDeletion
syncMessagesWithSyncType:deviceConditionsToCheck:activity:completionBlock:
deleteMessagesZone
visitedChats
setVisitedChats:
_encounteredIncompatibleMessage
_archivedRecordSyncToken
_visitedChats
IMDaemonCoreMessageReceivedTimingCollection
postCoreAutomationNotificationWithDictionary:withVerboseLogging:
postCoreAutomationNotificationIncomingMessageProcessedWithDuration:
containsObjectIdenticalTo:
removeObjectIdenticalTo:
methodSignatureForSelector:
invokeWithTarget:
addTarget:
removeTarget:
forwardInvocation:
_targets
set_targets:
set_lock:
permanentHighQualityLocalPath
_fileManager
_copyCKRecordFromExistingCKMetadata:
_assetURLToInsertToRecord
md5HashForURL:
etag
recordIDUsingSalt:zoneID:guid:
_setRecordPropertiesBasedOnExistingRecord:useStingRay:
initWithFileURL:
_setCKRecordAsset:forKey:
_auxVideoPathIfItExists
moveItemAtURL:toURL:error:
initWithContentsOfURL:
writeToURL:atomically:
_recordIsInvalid:
md5HashForTransfer
utiTypeForRecord:
sizeOfAssetForRecord:
initWithFilePath:
storeDictionary:error:
transactionLogMessageFromDictionaryRepresentation:
_fetchNexBatchOfMessagesAndReplay
batchProcessingBlock
setHeldDeletionContext:
setSyncTaskByServiceName:
heldDeletionContext
copyNextBatchWithSize:iterationContext:
completionBlock
automationCompletionBlock
setAutomationCompletionBlock:
deleteReplayDB
_processBatch:
filePath
endRecordingReplayDatabase
batchSize
initWithStorageController:
storeMessage:type:error:
deleteReplayDBIfNotUnderFirstUnlock
overrideStorageControllerWithDatabaseFromPath:
restoreDefaultStoreControllerInstance
startRecordingReplayDatabase
replayMessagesWithCompletion:
isRecordingReplayDB
syncTaskByServiceName
storageController
setStorageController:
_suspendedStorageController
_isRecordingReplayDB
_syncTaskByServiceName
_heldDeletionContext
_automationCompletionBlock
_storageController
_accountDidChange:
currentCalendar
dateBySettingHour:minute:second:ofDate:options:
dateByAddingTimeInterval:
_IMAHDAgentFallbackIntervalInSeconds
_maxTimeToDeferInSeconds
_nightlySyncTimerFired
setNightlySyncTimer:
dumpMOCLoggingMetaData
_syncNotCompletedRecently
beginFullSyncPeriodic:deviceConditionsToCheck:activity:
_logIMAutomaticHistorySyncDidNotOccurMetricsUnderFirstUnlock:isSyncing:deviceConditionsAllowSync:syncNotCompletedRecently:
nightlySyncTimer
registerForAccountNotifications
_kickOffNightlyPeriodicSyncIfApplicable
_dispatchNotification:withBlock:
kickOffEagerSyncIfApplicable
isSystemLocked
longRunningSyncTimer
setLongRunningSyncTimer:
reloadTimer
setReloadTimer:
setInitialSyncAttempts:
_recordManager
_noteMetricsForSyncStartFrom:fullSync:
beginInitialSyncAttemptCount:
_retryError
_ifCloudKitAbleToSyncIsFullSync:activity:callBlock:
forceAutoBugCaptureWithSubType:errorPayload:
_accountHasMultipleDevices
_syncDeletesOrClearTombstones
_chatSyncedRecently
_syncChatsWithActivity:
incrementCoreDuetSyncAttempts
incrementAHDASyncAttempts
shouldMarkAllIncompatibleMessagesForDeletion
messageSyncController
_noteDownSyncStartedWithIsPeriodicSync:
_beginPeriodicSyncWithActivity:deviceConditionsToCheck:attemptCount:
_serverDoesNotAllowComingBackOnlineChatSync
_minimumChatComingOnlineSyncInterval
_serverDoesNotSingleDeviceLimitation
syncDeletesToCloudKitWithCompletion:
_periodicSyncAttemptCount
_autoBugCaptureWithSubType:debugDescription:
_manualSyncAttemptCount
clearCKRelatedDefaults
deleteChatSyncToken
refreshUIIfApplicableWithBatchCount:
_serverAllowsUIRefreshWhileSyncing
setShouldReloadConversations:
_serverAllowsUIRefreshTimerWhileSyncing
reloadTimeInterval
_refreshUIWhileSyncing
shouldReloadConversations
_performLastSyncDateMetricForSuccessfulSync
_performLastCompleteSyncedDBDateMetricForSuccessfulSync
initWithTimeIntervalSince1970:
lastLogDumpDate
lastRestoreFailureLogDumpDate
initWithCalendarIdentifier:
components:fromDate:
hour
_currentHour
setLastRestoreFailureLogDumpDate:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
_deleteRestoreFailuresDirectory
_withinAnHourOfLogDumpHour
_hasDumpedRestoreFailureLogsInPastHour
sendRestoreFailuresLogDumps
createTodaysStatisticDictionaryIfNeeded
_hasDumpedLogsInPastHour
setLastLogDumpDate:
chatSyncController
fetchedChatsDuringLastSync
_noteMeticsForSyncEndedWithSuccces:
statsCollector
initialMessageSyncController
initialAttachmentSyncController
_reloadChatRegistryOnMainThread
syncChatsWithType:withActivity:withCompletion:
_nukeCKData
noteCoreDuetSyncEnded
noteAHDASyncEnded
performMetricForSuccessfulSync
_beginPeriodicSyncWithActivity:deviceConditionsToCheck:attemptCount:useStingRay:syncChatsCompletionBlock:
_dealWithEncryptionKeyLostErrorIfApplicable:
attachmentSyncController
syncStartDate
postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:chatsDidsync:messagesDidSync:attachmentsDidSync:
trackEvent:withStatistic:
noteCompletedInitialSync
_writeDownSyncDateUseManatee:
_errorIndicatesDeviceNotGoodForSync:
noteSyncError:
syncAttachmentMetadataFirstSyncWithActivity:deviceConditionsToCheck:completionBlock:
syncPendingDeletionWithCompletion:
_beginExitStateCleanupIfNeededWithActivity:useNonHSA2ManateeDatabase:
rampManager
_callSyncWithCompletion:activity:
recordMetricIsCloudKitEnabled
setSyncStartDate:
noteMeticsForSyncStartFrom:fullSync:
noteMeticsForSyncEndedWithSuccces:duration:
IMAKUserInfoChangedNotification
handleAKUserInfoChangedNotification:
enforceAccountsMatchForMocAndShowDialogIfNeeded
IMAKUserInfoChangedAltDSIDKey
IMAKUserInfoChangedSecurityLevelKey
updateSecurityLevelDowngradedIfNeeded:
_addDatesDefaultsIfNeededToDictionary:keys:
_addDatesDefaultsIfNeededToDictionary:
_completedPeriodicSyncSinceFirstFullSyncForLastSyncDate:firstFullSyncCompletedDate:
_dailySyncStateDictionary
_submitCloudKitAnalyticWithOperationGroupName:analyticDictionary:
_periodicSyncStateDictionary
eventStreamHandler:didReceiveEventWithName:userInfo:
_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch
_dateForNext24LogDumpAtHour:timeNow:dumpNow:
performInitialSyncOnFirstConnectionOfImagentIfNeeded
beginChatSyncPeriodic:activity:
kickOffCloudKitSyncIfNeededOnImagentLaunch
sendRestoreFailuresLogDumpsIfNeeded
collectLogsIfNeeded
_sharedDatabaseManager
syncChatsWithMessageContext:
clearAnalyticDefaultsAndLocalSyncState
_serverDeniesPeriodicSyncAnalytics
_serverDeniesDailySyncStateAnalytics
logCloudKitAnalytics
initialSyncAttempts
_shouldReloadConversations
_syncStartDate
_longRunningSyncTimer
_nightlySyncTimer
_initialSyncAttempts
_lastLogDumpDate
_lastRestoreFailureLogDumpDate
_reloadTimer
maxNumberOfMessages
recentMessageIDs
addMessagesID:
currentNumberOfMessages
setRecentMessageIDs:
setInternalQueue:
_recentMessageIDs
_internalQueue
registerChat:style:displayName:groupID:handleInfo:
registerChat:style:displayName:groupID:handleInfo:account:
registerChat:style:displayName:groupID:lastAddressedHandle:handleInfo:account:isBlackholed:
registerChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:
canonicalizeChatIdentifier:style:
initWithID:unformattedID:countryCode:
isEngramEnabled
processInfo
processName
shouldImitateGroupChatUsingChatRooms
chatRoomForGroupChatIdentifier:
groupChatIdentifierForChatRoom:
chatForChatIdentifier:style:account:
processMessageForSending:toChat:style:allowWatchdog:account:completionBlock:
_mapRoomChatToGroupChat:style:
_updateWatchdogForMessageGUID:
_configureSessionInformationOnItem:toChat:withStyle:forAccount:
_setOutgoingFlagsOnMessage:
setErrorCode:
isBeingRetried
_messageStoreCompletion:inputMessage:outputMessage:originalMessage:completionBlock:
_IMDStoreMessage:inMessage:forceReplace:modifyError:modifyFlags:calculateUnreadCount:flagMask:shouldStoreBlock:didStoreBlock:block:
setAccount:
setTime:
_configureTimeOnOutgoingItem:
_configureAccountInformationOnItem:withAccount:
_configureIdentifierForOutgoingItem:withIdentifier:withStyle:
_determineResultMessageForInput:output:original:
_shouldDropSendingMessage
setIsBeingRetried:
retryToParticipant
setRetryToParticipant:
sendMessage:toChat:style:account:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:
didSendMessageReadReceiptForMessageID:account:
didSendMessagePlayedReceiptForMessageID:account:
didSendMessageSavedReceiptForMessageID:account:
didLeaveChat:style:
didUpdateChatStatus:chat:style:handleInfo:
didUpdateChatStatus:chat:style:account:
didJoinChat:style:displayName:groupID:handleInfo:
didJoinChat:style:displayName:groupID:lastAddressedHandle:handleInfo:
didJoinChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:category:spamExtensionName:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:
initWithDomain:code:userInfo:
isAwaitingStorageTimer
account:chat:style:chatProperties:error:
didReceiveError:forMessageID:forceError:account:
isDelivered
noteSuppressedMessageUpdate:
isExpirable
_updateExpireStateForMessageGUID:
_didReceiveMessageDeliveryReceiptForMessageID:attempts:date:account:
_hasSuppressedMessageID:chatGUID:
_didReceiveMessageReadForMessageID:date:attempts:useMessageSuppression:completionBlock:
didReceiveMessageReadForMessageID:date:useMessageSuppression:completionBlock:
_didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:
_didReceiveMessagePlayedForMessageID:date:attempts:useMessageSuppression:completionBlock:
didReceiveMessagePlayedForMessageID:date:useMessageSuppression:completionBlock:
_didReceiveMessagePlayedReceiptForMessageID:date:attempts:completionBlock:
_didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:useMessageSuppression:account:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:useMessageSuppression:completionBlock:
didSendMessage:forChat:style:forceDate:
didSendMessage:forChat:style:account:forceDate:
didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messageSent:
sendSavedReceiptForMessage:toChatID:identifier:style:account:
_updateRoutingForMessageGUID:chatGUID:error:account:
isAssociatedMessageItem
notifyDidSendMessageID:shouldNotify:
notifyDidSendMessageID:account:shouldNotify:
isSent
account:chat:style:chatProperties:notifySentMessage:sendTime:
_endMessageSuppressionForChatGUID:
isRead
didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:sender:
didReceiveMessage:forChat:style:account:
didReceiveMessages:forChat:style:account:
_isActivated
_setReplyGUIDOnMessage:forChat:
_setSortIDForMessage:forChat:
_storeMessage:chatIdentifier:localChat:style:account:messagesToPostArray:
_transcodeController
validateTextRenderingForMessage:completionBlock:blockUntilReply:
testOverrideTextValidationDidFail
account:chat:style:chatProperties:groupID:chatPersonCentricID:messagesReceived:messagesComingFromStorage:
_autoReplier
dateLastCallEnded
_updateInputMessage:forExistingMessage:
_suppressionExpiredForChat:
_suppresionTimerFired:
_setSuppressedMessage:inChatWithGUID:
removeTimingForKey:
valueOfPersistentProperty:
launchListenerForCapability:
_checkMessageForOneTimeCodes:
roomNameIsProbablyAutomaticallyGenerated
useChatRoom:forGroupChatIdentifier:
account:chat:style:chatProperties:invitationReceived:
account:chat:style:chatProperties:updateProperties:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:category:spamExtensionName:isBlackholed:
unregisterChat:style:
_removeChatGuidFromCoreDuet:
account:chat:style:chatProperties:groupID:chatPersonCentricID:statusChanged:handleInfo:
didChangeMemberStatus:forHandle:unformattedNumber:countryCode:forChat:style:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:
account:chat:style:chatProperties:chatPersonCentricID:member:statusChanged:
setOtherUnformattedID:
setOtherCountryCode:
isKnownContact:
spotlightItemRecorderClass
spotlightItemRecorder
deleteSearchableItemsWithDomainIdentifiers:bundleID:withCompletion:
initWithUnsignedInteger:
unsignedLongLongValue
_sharedAccountController
sendMessage:toChat:style:
_markChatAsDowngraded:
_handleRoutingWithDictionary:
requestRoutingForMessageGuid:inChat:error:completionBlock:
_routingTimerFired
requestRoutingWithCompletion:
canMakeExpireStateChecks
_handleExpireStateDictionary:
requestExpireStateForMessageGuid:completionBlock:
_expireStateTimerFired
requestExpireStateWithCompletion:
_handleWatchdogWithDictionary:
requestWatchdogForMessageGuid:completionBlock:
_watchdogTimerFired
requestWatchdogWithCompletion:
receivedUrgentRequestForMessages:
createOTCFromMessageBody:sender:guid:
trackEvent:
_storageTimerFired
pendingReadReceiptFromStorageCount
setPendingReadReceiptFromStorageCount:
_updateStorageTimerWithInterval:
initWithSet:
noteLastItemProcessed
_postMessagesFromStorage:
registerChat:groupID:style:
registerChat:style:
registerChat:style:handleInfo:
isChatRegistered:style:
processMessageForSending:toChat:style:allowWatchdog:completionBlock:
sendLocationSharingInfo:toID:completionBlock:
didLeaveChat:style:account:
didJoinChat:style:
didJoinChat:style:handleInfo:
didJoinChat:style:handleInfo:account:
didJoinChat:style:displayName:groupID:handleInfo:category:spamExtensionName:
didReceiveReplaceMessageID:forChat:style:
didReceiveErrorMessage:forChat:style:
didReceiveError:forMessageID:forceError:
didSendMessageReadReceiptForMessageID:
didSendMessagePlayedReceiptForMessageID:
didSendMessageSavedReceiptForMessageID:
didReceiveMessageDeliveryReceiptForMessageID:date:
didReceiveMessageDeliveryReceiptForMessageID:date:account:
updateChatGUID:withLastReadTimeStamp:withLastSeenMessageGUID:fromMe:
didReceiveMessageReadForMessageID:date:completionBlock:
didReceiveMessageReadReceiptForMessageID:date:completionBlock:
didReceiveMessagePlayedForMessageID:date:completionBlock:
didReceiveMessagePlayedReceiptForMessageID:date:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:useMessageSuppression:account:completionBlock:
didSendMessage:forChat:style:
notifyDidSendMessageID:
endMessageSuppression
didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:
didReceiveInvitation:forChat:style:
didUpdateChatStatus:chat:style:
didChangeMemberStatus:forHandle:forChat:style:
_shouldBlackholeGroupChatFromSender:toRecipient:withOtherParticipants:forAccount:
autoReplier:generatedAutoReplyText:forChat:
autoReplier:receivedUrgentRequestForMessages:
didSendBalloonPayload:forChat:style:messageGUID:account:completionBlock:
didReceiveBalloonPayload:forChat:style:messageGUID:account:
noteItemFromStorage:
noteLastItemFromStorage:
incrementPendingReadReceiptFromStorageCount
decrementPendingReadReceiptFromStorageCount
contactsAvatarRecipeData
setContactsAvatarRecipeData:
bizIntent
setBizIntent:
locale
setLocale:
shouldSendMeCard
setShouldSendMeCard:
laterDate:
account:chat:style:chatProperties:messagesUpdated:
emitPreviewGenerationBeginFromUTI:
generatePreview:previewURL:constraints:completionBlock:blockUntilReply:
emitPreviewGenerationEndFromUTI:
generatePreviewForTransfer:attachmentPath:completionBlock:
receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
receiveFileTransfer:transferGUID:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:generatePreview:progressBlock:completionBlock:
failTransfersOnPreviewGenerationFailure
setSyncToken:
syncToken
_syncToken
ckChatSyncControllerWantsToSync
replayControllerWantsToSync
IDSTransportLogWantsToSync
replayControllerNeedsSync
setReplayControllerNeedsSync:
_evaluateStateAndActIfNeeded
idsTransportLogNeedsSync
setIdsTransportLogNeedsSync:
ckChatSyncControllerNeedsSync
setCkChatSyncControllerNeedsSync:
_scheduleNextEvaluation
currentlyExecutingSyncTask
setCurrentlyExecutingSyncTask:
syncTaskFactory
setSyncTaskFactory:
_replayControllerNeedsSync
_ckChatSyncControllerNeedsSync
_idsTransportLogNeedsSync
_currentlyExecutingSyncTask
_syncTaskFactory
_migrateServerChangeToken
stingRayLockRecord
manateeLockRecord
setStingRayLockRecord:
setManateeLockRecord:
_randomSalt
copyCKRecordRepresentationWithZoneID:salt:isUsingStingRay:
setLockRecord:isUsingStingRay:
_updateChatUsingCKRecord:
_markChatAsDefferedForSyncingUsingRecord:
_processModifyPerRecordCallBack:error:isUsingStingRay:
_numberOfChatsToWrite
_copyChatsToUploadWithLimit:
_logGreenTeaLogsForChats:
_newckRecordsFromChats:
lockRecordForStingRay:
_generateLockRecord
addNewChatsSyncedCount:
_writeDirtyChatsToCloudKitWithCompletion:isUsingStingRay:
_shouldResyncChatsForError:
_writeCKRecordsToChatZone:isUsingStingRay:withCompletion:
_chatZoneID
_numberOfChatsToFetch
setFetchedChatsDuringLastSync:
_kickOffWriteOnCKQueueWithCompletion:isUsingStingRay:
_chatZoneCreated
_kickOffWriteIfNeededForSyncType:completion:isUsingStingRay:
_clearStingRaySyncToken
_fetchChatRecordOperation
_processRecordChanged:isUsingStingRay:
_processRecordZoneChangeTokenUpdated:zoneID:clienChangeToken:
_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:error:
_processFetchRecordChangesCompleted:completion:isUsingStingRay:syncType:
setConfigurationsByRecordZoneID:
_anyChatExistsOnServerWithResultsLimit:changeToken:completion:
_shouldMarkAllChatsAsNeedingSync
_hasMarkedAllChatsAsNeedingSync
__syncChatsWithCloudKit:attemptCount:withCompletion:
_eligibleForTruthZone
_syncChatsWithCloudKitWithCompletionType:syncChatsCompletionBlock:
_needsToMarkAllChatsAsNeedingSync
_copyRecordIDsToDelete
_handleChatDeletionCompletionForRecordIDs:error:
_resetChatSyncStateForRecord:
_lockRecordHadConflict:
lockRecord
setLockRecord:
_fetchedChatsDuringLastSync
_latestSyncToken
_lockRecord
_manateeLockRecord
_stingRayLockRecord
initWithGUID:
initWithStoreDictionary:
setTaskFlag:
needsProccesingFor:
compeletedTask:
taskFlags
_taskFlags
_cachedPathForStickerWithProperties:
_isRecipeBasedSticker:
_FTDataFromHexString
transcodeLocalTransferPayloadData:balloonBundleID:completionBlock:
retrieveStickerWithProperties:completionBlock:
stickerPackGUIDToPackMap
setStickerPackGUIDToPackMap:
_stickerPackGUIDToPackMap
__pruneTypingContexts
_setTimerForPruningTypingContext
initWithTimeIntervalSinceNow:
hasRecentlyMessaged:
noteRecentMessageForPeople:
updateLatestActiveDestination:ForHandle:incomingType:
activeDeviceForHandle:
_typingContext
_typingContextTimer
_activeDeviceForHandle
beginBuddyChanges
endBuddyChanges
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
hasListeners
account:buddyPropertiesChanged:
localPropertiesOfBuddy:
buddyPictures
pictureOfBuddy:
pictureKeyForBuddy:
allBuddies
markBuddiesAsChanged:
changeProperty:ofBuddy:to:
clearPropertiesOfBuddy:
property:ofBuddy:
localProperty:ofBuddy:
clearLocalProperties
changeLocalProperty:ofBuddy:to:
_networkCall_InsertRowGuid:taskFlags:
_networkCall_IMDMessagePTaskSelectWithLimit:
_networkCall_IMDMessagePTaskDeleteAllCompletedTask
_networkCall_IMDMessagePTaskUpdateTaskFlagsForGUID:taskFlags:
storePTask:
updateTaskFlagsForPTask:
loginIDForAccount:
disallowReconnection
cancelRequestID:serviceIdentifier:
joinChat:style:groupID:joinProperties:
invitePersonInfo:withMessage:toChat:style:
invitePerson:withMessage:toChat:style:
invitePersonInfoToiMessageChat:withMessage:toChat:style:
joinChat:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:
leaveChat:style:
leaveiMessageChat:style:
removeChat:style:
declineInvitationToChat:style:
setProperties:ofParticipant:inChat:style:
closeSessionChat:style:
hasCapability:
noteBadPassword
loginServiceSessionWithAccount:
defaultChatSuffix
joinChat:style:joinProperties:
joinChat:handleInfo:style:groupID:joinProperties:
validityOfChatRoomName:
cancelVCRequestWithPerson:properties:conference:
deleteContext
setDeleteContext:
_deleteContext
store
setStore:
_filePath
_store
weakToStrongObjectsMapTable
stringWithUTF8String:
didReceiveEventWithName:userInfo:
delegateToQueue
queueForDelegate:
_delegateToQueue
_handleFirewallUserNotificationDidFinish:
warnIfPortBlocked:forAction:
userNotificationDidFinish:
_firewallUserNotificationForService:
_login_serverSettingsReadyWithAccount:
requiresDataConnectionActivation
_data_connection_readyWithAccount:
_login_usernameAndPasswordReadyWithAccount:
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
initWithProxyProtocol:proxyHost:proxyPort:delegate:
retrieveProxyAccountSettings
_login_checkUsernameAndPasswordWithAccount:
_setValue:ofPersistentProperty:
showForgotPasswordNotificationForAccount:
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
_doLoginIgnoringProxy:
account:loginStatusChanged:message:reason:properties:
_wentOfflineWithAccount:
systemProxySettingsFetcher:retrievedHost:port:protocol:
systemProxySettingsFetcher:retrievedAccount:password:
serviceSessionDidLoginWithAccount:
serviceSessionDidLogoutWithAccount:
serviceSessionDidLogoutWithMessage:reason:properties:account:
_autoReconnectTimer:
setID:
setCountryCode:
setUnformattedID:
_unformattedID
_countryCode
_personCentricID
_CNContactID
_copyCKRecordFromExistingCKMetadataIsUsingStringRay:zoneID:salt:
_setCKRecordArray:forKey:
_arrayForKey:
stringByTrimmingCharactersInSet:
initWithMessageStore:
initWithMessageStore:defaultsStore:
initWithBundleIdentifier:
_updateBadgeAndCancelPreviousUpdate
_updateBadge
_shouldShowFailureString
_postBadgeString:
_postBadgeNumber:
notificationCenter
setBadgeNumber:withCompletionHandler:
setBadgeString:withCompletionHandler:
isInAppleStoreDemoMode
setNotificationCenter:
sharedDefaultsInstance
setSharedDefaultsInstance:
_lastFailedMessageDate
_showingFailure
_isUnexpectedlyLogOut
_addedObserverForUnexpectedlyLoggedOut
_notificationCenter
_sharedDefaultsInstance
activeConversations
_activeTUConversations
_addTUConversationToMessageStore:shouldBroadcast:
UUID
UUIDString
messagesGroupUUID
_chatForTUGroupID:
_conversationItemForChat:conversation:
isLocallyCreated
initiator
remoteMembers
handles
value
_initiatorForConversation:chat:
_shouldAddNewItemForConversation:
_messageStore
_insertCurrentActiveTUConversationsIfNeeded
conversationManager:stateChangedForConversation:
conversationsChangedForConversationManager:
conversationManager:localVideoToggledForConversation:
conversationManager:remoteMembersChangedForConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:
conversationManager:removedActiveConversation:
conversationManager:addedActiveConversation:
serverDisconnectedForConversationManager:
encryptedValuesByKey
_setValue:forKey:
valuesByKey
_valueForKey:
recordNameUsingSalt:guid:
updateAccountWithAccountInfo:
accountInfo
imdAccountLoginFromIDSAccountWithType:login:
linkedUserURIs
initWithAccountID:defaults:service:idsAccount:
_idsAccount
isSubService
addRegistrationDelegate:queue:
subService
_loadIDSAccountController
initWithBundle:isMainService:
setMainService:
setSubServiceName:
removeRegistrationDelegate:
subServiceName
enabledAccounts
_removeAccount:
initWithDictionary:uniqueID:serviceName:
accountFromIDSAccountWithUniqueID:
updateAccountActivation
refreshRegistration
accountController:accountAdded:
accountController:accountUpdated:
accountController:accountRemoved:
accountController:accountEnabled:
accountController:accountDisabled:
account:registrationStatusInfoChanged:
account:aliasesChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
refreshRegistrationForAccount:
registrationFailedForAccount:needsDeletion:
setMockAccountController:
mockAccountController
setSubService:
_activatingAccount
_deactivatingAccount
_subService
_subServiceName
_mainService
deviceInformationString
idsAccounts
_FZBestGuessFZIDType
_URIFromFZIDType:
_updateAccountStatusToUnregistered:withAccount:
authenticateAccount
registerAccount
unregisterAccount
passwordUpdated
updateAuthorizationCredentials:token:
_aliasesForIDSAccount:
aliases
removeAliases:
addAliases:
validateAliases:
unvalidateAliases:
validateProfile
_isDeviceRegisteredForAccount:
validationStatusForAlias:onAccount:
resetCallerIDForIDSAccount:
_reregisterAndReidentify:
_aliasStringsForIDSAccount:
_validationStatusForAlias:onAccount:
callerURIForIDSAccount:
_URIFromCanonicalizedPhoneNumber
_appearsToBeDSID
registeredURIs
setByAddingObjectsFromSet:
idsAccountForURI:IDSServiceName:
imdAccountForIDSAccount:
_isDeviceRegistered
_aliases
activeDevicesUpdated
reregister
reIdentify
validationStatusForAlias:
callerURI
idsAccountForFromURI:toURI:
GUID
_GUID
v16@0:8
@40@0:8@16@24@32
q16@0:8
v20@0:8B16
B16@0:8
v24@0:8@16
@16@0:8
v32@0:8@16@24
v32@0:8i16i20@24
i16@0:8
v40@0:8I16@20i28@32
v28@0:8I16@20
I16@0:8
@"NSMutableDictionary"
@"NSString"
@"IMDService"
@"IMDServiceSession"
@"NSDictionary"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@24@0:8Q16
@"<IMDMessageHistorySyncTask>"24@0:8Q16
@"IMDCKSyncController"
@"IMDAccountController"
@"IMDReplayController"
v32@0:8q16@24
v28@0:8@16B24
v28@0:8@"IDSAccount"16B24
v32@0:8@"IDSAccount"16@"NSArray"24
B32@0:8@16@24
@32@0:8@16@24
@24@0:8@16
@"NSSet"
v24@0:8@"IMDCKSyncState"16
@48@0:8@16@24@32@40
v24@0:8@?16
B32@0:8q16Q24
v32@0:8@16B24B28
v40@0:8@16B24B28@32
v48@0:8@16B24B28@32@40
@36@0:8@16B24@28
B32@0:8@16^@24
B24@0:8q16
v44@0:8q16@24B32@36
v40@0:8q16B24Q28B36
v36@0:8@16i24@28
v48@0:8@16i24@28B36@?40
v48@0:8@16B24B28B32B36@40
v40@0:8q16B24B28B32B36
v60@0:8q16B24B28B32B36B40B44B48Q52
v52@0:8@16i24@28B36B40@?44
v32@0:8@16@?24
v48@0:8@16^?24d32@?40
@"IMDCKSyncState"
@"IMLockdownManager"
@"IDSServerBag"
@"FTDeviceSupport"
@"IMDefaults"
v24@0:8@?<v@?Q>16
@?24@0:8@16
@?16@0:8
v32@0:8Q16Q24
v48@0:8@16Q24@32Q40
v32@0:8@"NSString"16@"NSString"24
@"CKServerChangeToken"24@0:8@"NSString"16
v32@0:8@"CKServerChangeToken"16@"NSString"24
@"NSBundle"
@44@0:8@16@24@32B40
@"NSDate"
@"NSArray"
@"NSTimer"
@"<IMDaemonListenerProtocol>"
@"IMOneTimeCodeUtilities"
d16@0:8
v24@0:8d16
@"IMRemoteURLConnection"
@"NSObject<OS_dispatch_queue>"
q24@0:8@16
v24@0:8q16
I24@0:8@16
@"<IMDMessagePTaskStore>"
@76@0:8@16@24Q32B40@44Q52^Q60B68B72
v52@0:8@16@24B32@36@44
v24@0:8@"IMConnectionMonitor"16
v28@0:8B16@20
v40@0:8@16@24@32
v52@0:8@16@24@32C40@44
v76@0:8@16@24@32C40@44@52@60@68
v36@0:8@16@24C32
v52@0:8@16@24@32@40C48
v44@0:8@16@24@32C40
v44@0:8@16@24B32@?36
v20@0:8I16
v60@0:8@16@24@32@40@48C56
v48@0:8@16@24@32@40
v48@0:8@16I24I28@32@40
v64@0:8@16@24@32@40@48@56
v176@0:8@16@24@32@40@48@56@64@72@80@88B96B100B104B108B112B116@120@128@136@144@152@160@?168
v52@0:8@16@24@32@40B48
v24@0:8@"IMDAccount"16
v24@0:8@"NSString"16
v24@0:8@"NSDictionary"16
v32@0:8@"NSString"16@"NSDictionary"24
v28@0:8B16@"NSString"20
v40@0:8@16@"NSString"24@"NSString"32
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32C40@"NSDictionary"44
v76@0:8@"NSString"16@"NSDictionary"24@"NSString"32C40@"NSString"44@"NSString"52@"NSString"60@"NSDictionary"68
v36@0:8@"NSString"16@"NSString"24C32
v52@0:8@"NSDictionary"16@"IMMessageItem"24@"NSString"32@"NSString"40C48
v52@0:8@"NSString"16@"NSString"24@"NSString"32C40@"NSString"44
v44@0:8@"NSDictionary"16@"NSString"24@"NSString"32C40
v52@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40C48
v32@0:8@"NSDictionary"16@"NSArray"24
v24@0:8@"NSURL"16
v44@0:8@"IMMessageItem"16@"NSString"24@"NSString"32C40
v44@0:8@"NSString"16@"NSString"24B32@?<v@?B>36
v52@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40C48
v24@0:8@"NSArray"16
v28@0:8@"NSDictionary"16B24
v32@0:8@"IMFileTransfer"16@"NSString"24
v40@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32
v60@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40@"NSString"48C56
v32@0:8@"NSDictionary"16@"NSString"24
v40@0:8@"NSString"16@"NSDictionary"24@"NSString"32
v48@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSNumber"40
v40@0:8@"NSData"16@"NSString"24@"NSString"32
v48@0:8@"NSString"16I24I28@"NSDictionary"32@"NSString"40
v32@0:8@"NSArray"16@"NSString"24
B32@0:8@"NSDictionary"16@"NSArray"24
v64@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSNumber"40@"NSString"48@"IDSAccount"56
v176@0:8@"IMMessageItem"16@"IMDChat"24@"IMDAccount"32@"NSData"40@"NSString"48@"NSString"56@"NSString"64@"NSArray"72@"NSString"80@"NSString"88B96B100B104B108B112B116@"NSNumber"120@"NSDictionary"128@"NSDictionary"136@"NSArray"144@"NSDictionary"152@160@?<v@?>168
v52@0:8@"IMDChat"16@"NSNumber"24@"NSString"32@"NSString"40B48
@20@0:8B16
@20@0:8I16
S16@0:8
@"NSRecursiveLock"
@"IMDAccount"
@"NSMutableArray"
@"NSMutableSet"
@"IMTimer"
@"<IMDAutoReplying>"
@"IMTimingCollection"
@"IMConnectionMonitor"
@"IMSystemProxySettingsFetcher"
v32@0:8@"NSArray"16@"IMDChat"24
@"<IMDAutoReplyDelegate>"16@0:8
v24@0:8@"<IMDAutoReplyDelegate>"16
@"<IMDAutoReplyDelegate>"
v40@0:8@16@24@?32
v32@0:8d16@24
B40@0:8@16@24@32
v48@0:8@16@24@32@?40
v36@0:8@16B24@?28
v36@0:8@16B24@28
@28@0:8@16B24
v48@0:8@16@24B32B36@?40
@"NSError"
@"CKRecordID"
@"NSNumber"
@"IMDRecordZoneManager"
@"IMDCKDatabaseManager"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
@"CKRecordZoneID"
@"CKRecordZone"
@"APSConnection"
@40@0:8@16@24Q32
@56@0:8@16@24Q32@40@48
@24@0:8r*16
@"IMDChatRegistry"
@"_INVocabulary"
@"NSArray"16@0:8
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@"IDSService"
v48@0:8q16Q24@32@?40
v48@0:8@16B24B28@?32@?40
v44@0:8@16B24@?28@?36
B28@0:8B16@20
v56@0:8@16B24B28Q32Q40@?48
v64@0:8@16B24B28Q32Q40@48@?56
v40@0:8@16B24B28@?32
@40@0:8@16@24q32
Q32@0:8@16@24
v44@0:8@16@24C32@?36
v32@0:8q16q24
B32@0:8q16q24
B20@0:8B16
v44@0:8@16q24B32@?36
v68@0:8B16q20q28q36q44@52@?60
B32@0:8q16@?24
v96@0:8@16@24@32B40B44q48q56@64q72q80@?88
v48@0:8@16@24@32q40
v32@0:8@16d24
v32@0:8@16q24
@24@0:8q16
v24@0:8Q16
@"IMDCKAttachmentSyncCKOperationFactory"
@"<IMDCKSyncTokenStore>"
@"NSObject<OS_xpc_object>"
v32@0:8@"IMKeyValueCollection"16@"NSDictionary"24
v44@0:8@16@24@32B40
v36@0:8@16@24B32
B24@0:8B16B20
@28@0:8Q16B24
v32@0:8Q16q24
@"IMKeyValueCollection"
@"<IMDCKSyncStateDelegate>"
v24@0:8@"IMFileCopier"16
v56@0:8@16@24B32Q36I44I48S52
@48@0:8@16B24Q28I36I40S44
v40@0:8@16Q24Q32
v72@0:8@16@24{IMPreviewConstraints=d{CGSize=dd}dB}32
v64@0:8@16@24{?=[8I]}32
v44@0:8@16@24B32B36B40
B44@0:8@16@24@32B40
{IMPreviewConstraints=d{CGSize=dd}dB}16@0:8
B32@0:8@16q24
v32@0:8@16Q24
@36@0:8@16B24^B28
@64@0:8@16@24Q32q40@48@56
@48@0:8@16q24@32@40
@48@0:8@16@24Q32q40
Q24@0:8@16
@44@0:8@16@24i32Q36
B28@0:8Q16B24
@28@0:8@16i24
^{_IMDAttachmentRecordStruct=}24@0:8@16
q20@0:8i16
q24@0:8q16
@24@0:8^{__CFArray=}16
@32@0:8@16Q24
Q40@0:8@16@24Q32
B32@0:8Q16@24
v48@0:8@16Q24Q32@?40
@32@0:8@16q24
@48@0:8@16@24Q32@40
v28@0:8B16@?20
B40@0:8@16@24Q32
@"IMNickname"
@"IDSKVStore"
B48@0:8@16@24@32B40B44
v32@0:8@?16d24
@44@0:8@16B24B28B32Q36
@52@0:8@16B24B28B32Q36B44B48
@56@0:8@16B24B28B32Q36B44B48B52
@60@0:8@16@24@32@40Q48B56
@80@0:8@16@24@32Q40Q48@56^B64^B72
@56@0:8@16@24@32d40@48
@36@0:8i16@20@28
@48@0:8@16@24@32Q40
@56@0:8@16@24@32@40Q48
^{_IMDHandleRecordStruct=}32@0:8@16@24
v60@0:8@16@24C32@36Q44@?52
@44@0:8@16C24@28@?36
@36@0:8@16C24@28
@56@0:8@16@24C32@36@44B52
@32@0:8q16Q24
@212@0:8@16@24@32@40@48@56@64@72@80@88@96q104C112q116B124@128@136q144@152q160q168@176q184@192@200B208
C16@0:8
v20@0:8C16
v20@0:8i16
@"IMMessageItem"
v28@0:8@?16B24
@68@0:8@16@24@32@40@48@56B64
@88@0:8@16@24@32C40@44@52@60@68@76B84
@28@0:8@16C24
@36@0:8@16@24C32
@52@0:8@16@24@32@40C48
v64@0:8@16@24@32B40@44B52B56B60
v40@0:8@16@24B32B36
v36@0:8@16B24B28B32
@20@0:8C16
v40@0:8@16@24^@32
@36@0:8{_NSRange=QQ}16B32
B24@0:8@?16
B36@0:8@16@24C32
@32@0:8@16^B24
@40@0:8q16B24@28B36
v40@0:8@16@24Q32
v28@0:8@16i24
v40@0:8^@16^@24@32
@"NSData"
@"IMDCKUtilities"
@"IMDChatStore"
@"IMDMessageProcessingController"
@"IMDMessageHistorySyncController"
@"TUConversationManager"
@"CKContainer"
v32@0:8B16B20B24B28
B24@0:8^@16
@"CUTWeakReference"
B36@0:8@16@24B32
@24@0:8^{_IMDAttachmentRecordStruct=}16
@"<IMDCKAbstractSyncControllerDelegate>"
v40@0:8@?16d24@32
v40@0:8I16I20@24@?32
B48@0:8@16@24@32@40
v40@0:8@16q24q32
Q24@0:8q16
v52@0:8@16@24@32B40@?44
B48@0:8@16Q24q32q40
v68@0:8@16@24B32q36q44@52@?60
v44@0:8B16q20q28@?36
v88@0:8@16@24@32B40@44q52q60q68B76@?80
v48@0:8q16q24q32@?40
@"CKServerChangeToken"
@"IMDCKMessageSyncCKOperationFactory"
@"NSLock"
@36@0:8@16@24B32
B36@0:8@16C24^@28
@"IMDReplayStorageController"
@"IMDReplayStorageIterationContext"
v40@0:8@"IMDXPCEventStreamHandler"16@"NSString"24@"NSDictionary"32
v32@0:8@"IMDCKAbstractSyncController"16Q24
@40@0:8q16@24^B32
v36@0:8B16Q20@28
v40@0:8@16Q24@?32
v52@0:8@16Q24Q32B40@?44
v32@0:8@?16@24
v36@0:8B16@20@?28
@"NSMutableOrderedSet"
v80@0:8@16@24B32B36B40B44Q48@?56@?64@?72
v28@0:8@16C24
v36@0:8@16C24@28
v52@0:8@16C24@28@36@44
v60@0:8@16C24@28@36@44@52
v72@0:8@16C24@28@36@44@52@60B68
v80@0:8@16C24@28@36@44@52@60@68B76
B28@0:8@16C24
v32@0:8^@16^C24
v48@0:8@16@24C32B36@?40
v56@0:8@16@24C32B36@40@?48
v44@0:8@16@24C32@36
v52@0:8B16@20@28@36@?44
v44@0:8@16C24@28@36
v68@0:8@16C24@28@36@44@52@60
v68@0:8@16C24@28@36@44q52@60
v64@0:8@16C24@28@36@44@52B60
v32@0:8i16@20C28
v32@0:8I16@20B28
v40@0:8I16@20B28@32
B48@0:8@16q24@32@40
v44@0:8@16q24@32B40
v52@0:8@16@24q32B40@?44
v48@0:8@16@24q32@?40
v88@0:8@16q24@32@40B48@52q60B68@72@?80
v68@0:8@16q24@32@40B48@52@?60
v80@0:8@16q24@32@40B48@52B60@64@?72
v52@0:8@16@24C32@36@44
v56@0:8@16@24C32@36@44B52
v60@0:8@16@24@32@40C48@52
v68@0:8@16@24@32@40C48@52@60
B44@0:8@16@24C32@36
B60@0:8@16@24@32C40@44@52
v40@0:8i16@20C28@32
v56@0:8i16@20C28@32@40@48
v64@0:8i16@20C28@32@40@48@56
v72@0:8i16@20C28@32@40@48@56@64
v68@0:8i16@20C28@32@40@48@56B64
v84@0:8i16@20C28@32@40@48@56@64@72B80
v80@0:8i16@20C28@32@40@48@56q64@72
v100@0:8i16@20C28@32@40@48@56@64@72q80@88B96
v40@0:8i16@20@28C36
v56@0:8i16@20@28@36@44C52
v64@0:8i16@20@28@36@44@52C60
v72@0:8i16@20@28@36@44@52C60@64
v80@0:8i16@20@28@36@44@52C60@64@72
v44@0:8@16@24I32@36
v60@0:8@16@24C32@36@44@?52
v108@0:8@16@24@32@40@48@56@64@72Q80B88@?92@?100
@"<IMDMessageHistorySyncTask>"
@"<IMDMessageHistorySyncTaskFactory>"
v36@0:8q16@?24B32
v44@0:8@16@?24B32q36
v32@0:8q16@?24
v36@0:8i16@20@?28
v40@0:8q16@24@?32
v40@0:8q16Q24@?32
@"IMDCKChatSyncCKOperationFactory"
@"CKRecord"
B24@0:8Q16
B24@0:8@"IMDMessagePTask"16
v68@0:8@16@24C32@36@44@52@60
{_FZChatRoomValidity=iS}24@0:8@16
@"IDSKVDeleteContext"
@32@0:8Q16^@24
@"NSMapTable"
B28@0:8i16@20
v44@0:8@16@24S32q36
v44@0:8@16i24@28@36
v52@0:8I16I20@24i32@36@44
@36@0:8B16@20@28
B28@0:8@16B24
@"UNUserNotificationCenter"
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
@"IDSAccount"
v32@0:8@"IDSAccountController"16@"IDSAccount"24
v32@0:8@"NSString"16@"NSArray"24
@28@0:8i16@20
@"IDSAccountController"
@"IMDIDSService"
q32@0:8@16@24
