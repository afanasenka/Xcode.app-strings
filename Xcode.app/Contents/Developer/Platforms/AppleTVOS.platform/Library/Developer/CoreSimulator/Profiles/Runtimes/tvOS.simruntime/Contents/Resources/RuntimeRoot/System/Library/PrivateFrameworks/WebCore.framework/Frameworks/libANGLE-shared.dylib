C\ A
Frontend workarounds
OpenGL workarounds
D3D workarounds
D3D compiler workarounds
Vulkan workarounds
Vulkan features
Metal features
Unknown
enabled
disabled
#version 300 es
precision highp float;
#define kMaxTexUnits 4
in vec4 pos;
in vec3 normal;
in vec4 color;
in float pointsize;
in vec4 texcoord0;
in vec4 texcoord1;
in vec4 texcoord2;
in vec4 texcoord3;
uniform mat4 projection;
uniform mat4 modelview;
uniform mat4 modelview_invtr;
uniform mat4 texture_matrix[kMaxTexUnits];
uniform bool enable_rescale_normal;
uniform bool enable_normalize;
// Point rasterization//////////////////////////////////////////////////////////
uniform bool point_rasterization;
uniform float point_size_min;
uniform float point_size_max;
uniform vec3 point_distance_attenuation;
// GL_OES_draw_texture uniforms/////////////////////////////////////////////////
uniform bool enable_draw_texture;
uniform vec4 draw_texture_coords;
uniform vec2 draw_texture_dims;
uniform vec4 draw_texture_normalized_crop_rect[kMaxTexUnits];
// Varyings/////////////////////////////////////////////////////////////////////
out vec4 pos_varying;
out vec3 normal_varying;
out vec4 color_varying;
flat out vec4 color_varying_flat;
out vec4 texcoord0_varying;
out vec4 texcoord1_varying;
out vec4 texcoord2_varying;
out vec4 texcoord3_varying;
const vec4 drawTextureVertices[6] = vec4[](
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(1.0, 0.0, 0.0, 1.0),
    vec4(1.0, 1.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(1.0, 1.0, 0.0, 1.0),
    vec4(0.0, 1.0, 0.0, 1.0));
vec4 drawTexturePosition(int vertexId)
    float drawTexX = draw_texture_coords[0];
    float drawTexY = draw_texture_coords[1];
    float drawTexZ = draw_texture_coords[2];
    float drawTexW = draw_texture_dims[0];
    float drawTexH = draw_texture_dims[1];
    return vec4(drawTexX, drawTexY, drawTexZ, 0.0) +
           drawTextureVertices[vertexId] *
           vec4(drawTexW, drawTexH, 1.0, 1.0);
vec4 drawTextureTexCoord(int vertexId, int textureUnit)
    float texCropU = draw_texture_normalized_crop_rect[textureUnit].x;
    float texCropV = draw_texture_normalized_crop_rect[textureUnit].y;
    float texCropW = draw_texture_normalized_crop_rect[textureUnit].z;
    float texCropH = draw_texture_normalized_crop_rect[textureUnit].w;
    return vec4(texCropU, texCropV, 0.0, 0.0) +
           drawTextureVertices[vertexId] *
           vec4(texCropW, texCropH, 0.0, 0.0);
vec4 calcWorldPosition(vec4 posInput)
    return modelview * posInput;
vec4 calcNdcFromWorldPosition(vec4 worldPos)
    return projection * worldPos;
float calcPointSize(vec4 ndcPos)
    float dist         = length(ndcPos.z);
    float attConst     = point_distance_attenuation[0];
    float attLinear    = point_distance_attenuation[1];
    float attQuad      = point_distance_attenuation[2];
    float attPart      = attConst + attLinear * dist + attQuad * dist * dist;
    float attPointSize = pointsize / pow(attPart, 0.5);
    return clamp(attPointSize, point_size_min, point_size_max);
vec3 calcNormal(vec3 normalInput)
    mat3 mvInvTr3 = mat3(modelview_invtr);
    vec3 result   = mvInvTr3 * normalInput;
    if (enable_rescale_normal)
    {
        float rescale   = 1.0;
        vec3 rescaleVec = vec3(mvInvTr3[2]);
        float len       = length(rescaleVec);
        if (len > 0.0)
        {
            rescale = 1.0 / len;
        }
        result *= rescale;
    }
    if (enable_normalize)
    {
        result = normalize(result);
    }
    return result;
void main()
    color_varying      = color;
    color_varying_flat = color;
    if (enable_draw_texture)
    {
        int vertexId        = gl_VertexID;
        vec4 posDrawTexture = drawTexturePosition(vertexId);
        gl_Position = posDrawTexture;
        pos_varying = posDrawTexture;
        normal_varying = normal;
        gl_PointSize = pointsize;
        texcoord0_varying = drawTextureTexCoord(vertexId, 0);
        texcoord1_varying = drawTextureTexCoord(vertexId, 1);
        texcoord2_varying = drawTextureTexCoord(vertexId, 2);
        texcoord3_varying = drawTextureTexCoord(vertexId, 3);
    }
    else
    {
        vec4 worldPos = calcWorldPosition(pos);
        vec4 ndcPos   = calcNdcFromWorldPosition(worldPos);
        gl_Position = ndcPos;
        pos_varying = worldPos;
        normal_varying = calcNormal(normal);
        // Avoid calculating point size stuff
        // if we are not rendering points.
        if (point_rasterization)
        {
            gl_PointSize = calcPointSize(ndcPos);
        }
        else
        {
            gl_PointSize = pointsize;
        }
        texcoord0_varying = texture_matrix[0] * texcoord0;
        texcoord1_varying = texture_matrix[1] * texcoord1;
        texcoord2_varying = texture_matrix[2] * texcoord2;
        texcoord3_varying = texture_matrix[3] * texcoord3;
    }
#version 300 es
precision highp float;
// Defines for GL constants
#define kMaxLights                           8
#define kMaxTexUnits                         4
#define kMaxClipPlanes                       6
#define kModulate                       0x2100
#define kDecal                          0x2101
#define kCombine                        0x8570
#define kReplace                        0x1E01
#define kBlend                          0x0BE2
#define kAdd                            0x0104
#define kAddSigned                      0x8574
#define kInterpolate                    0x8575
#define kSubtract                       0x84E7
#define kDot3Rgb                        0x86AE
#define kDot3Rgba                       0x86AF
#define kAlpha                          0x1906
#define kRGB                            0x1907
#define kRGBA                           0x1908
#define kLuminance                      0x1909
#define kLuminanceAlpha                 0x190A
#define kTexture                        0x1702
#define kConstant                       0x8576
#define kPrimaryColor                   0x8577
#define kPrevious                       0x8578
#define kSrcColor                       0x0300
#define kOneMinusSrcColor               0x0301
#define kSrcAlpha                       0x0302
#define kOneMinusSrcAlpha               0x0303
#define kLinear                         0x2601
#define kExp                            0x0800
#define kExp2                           0x0801
#define kNever                          0x0200
#define kLess                           0x0201
#define kEqual                          0x0202
#define kLequal                         0x0203
#define kGreater                        0x0204
#define kNotequal                       0x0205
#define kGequal                         0x0206
#define kAlways                         0x0207
#define kZero                              0x0
#define kOne                               0x1
#define kClear                          0x1500
#define kAnd                            0x1501
#define kAnd_reverse                    0x1502
#define kCopy                           0x1503
#define kAnd_inverted                   0x1504
#define kNoop                           0x1505
#define kXor                            0x1506
#define kOr                             0x1507
#define kNor                            0x1508
#define kEquiv                          0x1509
#define kInvert                         0x150A
#define kOr_reverse                     0x150B
#define kCopy_inverted                  0x150C
#define kOr_inverted                    0x150D
#define kNand                           0x150E
#define kSet                            0x150F
// Texture units ///////////////////////////////////////////////////////////////
uniform bool enable_texture_2d[kMaxTexUnits];
uniform bool enable_texture_cube_map[kMaxTexUnits];
// These are not arrays because hw support for arrays
// of samplers is rather lacking.
uniform sampler2D tex_sampler0;
uniform samplerCube tex_cube_sampler0;
uniform sampler2D tex_sampler1;
uniform samplerCube tex_cube_sampler1;
uniform sampler2D tex_sampler2;
uniform samplerCube tex_cube_sampler2;
uniform sampler2D tex_sampler3;
uniform samplerCube tex_cube_sampler3;
uniform int texture_format[kMaxTexUnits];
uniform int texture_env_mode[kMaxTexUnits];
uniform int combine_rgb[kMaxTexUnits];
uniform int combine_alpha[kMaxTexUnits];
uniform int src0_rgb[kMaxTexUnits];
uniform int src0_alpha[kMaxTexUnits];
uniform int src1_rgb[kMaxTexUnits];
uniform int src1_alpha[kMaxTexUnits];
uniform int src2_rgb[kMaxTexUnits];
uniform int src2_alpha[kMaxTexUnits];
uniform int op0_rgb[kMaxTexUnits];
uniform int op0_alpha[kMaxTexUnits];
uniform int op1_rgb[kMaxTexUnits];
uniform int op1_alpha[kMaxTexUnits];
uniform int op2_rgb[kMaxTexUnits];
uniform int op2_alpha[kMaxTexUnits];
uniform vec4 texture_env_color[kMaxTexUnits];
uniform float texture_env_rgb_scale[kMaxTexUnits];
uniform float texture_env_alpha_scale[kMaxTexUnits];
uniform bool point_sprite_coord_replace[kMaxTexUnits];
// Vertex attributes////////////////////////////////////////////////////////////
in vec4 pos_varying;
in vec3 normal_varying;
in vec4 color_varying;
flat in vec4 color_varying_flat;
in vec4 texcoord0_varying;
in vec4 texcoord1_varying;
in vec4 texcoord2_varying;
in vec4 texcoord3_varying;
// Alpha test///////////////////////////////////////////////////////////////////
uniform bool enable_alpha_test;
uniform int alpha_func;
uniform float alpha_test_ref;
// Shading: flat shading, lighting, and materials///////////////////////////////
uniform bool shade_model_flat;
uniform bool enable_lighting;
uniform bool enable_color_material;
uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform vec4 material_emissive;
uniform float material_specular_exponent;
uniform vec4 light_model_scene_ambient;
uniform bool light_model_two_sided;
uniform bool light_enables[kMaxLights];
uniform vec4 light_ambients[kMaxLights];
uniform vec4 light_diffuses[kMaxLights];
uniform vec4 light_speculars[kMaxLights];
uniform vec4 light_positions[kMaxLights];
uniform vec3 light_directions[kMaxLights];
uniform float light_spotlight_exponents[kMaxLights];
uniform float light_spotlight_cutoff_angles[kMaxLights];
uniform float light_attenuation_consts[kMaxLights];
uniform float light_attenuation_linears[kMaxLights];
uniform float light_attenuation_quadratics[kMaxLights];
// Fog /////////////////////////////////////////////////////////////////////////
uniform bool enable_fog;
uniform int fog_mode;
uniform float fog_density;
uniform float fog_start;
uniform float fog_end;
uniform vec4 fog_color;
// User clip plane /////////////////////////////////////////////////////////////
uniform bool enable_clip_planes;
uniform bool clip_plane_enables[kMaxClipPlanes];
uniform vec4 clip_planes[kMaxClipPlanes];
// Point rasterization//////////////////////////////////////////////////////////
uniform bool point_rasterization;
uniform bool point_sprite_enabled;
// GL_OES_draw_texture//////////////////////////////////////////////////////////
uniform bool enable_draw_texture;
// Outgoing fragment////////////////////////////////////////////////////////////
out vec4 frag_color;
float posDot(vec3 a, vec3 b)
    return max(dot(a, b), 0.0);
vec4 doLighting(vec4 currentFragment)
    vec4 materialAmbientActual = material_ambient;
    vec4 materialDiffuseActual = material_diffuse;
    if (enable_color_material || enable_texture_2d[0] || enable_texture_cube_map[0])
    {
        materialAmbientActual = currentFragment;
        materialDiffuseActual = currentFragment;
    }
    vec4 lightingResult = material_emissive + materialAmbientActual * light_model_scene_ambient;
    for (int i = 0; i < kMaxLights; i++)
    {
        if (!light_enables[i])
            continue;
        vec4 lightAmbient  = light_ambients[i];
        vec4 lightDiffuse  = light_diffuses[i];
        vec4 lightSpecular = light_speculars[i];
        vec4 lightPos      = light_positions[i];
        vec3 lightDir      = light_directions[i];
        float attConst     = light_attenuation_consts[i];
        float attLinear    = light_attenuation_linears[i];
        float attQuadratic = light_attenuation_quadratics[i];
        float spotAngle    = light_spotlight_cutoff_angles[i];
        float spotExponent = light_spotlight_exponents[i];
        vec3 toLight;
        if (lightPos.w == 0.0)
        {
            toLight = lightPos.xyz;
        }
        else
        {
            toLight = (lightPos.xyz / lightPos.w - pos_varying.xyz);
        }
        float lightDist = length(toLight);
        vec3 h          = normalize(toLight) + vec3(0.0, 0.0, 1.0);
        float ndotL     = posDot(normal_varying, normalize(toLight));
        float ndoth     = posDot(normal_varying, normalize(h));
        float specAtt;
        if (ndotL != 0.0)
        {
            specAtt = 1.0;
        }
        else
        {
            specAtt = 0.0;
        }
        float att;
        if (lightPos.w != 0.0)
        {
            float attDenom =
                (attConst + attLinear * lightDist + attQuadratic * lightDist * lightDist);
            att = 1.0 / attDenom;
        }
        else
        {
            att = 1.0;
        }
        float spot;
        float spotAngleCos = cos(radians(spotAngle));
        vec3 toSurfaceDir  = -normalize(toLight);
        float spotDot      = posDot(toSurfaceDir, normalize(lightDir));
        if (spotAngle == 180.0 || lightPos.w == 0.0)
        {
            spot = 1.0;
        }
        else
        {
            if (spotDot < spotAngleCos)
            {
                spot = 0.0;
            }
            else
            {
                spot = pow(spotDot, spotExponent);
            }
        }
        vec4 contrib = materialAmbientActual * lightAmbient;
        contrib += ndotL * materialDiffuseActual * lightDiffuse;
        if (ndoth > 0.0 && material_specular_exponent > 0.0)
        {
            contrib += specAtt * pow(ndoth, material_specular_exponent) * material_specular *
                       lightSpecular;
        }
        else
        {
            if (ndoth > 0.0)
            {
                contrib += specAtt * material_specular * lightSpecular;
            }
        }
        contrib *= att * spot;
        lightingResult += contrib;
    }
    return lightingResult;
bool doAlphaTest(vec4 currentFragment)
    bool shouldPassAlpha = false;
    float incAlpha       = currentFragment.a;
    switch (alpha_func)
    {
        case kNever:
            shouldPassAlpha = false;
            break;
        case kLess:
            shouldPassAlpha = incAlpha < alpha_test_ref;
            break;
        case kLequal:
            shouldPassAlpha = incAlpha <= alpha_test_ref;
            break;
        case kEqual:
            shouldPassAlpha = incAlpha == alpha_test_ref;
            break;
        case kGequal:
            shouldPassAlpha = incAlpha >= alpha_test_ref;
            break;
        case kGreater:
            shouldPassAlpha = incAlpha > alpha_test_ref;
            break;
        case kNotequal:
            shouldPassAlpha = incAlpha != alpha_test_ref;
            break;
        case kAlways:
        default:
            shouldPassAlpha = true;
            break;
    }
    return shouldPassAlpha;
bool doClipPlaneTest()
    bool res = true;
    for (int i = 0; i < kMaxClipPlanes; i++)
    {
        if (clip_plane_enables[i])
        {
            float dist = dot(clip_planes[i].xyz, pos_varying.xyz) + clip_planes[i].w * pos_varying.w;
            res        = res && (dist >= 0.0);
        }
    }
    return res;
vec4 doFog(vec4 currentFragment)
    float eyeDist = -pos_varying.z / pos_varying.w;
    float f       = 1.0;
    switch (fog_mode)
    {
        case kExp:
            f = exp(-fog_density * eyeDist);
            break;
        case kExp2:
            f = exp(-(pow(fog_density * eyeDist, 2.0)));
            break;
        case kLinear:
            f = (fog_end - eyeDist) / (fog_end - fog_start);
            break;
        default:
            break;
    }
    vec4 result = f * currentFragment + (1.0 - f) * fog_color;
    return result;
bool isTextureUnitEnabled(int unit)
    return enable_texture_2d[unit] || enable_texture_cube_map[unit];
vec4 getTextureColor(int unit)
    vec4 res;
    switch (unit)
    {
        case 0:
            if (enable_texture_2d[0])
            {
                res = texture(tex_sampler0, texcoord0_varying.xy);
            }
            else if (enable_texture_cube_map[0])
            {
                res = texture(tex_cube_sampler0, texcoord0_varying.xyz);
            }
            break;
        case 1:
            if (enable_texture_2d[1])
            {
                res = texture(tex_sampler1, texcoord1_varying.xy);
            }
            else if (enable_texture_cube_map[1])
            {
                res = texture(tex_cube_sampler1, texcoord1_varying.xyz);
            }
            break;
        case 2:
            if (enable_texture_2d[2])
            {
                res = texture(tex_sampler2, texcoord2_varying.xy);
            }
            else if (enable_texture_cube_map[2])
            {
                res = texture(tex_cube_sampler2, texcoord2_varying.xyz);
            }
            break;
        case 3:
            if (enable_texture_2d[3])
            {
                res = texture(tex_sampler3, texcoord3_varying.xy);
            }
            else if (enable_texture_cube_map[3])
            {
                // TODO: Weird stuff happens
                // res = texture(tex_cube_sampler3, texcoord3_varying.xyz);
            }
            break;
        default:
            break;
    }
    return res;
vec4 getPointSpriteTextureColor(int unit)
    vec4 res;
    switch (unit)
    {
        case 0:
            if (enable_texture_2d[0])
            {
                res = texture(tex_sampler0, gl_PointCoord.xy);
            }
            break;
        case 1:
            if (enable_texture_2d[1])
            {
                res = texture(tex_sampler1, gl_PointCoord.xy);
            }
            break;
        case 2:
            if (enable_texture_2d[2])
            {
                res = texture(tex_sampler2, gl_PointCoord.xy);
            }
            break;
        case 3:
            if (enable_texture_2d[3])
            {
                res = texture(tex_sampler3, gl_PointCoord.xy);
            }
            break;
        default:
            break;
    }
    return res;
vec3 textureCombineSrcnOpnRgb(int srcnRgb,
                              int opnRgb,
                              vec4 textureEnvColor,
                              vec4 vertexColor,
                              vec4 texturePrevColor,
                              vec4 textureColor)
    vec3 res;
    vec4 op;
    switch (srcnRgb)
    {
        case kTexture:
            op = textureColor;
            break;
        case kConstant:
            op = textureEnvColor;
            break;
        case kPrimaryColor:
            op = vertexColor;
            break;
        case kPrevious:
            op = texturePrevColor;
            break;
        default:
            op = texturePrevColor;
            break;
    }
    switch (opnRgb)
    {
        case kSrcColor:
            res = op.rgb;
            break;
        case kOneMinusSrcColor:
            res = 1.0 - op.rgb;
            break;
        case kSrcAlpha:
            res = vec3(op.a, op.a, op.a);
            break;
        case kOneMinusSrcAlpha:
            res = vec3(1.0 - op.a, 1.0 - op.a, 1.0 - op.a);
            break;
        default:
            break;
    }
    return res;
float textureCombineSrcnOpnAlpha(int srcn,
                                 int opn,
                                 vec4 textureEnvColor,
                                 vec4 vertexColor,
                                 vec4 texturePrevColor,
                                 vec4 textureColor)
    float res;
    vec4 op;
    switch (srcn)
    {
        case kTexture:
            op = textureColor;
            break;
        case kConstant:
            op = textureEnvColor;
            break;
        case kPrimaryColor:
            op = vertexColor;
            break;
        case kPrevious:
            op = texturePrevColor;
            break;
        default:
            op = texturePrevColor;
            break;
    }
    switch (opn)
    {
        case kSrcAlpha:
            res = op.a;
            break;
        case kOneMinusSrcAlpha:
            res = 1.0 - op.a;
            break;
        default:
            break;
    }
    return res;
vec4 textureCombine(int combineRgb,
                    int combineAlpha,
                    int src0Rgb,
                    int src0Alpha,
                    int src1Rgb,
                    int src1Alpha,
                    int src2Rgb,
                    int src2Alpha,
                    int op0Rgb,
                    int op0Alpha,
                    int op1Rgb,
                    int op1Alpha,
                    int op2Rgb,
                    int op2Alpha,
                    vec4 textureEnvColor,
                    float rgbScale,
                    float alphaScale,
                    vec4 vertexColor,
                    vec4 texturePrevColor,
                    vec4 textureColor)
    vec3 resRgb;
    float resAlpha;
    vec3 arg0Rgb;
    float arg0Alpha;
    vec3 arg1Rgb;
    float arg1Alpha;
    vec3 arg2Rgb;
    float arg2Alpha;
    float dotVal;
    arg0Rgb   = textureCombineSrcnOpnRgb(src0Rgb, op0Rgb, textureEnvColor, vertexColor,
                                       texturePrevColor, textureColor);
    arg0Alpha = textureCombineSrcnOpnAlpha(src0Alpha, op0Alpha, textureEnvColor, vertexColor,
                                           texturePrevColor, textureColor);
    if (combineRgb != kReplace)
    {
        arg1Rgb = textureCombineSrcnOpnRgb(src1Rgb, op1Rgb, textureEnvColor, vertexColor,
                                           texturePrevColor, textureColor);
    }
    if (combineAlpha != kReplace)
    {
        arg1Alpha = textureCombineSrcnOpnAlpha(src1Alpha, op1Alpha, textureEnvColor, vertexColor,
                                               texturePrevColor, textureColor);
    }
    if (combineRgb == kInterpolate)
    {
        arg2Rgb = textureCombineSrcnOpnRgb(src2Rgb, op2Rgb, textureEnvColor, vertexColor,
                                           texturePrevColor, textureColor);
    }
    if (combineAlpha == kInterpolate)
    {
        arg2Alpha = textureCombineSrcnOpnAlpha(src2Alpha, op2Alpha, textureEnvColor, vertexColor,
                                               texturePrevColor, textureColor);
    }
    switch (combineRgb)
    {
        case kReplace:
            resRgb = arg0Rgb;
            break;
        case kModulate:
            resRgb = arg0Rgb * arg1Rgb;
            break;
        case kAdd:
            resRgb = arg0Rgb + arg1Rgb;
            break;
        case kAddSigned:
            resRgb = arg0Rgb + arg1Rgb - 0.5;
            break;
        case kInterpolate:
            resRgb = arg0Rgb * arg2Rgb + arg1Rgb * (1.0 - arg2Rgb);
            break;
        case kSubtract:
            resRgb = arg0Rgb - arg1Rgb;
            break;
        default:
            break;
    }
    switch (combineAlpha)
    {
        case kReplace:
            resAlpha = arg0Alpha;
            break;
        case kModulate:
            resAlpha = arg0Alpha * arg1Alpha;
            break;
        case kAdd:
            resAlpha = arg0Alpha + arg1Alpha;
            break;
        case kAddSigned:
            resAlpha = arg0Alpha + arg1Alpha - 0.5;
            break;
        case kInterpolate:
            resAlpha = arg0Alpha * arg2Alpha + arg1Alpha * (1.0 - arg2Alpha);
            break;
        case kSubtract:
            resAlpha = arg0Alpha - arg1Alpha;
            break;
        default:
            break;
    }
    if (combineRgb == kDot3Rgb || combineRgb == kDot3Rgba)
    {
        dotVal = 4.0 * dot(arg0Rgb - 0.5, arg1Rgb - 0.5);
        if (combineRgb == kDot3Rgb)
        {
            return vec4(dotVal, dotVal, dotVal, resAlpha);
        }
        else
        {
            return vec4(dotVal, dotVal, dotVal, dotVal);
        }
    }
    else
    {
        return vec4(resRgb, resAlpha);
    }
vec4 textureFunction(int unit,
                     int texFormat,
                     int envMode,
                     int combineRgb,
                     int combineAlpha,
                     int src0Rgb,
                     int src0Alpha,
                     int src1Rgb,
                     int src1Alpha,
                     int src2Rgb,
                     int src2Alpha,
                     int op0Rgb,
                     int op0Alpha,
                     int op1Rgb,
                     int op1Alpha,
                     int op2Rgb,
                     int op2Alpha,
                     vec4 textureEnvColor,
                     float rgbScale,
                     float alphaScale,
                     vec4 vertexColor,
                     vec4 texturePrevColor,
                     vec4 textureColor)
    if (!isTextureUnitEnabled(unit))
    {
        return texturePrevColor;
    }
    vec4 res;
    switch (envMode)
    {
        case kReplace:
            switch (texFormat)
            {
                case kAlpha:
                    res.rgb = texturePrevColor.rgb;
                    res.a   = textureColor.a;
                    break;
                case kRGBA:
                case kLuminanceAlpha:
                    res.rgba = textureColor.rgba;
                    break;
                case kRGB:
                case kLuminance:
                default:
                    res.rgb = textureColor.rgb;
                    res.a   = texturePrevColor.a;
                    break;
            }
            break;
        case kModulate:
            switch (texFormat)
            {
                case kAlpha:
                    res.rgb = texturePrevColor.rgb;
                    res.a   = texturePrevColor.a * textureColor.a;
                    break;
                case kRGBA:
                case kLuminanceAlpha:
                    res.rgba = texturePrevColor.rgba * textureColor.rgba;
                    break;
                case kRGB:
                case kLuminance:
                default:
                    res.rgb = texturePrevColor.rgb * textureColor.rgb;
                    res.a   = texturePrevColor.a;
                    break;
            }
            break;
        case kDecal:
            switch (texFormat)
            {
                case kRGB:
                    res.rgb = textureColor.rgb;
                    res.a   = texturePrevColor.a;
                    break;
                case kRGBA:
                    res.rgb = texturePrevColor.rgb * (1.0 - textureColor.a) +
                              textureColor.rgb * textureColor.a;
                    res.a = texturePrevColor.a;
                    break;
                case kAlpha:
                case kLuminance:
                case kLuminanceAlpha:
                default:
                    res.rgb = texturePrevColor.rgb * textureColor.rgb;
                    res.a   = texturePrevColor.a;
                    break;
            }
            break;
        case kBlend:
            switch (texFormat)
            {
                case kAlpha:
                    res.rgb = texturePrevColor.rgb;
                    res.a   = textureColor.a * texturePrevColor.a;
                    break;
                case kLuminance:
                case kRGB:
                    res.rgb = texturePrevColor.rgb * (1.0 - textureColor.rgb) +
                              textureEnvColor.rgb * textureColor.rgb;
                    res.a = texturePrevColor.a;
                    break;
                case kLuminanceAlpha:
                case kRGBA:
                default:
                    res.rgb = texturePrevColor.rgb * (1.0 - textureColor.rgb) +
                              textureEnvColor.rgb * textureColor.rgb;
                    res.a = textureColor.a * texturePrevColor.a;
                    break;
            }
            break;
        case kAdd:
            switch (texFormat)
            {
                case kAlpha:
                    res.rgb = texturePrevColor.rgb;
                    res.a   = textureColor.a * texturePrevColor.a;
                    break;
                case kLuminance:
                case kRGB:
                    res.rgb = texturePrevColor.rgb + textureColor.rgb;
                    res.a   = texturePrevColor.a;
                    break;
                case kLuminanceAlpha:
                case kRGBA:
                default:
                    res.rgb = texturePrevColor.rgb + textureColor.rgb;
                    res.a   = textureColor.a * texturePrevColor.a;
                    break;
            }
            break;
        case kCombine:
            res = textureCombine(combineRgb, combineAlpha, src0Rgb, src0Alpha, src1Rgb, src1Alpha,
                                 src2Rgb, src2Alpha, op0Rgb, op0Alpha, op1Rgb, op1Alpha, op2Rgb,
                                 op2Alpha, textureEnvColor, rgbScale, alphaScale, vertexColor,
                                 texturePrevColor, textureColor);
            res.rgb *= rgbScale;
            res.a *= alphaScale;
            break;
        default:
            break;
    }
    return clamp(res, 0.0, 1.0);
void main()
    if (enable_clip_planes && !enable_draw_texture)
    {
        if (!doClipPlaneTest())
        {
            discard;
        }
    }
    vec4 currentFragment;
    vec4 vertex_color;
    if (shade_model_flat)
    {
        vertex_color = color_varying_flat;
    }
    else
    {
        vertex_color = color_varying;
    }
    currentFragment = vertex_color;
    vec4 texturePrevColor = currentFragment;
    for (int i = 0; i < kMaxTexUnits; i++)
    {
        vec4 textureColor;
        if (point_rasterization && point_sprite_enabled &&
            point_sprite_coord_replace[i]) {
            textureColor = getPointSpriteTextureColor(i);
        } else {
            textureColor = getTextureColor(i);
        }
        currentFragment = textureFunction(
            i, texture_format[i], texture_env_mode[i], combine_rgb[i], combine_alpha[i],
            src0_rgb[i], src0_alpha[i], src1_rgb[i], src1_alpha[i], src2_rgb[i], src2_alpha[i],
            op0_rgb[i], op0_alpha[i], op1_rgb[i], op1_alpha[i], op2_rgb[i], op2_alpha[i],
            texture_env_color[i], texture_env_rgb_scale[i], texture_env_alpha_scale[i],
            vertex_color, texturePrevColor, textureColor);
        texturePrevColor = currentFragment;
    }
    if (enable_lighting)
    {
        currentFragment = doLighting(currentFragment);
    }
    if (enable_fog)
    {
        currentFragment = doFog(currentFragment);
    }
    if (enable_alpha_test && !doAlphaTest(currentFragment))
    {
        discard;
    }
    frag_color = currentFragment;
 !"#$%&&&&'(&)&&*+,-./01&2
6789:;<=>&?@ABCD&EFGHIJKLMNOPQ
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
Ga==
.M;vT
.eB5
defined
 !%&'()*+,-./01234
G00D
@00F
""""DDDD
00D
10Dx4
// BEGIN: Generated code for array bounds clamping
// END: Generated code for array bounds clamping
int webgl_int_clamp(int value, int minValue, int maxValue) { return ((value < minValue) ? minValue : ((value > maxValue) ? maxValue : value)); }
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/BlitGL.cpp
copyImageToLUMAWorkaroundTexture
mFunctions->texImage2D(ToGLenum(target), static_cast<GLint>(level), internalFormat, sourceArea.width, sourceArea.height, 0, format, readType, nullptr)
copySubImageToLUMAWorkaroundTexture
mFunctions->copyTexImage2D(GL_TEXTURE_2D, 0, copyTexImageFormat.internalFormat, sourceArea.x, sourceArea.y, sourceArea.width, sourceArea.height, 0)
mFunctions->texImage2D(GL_TEXTURE_2D, 0, copyTexImageFormat.internalFormat, sourceArea.width, sourceArea.height, 0, gl::GetUnsizedFormat(copyTexImageFormat.internalFormat), readType, nullptr)
blitColorBufferWithShader
mFunctions->copyTexImage2D(GL_TEXTURE_2D, 0, copyTexImageFormat.internalFormat, inBoundsSource.x, inBoundsSource.y, inBoundsSource.width, inBoundsSource.height, 0)
copySubTextureCPUReadback
mFunctions->texImage2D(ToGLenum(scratchTextureType), 0, texImageFormat.internalFormat, sourceArea.width, sourceArea.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
Failed to allocate host memory
generateSRGBMipmap
mFunctions->generateMipmap(ToGLenum(sourceTarget))
attribute
varying
texture2D
300 es
texture
#version 
 vec2 a_texcoord;
uniform vec2 u_scale;
uniform vec2 u_offset;
 vec2 v_texcoord;
void main()
    gl_Position = vec4((a_texcoord * 2.0) - 1.0, 0.0, 1.0);
    v_texcoord = a_texcoord * u_scale + u_offset;
usampler2D
sampler2D
samplerExternalOES
sampler2DRect
uvec4
vec4
#extension GL_OES_EGL_image_external : require
GL_ARB_texture_rectangle
#extension GL_ARB_texture_rectangle : require
outputUint
255.0
gl_FragColor
outputFloat
precision highp float;
uniform 
 u_source_texture;
uniform bool u_multiply_alpha;
uniform bool u_unmultiply_alpha;
vec2(textureSize(u_source_texture))
vec2(1.0)
    if (clamp(v_texcoord, vec2(0.0), 
) != v_texcoord)
    {
        discard;
    }
    
 color = 
(u_source_texture, v_texcoord);
    if (u_multiply_alpha)
        color.xyz = color.xyz * color.a;
    if (u_unmultiply_alpha && color.a != 0.0)
         color.xyz = color.xyz / color.a;
    color = color * 
(color);
u_source_texture
u_scale
u_offset
u_multiply_alpha
u_unmultiply_alpha
Failed to compile internal blit shader.
CheckCompileStatus
Failed to link internal blit program.
CheckLinkStatus
Failed to allocate memory for binary blob
Binary blob no longer available in cache (removed by a thread?)
GPU.ANGLE.ProgramCache.CacheResult
Failed to allocate host memory
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/Buffer.cpp
bufferData
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/BufferGL.cpp
setData
_emu
int abs_emu(int x) { return x * sign(x); }
bool isnan_emu(float x) { return (x > 0.0 || x < 0.0) ? false : x != 0.0; }
bvec2 isnan_emu(vec2 x)
    bvec2 isnan;
    for (int i = 0; i < 2; i++)
    {
        isnan[i] = (x[i] > 0.0 || x[i] < 0.0) ? false : x[i] != 0.0;
    }
    return isnan;
bvec3 isnan_emu(vec3 x)
    bvec3 isnan;
    for (int i = 0; i < 3; i++)
    {
        isnan[i] = (x[i] > 0.0 || x[i] < 0.0) ? false : x[i] != 0.0;
    }
    return isnan;
bvec4 isnan_emu(vec4 x)
    bvec4 isnan;
    for (int i = 0; i < 4; i++)
    {
        isnan[i] = (x[i] > 0.0 || x[i] < 0.0) ? false : x[i] != 0.0;
    }
    return isnan;
emu_precision float atan_emu(emu_precision float y, emu_precision float x)
    if (x > 0.0) return atan(y / x);
    else if (x < 0.0 && y >= 0.0) return atan(y / x) + 3.14159265;
    else if (x < 0.0 && y < 0.0) return atan(y / x) - 3.14159265;
    else return 1.57079632 * sign(y);
emu_precision vec
 atan_emu(emu_precision vec
 y, emu_precision vec
    return vec
atan_emu(y[
], x[
uint packUnorm2x16_emu(vec2 v)
    int x = int(round(clamp(v.x, 0.0, 1.0) * 65535.0));
    int y = int(round(clamp(v.y, 0.0, 1.0) * 65535.0));
    return uint((y << 16) | (x & 0xFFFF));
vec2 unpackUnorm2x16_emu(uint u)
    float x = float(u & 0xFFFFu) / 65535.0;
    float y = float(u >> 16) / 65535.0;
    return vec2(x, y);
uint packSnorm2x16_emu(vec2 v)
    #if defined(GL_ARB_shading_language_packing)
        return packSnorm2x16(v);
    #else
        int x = int(round(clamp(v.x, -1.0, 1.0) * 32767.0));
        int y = int(round(clamp(v.y, -1.0, 1.0) * 32767.0));
        return uint((y << 16) | (x & 0xFFFF));
    #endif
#if !defined(GL_ARB_shading_language_packing)
    float fromSnorm(uint x)
    {
        int xi = (int(x) & 0x7FFF) - (int(x) & 0x8000);
        return clamp(float(xi) / 32767.0, -1.0, 1.0);
    }
#endif
vec2 unpackSnorm2x16_emu(uint u)
    #if defined(GL_ARB_shading_language_packing)
        return unpackSnorm2x16(u);
    #else
        uint y = (u >> 16);
        uint x = u;
        return vec2(fromSnorm(x), fromSnorm(y));
    #endif
#if !defined(GL_ARB_shading_language_packing)
    uint f32tof16(float val)
    {
        uint f32 = floatBitsToUint(val);
        uint f16 = 0u;
        uint sign = (f32 >> 16) & 0x8000u;
        int exponent = int((f32 >> 23) & 0xFFu) - 127;
        uint mantissa = f32 & 0x007FFFFFu;
        if (exponent == 128)
        {
            // Infinity or NaN
            // NaN bits that are masked out by 0x3FF get discarded.
            // This can turn some NaNs to infinity, but this is allowed by the spec.
            f16 = sign | (0x1Fu << 10);
            f16 |= (mantissa & 0x3FFu);
        }
        else if (exponent > 15)
        {
            // Overflow - flush to Infinity
            f16 = sign | (0x1Fu << 10);
        }
        else if (exponent > -15)
        {
            // Representable value
            exponent += 15;
            mantissa >>= 13;
            f16 = sign | uint(exponent << 10) | mantissa;
        }
        else
        {
            f16 = sign;
        }
        return f16;
    }
#endif
uint packHalf2x16_emu(vec2 v)
    #if defined(GL_ARB_shading_language_packing)
        return packHalf2x16(v);
    #else
        uint x = f32tof16(v.x);
        uint y = f32tof16(v.y);
        return (y << 16) | x;
    #endif
#if !defined(GL_ARB_shading_language_packing)
    float f16tof32(uint val)
    {
        uint sign = (val & 0x8000u) << 16;
        int exponent = int((val & 0x7C00u) >> 10);
        uint mantissa = val & 0x03FFu;
        float f32 = 0.0;
        if(exponent == 0)
        {
            if (mantissa != 0u)
            {
                const float scale = 1.0 / (1 << 24);
                f32 = scale * mantissa;
            }
        }
        else if (exponent == 31)
        {
            return uintBitsToFloat(sign | 0x7F800000u | mantissa);
        }
        else
        {
            exponent -= 15;
            float scale;
            if(exponent < 0)
            {
                // The negative unary operator is buggy on OSX.
                // Work around this by using abs instead.
                scale = 1.0 / (1 << abs(exponent));
            }
            else
            {
                scale = 1 << exponent;
            }
            float decimal = 1.0 + float(mantissa) / float(1 << 10);
            f32 = scale * decimal;
        }
        if (sign != 0u)
        {
            f32 = -f32;
        }
        return f32;
    }
#endif
vec2 unpackHalf2x16_emu(uint u)
    #if defined(GL_ARB_shading_language_packing)
        return unpackHalf2x16(u);
    #else
        uint y = (u >> 16);
        uint x = u & 0xFFFFu;
        return vec2(f16tof32(x), f16tof32(y));
    #endif
gl_InstanceID
gl_VertexID
angle_BaseInstance
Undefined function '
()' used in the following call chain:
Recursive function call in the following call chain:
 -> 
EGL_EXT_create_context_robustness
EGL_ANGLE_d3d_share_handle_client_buffer
EGL_ANGLE_d3d_texture_client_buffer
EGL_ANGLE_surface_d3d_texture_2d_share_handle
EGL_ANGLE_query_surface_pointer
EGL_ANGLE_window_fixed_size
EGL_ANGLE_keyed_mutex
EGL_ANGLE_surface_orientation
EGL_ANGLE_direct_composition
EGL_ANGLE_windows_ui_composition
EGL_NV_post_sub_buffer
EGL_KHR_create_context
EGL_EXT_device_query
EGL_KHR_image
EGL_KHR_image_base
EGL_KHR_image_pixmap
EGL_EXT_image_gl_colorspace
EGL_KHR_gl_colorspace
EGL_EXT_gl_colorspace_scrgb
EGL_EXT_gl_colorspace_scrgb_linear
EGL_EXT_gl_colorspace_display_p3
EGL_EXT_gl_colorspace_display_p3_linear
EGL_EXT_gl_colorspace_display_p3_passthrough
EGL_KHR_gl_texture_2D_image
EGL_KHR_gl_texture_cubemap_image
EGL_KHR_gl_texture_3D_image
EGL_KHR_gl_renderbuffer_image
EGL_KHR_get_all_proc_addresses
EGL_KHR_stream
EGL_KHR_stream_consumer_gltexture
EGL_NV_stream_consumer_gltexture_yuv
EGL_KHR_fence_sync
EGL_KHR_wait_sync
EGL_ANGLE_flexible_surface_compatibility
EGL_ANGLE_stream_producer_d3d_texture
EGL_ANGLE_create_context_webgl_compatibility
EGL_CHROMIUM_create_context_bind_generates_resource
EGL_CHROMIUM_sync_control
EGL_ANGLE_sync_control_rate
EGL_KHR_swap_buffers_with_damage
EGL_EXT_pixel_format_float
EGL_KHR_surfaceless_context
EGL_ANGLE_display_texture_share_group
EGL_ANGLE_create_context_client_arrays
EGL_ANGLE_program_cache_control
EGL_ANGLE_robust_resource_initialization
EGL_ANGLE_iosurface_client_buffer
EGL_ANGLE_create_context_extensions_enabled
EGL_ANDROID_presentation_time
EGL_ANDROID_blob_cache
EGL_ANDROID_framebuffer_target
EGL_ANDROID_image_native_buffer
EGL_ANDROID_get_frame_timestamps
EGL_ANDROID_recordable
EGL_ANGLE_power_preference
EGL_ANGLE_image_d3d11_texture
EGL_ANDROID_get_native_client_buffer
EGL_ANDROID_native_fence_sync
EGL_ANGLE_create_context_backwards_compatible
EGL_KHR_no_config_context
EGL_IMG_context_priority
EGL_KHR_create_context_no_error
EGL_EXT_image_dma_buf_import
EGL_EXT_image_dma_buf_import_modifiers
EGL_NOK_texture_from_pixmap
EGL_ANGLE_device_d3d
EGL_ANGLE_device_cgl
EGL_EXT_client_extensions
EGL_EXT_platform_base
EGL_EXT_platform_device
EGL_ANGLE_platform_angle
EGL_ANGLE_platform_angle_d3d
EGL_ANGLE_platform_angle_d3d11on12
EGL_ANGLE_platform_angle_device_type_egl_angle
EGL_ANGLE_platform_angle_device_type_swiftshader
EGL_ANGLE_platform_angle_opengl
EGL_ANGLE_platform_angle_null
EGL_ANGLE_platform_angle_vulkan
EGL_ANGLE_platform_angle_metal
EGL_ANGLE_platform_angle_context_virtualization
EGL_ANGLE_device_creation
EGL_ANGLE_device_creation_d3d11
EGL_ANGLE_x11_visual
EGL_ANGLE_experimental_present_path
EGL_KHR_client_get_all_proc_addresses
EGL_KHR_debug
EGL_ANGLE_explicit_context
EGL_ANGLE_feature_control
GL_OES_element_index_uint
GL_OES_packed_depth_stencil
GL_OES_get_program_binary
GL_OES_rgb8_rgba8
GL_NV_read_depth
GL_NV_read_stencil
GL_NV_depth_buffer_float2
GL_EXT_texture_format_BGRA8888
GL_EXT_texture_type_2_10_10_10_REV
GL_EXT_read_format_bgra
GL_NV_pixel_buffer_object
GL_ARB_sync
GL_OES_mapbuffer
GL_EXT_map_buffer_range
GL_EXT_color_buffer_half_float
GL_OES_texture_half_float
GL_OES_texture_half_float_linear
GL_OES_texture_float
GL_OES_texture_float_linear
GL_EXT_texture_rg
GL_EXT_texture_compression_dxt1
GL_ANGLE_texture_compression_dxt3
GL_ANGLE_texture_compression_dxt5
GL_EXT_texture_compression_s3tc_srgb
GL_KHR_texture_compression_astc_ldr
GL_KHR_texture_compression_astc_hdr
GL_KHR_texture_compression_astc_sliced_3d
GL_OES_texture_compression_astc
GL_EXT_texture_compression_bptc
GL_EXT_texture_compression_rgtc
GL_OES_compressed_ETC1_RGB8_texture
GL_EXT_compressed_ETC1_RGB8_sub_texture
GL_OES_compressed_ETC2_RGB8_texture
GL_OES_compressed_ETC2_sRGB8_texture
GL_OES_compressed_ETC2_punchthroughA_RGBA8_texture
GL_OES_compressed_ETC2_punchthroughA_sRGB8_alpha_texture
GL_OES_compressed_ETC2_RGBA8_texture
GL_OES_compressed_ETC2_sRGB8_alpha8_texture
GL_OES_compressed_EAC_R11_unsigned_texture
GL_OES_compressed_EAC_R11_signed_texture
GL_OES_compressed_EAC_RG11_unsigned_texture
GL_OES_compressed_EAC_RG11_signed_texture
GL_ANGLE_compressed_texture_etc
GL_IMG_texture_compression_pvrtc
GL_EXT_pvrtc_sRGB
GL_EXT_sRGB
GL_EXT_texture_sRGB_R8
GL_ANGLE_depth_texture
GL_OES_depth_texture
GL_OES_depth_texture_cube_map
GL_OES_depth24
GL_OES_depth32
GL_OES_texture_3D
GL_EXT_texture_storage
GL_OES_texture_npot
GL_EXT_draw_buffers
GL_EXT_draw_buffers_indexed
GL_OES_draw_buffers_indexed
GL_EXT_texture_filter_anisotropic
GL_EXT_occlusion_query_boolean
GL_NV_fence
GL_EXT_disjoint_timer_query
GL_EXT_robustness
GL_KHR_robust_buffer_access_behavior
GL_EXT_blend_minmax
GL_ANGLE_framebuffer_blit
GL_ANGLE_framebuffer_multisample
GL_EXT_multisampled_render_to_texture
GL_ANGLE_instanced_arrays
GL_EXT_instanced_arrays
GL_ANGLE_pack_reverse_row_order
GL_OES_standard_derivatives
GL_EXT_shader_texture_lod
GL_EXT_frag_depth
GL_ANGLE_texture_usage
GL_ANGLE_translated_shader_source
GL_OES_fbo_render_mipmap
GL_EXT_discard_framebuffer
GL_EXT_debug_marker
GL_OES_EGL_image
GL_OES_EGL_image_external
GL_OES_EGL_image_external_essl3
GL_EXT_EGL_image_external_wrap_modes
GL_OES_EGL_sync
GL_EXT_memory_object
GL_EXT_memory_object_fd
GL_ANGLE_memory_object_fuchsia
GL_EXT_semaphore
GL_EXT_semaphore_fd
GL_NV_EGL_stream_consumer_external
GL_NV_shader_noperspective_interpolation
GL_ANGLE_semaphore_fuchsia
GL_EXT_unpack_subimage
GL_NV_pack_subimage
GL_EXT_color_buffer_float
GL_OES_vertex_half_float
GL_OES_vertex_array_object
GL_OES_vertex_type_10_10_10_2
GL_KHR_debug
GL_OES_texture_border_clamp
GL_KHR_no_error
GL_ANGLE_lossy_etc_decode
GL_CHROMIUM_bind_uniform_location
GL_CHROMIUM_sync_query
GL_CHROMIUM_copy_texture
GL_CHROMIUM_copy_compressed_texture
GL_ANGLE_copy_texture_3d
GL_ANGLE_webgl_compatibility
GL_ANGLE_request_extension
GL_CHROMIUM_bind_generates_resource
GL_ANGLE_robust_client_memory
GL_EXT_texture_sRGB_decode
GL_EXT_texture_sRGB_override
GL_EXT_sRGB_write_control
GL_CHROMIUM_color_buffer_float_rgb
GL_CHROMIUM_color_buffer_float_rgba
GL_EXT_multisample_compatibility
GL_CHROMIUM_framebuffer_mixed_samples
GL_EXT_texture_norm16
GL_OES_surfaceless_context
GL_ANGLE_client_arrays
GL_ANGLE_robust_resource_initialization
GL_ANGLE_program_cache_control
GL_ANGLE_texture_rectangle
GL_EXT_geometry_shader
GL_ANGLE_explicit_context_gles1
GL_ANGLE_explicit_context
GL_KHR_parallel_shader_compile
GL_OES_texture_storage_multisample_2d_array
GL_ANGLE_multiview_multisample
GL_EXT_blend_func_extended
GL_EXT_float_blend
GL_ANGLE_texture_multisample
GL_ANGLE_multi_draw
GL_ANGLE_provoking_vertex
GL_CHROMIUM_texture_filtering_hint
GL_CHROMIUM_lose_context
GL_ANGLE_texture_external_update
GL_ANGLE_base_vertex_base_instance
GL_ANGLE_get_image
GL_OES_draw_elements_base_vertex
GL_EXT_draw_elements_base_vertex
GL_EXT_gpu_shader5
GL_APPLE_clip_distance
GL_EXT_EGL_image_array
GL_OES_point_size_array
GL_OES_texture_cube_map
GL_OES_point_sprite
GL_OES_draw_texture
GL_ANGLE_memory_size
GL_EXT_shader_non_constant_global_initializers
GL_WEBGL_video_texture
GL_OES_texture_cube_map_array
GL_EXT_texture_cube_map_array
gl_FragDepth
clamp
gl_PointSize
gl_DepthRange
near
diff
gl_in
gl_PerVertex
unsupported shader version
Compute shader is not supported in this shader version.
Geometry shader is not supported in this shader version.
Precision emulation not supported for this output type.
too many uniforms
angle_DrawID
gl_DrawID
angle_BaseVertex
gl_BaseVertex
gl_BaseInstance
:MaxVertexAttribs:
:MaxVertexUniformVectors:
:MaxVaryingVectors:
:MaxVertexTextureImageUnits:
:MaxCombinedTextureImageUnits:
:MaxTextureImageUnits:
:MaxFragmentUniformVectors:
:MaxDrawBuffers:
:OES_standard_derivatives:
:OES_EGL_image_external:
:OES_EGL_image_external_essl3:
:NV_EGL_stream_consumer_external:
:ARB_texture_rectangle:
:EXT_draw_buffers:
:FragmentPrecisionHigh:
:MaxExpressionComplexity:
:MaxCallStackDepth:
:MaxFunctionParameters:
:EXT_blend_func_extended:
:EXT_frag_depth:
:EXT_shader_texture_lod:
:EXT_shader_framebuffer_fetch:
:NV_shader_framebuffer_fetch:
:ARM_shader_framebuffer_fetch:
:OVR_multiview2:
:OVR_multiview:
:EXT_YUV_target:
:EXT_geometry_shader:
:EXT_gpu_shader5:
:OES_texture_3D:
:MaxVertexOutputVectors:
:MaxFragmentInputVectors:
:MinProgramTexelOffset:
:MaxProgramTexelOffset:
:MaxDualSourceDrawBuffers:
:MaxViewsOVR:
:NV_draw_buffers:
:WEBGL_debug_shader_precision:
:ANGLE_multi_draw:
:ANGLE_base_vertex_base_instance:
:APPLE_clip_distance:
:OES_texture_cube_map_array:
:EXT_texture_cube_map_array:
:MinProgramTextureGatherOffset:
:MaxProgramTextureGatherOffset:
:MaxImageUnits:
:MaxVertexImageUniforms:
:MaxFragmentImageUniforms:
:MaxComputeImageUniforms:
:MaxCombinedImageUniforms:
:MaxCombinedShaderOutputResources:
:MaxComputeWorkGroupCountX:
:MaxComputeWorkGroupCountY:
:MaxComputeWorkGroupCountZ:
:MaxComputeWorkGroupSizeX:
:MaxComputeWorkGroupSizeY:
:MaxComputeWorkGroupSizeZ:
:MaxComputeUniformComponents:
:MaxComputeTextureImageUnits:
:MaxComputeAtomicCounters:
:MaxComputeAtomicCounterBuffers:
:MaxVertexAtomicCounters:
:MaxFragmentAtomicCounters:
:MaxCombinedAtomicCounters:
:MaxAtomicCounterBindings:
:MaxVertexAtomicCounterBuffers:
:MaxFragmentAtomicCounterBuffers:
:MaxCombinedAtomicCounterBuffers:
:MaxAtomicCounterBufferSize:
:MaxGeometryUniformComponents:
:MaxGeometryUniformBlocks:
:MaxGeometryInputComponents:
:MaxGeometryOutputComponents:
:MaxGeometryOutputVertices:
:MaxGeometryTotalOutputComponents:
:MaxGeometryTextureImageUnits:
:MaxGeometryAtomicCounterBuffers:
:MaxGeometryAtomicCounters:
:MaxGeometryShaderStorageBlocks:
:MaxGeometryShaderInvocations:
:MaxGeometryImageUniforms:
:MaxClipDistances
Call stack too deep (larger than 
) with the following call chain: 
Missing main()
Expression too complex.
Function has too many parameters.
gl_Position
#pragma STDGL invariant(all)
layout (early_fragment_tests) in;
layout (local_size_x=
, local_size_y=
, local_size_z=
) in;
#if defined(GL_ARB_shader_viewport_layer_array)
#extension GL_ARB_shader_viewport_layer_array : require
#elif defined(GL_NV_viewport_array2)
#extension GL_NV_viewport_array2 : require
#endif
#extension GL_OVR_multiview
layout(num_views=
cannot use both gl_FragData and gl_FragColor
cannot use both output variable sets (gl_FragData, gl_SecondaryFragDataEXT) and (gl_FragColor, gl_SecondaryFragColorEXT)
1.2.11
Undefined shift (operand out of range)
Constant folded undefined addition generated NaN
Constant folded addition overflowed to infinity
Constant folded undefined subtraction generated NaN
Constant folded subtraction overflowed to infinity
Constant folded undefined multiplication generated NaN
Constant folded multiplication overflowed to infinity
ANGLE (
OpenGL ES 
.0 (ANGLE 
2.1.0.07cdf4214314
OpenGL ES GLSL ES 
OpenGL GLSL 
0 (ANGLE 
Google Inc.
GL_OVR_multiview2
GL_OVR_multiview
initCaps
Limiting binary format support count to zero while FrameCapture enabled
Error: 
, in 
Internal error: 
insertMessage
EGL 
error
deprecated behavior
undefined behavior
portability
performance
marker
start of group
end of group
other message
HIGH
MEDIUM
NOTIFICATION
CRITICAL
ERROR
WARNING
INFO
ViewID_OVR
InstanceID
multiviewBaseViewLayerIndex
initGlobals
' : 
internal error
out of memory
invalid character
invalid number
integer overflow
float overflow
token too long
invalid expression
division by zero
unexpected end of file found in comment
unexpected token
invalid directive name
macro name is reserved
macro redefined
predefined macro redefined
predefined macro undefined
unterminated macro invocation
macro undefined while being invoked
Not enough arguments for macro
Too many arguments for macro
duplicate macro parameter name
macro invocation chain too deep
unexpected #endif found without a matching #if
unexpected #else found without a matching #if
unexpected #else found after another #else
unexpected #elif found without a matching #if
unexpected #elif found after #else
unexpected end of file found in conditional block
invalid extension name
invalid extension behavior
invalid extension directive
invalid version number
invalid version directive
#version directive must occur before anything else, except for comments and white space
#version directive must occur on the first line of the shader
invalid line number
invalid file number
invalid line directive
extension directive must occur before any non-preprocessor tokens in ESSL1
extension directive must occur before any non-preprocessor tokens in ESSL3
shift exponent is negative or undefined
internal tokenizer error
unexpected end of file found in directive
unexpected token after conditional expression
unrecognized pragma
extension directive should occur before any non-preprocessor tokens
macro name with a double underscore is reserved - unintented behavior is possible
invariant
#pragma STDGL invariant(all) can not be used in fragment shader
webgl_debug_shader_precision
invalid pragma value - 'on' or 'off' expected
behavior invalid
extension cannot have 'require' behavior
extension cannot have 'enable' behavior
GL_OVR_multiview2
GL_OVR_multiview
extension is not supported
client/version number not supported
STDGL
core
__VERSION__
defined
glBlendFunc
glClear
glClearColor
glClearDepth
glClearStencil
glColorMask
glCullFace
glDepthFunc
glDepthMask
glDepthRange
glDisable
glDrawBuffer
glEnable
glFinish
glFlush
glFrontFace
glGetBooleanv
glGetDoublev
glGetError
glGetFloatv
glGetIntegerv
glGetString
glGetTexImage
glGetTexLevelParameterfv
glGetTexLevelParameteriv
glGetTexParameterfv
glGetTexParameteriv
glHint
glIsEnabled
glLineWidth
glLogicOp
glPixelStoref
glPixelStorei
glPointSize
glPolygonMode
glReadBuffer
glReadPixels
glScissor
glStencilFunc
glStencilMask
glStencilOp
glTexImage1D
glTexImage2D
glTexParameterf
glTexParameterfv
glTexParameteri
glTexParameteriv
glViewport
glBindTexture
glCopyTexImage1D
glCopyTexImage2D
glCopyTexSubImage1D
glCopyTexSubImage2D
glDeleteTextures
glDrawArrays
glDrawElements
glGenTextures
glIsTexture
glPolygonOffset
glTexSubImage1D
glTexSubImage2D
glCopyTexSubImage3D
glDrawRangeElements
glTexImage3D
glTexSubImage3D
glActiveTexture
glCompressedTexImage1D
glCompressedTexImage2D
glCompressedTexImage3D
glCompressedTexSubImage1D
glCompressedTexSubImage2D
glCompressedTexSubImage3D
glGetCompressedTexImage
glSampleCoverage
glBlendColor
glBlendEquation
glBlendFuncSeparate
glMultiDrawArrays
glMultiDrawElements
glPointParameterf
glPointParameterfv
glPointParameteri
glPointParameteriv
glBeginQuery
glBindBuffer
glBufferData
glBufferSubData
glDeleteBuffers
glDeleteQueries
glEndQuery
glGenBuffers
glGenQueries
glGetBufferParameteriv
glGetBufferPointerv
glGetBufferSubData
glGetQueryObjectiv
glGetQueryObjectuiv
glGetQueryiv
glIsBuffer
glIsQuery
glMapBuffer
glUnmapBuffer
glAttachShader
glBindAttribLocation
glBlendEquationSeparate
glCompileShader
glCreateProgram
glCreateShader
glDeleteProgram
glDeleteShader
glDetachShader
glDisableVertexAttribArray
glDrawBuffers
glEnableVertexAttribArray
glGetActiveAttrib
glGetActiveUniform
glGetAttachedShaders
glGetAttribLocation
glGetProgramInfoLog
glGetProgramiv
glGetShaderInfoLog
glGetShaderSource
glGetShaderiv
glGetUniformLocation
glGetUniformfv
glGetUniformiv
glGetVertexAttribPointerv
glGetVertexAttribdv
glGetVertexAttribfv
glGetVertexAttribiv
glIsProgram
glIsShader
glLinkProgram
glShaderSource
glStencilFuncSeparate
glStencilMaskSeparate
glStencilOpSeparate
glUniform1f
glUniform1fv
glUniform1i
glUniform1iv
glUniform2f
glUniform2fv
glUniform2i
glUniform2iv
glUniform3f
glUniform3fv
glUniform3i
glUniform3iv
glUniform4f
glUniform4fv
glUniform4i
glUniform4iv
glUniformMatrix2fv
glUniformMatrix3fv
glUniformMatrix4fv
glUseProgram
glValidateProgram
glVertexAttrib1d
glVertexAttrib1dv
glVertexAttrib1f
glVertexAttrib1fv
glVertexAttrib1s
glVertexAttrib1sv
glVertexAttrib2d
glVertexAttrib2dv
glVertexAttrib2f
glVertexAttrib2fv
glVertexAttrib2s
glVertexAttrib2sv
glVertexAttrib3d
glVertexAttrib3dv
glVertexAttrib3f
glVertexAttrib3fv
glVertexAttrib3s
glVertexAttrib3sv
glVertexAttrib4Nbv
glVertexAttrib4Niv
glVertexAttrib4Nsv
glVertexAttrib4Nub
glVertexAttrib4Nubv
glVertexAttrib4Nuiv
glVertexAttrib4Nusv
glVertexAttrib4bv
glVertexAttrib4d
glVertexAttrib4dv
glVertexAttrib4f
glVertexAttrib4fv
glVertexAttrib4iv
glVertexAttrib4s
glVertexAttrib4sv
glVertexAttrib4ubv
glVertexAttrib4uiv
glVertexAttrib4usv
glVertexAttribPointer
glUniformMatrix2x3fv
glUniformMatrix2x4fv
glUniformMatrix3x2fv
glUniformMatrix3x4fv
glUniformMatrix4x2fv
glUniformMatrix4x3fv
glBeginConditionalRender
glBeginTransformFeedback
glBindBufferBase
glBindBufferRange
glBindFragDataLocation
glBindFramebuffer
glBindRenderbuffer
glBindVertexArray
glBlitFramebuffer
glCheckFramebufferStatus
glClampColor
glClearBufferfi
glClearBufferfv
glClearBufferiv
glClearBufferuiv
glColorMaski
glDeleteFramebuffers
glDeleteRenderbuffers
glDeleteVertexArrays
glDisablei
glEnablei
glEndConditionalRender
glEndTransformFeedback
glFlushMappedBufferRange
glFramebufferRenderbuffer
glFramebufferTexture1D
glFramebufferTexture2D
glFramebufferTexture3D
glFramebufferTextureLayer
glGenFramebuffers
glGenRenderbuffers
glGenVertexArrays
glGenerateMipmap
glGetBooleani_v
glGetFragDataLocation
glGetFramebufferAttachmentParameteriv
glGetIntegeri_v
glGetRenderbufferParameteriv
glGetStringi
glGetTexParameterIiv
glGetTexParameterIuiv
glGetTransformFeedbackVarying
glGetUniformuiv
glGetVertexAttribIiv
glGetVertexAttribIuiv
glIsEnabledi
glIsFramebuffer
glIsRenderbuffer
glIsVertexArray
glMapBufferRange
glRenderbufferStorage
glRenderbufferStorageMultisample
glTexParameterIiv
glTexParameterIuiv
glTransformFeedbackVaryings
glUniform1ui
glUniform1uiv
glUniform2ui
glUniform2uiv
glUniform3ui
glUniform3uiv
glUniform4ui
glUniform4uiv
glVertexAttribI1i
glVertexAttribI1iv
glVertexAttribI1ui
glVertexAttribI1uiv
glVertexAttribI2i
glVertexAttribI2iv
glVertexAttribI2ui
glVertexAttribI2uiv
glVertexAttribI3i
glVertexAttribI3iv
glVertexAttribI3ui
glVertexAttribI3uiv
glVertexAttribI4bv
glVertexAttribI4i
glVertexAttribI4iv
glVertexAttribI4sv
glVertexAttribI4ubv
glVertexAttribI4ui
glVertexAttribI4uiv
glVertexAttribI4usv
glVertexAttribIPointer
glCopyBufferSubData
glDrawArraysInstanced
glDrawElementsInstanced
glGetActiveUniformBlockName
glGetActiveUniformBlockiv
glGetActiveUniformName
glGetActiveUniformsiv
glGetUniformBlockIndex
glGetUniformIndices
glPrimitiveRestartIndex
glTexBuffer
glUniformBlockBinding
glClientWaitSync
glDeleteSync
glDrawElementsBaseVertex
glDrawElementsInstancedBaseVertex
glDrawRangeElementsBaseVertex
glFenceSync
glFramebufferTexture
glGetBufferParameteri64v
glGetInteger64i_v
glGetInteger64v
glGetMultisamplefv
glGetSynciv
glIsSync
glMultiDrawElementsBaseVertex
glProvokingVertex
glSampleMaski
glTexImage2DMultisample
glTexImage3DMultisample
glWaitSync
glBindFragDataLocationIndexed
glBindSampler
glDeleteSamplers
glGenSamplers
glGetFragDataIndex
glGetQueryObjecti64v
glGetQueryObjectui64v
glGetSamplerParameterIiv
glGetSamplerParameterIuiv
glGetSamplerParameterfv
glGetSamplerParameteriv
glIsSampler
glQueryCounter
glSamplerParameterIiv
glSamplerParameterIuiv
glSamplerParameterf
glSamplerParameterfv
glSamplerParameteri
glSamplerParameteriv
glVertexAttribDivisor
glVertexAttribP1ui
glVertexAttribP1uiv
glVertexAttribP2ui
glVertexAttribP2uiv
glVertexAttribP3ui
glVertexAttribP3uiv
glVertexAttribP4ui
glVertexAttribP4uiv
glBeginQueryIndexed
glBindTransformFeedback
glBlendEquationSeparatei
glBlendEquationi
glBlendFuncSeparatei
glBlendFunci
glDeleteTransformFeedbacks
glDrawArraysIndirect
glDrawElementsIndirect
glDrawTransformFeedback
glDrawTransformFeedbackStream
glEndQueryIndexed
glGenTransformFeedbacks
glGetActiveSubroutineName
glGetActiveSubroutineUniformName
glGetActiveSubroutineUniformiv
glGetProgramStageiv
glGetQueryIndexediv
glGetSubroutineIndex
glGetSubroutineUniformLocation
glGetUniformSubroutineuiv
glGetUniformdv
glIsTransformFeedback
glMinSampleShading
glPatchParameterfv
glPatchParameteri
glPauseTransformFeedback
glResumeTransformFeedback
glUniform1d
glUniform1dv
glUniform2d
glUniform2dv
glUniform3d
glUniform3dv
glUniform4d
glUniform4dv
glUniformMatrix2dv
glUniformMatrix2x3dv
glUniformMatrix2x4dv
glUniformMatrix3dv
glUniformMatrix3x2dv
glUniformMatrix3x4dv
glUniformMatrix4dv
glUniformMatrix4x2dv
glUniformMatrix4x3dv
glUniformSubroutinesuiv
glActiveShaderProgram
glBindProgramPipeline
glClearDepthf
glCreateShaderProgramv
glDeleteProgramPipelines
glDepthRangeArrayv
glDepthRangeIndexed
glDepthRangef
glGenProgramPipelines
glGetDoublei_v
glGetFloati_v
glGetProgramBinary
glGetProgramPipelineInfoLog
glGetProgramPipelineiv
glGetShaderPrecisionFormat
glGetVertexAttribLdv
glIsProgramPipeline
glProgramBinary
glProgramParameteri
glProgramUniform1d
glProgramUniform1dv
glProgramUniform1f
glProgramUniform1fv
glProgramUniform1i
glProgramUniform1iv
glProgramUniform1ui
glProgramUniform1uiv
glProgramUniform2d
glProgramUniform2dv
glProgramUniform2f
glProgramUniform2fv
glProgramUniform2i
glProgramUniform2iv
glProgramUniform2ui
glProgramUniform2uiv
glProgramUniform3d
glProgramUniform3dv
glProgramUniform3f
glProgramUniform3fv
glProgramUniform3i
glProgramUniform3iv
glProgramUniform3ui
glProgramUniform3uiv
glProgramUniform4d
glProgramUniform4dv
glProgramUniform4f
glProgramUniform4fv
glProgramUniform4i
glProgramUniform4iv
glProgramUniform4ui
glProgramUniform4uiv
glProgramUniformMatrix2dv
glProgramUniformMatrix2fv
glProgramUniformMatrix2x3dv
glProgramUniformMatrix2x3fv
glProgramUniformMatrix2x4dv
glProgramUniformMatrix2x4fv
glProgramUniformMatrix3dv
glProgramUniformMatrix3fv
glProgramUniformMatrix3x2dv
glProgramUniformMatrix3x2fv
glProgramUniformMatrix3x4dv
glProgramUniformMatrix3x4fv
glProgramUniformMatrix4dv
glProgramUniformMatrix4fv
glProgramUniformMatrix4x2dv
glProgramUniformMatrix4x2fv
glProgramUniformMatrix4x3dv
glProgramUniformMatrix4x3fv
glReleaseShaderCompiler
glScissorArrayv
glScissorIndexed
glScissorIndexedv
glShaderBinary
glUseProgramStages
glValidateProgramPipeline
glVertexAttribL1d
glVertexAttribL1dv
glVertexAttribL2d
glVertexAttribL2dv
glVertexAttribL3d
glVertexAttribL3dv
glVertexAttribL4d
glVertexAttribL4dv
glVertexAttribLPointer
glViewportArrayv
glViewportIndexedf
glViewportIndexedfv
glBindImageTexture
glDrawArraysInstancedBaseInstance
glDrawElementsInstancedBaseInstance
glDrawElementsInstancedBaseVertexBaseInstance
glDrawTransformFeedbackInstanced
glDrawTransformFeedbackStreamInstanced
glGetActiveAtomicCounterBufferiv
glGetInternalformativ
glMemoryBarrier
glTexStorage1D
glTexStorage2D
glTexStorage3D
glBindVertexBuffer
glClearBufferData
glClearBufferSubData
glCopyImageSubData
glDebugMessageCallback
glDebugMessageControl
glDebugMessageInsert
glDispatchCompute
glDispatchComputeIndirect
glFramebufferParameteri
glGetDebugMessageLog
glGetFramebufferParameteriv
glGetInternalformati64v
glGetObjectLabel
glGetObjectPtrLabel
glGetPointerv
glGetProgramInterfaceiv
glGetProgramResourceIndex
glGetProgramResourceLocation
glGetProgramResourceLocationIndex
glGetProgramResourceName
glGetProgramResourceiv
glInvalidateBufferData
glInvalidateBufferSubData
glInvalidateFramebuffer
glInvalidateSubFramebuffer
glInvalidateTexImage
glInvalidateTexSubImage
glMultiDrawArraysIndirect
glMultiDrawElementsIndirect
glObjectLabel
glObjectPtrLabel
glPopDebugGroup
glPushDebugGroup
glShaderStorageBlockBinding
glTexBufferRange
glTexStorage2DMultisample
glTexStorage3DMultisample
glTextureView
glVertexAttribBinding
glVertexAttribFormat
glVertexAttribIFormat
glVertexAttribLFormat
glVertexBindingDivisor
glBindBuffersBase
glBindBuffersRange
glBindImageTextures
glBindSamplers
glBindTextures
glBindVertexBuffers
glBufferStorage
glClearTexImage
glClearTexSubImage
glBindTextureUnit
glBlitNamedFramebuffer
glCheckNamedFramebufferStatus
glClearNamedBufferData
glClearNamedBufferSubData
glClearNamedFramebufferfi
glClearNamedFramebufferfv
glClearNamedFramebufferiv
glClearNamedFramebufferuiv
glClipControl
glCompressedTextureSubImage1D
glCompressedTextureSubImage2D
glCompressedTextureSubImage3D
glCopyNamedBufferSubData
glCopyTextureSubImage1D
glCopyTextureSubImage2D
glCopyTextureSubImage3D
glCreateBuffers
glCreateFramebuffers
glCreateProgramPipelines
glCreateQueries
glCreateRenderbuffers
glCreateSamplers
glCreateTextures
glCreateTransformFeedbacks
glCreateVertexArrays
glDisableVertexArrayAttrib
glEnableVertexArrayAttrib
glFlushMappedNamedBufferRange
glGenerateTextureMipmap
glGetCompressedTextureImage
glGetCompressedTextureSubImage
glGetGraphicsResetStatus
glGetNamedBufferParameteri64v
glGetNamedBufferParameteriv
glGetNamedBufferPointerv
glGetNamedBufferSubData
glGetNamedFramebufferAttachmentParameteriv
glGetNamedFramebufferParameteriv
glGetNamedRenderbufferParameteriv
glGetQueryBufferObjecti64v
glGetQueryBufferObjectiv
glGetQueryBufferObjectui64v
glGetQueryBufferObjectuiv
glGetTextureImage
glGetTextureLevelParameterfv
glGetTextureLevelParameteriv
glGetTextureParameterIiv
glGetTextureParameterIuiv
glGetTextureParameterfv
glGetTextureParameteriv
glGetTextureSubImage
glGetTransformFeedbacki64_v
glGetTransformFeedbacki_v
glGetTransformFeedbackiv
glGetVertexArrayIndexed64iv
glGetVertexArrayIndexediv
glGetVertexArrayiv
glGetnCompressedTexImage
glGetnTexImage
glGetnUniformdv
glGetnUniformfv
glGetnUniformiv
glGetnUniformuiv
glInvalidateNamedFramebufferData
glInvalidateNamedFramebufferSubData
glMapNamedBuffer
glMapNamedBufferRange
glMemoryBarrierByRegion
glNamedBufferData
glNamedBufferStorage
glNamedBufferSubData
glNamedFramebufferDrawBuffer
glNamedFramebufferDrawBuffers
glNamedFramebufferParameteri
glNamedFramebufferReadBuffer
glNamedFramebufferRenderbuffer
glNamedFramebufferTexture
glNamedFramebufferTextureLayer
glNamedRenderbufferStorage
glNamedRenderbufferStorageMultisample
glReadnPixels
glTextureBarrier
glTextureBuffer
glTextureBufferRange
glTextureParameterIiv
glTextureParameterIuiv
glTextureParameterf
glTextureParameterfv
glTextureParameteri
glTextureParameteriv
glTextureStorage1D
glTextureStorage2D
glTextureStorage2DMultisample
glTextureStorage3D
glTextureStorage3DMultisample
glTextureSubImage1D
glTextureSubImage2D
glTextureSubImage3D
glTransformFeedbackBufferBase
glTransformFeedbackBufferRange
glUnmapNamedBuffer
glVertexArrayAttribBinding
glVertexArrayAttribFormat
glVertexArrayAttribIFormat
glVertexArrayAttribLFormat
glVertexArrayBindingDivisor
glVertexArrayElementBuffer
glVertexArrayVertexBuffer
glVertexArrayVertexBuffers
GL_ARB_ES2_compatibility
GL_ARB_ES3_1_compatibility
GL_ARB_ES3_2_compatibility
glPrimitiveBoundingBoxARB
GL_ARB_base_instance
GL_ARB_blend_func_extended
GL_ARB_buffer_storage
GL_ARB_clear_buffer_object
GL_ARB_clear_texture
GL_ARB_clip_control
GL_ARB_color_buffer_float
glClampColorARB
GL_ARB_compute_shader
GL_ARB_copy_buffer
GL_ARB_copy_image
GL_ARB_debug_output
glDebugMessageCallbackARB
glDebugMessageControlARB
glDebugMessageInsertARB
glGetDebugMessageLogARB
GL_ARB_direct_state_access
GL_ARB_draw_buffers
glDrawBuffersARB
GL_ARB_draw_buffers_blend
glBlendEquationSeparateiARB
glBlendEquationiARB
glBlendFuncSeparateiARB
glBlendFunciARB
GL_ARB_draw_elements_base_vertex
GL_ARB_draw_indirect
GL_ARB_draw_instanced
glDrawArraysInstancedARB
glDrawElementsInstancedARB
GL_ARB_fragment_program
glGetProgramivARB
glIsProgramARB
GL_ARB_framebuffer_no_attachments
GL_ARB_framebuffer_object
GL_ARB_geometry_shader4
glFramebufferTextureARB
glFramebufferTextureLayerARB
glProgramParameteriARB
GL_ARB_get_program_binary
GL_ARB_get_texture_sub_image
GL_ARB_gpu_shader_fp64
GL_ARB_imaging
GL_ARB_instanced_arrays
glVertexAttribDivisorARB
GL_ARB_internalformat_query
GL_ARB_internalformat_query2
GL_ARB_invalidate_subdata
GL_ARB_map_buffer_range
GL_ARB_multi_bind
GL_ARB_multi_draw_indirect
GL_ARB_multisample
glSampleCoverageARB
GL_ARB_multitexture
glActiveTextureARB
GL_ARB_occlusion_query
glBeginQueryARB
glDeleteQueriesARB
glEndQueryARB
glGenQueriesARB
glGetQueryObjectivARB
glGetQueryObjectuivARB
glGetQueryivARB
glIsQueryARB
GL_ARB_parallel_shader_compile
glMaxShaderCompilerThreadsARB
GL_ARB_point_parameters
glPointParameterfARB
glPointParameterfvARB
GL_ARB_program_interface_query
GL_ARB_provoking_vertex
GL_ARB_robustness
glGetGraphicsResetStatusARB
glGetnCompressedTexImageARB
glGetnTexImageARB
glGetnUniformdvARB
glGetnUniformfvARB
glGetnUniformivARB
glGetnUniformuivARB
glReadnPixelsARB
GL_ARB_sample_shading
glMinSampleShadingARB
GL_ARB_sampler_objects
GL_ARB_separate_shader_objects
GL_ARB_shader_atomic_counters
GL_ARB_shader_image_load_store
GL_ARB_shader_objects
glCompileShaderARB
glGetActiveUniformARB
glGetShaderSourceARB
glGetUniformLocationARB
glGetUniformfvARB
glGetUniformivARB
glLinkProgramARB
glShaderSourceARB
glUniform1fARB
glUniform1fvARB
glUniform1iARB
glUniform1ivARB
glUniform2fARB
glUniform2fvARB
glUniform2iARB
glUniform2ivARB
glUniform3fARB
glUniform3fvARB
glUniform3iARB
glUniform3ivARB
glUniform4fARB
glUniform4fvARB
glUniform4iARB
glUniform4ivARB
glUniformMatrix2fvARB
glUniformMatrix3fvARB
glUniformMatrix4fvARB
glValidateProgramARB
GL_ARB_shader_storage_buffer_object
GL_ARB_shader_subroutine
GL_ARB_tessellation_shader
GL_ARB_texture_barrier
GL_ARB_texture_buffer_object
glTexBufferARB
GL_ARB_texture_buffer_range
GL_ARB_texture_compression
glCompressedTexImage1DARB
glCompressedTexImage2DARB
glCompressedTexImage3DARB
glCompressedTexSubImage1DARB
glCompressedTexSubImage2DARB
glCompressedTexSubImage3DARB
glGetCompressedTexImageARB
GL_ARB_texture_multisample
GL_ARB_texture_storage
GL_ARB_texture_storage_multisample
GL_ARB_texture_view
GL_ARB_timer_query
GL_ARB_transform_feedback2
GL_ARB_transform_feedback3
GL_ARB_transform_feedback_instanced
GL_ARB_uniform_buffer_object
GL_ARB_vertex_array_object
GL_ARB_vertex_attrib_64bit
GL_ARB_vertex_attrib_binding
GL_ARB_vertex_buffer_object
glBindBufferARB
glBufferDataARB
glBufferSubDataARB
glDeleteBuffersARB
glGenBuffersARB
glGetBufferParameterivARB
glGetBufferPointervARB
glGetBufferSubDataARB
glIsBufferARB
glMapBufferARB
glUnmapBufferARB
GL_ARB_vertex_program
glDisableVertexAttribArrayARB
glEnableVertexAttribArrayARB
glGetVertexAttribPointervARB
glGetVertexAttribdvARB
glGetVertexAttribfvARB
glGetVertexAttribivARB
glVertexAttrib1dARB
glVertexAttrib1dvARB
glVertexAttrib1fARB
glVertexAttrib1fvARB
glVertexAttrib1sARB
glVertexAttrib1svARB
glVertexAttrib2dARB
glVertexAttrib2dvARB
glVertexAttrib2fARB
glVertexAttrib2fvARB
glVertexAttrib2sARB
glVertexAttrib2svARB
glVertexAttrib3dARB
glVertexAttrib3dvARB
glVertexAttrib3fARB
glVertexAttrib3fvARB
glVertexAttrib3sARB
glVertexAttrib3svARB
glVertexAttrib4NbvARB
glVertexAttrib4NivARB
glVertexAttrib4NsvARB
glVertexAttrib4NubARB
glVertexAttrib4NubvARB
glVertexAttrib4NuivARB
glVertexAttrib4NusvARB
glVertexAttrib4bvARB
glVertexAttrib4dARB
glVertexAttrib4dvARB
glVertexAttrib4fARB
glVertexAttrib4fvARB
glVertexAttrib4ivARB
glVertexAttrib4sARB
glVertexAttrib4svARB
glVertexAttrib4ubvARB
glVertexAttrib4uivARB
glVertexAttrib4usvARB
glVertexAttribPointerARB
GL_ARB_vertex_shader
glBindAttribLocationARB
glGetActiveAttribARB
glGetAttribLocationARB
GL_ARB_vertex_type_2_10_10_10_rev
GL_ARB_viewport_array
GL_EXT_blend_color
glBlendColorEXT
GL_EXT_blend_equation_separate
glBlendEquationSeparateEXT
GL_EXT_blend_func_separate
glBlendFuncSeparateEXT
GL_EXT_copy_texture
glCopyTexImage1DEXT
glCopyTexImage2DEXT
glCopyTexSubImage1DEXT
glCopyTexSubImage2DEXT
glCopyTexSubImage3DEXT
GL_EXT_direct_state_access
glCheckNamedFramebufferStatusEXT
glClearNamedBufferDataEXT
glClearNamedBufferSubDataEXT
glCompressedTextureSubImage1DEXT
glCompressedTextureSubImage2DEXT
glCompressedTextureSubImage3DEXT
glCopyTextureSubImage1DEXT
glCopyTextureSubImage2DEXT
glCopyTextureSubImage3DEXT
glDisableVertexArrayAttribEXT
glEnableVertexArrayAttribEXT
glFlushMappedNamedBufferRangeEXT
glGenerateTextureMipmapEXT
glGetCompressedTextureImageEXT
glGetDoublei_vEXT
glGetFloati_vEXT
glGetFramebufferParameterivEXT
glGetNamedBufferParameterivEXT
glGetNamedBufferPointervEXT
glGetNamedBufferSubDataEXT
glGetNamedFramebufferAttachmentParameterivEXT
glGetNamedFramebufferParameterivEXT
glGetNamedRenderbufferParameterivEXT
glGetTextureImageEXT
glGetTextureLevelParameterfvEXT
glGetTextureLevelParameterivEXT
glGetTextureParameterIivEXT
glGetTextureParameterIuivEXT
glGetTextureParameterfvEXT
glGetTextureParameterivEXT
glMapNamedBufferEXT
glMapNamedBufferRangeEXT
glNamedBufferDataEXT
glNamedBufferStorageEXT
glNamedBufferSubDataEXT
glNamedFramebufferParameteriEXT
glNamedFramebufferRenderbufferEXT
glNamedFramebufferTextureEXT
glNamedFramebufferTextureLayerEXT
glNamedRenderbufferStorageEXT
glNamedRenderbufferStorageMultisampleEXT
glProgramUniform1dEXT
glProgramUniform1dvEXT
glProgramUniform2dEXT
glProgramUniform2dvEXT
glProgramUniform3dEXT
glProgramUniform3dvEXT
glProgramUniform4dEXT
glProgramUniform4dvEXT
glProgramUniformMatrix2dvEXT
glProgramUniformMatrix2x3dvEXT
glProgramUniformMatrix2x4dvEXT
glProgramUniformMatrix3dvEXT
glProgramUniformMatrix3x2dvEXT
glProgramUniformMatrix3x4dvEXT
glProgramUniformMatrix4dvEXT
glProgramUniformMatrix4x2dvEXT
glProgramUniformMatrix4x3dvEXT
glTextureBufferEXT
glTextureBufferRangeEXT
glTextureParameterIivEXT
glTextureParameterIuivEXT
glTextureParameterfEXT
glTextureParameterfvEXT
glTextureParameteriEXT
glTextureParameterivEXT
glTextureStorage1DEXT
glTextureStorage2DEXT
glTextureStorage2DMultisampleEXT
glTextureStorage3DEXT
glTextureStorage3DMultisampleEXT
glTextureSubImage1DEXT
glTextureSubImage2DEXT
glTextureSubImage3DEXT
glUnmapNamedBufferEXT
GL_EXT_draw_range_elements
glDrawRangeElementsEXT
GL_EXT_framebuffer_blit
glBlitFramebufferEXT
GL_EXT_framebuffer_multisample
glRenderbufferStorageMultisampleEXT
GL_EXT_framebuffer_object
glBindFramebufferEXT
glBindRenderbufferEXT
glCheckFramebufferStatusEXT
glDeleteFramebuffersEXT
glDeleteRenderbuffersEXT
glFramebufferRenderbufferEXT
glFramebufferTexture1DEXT
glFramebufferTexture2DEXT
glFramebufferTexture3DEXT
glGenFramebuffersEXT
glGenRenderbuffersEXT
glGenerateMipmapEXT
glGetFramebufferAttachmentParameterivEXT
glGetRenderbufferParameterivEXT
glIsFramebufferEXT
glIsRenderbufferEXT
glRenderbufferStorageEXT
GL_EXT_gpu_shader4
glBindFragDataLocationEXT
glGetFragDataLocationEXT
glGetUniformuivEXT
glUniform1uiEXT
glUniform1uivEXT
glUniform2uiEXT
glUniform2uivEXT
glUniform3uiEXT
glUniform3uivEXT
glUniform4uiEXT
glUniform4uivEXT
GL_EXT_point_parameters
glPointParameterfEXT
glPointParameterfvEXT
GL_EXT_polygon_offset
glPolygonOffsetEXT
GL_EXT_provoking_vertex
glProvokingVertexEXT
GL_EXT_shader_image_load_store
glBindImageTextureEXT
glMemoryBarrierEXT
GL_EXT_subtexture
glTexSubImage1DEXT
glTexSubImage2DEXT
GL_EXT_texture3D
glTexImage3DEXT
glTexSubImage3DEXT
GL_EXT_texture_array
glFramebufferTextureLayerEXT
GL_EXT_texture_buffer_object
glTexBufferEXT
GL_EXT_texture_integer
glGetTexParameterIivEXT
glGetTexParameterIuivEXT
glTexParameterIivEXT
glTexParameterIuivEXT
GL_EXT_texture_object
glBindTextureEXT
glDeleteTexturesEXT
glGenTexturesEXT
glIsTextureEXT
GL_EXT_timer_query
glGetQueryObjecti64vEXT
glGetQueryObjectui64vEXT
GL_EXT_transform_feedback
glBeginTransformFeedbackEXT
glBindBufferBaseEXT
glBindBufferRangeEXT
glEndTransformFeedbackEXT
glGetTransformFeedbackVaryingEXT
glTransformFeedbackVaryingsEXT
GL_EXT_vertex_array
glDrawArraysEXT
glGetPointervEXT
GL_EXT_vertex_attrib_64bit
glGetVertexAttribLdvEXT
glVertexAttribL1dEXT
glVertexAttribL1dvEXT
glVertexAttribL2dEXT
glVertexAttribL2dvEXT
glVertexAttribL3dEXT
glVertexAttribL3dvEXT
glVertexAttribL4dEXT
glVertexAttribL4dvEXT
glVertexAttribLPointerEXT
GL_KHR_robustness
GL_NV_geometry_program4
glFramebufferTextureEXT
GL_NV_vertex_program4
glGetVertexAttribIivEXT
glGetVertexAttribIuivEXT
glVertexAttribI1iEXT
glVertexAttribI1ivEXT
glVertexAttribI1uiEXT
glVertexAttribI1uivEXT
glVertexAttribI2iEXT
glVertexAttribI2ivEXT
glVertexAttribI2uiEXT
glVertexAttribI2uivEXT
glVertexAttribI3iEXT
glVertexAttribI3ivEXT
glVertexAttribI3uiEXT
glVertexAttribI3uivEXT
glVertexAttribI4bvEXT
glVertexAttribI4iEXT
glVertexAttribI4ivEXT
glVertexAttribI4svEXT
glVertexAttribI4ubvEXT
glVertexAttribI4uiEXT
glVertexAttribI4uivEXT
glVertexAttribI4usvEXT
glVertexAttribIPointerEXT
GL_OES_single_precision
glClearDepthfOES
glDepthRangefOES
glBlendBarrier
glPrimitiveBoundingBox
GL_EXT_base_instance
glDrawArraysInstancedBaseInstanceEXT
glDrawElementsInstancedBaseInstanceEXT
glDrawElementsInstancedBaseVertexBaseInstanceEXT
glBindFragDataLocationIndexedEXT
glGetFragDataIndexEXT
glGetProgramResourceLocationIndexEXT
GL_EXT_buffer_storage
glBufferStorageEXT
GL_EXT_clear_texture
glClearTexImageEXT
glClearTexSubImageEXT
GL_EXT_clip_control
glClipControlEXT
GL_EXT_copy_image
glCopyImageSubDataEXT
glDiscardFramebufferEXT
glBeginQueryEXT
glDeleteQueriesEXT
glEndQueryEXT
glGenQueriesEXT
glGetInteger64vEXT
glGetQueryObjectivEXT
glGetQueryObjectuivEXT
glGetQueryivEXT
glIsQueryEXT
glQueryCounterEXT
glDrawBuffersEXT
glBlendEquationSeparateiEXT
glBlendEquationiEXT
glBlendFuncSeparateiEXT
glBlendFunciEXT
glColorMaskiEXT
glDisableiEXT
glEnableiEXT
glIsEnablediEXT
glDrawElementsBaseVertexEXT
glDrawElementsInstancedBaseVertexEXT
glDrawRangeElementsBaseVertexEXT
glMultiDrawElementsBaseVertexEXT
GL_EXT_draw_transform_feedback
glDrawTransformFeedbackEXT
glDrawTransformFeedbackInstancedEXT
glVertexAttribDivisorEXT
glFlushMappedBufferRangeEXT
glMapBufferRangeEXT
GL_EXT_multi_draw_indirect
glMultiDrawArraysIndirectEXT
glMultiDrawElementsIndirectEXT
GL_EXT_multiview_draw_buffers
glGetIntegeri_vEXT
GL_EXT_primitive_bounding_box
glPrimitiveBoundingBoxEXT
glGetGraphicsResetStatusEXT
glGetnUniformfvEXT
glGetnUniformivEXT
glReadnPixelsEXT
GL_EXT_tessellation_shader
glPatchParameteriEXT
GL_EXT_texture_border_clamp
glGetSamplerParameterIivEXT
glGetSamplerParameterIuivEXT
glSamplerParameterIivEXT
glSamplerParameterIuivEXT
GL_EXT_texture_buffer
glTexBufferRangeEXT
glTexStorage1DEXT
glTexStorage2DEXT
glTexStorage3DEXT
GL_EXT_texture_view
glTextureViewEXT
glDebugMessageCallbackKHR
glDebugMessageControlKHR
glDebugMessageInsertKHR
glGetDebugMessageLogKHR
glGetObjectLabelKHR
glGetObjectPtrLabelKHR
glGetPointervKHR
glObjectLabelKHR
glObjectPtrLabelKHR
glPopDebugGroupKHR
glPushDebugGroupKHR
glGetGraphicsResetStatusKHR
glGetnUniformfvKHR
glGetnUniformivKHR
glGetnUniformuivKHR
glReadnPixelsKHR
glEGLImageTargetRenderbufferStorageOES
glEGLImageTargetTexture2DOES
GL_OES_copy_image
glCopyImageSubDataOES
glBlendEquationSeparateiOES
glBlendEquationiOES
glBlendFuncSeparateiOES
glBlendFunciOES
glColorMaskiOES
glDisableiOES
glEnableiOES
glIsEnablediOES
glDrawElementsBaseVertexOES
glDrawElementsInstancedBaseVertexOES
glDrawRangeElementsBaseVertexOES
GL_OES_geometry_shader
glFramebufferTextureOES
glGetProgramBinaryOES
glProgramBinaryOES
glGetBufferPointervOES
glMapBufferOES
glUnmapBufferOES
GL_OES_primitive_bounding_box
glPrimitiveBoundingBoxOES
GL_OES_sample_shading
glMinSampleShadingOES
GL_OES_tessellation_shader
glPatchParameteriOES
glCompressedTexImage3DOES
glCompressedTexSubImage3DOES
glCopyTexSubImage3DOES
glFramebufferTexture3DOES
glTexImage3DOES
glTexSubImage3DOES
glGetSamplerParameterIivOES
glGetSamplerParameterIuivOES
glGetTexParameterIivOES
glGetTexParameterIuivOES
glSamplerParameterIivOES
glSamplerParameterIuivOES
glTexParameterIivOES
glTexParameterIuivOES
GL_OES_texture_buffer
glTexBufferOES
glTexBufferRangeOES
glTexStorage3DMultisampleOES
GL_OES_texture_view
glTextureViewOES
glBindVertexArrayOES
glDeleteVertexArraysOES
glGenVertexArraysOES
glIsVertexArrayOES
GL_OES_viewport_array
glGetFloati_vOES
glScissorArrayvOES
glScissorIndexedOES
glScissorIndexedvOES
glViewportArrayvOES
glViewportIndexedfOES
glViewportIndexedfvOES
glBlendEquationEXT
GL_EXT_debug_label
glGetObjectLabelEXT
glInsertEventMarkerEXT
glPopGroupMarkerEXT
glPushGroupMarkerEXT
GL_EXT_draw_instanced
glDrawArraysInstancedEXT
glDrawElementsInstancedEXT
glBufferStorageMemEXT
glCreateMemoryObjectsEXT
glDeleteMemoryObjectsEXT
glGetMemoryObjectParameterivEXT
glGetUnsignedBytei_vEXT
glGetUnsignedBytevEXT
glIsMemoryObjectEXT
glMemoryObjectParameterivEXT
glNamedBufferStorageMemEXT
glTexStorageMem2DEXT
glTexStorageMem2DMultisampleEXT
glTexStorageMem3DEXT
glTexStorageMem3DMultisampleEXT
glTextureStorageMem2DEXT
glTextureStorageMem2DMultisampleEXT
glTextureStorageMem3DEXT
glTextureStorageMem3DMultisampleEXT
glImportMemoryFdEXT
GL_EXT_memory_object_win32
glImportMemoryWin32HandleEXT
glImportMemoryWin32NameEXT
GL_EXT_multi_draw_arrays
glMultiDrawArraysEXT
glMultiDrawElementsEXT
glDeleteSemaphoresEXT
glGenSemaphoresEXT
glGetSemaphoreParameterui64vEXT
glIsSemaphoreEXT
glSemaphoreParameterui64vEXT
glSignalSemaphoreEXT
glWaitSemaphoreEXT
glImportSemaphoreFdEXT
GL_EXT_semaphore_win32
glImportSemaphoreWin32HandleEXT
glImportSemaphoreWin32NameEXT
GL_EXT_separate_shader_objects
glActiveShaderProgramEXT
glBindProgramPipelineEXT
glCreateShaderProgramvEXT
glDeleteProgramPipelinesEXT
glGenProgramPipelinesEXT
glGetProgramPipelineInfoLogEXT
glGetProgramPipelineivEXT
glIsProgramPipelineEXT
glProgramParameteriEXT
glProgramUniform1fEXT
glProgramUniform1fvEXT
glProgramUniform1iEXT
glProgramUniform1ivEXT
glProgramUniform1uiEXT
glProgramUniform1uivEXT
glProgramUniform2fEXT
glProgramUniform2fvEXT
glProgramUniform2iEXT
glProgramUniform2ivEXT
glProgramUniform2uiEXT
glProgramUniform2uivEXT
glProgramUniform3fEXT
glProgramUniform3fvEXT
glProgramUniform3iEXT
glProgramUniform3ivEXT
glProgramUniform3uiEXT
glProgramUniform3uivEXT
glProgramUniform4fEXT
glProgramUniform4fvEXT
glProgramUniform4iEXT
glProgramUniform4ivEXT
glProgramUniform4uiEXT
glProgramUniform4uivEXT
glProgramUniformMatrix2fvEXT
glProgramUniformMatrix2x3fvEXT
glProgramUniformMatrix2x4fvEXT
glProgramUniformMatrix3fvEXT
glProgramUniformMatrix3x2fvEXT
glProgramUniformMatrix3x4fvEXT
glProgramUniformMatrix4fvEXT
glProgramUniformMatrix4x2fvEXT
glProgramUniformMatrix4x3fvEXT
glUseProgramStagesEXT
glValidateProgramPipelineEXT
glMaxShaderCompilerThreadsKHR
glDeleteFencesNV
glFinishFenceNV
glGenFencesNV
glGetFenceivNV
glIsFenceNV
glSetFenceNV
glTestFenceNV
GL_NV_framebuffer_mixed_samples
glCoverageModulationNV
GL_NV_internalformat_sample_query
glGetInternalformatSampleivNV
glFramebufferTextureMultiviewOVR
gpu.angle
egl::Display::initialize
initialize
ANGLE Display::initialize error 
Failed to initialize display because device creation failed: 
true
Program binary not accessible.
Program binary too large or changed during access.
Failed to copy program binary into the cache.
lose_context_on_out_of_memory
Some users rely on a lost context notification if a GL_OUT_OF_MEMORY error occurs
disable_program_caching_for_transform_feedback
On some GPUs, program binaries don't contain transform feedback varyings
sync_framebuffer_bindings_on_tex_image
On some drivers TexImage sometimes seems to interact with the Framebuffer
scalarize_vec_and_mat_constructor_args
Always rewrite vec/mat constructors to be consistent
http://crbug.com/398694
ANGLE_DEFAULT_PLATFORM
GPU.ANGLE.DisplayInitializeMS
Could not create the EAGL context.
Could not open the OpenGLES Framework.
OpenGL ES 2.0 is not supportable.
makeCurrent
Unable to make gl context current.
/System/Library/Frameworks/OpenGLES.framework/OpenGLES
DisplayImpl::validateClientBuffer unimplemented.
DisplayImpl::validateImageClientBuffer unimplemented.
DisplayImpl::valdiatePixmap unimplemented.
gl_FragData
angle_compound_
_frm
_frl
float
vec2
float2
vec3
float3
float4
mat2
float2x2
mat3
float3x3
mat4
float4x4
mat2x3
float2x3
mat2x4
float2x4
mat3x2
float3x2
mat3x4
float3x4
mat4x2
float4x2
mat4x3
float4x3
 angle_frm(
 v) {
    v = clamp(v, -65504.0, 65504.0);
    
 exponent = floor(log2(abs(v) + 1e-30)) - 10.0;
    bool
 isNonZero = exponent < -25.0;
    v = v * exp2(-exponent);
    v = sign(v) * floor(abs(v));
    return v * exp2(exponent) * (float
)(isNonZero);
 angle_frl(
 v) {
    v = clamp(v, -2.0, 2.0);
    v = v * 256.0;
    v = sign(v) * floor(abs(v));
    return v * 0.00390625;
 m) {
 rounded;
    rounded[
] = 
    return rounded;
highp 
 angle_frm(in 
 x) {
    x = clamp(x, -65504.0, 65504.0);
    
 exponent = floor(log2(abs(x) + 1e-30)) - 10.0;
    bool isNonZero = (exponent >= -25.0);
    x = x * exp2(-exponent);
    x = sign(x) * floor(abs(x));
    return x * exp2(exponent) * float(isNonZero);
 angle_frl(in 
 x) {
    x = clamp(x, -2.0, 2.0);
    x = x * 256.0;
    x = sign(x) * floor(abs(x));
    return x * 0.00390625;
 exponent = floor(log2(abs(v) + 1e-30)) - 10.0;
    bvec
 isNonZero = greaterThanEqual(exponent, vec
(-25.0));
    v = v * exp2(-exponent);
    v = sign(v) * floor(abs(v));
    return v * exp2(exponent) * vec
(isNonZero);
(in 
angle_frm
angle_frl
 angle_compound_
_frm(inout 
 x, in 
 y) {
    x = angle_frm(angle_frm(x) 
 y);
    return x;
_frl(inout 
 y) {
    x = angle_frl(angle_frl(x) 
eglInitialize
eglTerminate
eglQueryString
OpenGL_ES
1.5 (ANGLE 2.1.0.07cdf4214314)
eglGetConfigs
eglChooseConfig
eglGetConfigAttrib
eglCreateWindowSurface
eglCreatePbufferSurface
eglCreatePixmapSurface
eglDestroySurface
eglQuerySurface
eglCreateContext
eglDestroyContext
eglMakeCurrent
eglGetCurrentSurface
eglQueryContext
eglWaitGL
eglWaitNative
eglSwapBuffers
eglCopyBuffers
eglBindTexImage
eglSurfaceAttrib
eglReleaseTexImage
eglSwapInterval
eglBindAPI
eglCreatePbufferFromClientBuffer
eglReleaseThread
eglWaitClient
eglCreateSync
eglDestroySync
eglClientWaitSync
eglGetSyncAttrib
eglCreateImage
eglDestroyImage
eglGetPlatformDisplay
eglCreatePlatformPixmapSurface
eglWaitSync
eglQuerySurfacePointerANGLE
eglPostSubBufferNV
eglGetPlatformDisplayEXT
eglCreatePlatformWindowSurfaceEXT
CreatePlatformWindowSurfaceEXT unimplemented.
eglCreatePlatformPixmapSurfaceEXT
CreatePlatformPixmapSurfaceEXT unimplemented.
eglQueryDeviceAttribEXT
Device wasn't created using eglCreateDeviceANGLE, and the egl::Display that created it doesn't support device querying
eglQueryDeviceStringEXT
eglQueryDisplayAttribEXT
eglQueryDisplayAttribANGLE
eglCreateImageKHR
eglDestroyImageKHR
eglCreateDeviceANGLE
eglReleaseDeviceANGLE
eglCreateStreamKHR
eglDestroyStreamKHR
eglStreamAttribKHR
eglQueryStreamKHR
eglQueryStreamu64KHR
eglStreamConsumerGLTextureExternalKHR
eglStreamConsumerAcquireKHR
eglSStreamConsumerReleaseKHR
eglStreamConsumerReleaseKHR
eglStreamConsumerGLTextureExternalAttribsNV
eglCreateStreamProducerD3DTextureANGLE
eglStreamPostD3DTextureANGLE
eglGetMscRateANGLE
eglGetSyncValuesCHROMIUM
eglSwapBuffersWithDamageEXT
eglPresentationTimeANDROID
eglSetBlobCacheFuncsANDROID
eglProgramCacheGetAttribANGLE
eglProgramCacheQueryANGLE
eglProgramCachePopulateANGLE
eglProgramCacheResizeANGLE
eglDebugMessageControlKHR
eglQueryDebugKHR
eglLabelObjectKHR
eglQueryTimestampSupportedANDROID
eglGetCompositorTimingANDROIDD
eglGetNextFrameIdANDROID
eglGetFrameTimestampsANDROID
eglQueryStringiANGLE
eglGetNativeClientBufferANDROID
eglDupNativeFenceFDANDROID
eglSwapBuffersWithFrameTokenANGLE
eglReleaseHighPowerGPUANGLE
eglReacquireHighPowerGPUANGLE
eglHandleGPUSwitchANGLE
Invalid buffer target.
Object cannot be used because it has not been generated.
Textarget must match the texture target type.
Cannot have negative start.
Negative count.
Not enough space in bound transform feedback buffers.
Draw framebuffer is incomplete
Integer overflow.
Offset must be a multiple of the passed in datatype.
Negative offset.
No element array buffer and no pointer.
Insufficient buffer size.
Element value exceeds maximum element index.
Only UNSIGNED_SHORT and UNSIGNED_BYTE types are supported.
Enum is not currently supported.
Cannot have negative stride.
Stride must be within [0, MAX_VERTEX_ATTRIB_STRIDE).
Index must be within [0, MAX_VERTEX_ATTRIB_BINDINGS).
Client data cannot be used with a non-default vertex array object.
GL_FIXED is not supported in WebGL.
Index must be less than MAX_VERTEX_ATTRIBS.
Invalid type.
Vertex attribute size must be 1, 2, 3, or 4.
Type is INT_2_10_10_10_REV or UNSIGNED_INT_2_10_10_10_REV and size is not 4.
Type is INT_10_10_10_2_OES or UNSIGNED_INT_10_10_10_2_OES and size is not 3 or 4.
GL_ARB_texture_rectangle
GL_ANGLE_texture_multisample
GL_ARM_shader_framebuffer_fetch
GL_EXT_blend_func_extended
GL_EXT_draw_buffers
GL_EXT_frag_depth
GL_EXT_geometry_shader
GL_EXT_gpu_shader5
GL_EXT_shader_framebuffer_fetch
GL_EXT_shader_texture_lod
GL_EXT_YUV_target
GL_EXT_shader_non_constant_global_initializers
GL_NV_shader_noperspective_interpolation
GL_NV_EGL_stream_consumer_external
GL_NV_shader_framebuffer_fetch
GL_OES_EGL_image_external
GL_OES_EGL_image_external_essl3
GL_OES_standard_derivatives
GL_OES_texture_storage_multisample_2d_array
GL_OES_texture_3D
GL_OVR_multiview
GL_OVR_multiview2
GL_ANGLE_multi_draw
GL_ANGLE_base_vertex_base_instance
GL_WEBGL_video_texture
GL_APPLE_clip_distance
GL_OES_texture_cube_map_array
GL_EXT_texture_cube_map_array
ARB_texture_rectangle
ANGLE_texture_multisample
ARM_shader_framebuffer_fetch
EXT_blend_func_extended
EXT_draw_buffers
EXT_frag_depth
EXT_geometry_shader
EXT_gpu_shader5
EXT_shader_framebuffer_fetch
EXT_shader_texture_lod
EXT_YUV_target
EXT_shader_non_constant_global_initializers
NV_shader_noperspective_interpolation
NV_EGL_stream_consumer_external
NV_shader_framebuffer_fetch
OES_EGL_image_external
OES_EGL_image_external_essl3
OES_standard_derivatives
OES_texture_storage_multisample_2d_array
OES_texture_3D
OVR_multiview
OVR_multiview2
ANGLE_multi_draw
ANGLE_base_vertex_base_instance
WEBGL_video_texture
APPLE_clip_distance
OES_texture_cube_map_array
EXT_texture_cube_map_array
require
enable
warn
disable
GL_ARB_shader_bit_encoding
GL_ARB_shading_language_packing
GL_NV_fence
glFenceSync failed to create a GLsync object.
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/FenceNVGL.cpp
glClientWaitSync did not return GL_ALREADY_SIGNALED or GL_CONDITION_SATISFIED.
finish
GL_ARB_sync
GL_ARB_texture_rg
GL_ARB_texture_rgb10_a2ui
GL_EXT_texture_sRGB
GL_EXT_bgra
GL_EXT_packed_float
GL_EXT_packed_float GL_ARB_color_buffer_float
GL_EXT_texture_shared_exponent
GL_ARB_texture_rg ARB_texture_float
GL_ARB_texture_rg GL_ARB_texture_float GL_ARB_color_buffer_float
GL_OES_texture_half_float GL_EXT_texture_rg
GL_EXT_texture_storage GL_OES_texture_half_float GL_EXT_texture_rg GL_EXT_color_buffer_half_float
GL_EXT_texture_rg GL_OES_texture_half_float GL_EXT_color_buffer_half_float
GL_ARB_texture_float
GL_ARB_texture_float GL_ARB_color_buffer_float
GL_OES_texture_half_float
GL_EXT_texture_storage GL_OES_texture_half_float GL_EXT_color_buffer_half_float
GL_OES_texture_half_float GL_EXT_color_buffer_half_float
GL_ARB_texture_rg GL_ARB_texture_float
GL_OES_texture_float GL_EXT_texture_rg
GL_ARB_depth_texture
GL_ARB_depth_buffer_float
GL_EXT_packed_depth_stencil
GL_OES_depth_texture GL_OES_packed_depth_stencil
GL_ARB_texture_compression_rgtc
GL_ARB_texture_compression_bptc
GL_ARB_ES3_compatibility
OES_compressed_EAC_R11_unsigned_texture
OES_compressed_EAC_R11_signed_texture
OES_compressed_EAC_RG11_unsigned_texture
OES_compressed_EAC_RG11_signed_texture
OES_compressed_ETC2_RGB8_texture
OES_compressed_ETC2_sRGB8_texture
OES_compressed_ETC2_punchthroughA_RGBA8_texture
OES_compressed_ETC2_punchthroughA_sRGB8_alpha_texture
OES_compressed_ETC2_RGBA8_texture
OES_compressed_ETC2_sRGB8_alpha8_texture
GL_EXT_texture_compression_s3tc
GL_EXT_texture_compression_s3tc GL_EXT_texture_sRGB
GL_EXT_texture_compression_s3tc GL_NV_sRGB_formats
glReadPixels: GL_IMPLEMENTATION_COLOR_READ_FORMAT advertised by the driver is not handled by RGBA16 readPixels workaround.
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/FramebufferGL.cpp
readPixels
checkStatus
GL framebuffer returned incomplete.
readPixelsRowByRow
readPixelsAllAtOnce
Initialize
RearrangeEXTTextureNorm16Pixels
Missing shader object
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/GLES1Renderer.cpp
compileShader
Internal GLES 1 shader compile failed. Info log: 
GLES1Renderer shader compile failed.
Missing program object
linkProgram
Internal GLES 1 shader link failed. Info log: 
GLES1Renderer program link failed.
normal
color
pointsize
texcoord
projection
modelview
texture_matrix
modelview_invtr
tex_sampler
tex_cube_sampler
enable_texture_2d
enable_texture_cube_map
texture_format
texture_env_mode
combine_rgb
combine_alpha
src0_rgb
src0_alpha
src1_rgb
src1_alpha
src2_rgb
src2_alpha
op0_rgb
op0_alpha
op1_rgb
op1_alpha
op2_rgb
op2_alpha
texture_env_color
texture_env_rgb_scale
texture_env_alpha_scale
point_sprite_coord_replace
enable_alpha_test
alpha_func
alpha_test_ref
shade_model_flat
enable_lighting
enable_rescale_normal
enable_normalize
enable_color_material
material_ambient
material_diffuse
material_specular
material_emissive
material_specular_exponent
light_model_scene_ambient
light_model_two_sided
light_enables
light_ambients
light_diffuses
light_speculars
light_positions
light_directions
light_spotlight_exponents
light_spotlight_cutoff_angles
light_attenuation_consts
light_attenuation_linears
light_attenuation_quadratics
enable_fog
fog_mode
fog_density
fog_start
fog_end
fog_color
enable_clip_planes
clip_plane_enables
clip_planes
point_rasterization
point_size_min
point_size_max
point_distance_attenuation
point_sprite_enabled
enable_draw_texture
draw_texture_coords
draw_texture_dims
draw_texture_normalized_crop_rect
AllocateCurrentThread
Could not set thread local storage.
Illegal character at fieldname start
fatal flex scanner internal error--no action found
out of dynamic memory in yy_create_buffer()
yyset_column called with no buffer
GL_FRAGMENT_PRECISION_HIGH
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
out of dynamic memory in yy_get_next_buffer()
Input buffer overflow
out of dynamic memory in yyensure_buffer_stack()
Illegal use of reserved word
Unsigned integers are unsupported prior to GLSL ES 3.00
Integer overflow
Floating-point suffix unsupported prior to GLSL ES 3.00
Float overflow
unsupported value
methods supported in GLSL ES 3.00 and above only
bit-wise operator supported in GLSL ES 3.00 and above only
integer modulus operator supported in GLSL ES 3.00 and above only
interface blocks supported in GLSL ES 3.00 and above only
cannot be a parameter type except for '(void)'
void
first-class arrays (array initializer) supported in GLSL ES 3.00 and above only
unsupported interpolation qualifier
noperspective
layout
 supported in vertex shaders only
 supported in GLSL ES 1.00 only
storage qualifier supported in GLSL ES 3.00 and above only
centroid
storage qualifier supported in GLSL ES 3.10 only
buffer
 supported in compute shaders only
shared
qualifier supported in GLSL ES 3.00 and above only
implicitly sized array supported in GLSL ES 3.00 and above only
arrays of arrays supported in GLSL ES 3.10 only
unsupported type
yuvCscStandardEXT
__samplerCubeArray
__isamplerCubeArray
__usamplerCubeArray
__samplerCubeArrayShadow
samplerVideoWEBGL
__samplerExternal2DY2YEXT
__imageCubeArray
__iimageCubeArray
__uimageCubeArray
syntax error
memory exhausted
itu_601
itu_601_full_range
itu_709
allocate
HandleAllocator::allocate reusing 
HandleAllocator::allocate allocating 
release
HandleAllocator::release releasing 
reserve
HandleAllocator::reserve reserving 
gl_ClipDistance
WARNING: 
ERROR: 
UNKOWN ERROR: 
invariant 
readonly 
writeonly 
coherent 
restrict 
volatile 
array[
] of 
 matrix of 
-component vector of 
Temporary
Global
const
attribute
varying
uniform
buffer
inout
InstanceID
VertexID
Position
PointSize
DrawID
BaseVertex
BaseInstance
FragCoord
FrontFacing
HelperInvocation
PointCoord
FragColor
FragData
FragDepth
SecondaryFragColorEXT
SecondaryFragDataEXT
ViewIDOVR
ViewportIndex
Layer
LastFragColor
LastFragData
smooth out
smooth centroid out
flat out
noperspective out
smooth in
flat in
noperspective in
smooth centroid in
centroid
flat
noperspective
smooth
shared
NumWorkGroups
WorkGroupSize
WorkGroupID
LocalInvocationID
GlobalInvocationID
LocalInvocationIndex
readonly
writeonly
gl_in
precise
ClipDistance
unknown qualifier
highp
mediump
lowp
textureSize
casting a negative float to uint is undefined
Zero divided by zero during constant folding generated NaN
Divide by zero during constant folding
Infinity divided by infinity during constant folding generated NaN
Constant folded division overflowed to infinity
Divide by zero error during constant folding
Negative modulus operator operand encountered during constant folding. Results are undefined.
operation result is undefined for the values passed in
createDefaultFramebuffer
IOSurfaces with OpenGL ES not supported on iOS Simulator
Failed to initialize IOSurface alpha channel.
07cdf4214314
getProgram
Failure to decompressed binary data: 
GPU.ANGLE.ProgramCache.LoadBinarySuccess
Failed to load binary from cache.
Reaching warning limit for cache load failures, silencing subsequent warnings.
putProgram
Failed to allocate enough memory to hold compressed program. (
 bytes )
Error compressing binary data: 
Failed to resize to actual compressed program size. (
GPU.ANGLE.ProgramCache.ProgramBinarySizeBytes
.length()
equal
notEqual
lessThan
greaterThan
lessThanEqual
greaterThanEqual
radians
degrees
asin
acos
atan
sinh
cosh
tanh
asinh
acosh
atanh
exp2
log2
sqrt
inversesqrt
sign
floor
trunc
round
roundEven
ceil
fract
modf
step
smoothstep
isnan
isinf
floatBitsToInt
floatBitsToUint
intBitsToFloat
uintBitsToFloat
frexp
ldexp
packSnorm2x16
packUnorm2x16
packHalf2x16
unpackSnorm2x16
unpackUnorm2x16
unpackHalf2x16
packUnorm4x8
packSnorm4x8
unpackUnorm4x8
unpackSnorm4x8
length
distance
cross
normalize
faceforward
reflect
refract
dFdx
dFdy
fwidth
matrixCompMult
outerProduct
transpose
determinant
inverse
bitfieldExtract
bitfieldInsert
bitfieldReverse
bitCount
findLSB
findMSB
uaddCarry
usubBorrow
umulExtended
imulExtended
kill
return
break
continue
barrier
memoryBarrier
memoryBarrierAtomicCounter
memoryBarrierBuffer
memoryBarrierImage
memoryBarrierShared
groupMemoryBarrier
atomicAdd
atomicMin
atomicMax
atomicAnd
atomicOr
atomicXor
atomicExchange
atomicCompSwap
EmitVertex
EndPrimitive
textureVideoWEBGL
gl_FragDepthEXT
webgl_FragColor
webgl_FragData
gl_SecondaryFragColorEXT
angle_SecondaryFragColor
gl_SecondaryFragDataEXT
angle_SecondaryFragData
texture2DLodEXT
texture2DLod
texture2DProjLodEXT
texture2DProjLod
textureCubeLodEXT
textureCubeLod
texture2DGradEXT
texture2DGradARB
texture2DProjGradEXT
texture2DProjGradARB
textureCubeGradEXT
textureCubeGradARB
texture2DProj
textureProj
textureLod
textureProjLod
texture2DRect
texture2DRectProj
textureCube
textureGrad
textureProjGrad
texture3D
texture3DProj
texture3DLod
texture3DProjLod
precise 
uintBitsToFloat(
index = 
offset = 
layout(
location = 
binding = 
column_major
row_major
smooth in
smooth out
 += 
 -= 
 /= 
 %= 
 *= 
 <<= 
 >>= 
 &= 
 ^= 
 |= 
[int(clamp(float(
[webgl_int_clamp(
), 0.0, float(
, 0, 
.length() - 1
)))]
 << 
 >> 
 == 
 != 
 <= 
 >= 
 || 
 ^^ 
 && 
).length())
) ? (
) : (
if (
else
switch (
case (
default:
gl_ClipDistance
for (
while (
discard
return 
#define
#endif
#ifdef
struct 
packed
std140
std430
layout (
invocations = 
) in;
max_vertices = 
) out;
rgba32f
rgba16f
r32f
rgba32ui
rgba16ui
rgba8ui
r32ui
rgba32i
rgba16i
rgba8i
r32i
rgba8
rgba8_snorm
unknown internal image format
false
unknown color space conversion standard
points
lines
triangles
lines_adjacency
triangles_adjacency
line_strip
triangle_strip
unknown geometry shader primitive type
(symbol id 
const bool
 (const float)
 (const int)
 (const uint)
 (const yuvCscStandardEXT)
Unknown constant
vector swizzle (
comma
move second child to first child
initialize first child with second child
add second child into first child
subtract second child into first child
multiply second child into first child
matrix mult second child into first child
vector scale second child into first child
matrix scale second child into first child
divide second child into first child
modulo second child into first child
bit-wise shift first child left by second child
bit-wise shift first child right by second child
bit-wise and second child into first child
bit-wise xor second child into first child
bit-wise or second child into first child
direct index
indirect index
direct index for structure
direct index for interface block
subtract
component-wise multiply
divide
modulo
bit-wise shift left
bit-wise shift right
bit-wise and
bit-wise xor
bit-wise or
Compare Equal
Compare Not Equal
Compare Less Than
Compare Greater Than
Compare Less Than or Equal
Compare Greater Than or Equal
vector-scale
vector-times-matrix
matrix-times-vector
matrix-scale
matrix-multiply
logical-or
logical-xor
logical-and
<unknown op>
 (field '
Negate value
Positive sign
negation
bit-wise not
Post-Increment
Post-Decrement
Pre-Increment
Pre-Decrement
Array length
component-wise not
Ternary selection
Condition
true case
false case
If test
true case is null
Switch
Default
Case
Function Prototype
parameter: 
 (internal function)
 (symbol id 
Function Definition:
node is still EOpNull!
Call a user-defined function
Call an internal function with raw implementation
Call a built-in function
Construct
component-wise equal
component-wise not equal
component-wise less than
component-wise greater than
component-wise less than or equal
component-wise greater than or equal
dot product
cross product
Code block
Precise Declaration:
Invariant Declaration:
Declaration
Loop with condition 
not 
tested first
Loop Condition
No loop condition
Loop Body
No loop body
Loop Terminal Expression
Branch: Kill
Branch: Break
Branch: Continue
Branch: Return
Branch: Unknown Branch
 with expression
unknown matrix packing
extension is not supported
extension is disabled
extension is being used
illegal vector field selection
vector field selection out of range
illegal - vector component fields not from the same set
cannot convert from '
' to '
wrong operand type - no operation '
' exists that takes an operand of type 
 (or there is no acceptable conversion)
wrong operand types - no operation '
' exists that takes a left-hand operand of type '
' and a right operand of type '
' (or there is no acceptable conversion)
illegal type for precision qualifier
No precision specified for (float)
No precision specified (int)
No precision specified
 l-value of swizzle cannot have duplicate components
can't modify a readonly variable
 l-value required
can't modify a const
can't modify an attribute
can't modify an input
can't modify a uniform
can't modify a varying
can't modify gl_FragCoord
can't modify gl_FrontFacing
can't modify gl_HelperInvocation
can't modify gl_PointCoord
can't modify gl_NumWorkGroups
can't modify gl_WorkGroupSize
can't modify gl_WorkGroupID
can't modify gl_LocalInvocationID
can't modify gl_GlobalInvocationID
can't modify gl_LocalInvocationIndex
can't modify gl_ViewID_OVR
can't modify work group size variable
can't modify any member in gl_in
can't modify gl_PrimitiveIDIn
can't modify gl_InvocationID
can't modify gl_PrimitiveID in a fragment shader
can't modify gl_Layer in a fragment shader
can't modify void
can't modify a variable with type 
l-value required
constant expression required
integer expression required
only allowed at global scope
reserved built-in name
webgl_
_webgl_
identifiers containing two consecutive underscores (__) are reserved as possible future keywords
constructor does not have any arguments
constructor
cannot convert a variable with type 
cannot convert a variable with writeonly
cannot convert a void
array constructor needs one argument per array element
constructing from a non-dereferenced array
Array constructor argument has an incorrect type
Number of constructor parameters does not match the number of structure fields
Structure constructor arguments do not match structure fields
a struct cannot be used as a constructor argument for this type
constructing matrix from matrix can only take one argument
not enough data provided for construction
too many arguments
illegal use of type 'void'
boolean expression expected
 (structure contains a sampler)
location must only be specified for a single input or output variable
location
invalid layout qualifier: only valid on program inputs and outputs
invalid layout qualifier: only valid on shader inputs, outputs, and uniforms
The std430 layout is supported only for shader storage blocks.
opaque types cannot be output parameters
array size must be a constant integer expression
array size must be non-negative
array size must be greater than zero
array size too large
cannot declare arrays of this qualifier
cannot declare arrays of arrays
vertex shader output cannot be an array of arrays
fragment shader input cannot be an array of arrays
fragment shader output cannot be an array of arrays
cannot declare arrays of structs of this qualifier
structures containing arrays may not be declared constant since they cannot be initialized
variables with qualifier 'const' must be initialized
implicitly sized arrays need to be initialized
If index layout qualifier is specified for a fragment output, location must also be specified.
index
gl_LastFragData
gl_MaxDrawBuffers
redeclaration of gl_LastFragData as an array of arrays
redeclaration of gl_LastFragData with size != gl_MaxDrawBuffers
gl_MaxClipDistances
redeclaration of gl_ClipDistance as an array of arrays
redeclaration of gl_ClipDistance with size > gl_MaxClipDistances
redefinition
Shared memory declarations cannot have layout specified
layout
layout qualifier only valid for interface blocks
invalid layout qualifier combination
Can only be highp
atomic counter
location must not be set for atomic_uint
no binding specified
empty array declaration needs to specify a size
cannot be used with a structure
cannot declare buffer variables at global scope(outside a block)
s must be uniform
cannot be used with a yuvCscStandardEXT
internal image format requires a floating image type
internal image format requires an integer image type
internal image format requires an unsigned image type
layout qualifier
No image internal format specified
unrecognized token
Except for images with the r32f, r32i and r32ui format qualifiers, image variables must be qualified readonly and/or writeonly
invalid layout qualifier: not supported
invalid layout qualifier: only valid when used with 'in' in a compute shader global layout declaration
invalid layout qualifier: only valid when used with images
invalid layout qualifier: only valid when used with a fragment shader output in ESSL version >= 3.00 and EXT_blend_func_extended is enabled
invalid layout qualifier: only valid when used with opaque types or blocks
binding
invalid layout qualifier: only valid when used with atomic counters
offset
image binding greater than gl_MaxImageUnits
sampler binding greater than maximum texture units
uniform block binding greater than MAX_UNIFORM_BUFFER_BINDINGS
shader storage block binding greater than MAX_SHADER_STORAGE_BUFFER_BINDINGS
atomic counter binding greater than gl_MaxAtomicCounterBindings
Uniform location out of range
invalid layout qualifier: only valid on program outputs
invalid layout qualifier: only valid when used with 'in' in a fragment shader
early_fragment_tests
Writeonly value cannot be passed for 'in' or 'inout' parameters.
assign
Constant value cannot be passed for 'out' or 'inout' parameters.
Cannot be qualified as invariant.
invariant
undeclared identifier
variable expected
It is an error to use gl_WorkGroupSize before declaring the local group size
gl_WorkGroupSize
assigning non-constant to '
global variable initializers must be constant expressions
global variable initializers should be constant expressions (uniforms and globals are allowed in global initializers for legacy compatibility)
 cannot initialize this type of qualifier 
not supported
first-class array
cannot be bool or int
'in' can be only used to specify the local group size
cannot be bool
cannot be array
cannot be matrix
must use 'flat' interpolation here
cannot be an array of structures
cannot be a structure containing an array
cannot be a structure containing a structure
cannot be a structure containing a bool
Local variables can only use the const storage qualifier.
Only allowed with shader storage blocks, variables declared within shader storage blocks and variables declared as image types.
readonly
writeonly
coherent
restrict
volatile
Offset overlapping
Offset must be multiple of 4
Missing a valid input primitive declaration before declaring an unsized array input
Geometry shader input variable must be declared as an array
Expected invariant or precise
invariant varying
undeclared identifier declared as invariant or precise
invariant or precise declaration specifies qualifier
invariant or precise declaration specifies precision
invariant or precise declaration specifies layout
'layout'
Requires both binding and offset
precision is not supported in fragment shader
highp
illegal type argument for default precision qualifier
Array size or input primitive declaration doesn't match the size of earlier sized array inputs.
max_vertices can only be declared in 'out' layout in a geometry shader
invalid primitive type for 'in' layout
primitive doesn't match earlier input primitive declaration
invocations contradicts to the earlier declaration
invocations can only be declared in 'in' layout in a geometry shader
invalid primitive type for 'out' layout
primitive doesn't match earlier output primitive declaration
max_vertices contradicts to the earlier declaration
Error during layout qualifier parsing.
Work group size does not match the previous declaration
in type qualifier supported in GLSL ES 3.10 only
No local work group size specified
gl_MaxComputeWorkGroupSize
invalid value: Value must be at least 1 and no greater than 
out type qualifier supported in GLSL ES 3.10 only
Number of views does not match the previous declaration
No num_views specified
num_views greater than the value of GL_MAX_VIEWS_OVR
in type qualifier without variable declaration supported in GLSL ES 3.10 only
only early_fragment_tests is allowed as layout qualifier when not declaring a variable
invalid qualifier: global layout can only be set for blocks
layout qualifiers supported in GLSL ES 3.00 and above
function parameter array must be sized at compile time
duplicate function prototype declarations are not allowed
function
local function prototype declarations are not allowed
function does not return a value:
function already has a body
Function parameter type cannot be a structure definition
Name of a built-in function cannot be redeclared as function
built-in functions cannot be redefined
function must have the same return type in all of its declarations
function must have the same parameter qualifiers in all of its declarations
redefinition of a function
function cannot take any parameter(s)
main
main function cannot return a value
no qualifiers allowed for function return
s can't be function return values
structures containing arrays can't be function return values
array constructor supported in GLSL ES 3.00 and above only
constructor can't be a structure definition
cannot construct this type
function parameter array must specify a size
implicitly sized array constructor must have at least one argument
implicitly sized array of arrays constructor argument is not an array
implicitly sized array of arrays constructor argument dimensionality is too low
invalid qualifier: interface blocks must be uniform in version lower than GLSL ES 3.10
invalid qualifier: interface blocks must be uniform or buffer
invalid qualifier on interface block member
unsupported type - 
 types are not allowed in interface blocks
invalid qualifier on shader storage block member
invalid qualifier on uniform block member
invalid layout qualifier: cannot be used here
extraneous layout qualifier: only has an effect on matrix types
array members of interface blocks must specify a size
redefinition of an interface block name
redefinition of an interface block member name
redefinition of an interface block instance name
Embedded struct definitions are not allowed
struct
Struct nesting
Reference of struct type 
 exceeds maximum allowed nesting level of 
 left of '[' is not of type array, matrix, or vector 
expression
missing input primitive declaration before indexing gl_in.
array indexes for uniform block arrays must be constant integral expressions
array indexes for shader storage block arrays must be constant integral expressions
array indexes for fragment outputs must be constant integral expressions
array index for gl_FragData must be constant zero
array index for samplers must be constant integral expressions
array indexes for image arrays must be constant integral expressions
index expression is negative
array index for gl_FragData must be zero when GL_EXT_draw_buffers is disabled
array index out of range
matrix field selection out of range
cannot apply dot operator to an array
structure has no fields
Internal Error
 no such field in structure
interface block has no fields
 no such field in interface block
 field selection requires structure or vector on left hand side
 field selection requires structure, vector, or interface block on left hand side
Only std140 layout is allowed in WebGL
invalid layout qualifier: location requires an argument
points
lines
lines_adjacency
triangles
triangles_adjacency
line_strip
triangle_strip
invalid layout qualifier
out of range: 
 must be positive
out of range: num_views must be positive
out of range: invocations must be in the range of [1, MAX_GEOMETRY_SHADER_INVOCATIONS_OES]
out of range: max_vertices must be in the range of [0, gl_MaxGeometryOutputVertices]
out of range: index layout qualifier can only be 0 or 1
out of range: location must be non-negative
out of range: binding must be non-negative
out of range: offset must be non-negative
local_size_x
local_size_y
local_size_z
num_views
invocations
max_vertices
storage qualifier isn't supported in compute shaders
invalid qualifier: can be only used with function parameters
inout
duplicate field name in structure
redefinition of a struct
invalid qualifier on struct member
disallowed type in struct
array members of structs must specify a size
init-expression in a switch statement must be a scalar integer
switch
case labels need to be inside switch statements
case
case label must have a condition
case label must be a scalar integer
case label must be constant
default labels need to be inside switch statements
default
Invalid operation for variables with an opaque type
Invalid operation for variables with writeonly
Invalid operation for structs
Invalid operation for interface blocks
array / non-array mismatch
Invalid operation for arrays
array size mismatch
undefined operation for structs containing arrays
undefined operation for structs containing samplers
dimension mismatch
comparison operator only defined for scalars
sequence operator is not allowed for void, arrays, or structs containing arrays
continue statement only allowed in loops
break statement only allowed in loops and switch statements
non-void function must return a value
return
discard supported in fragment shaders only
discard
void function cannot return a value
function return is not matching type:
Texture component must be a constant expression
Component must be in the range [0;3]
Texture offsets must be a constant expression
Texture offsets must be an array of 4 elements
Texture offset must be a constant expression
Texture offset value out of valid range
The value passed to the mem argument of an atomic memory function does not correspond to a buffer or shared variable.
'imageStore' cannot be used with images qualified as 'readonly'
'imageLoad' cannot be used with images qualified as 'writeonly'
Function call discards the 'readonly' qualifier from image
Function call discards the 'writeonly' qualifier from image
Function call discards the 'coherent' qualifier from image
Function call discards the 'volatile' qualifier from image
invalid method
method takes no parameters
length can only be called on arrays
missing input primitive declaration before calling length on gl_in
function name expected
no matching overloaded function found
mismatching ternary operator operand types '
 and '
ternary operator is not allowed for opaque types
ternary operator is not allowed for variables with writeonly
ternary operator is not allowed for structures or arrays
ternary operator is not allowed for interface blocks
ternary operator is not allowed for void
unknown block storage
uniform
dimension out of bounds
mediump
lowp
image
bindTexImage
PbufferSurfaceEAGL::bindTexImage
ANGLEGetDisplayPlatform
Invalid platform method count: 
, expected 
Invalid platform method name: 
currentTime
monotonicallyIncreasingTime
logError
logWarning
logInfo
getTraceCategoryEnabledFlag
addTraceEvent
updateTraceEventDuration
histogramCustomCounts
histogramEnumeration
histogramSparse
histogramBoolean
overrideWorkaroundsD3D
overrideFeaturesVk
cacheProgram
overrideFeaturesMtl
postWorkerTask
__LINE__
__FILE__
__VERSION__
GL_ES
Integer overflow on line number
out of dynamic memory in yy_create_buffer()
yyset_lineno called with no buffer
out of dynamic memory in yyensure_buffer_stack()
ANGLEResetDisplayPlatform
eglClientWaitSyncKHR
eglCreatePlatformWindowSurface
eglCreateSyncKHR
eglDestroySyncKHR
eglGetCompositorTimingANDROID
eglGetCompositorTimingSupportedANDROID
eglGetCurrentContext
eglGetCurrentDisplay
eglGetDisplay
eglGetError
eglGetFrameTimestampSupportedANDROID
eglGetProcAddress
eglGetSyncAttribKHR
eglQueryAPI
eglSwapBuffersWithDamageKHR
eglWaitSyncKHR
glActiveShaderProgramContextANGLE
glActiveTextureContextANGLE
glAlphaFunc
glAlphaFuncContextANGLE
glAlphaFuncx
glAlphaFuncxContextANGLE
glAttachShaderContextANGLE
glBeginQueryContextANGLE
glBeginQueryEXTContextANGLE
glBeginTransformFeedbackContextANGLE
glBindAttribLocationContextANGLE
glBindBufferBaseContextANGLE
glBindBufferContextANGLE
glBindBufferRangeContextANGLE
glBindFragDataLocationEXTContextANGLE
glBindFragDataLocationIndexedEXTContextANGLE
glBindFramebufferContextANGLE
glBindFramebufferOES
glBindFramebufferOESContextANGLE
glBindImageTextureContextANGLE
glBindProgramPipelineContextANGLE
glBindRenderbufferContextANGLE
glBindRenderbufferOES
glBindRenderbufferOESContextANGLE
glBindSamplerContextANGLE
glBindTextureContextANGLE
glBindTransformFeedbackContextANGLE
glBindUniformLocationCHROMIUM
glBindUniformLocationCHROMIUMContextANGLE
glBindVertexArrayContextANGLE
glBindVertexArrayOESContextANGLE
glBindVertexBufferContextANGLE
glBlendColorContextANGLE
glBlendEquationContextANGLE
glBlendEquationSeparateContextANGLE
glBlendEquationSeparateiEXTContextANGLE
glBlendEquationSeparateiOESContextANGLE
glBlendEquationiEXTContextANGLE
glBlendEquationiOESContextANGLE
glBlendFuncContextANGLE
glBlendFuncSeparateContextANGLE
glBlendFuncSeparateiEXTContextANGLE
glBlendFuncSeparateiOESContextANGLE
glBlendFunciEXTContextANGLE
glBlendFunciOESContextANGLE
glBlitFramebufferANGLE
glBlitFramebufferANGLEContextANGLE
glBlitFramebufferContextANGLE
glBufferDataContextANGLE
glBufferStorageMemEXTContextANGLE
glBufferSubDataContextANGLE
glCheckFramebufferStatusContextANGLE
glCheckFramebufferStatusOES
glCheckFramebufferStatusOESContextANGLE
glClearBufferfiContextANGLE
glClearBufferfvContextANGLE
glClearBufferivContextANGLE
glClearBufferuivContextANGLE
glClearColorContextANGLE
glClearColorx
glClearColorxContextANGLE
glClearContextANGLE
glClearDepthfContextANGLE
glClearDepthx
glClearDepthxContextANGLE
glClearStencilContextANGLE
glClientActiveTexture
glClientActiveTextureContextANGLE
glClientWaitSyncContextANGLE
glClipPlanef
glClipPlanefContextANGLE
glClipPlanex
glClipPlanexContextANGLE
glColor4f
glColor4fContextANGLE
glColor4ub
glColor4ubContextANGLE
glColor4x
glColor4xContextANGLE
glColorMaskContextANGLE
glColorMaskiEXTContextANGLE
glColorMaskiOESContextANGLE
glColorPointer
glColorPointerContextANGLE
glCompileShaderContextANGLE
glCompressedCopyTextureCHROMIUM
glCompressedCopyTextureCHROMIUMContextANGLE
glCompressedTexImage2DContextANGLE
glCompressedTexImage2DRobustANGLE
glCompressedTexImage2DRobustANGLEContextANGLE
glCompressedTexImage3DContextANGLE
glCompressedTexImage3DOESContextANGLE
glCompressedTexImage3DRobustANGLE
glCompressedTexImage3DRobustANGLEContextANGLE
glCompressedTexSubImage2DContextANGLE
glCompressedTexSubImage2DRobustANGLE
glCompressedTexSubImage2DRobustANGLEContextANGLE
glCompressedTexSubImage3DContextANGLE
glCompressedTexSubImage3DOESContextANGLE
glCompressedTexSubImage3DRobustANGLE
glCompressedTexSubImage3DRobustANGLEContextANGLE
glCopyBufferSubDataContextANGLE
glCopySubTexture3DANGLE
glCopySubTexture3DANGLEContextANGLE
glCopySubTextureCHROMIUM
glCopySubTextureCHROMIUMContextANGLE
glCopyTexImage2DContextANGLE
glCopyTexSubImage2DContextANGLE
glCopyTexSubImage3DContextANGLE
glCopyTexSubImage3DOESContextANGLE
glCopyTexture3DANGLE
glCopyTexture3DANGLEContextANGLE
glCopyTextureCHROMIUM
glCopyTextureCHROMIUMContextANGLE
glCoverageModulationCHROMIUM
glCoverageModulationCHROMIUMContextANGLE
glCreateMemoryObjectsEXTContextANGLE
glCreateProgramContextANGLE
glCreateShaderContextANGLE
glCreateShaderProgramvContextANGLE
glCullFaceContextANGLE
glCurrentPaletteMatrixOES
glCurrentPaletteMatrixOESContextANGLE
glDebugMessageCallbackKHRContextANGLE
glDebugMessageControlKHRContextANGLE
glDebugMessageInsertKHRContextANGLE
glDeleteBuffersContextANGLE
glDeleteFencesNVContextANGLE
glDeleteFramebuffersContextANGLE
glDeleteFramebuffersOES
glDeleteFramebuffersOESContextANGLE
glDeleteMemoryObjectsEXTContextANGLE
glDeleteProgramContextANGLE
glDeleteProgramPipelinesContextANGLE
glDeleteQueriesContextANGLE
glDeleteQueriesEXTContextANGLE
glDeleteRenderbuffersContextANGLE
glDeleteRenderbuffersOES
glDeleteRenderbuffersOESContextANGLE
glDeleteSamplersContextANGLE
glDeleteSemaphoresEXTContextANGLE
glDeleteShaderContextANGLE
glDeleteSyncContextANGLE
glDeleteTexturesContextANGLE
glDeleteTransformFeedbacksContextANGLE
glDeleteVertexArraysContextANGLE
glDeleteVertexArraysOESContextANGLE
glDepthFuncContextANGLE
glDepthMaskContextANGLE
glDepthRangefContextANGLE
glDepthRangex
glDepthRangexContextANGLE
glDetachShaderContextANGLE
glDisableClientState
glDisableClientStateContextANGLE
glDisableContextANGLE
glDisableExtensionANGLE
glDisableExtensionANGLEContextANGLE
glDisableVertexAttribArrayContextANGLE
glDisableiEXTContextANGLE
glDisableiOESContextANGLE
glDiscardFramebufferEXTContextANGLE
glDispatchComputeContextANGLE
glDispatchComputeIndirectContextANGLE
glDrawArraysContextANGLE
glDrawArraysIndirectContextANGLE
glDrawArraysInstancedANGLE
glDrawArraysInstancedANGLEContextANGLE
glDrawArraysInstancedBaseInstanceANGLE
glDrawArraysInstancedBaseInstanceANGLEContextANGLE
glDrawArraysInstancedContextANGLE
glDrawArraysInstancedEXTContextANGLE
glDrawBuffersContextANGLE
glDrawBuffersEXTContextANGLE
glDrawElementsBaseVertexEXTContextANGLE
glDrawElementsBaseVertexOESContextANGLE
glDrawElementsContextANGLE
glDrawElementsIndirectContextANGLE
glDrawElementsInstancedANGLE
glDrawElementsInstancedANGLEContextANGLE
glDrawElementsInstancedBaseVertexBaseInstanceANGLE
glDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
glDrawElementsInstancedBaseVertexEXTContextANGLE
glDrawElementsInstancedBaseVertexOESContextANGLE
glDrawElementsInstancedContextANGLE
glDrawElementsInstancedEXTContextANGLE
glDrawRangeElementsBaseVertexEXTContextANGLE
glDrawRangeElementsBaseVertexOESContextANGLE
glDrawRangeElementsContextANGLE
glDrawTexfOES
glDrawTexfOESContextANGLE
glDrawTexfvOES
glDrawTexfvOESContextANGLE
glDrawTexiOES
glDrawTexiOESContextANGLE
glDrawTexivOES
glDrawTexivOESContextANGLE
glDrawTexsOES
glDrawTexsOESContextANGLE
glDrawTexsvOES
glDrawTexsvOESContextANGLE
glDrawTexxOES
glDrawTexxOESContextANGLE
glDrawTexxvOES
glDrawTexxvOESContextANGLE
glEGLImageTargetRenderbufferStorageOESContextANGLE
glEGLImageTargetTexture2DOESContextANGLE
glEnableClientState
glEnableClientStateContextANGLE
glEnableContextANGLE
glEnableVertexAttribArrayContextANGLE
glEnableiEXTContextANGLE
glEnableiOESContextANGLE
glEndQueryContextANGLE
glEndQueryEXTContextANGLE
glEndTransformFeedbackContextANGLE
glFenceSyncContextANGLE
glFinishContextANGLE
glFinishFenceNVContextANGLE
glFlushContextANGLE
glFlushMappedBufferRangeContextANGLE
glFlushMappedBufferRangeEXTContextANGLE
glFogf
glFogfContextANGLE
glFogfv
glFogfvContextANGLE
glFogx
glFogxContextANGLE
glFogxv
glFogxvContextANGLE
glFramebufferParameteriContextANGLE
glFramebufferRenderbufferContextANGLE
glFramebufferRenderbufferOES
glFramebufferRenderbufferOESContextANGLE
glFramebufferTexture2DContextANGLE
glFramebufferTexture2DMultisampleEXT
glFramebufferTexture2DMultisampleEXTContextANGLE
glFramebufferTexture2DOES
glFramebufferTexture2DOESContextANGLE
glFramebufferTexture3DOESContextANGLE
glFramebufferTextureEXTContextANGLE
glFramebufferTextureLayerContextANGLE
glFramebufferTextureMultiviewOVRContextANGLE
glFrontFaceContextANGLE
glFrustumf
glFrustumfContextANGLE
glFrustumx
glFrustumxContextANGLE
glGenBuffersContextANGLE
glGenFencesNVContextANGLE
glGenFramebuffersContextANGLE
glGenFramebuffersOES
glGenFramebuffersOESContextANGLE
glGenProgramPipelinesContextANGLE
glGenQueriesContextANGLE
glGenQueriesEXTContextANGLE
glGenRenderbuffersContextANGLE
glGenRenderbuffersOES
glGenRenderbuffersOESContextANGLE
glGenSamplersContextANGLE
glGenSemaphoresEXTContextANGLE
glGenTexturesContextANGLE
glGenTransformFeedbacksContextANGLE
glGenVertexArraysContextANGLE
glGenVertexArraysOESContextANGLE
glGenerateMipmapContextANGLE
glGenerateMipmapOES
glGenerateMipmapOESContextANGLE
glGetActiveAttribContextANGLE
glGetActiveUniformBlockNameContextANGLE
glGetActiveUniformBlockivContextANGLE
glGetActiveUniformBlockivRobustANGLE
glGetActiveUniformBlockivRobustANGLEContextANGLE
glGetActiveUniformContextANGLE
glGetActiveUniformsivContextANGLE
glGetAttachedShadersContextANGLE
glGetAttribLocationContextANGLE
glGetBooleani_vContextANGLE
glGetBooleani_vRobustANGLE
glGetBooleani_vRobustANGLEContextANGLE
glGetBooleanvContextANGLE
glGetBooleanvRobustANGLE
glGetBooleanvRobustANGLEContextANGLE
glGetBufferParameteri64vContextANGLE
glGetBufferParameteri64vRobustANGLE
glGetBufferParameteri64vRobustANGLEContextANGLE
glGetBufferParameterivContextANGLE
glGetBufferParameterivRobustANGLE
glGetBufferParameterivRobustANGLEContextANGLE
glGetBufferPointervContextANGLE
glGetBufferPointervOESContextANGLE
glGetBufferPointervRobustANGLE
glGetBufferPointervRobustANGLEContextANGLE
glGetClipPlanef
glGetClipPlanefContextANGLE
glGetClipPlanex
glGetClipPlanexContextANGLE
glGetDebugMessageLogKHRContextANGLE
glGetErrorContextANGLE
glGetFenceivNVContextANGLE
glGetFixedv
glGetFixedvContextANGLE
glGetFloatvContextANGLE
glGetFloatvRobustANGLE
glGetFloatvRobustANGLEContextANGLE
glGetFragDataIndexEXTContextANGLE
glGetFragDataLocationContextANGLE
glGetFramebufferAttachmentParameterivContextANGLE
glGetFramebufferAttachmentParameterivOES
glGetFramebufferAttachmentParameterivOESContextANGLE
glGetFramebufferAttachmentParameterivRobustANGLE
glGetFramebufferAttachmentParameterivRobustANGLEContextANGLE
glGetFramebufferParameterivContextANGLE
glGetFramebufferParameterivRobustANGLE
glGetFramebufferParameterivRobustANGLEContextANGLE
glGetGraphicsResetStatusEXTContextANGLE
glGetInteger64i_vContextANGLE
glGetInteger64i_vRobustANGLE
glGetInteger64i_vRobustANGLEContextANGLE
glGetInteger64vContextANGLE
glGetInteger64vEXTContextANGLE
glGetInteger64vRobustANGLE
glGetInteger64vRobustANGLEContextANGLE
glGetIntegeri_vContextANGLE
glGetIntegeri_vRobustANGLE
glGetIntegeri_vRobustANGLEContextANGLE
glGetIntegervContextANGLE
glGetIntegervRobustANGLE
glGetIntegervRobustANGLEContextANGLE
glGetInternalformativContextANGLE
glGetInternalformativRobustANGLE
glGetInternalformativRobustANGLEContextANGLE
glGetLightfv
glGetLightfvContextANGLE
glGetLightxv
glGetLightxvContextANGLE
glGetMaterialfv
glGetMaterialfvContextANGLE
glGetMaterialxv
glGetMaterialxvContextANGLE
glGetMemoryObjectParameterivEXTContextANGLE
glGetMultisamplefvANGLE
glGetMultisamplefvANGLEContextANGLE
glGetMultisamplefvContextANGLE
glGetMultisamplefvRobustANGLE
glGetMultisamplefvRobustANGLEContextANGLE
glGetObjectLabelKHRContextANGLE
glGetObjectPtrLabelKHRContextANGLE
glGetPointervContextANGLE
glGetPointervKHRContextANGLE
glGetPointervRobustANGLERobustANGLE
glGetPointervRobustANGLERobustANGLEContextANGLE
glGetProgramBinaryContextANGLE
glGetProgramBinaryOESContextANGLE
glGetProgramInfoLogContextANGLE
glGetProgramInterfaceivContextANGLE
glGetProgramInterfaceivRobustANGLE
glGetProgramInterfaceivRobustANGLEContextANGLE
glGetProgramPipelineInfoLogContextANGLE
glGetProgramPipelineivContextANGLE
glGetProgramResourceIndexContextANGLE
glGetProgramResourceLocationContextANGLE
glGetProgramResourceLocationIndexEXTContextANGLE
glGetProgramResourceNameContextANGLE
glGetProgramResourceivContextANGLE
glGetProgramivContextANGLE
glGetProgramivRobustANGLE
glGetProgramivRobustANGLEContextANGLE
glGetQueryObjecti64vEXTContextANGLE
glGetQueryObjecti64vRobustANGLE
glGetQueryObjecti64vRobustANGLEContextANGLE
glGetQueryObjectivEXTContextANGLE
glGetQueryObjectivRobustANGLE
glGetQueryObjectivRobustANGLEContextANGLE
glGetQueryObjectui64vEXTContextANGLE
glGetQueryObjectui64vRobustANGLE
glGetQueryObjectui64vRobustANGLEContextANGLE
glGetQueryObjectuivContextANGLE
glGetQueryObjectuivEXTContextANGLE
glGetQueryObjectuivRobustANGLE
glGetQueryObjectuivRobustANGLEContextANGLE
glGetQueryivContextANGLE
glGetQueryivEXTContextANGLE
glGetQueryivRobustANGLE
glGetQueryivRobustANGLEContextANGLE
glGetRenderbufferImageANGLE
glGetRenderbufferImageANGLEContextANGLE
glGetRenderbufferParameterivContextANGLE
glGetRenderbufferParameterivOES
glGetRenderbufferParameterivOESContextANGLE
glGetRenderbufferParameterivRobustANGLE
glGetRenderbufferParameterivRobustANGLEContextANGLE
glGetSamplerParameterIivOESContextANGLE
glGetSamplerParameterIivRobustANGLE
glGetSamplerParameterIivRobustANGLEContextANGLE
glGetSamplerParameterIuivOESContextANGLE
glGetSamplerParameterIuivRobustANGLE
glGetSamplerParameterIuivRobustANGLEContextANGLE
glGetSamplerParameterfvContextANGLE
glGetSamplerParameterfvRobustANGLE
glGetSamplerParameterfvRobustANGLEContextANGLE
glGetSamplerParameterivContextANGLE
glGetSamplerParameterivRobustANGLE
glGetSamplerParameterivRobustANGLEContextANGLE
glGetSemaphoreParameterui64vEXTContextANGLE
glGetShaderInfoLogContextANGLE
glGetShaderPrecisionFormatContextANGLE
glGetShaderSourceContextANGLE
glGetShaderivContextANGLE
glGetShaderivRobustANGLE
glGetShaderivRobustANGLEContextANGLE
glGetStringContextANGLE
glGetStringiContextANGLE
glGetSyncivContextANGLE
glGetTexEnvfv
glGetTexEnvfvContextANGLE
glGetTexEnviv
glGetTexEnvivContextANGLE
glGetTexEnvxv
glGetTexEnvxvContextANGLE
glGetTexGenfvOES
glGetTexGenfvOESContextANGLE
glGetTexGenivOES
glGetTexGenivOESContextANGLE
glGetTexGenxvOES
glGetTexGenxvOESContextANGLE
glGetTexImageANGLE
glGetTexImageANGLEContextANGLE
glGetTexLevelParameterfvANGLE
glGetTexLevelParameterfvANGLEContextANGLE
glGetTexLevelParameterfvContextANGLE
glGetTexLevelParameterfvRobustANGLE
glGetTexLevelParameterfvRobustANGLEContextANGLE
glGetTexLevelParameterivANGLE
glGetTexLevelParameterivANGLEContextANGLE
glGetTexLevelParameterivContextANGLE
glGetTexLevelParameterivRobustANGLE
glGetTexLevelParameterivRobustANGLEContextANGLE
glGetTexParameterIivOESContextANGLE
glGetTexParameterIivRobustANGLE
glGetTexParameterIivRobustANGLEContextANGLE
glGetTexParameterIuivOESContextANGLE
glGetTexParameterIuivRobustANGLE
glGetTexParameterIuivRobustANGLEContextANGLE
glGetTexParameterfvContextANGLE
glGetTexParameterfvRobustANGLE
glGetTexParameterfvRobustANGLEContextANGLE
glGetTexParameterivContextANGLE
glGetTexParameterivRobustANGLE
glGetTexParameterivRobustANGLEContextANGLE
glGetTexParameterxv
glGetTexParameterxvContextANGLE
glGetTransformFeedbackVaryingContextANGLE
glGetTranslatedShaderSourceANGLE
glGetTranslatedShaderSourceANGLEContextANGLE
glGetUniformBlockIndexContextANGLE
glGetUniformIndicesContextANGLE
glGetUniformLocationContextANGLE
glGetUniformfvContextANGLE
glGetUniformfvRobustANGLE
glGetUniformfvRobustANGLEContextANGLE
glGetUniformivContextANGLE
glGetUniformivRobustANGLE
glGetUniformivRobustANGLEContextANGLE
glGetUniformuivContextANGLE
glGetUniformuivRobustANGLE
glGetUniformuivRobustANGLEContextANGLE
glGetUnsignedBytei_vEXTContextANGLE
glGetUnsignedBytevEXTContextANGLE
glGetVertexAttribIivContextANGLE
glGetVertexAttribIivRobustANGLE
glGetVertexAttribIivRobustANGLEContextANGLE
glGetVertexAttribIuivContextANGLE
glGetVertexAttribIuivRobustANGLE
glGetVertexAttribIuivRobustANGLEContextANGLE
glGetVertexAttribPointervContextANGLE
glGetVertexAttribPointervRobustANGLE
glGetVertexAttribPointervRobustANGLEContextANGLE
glGetVertexAttribfvContextANGLE
glGetVertexAttribfvRobustANGLE
glGetVertexAttribfvRobustANGLEContextANGLE
glGetVertexAttribivContextANGLE
glGetVertexAttribivRobustANGLE
glGetVertexAttribivRobustANGLEContextANGLE
glGetnUniformfvEXTContextANGLE
glGetnUniformfvRobustANGLE
glGetnUniformfvRobustANGLEContextANGLE
glGetnUniformivEXTContextANGLE
glGetnUniformivRobustANGLE
glGetnUniformivRobustANGLEContextANGLE
glGetnUniformuivRobustANGLE
glGetnUniformuivRobustANGLEContextANGLE
glHintContextANGLE
glImportMemoryFdEXTContextANGLE
glImportMemoryZirconHandleANGLE
glImportMemoryZirconHandleANGLEContextANGLE
glImportSemaphoreFdEXTContextANGLE
glImportSemaphoreZirconHandleANGLE
glImportSemaphoreZirconHandleANGLEContextANGLE
glInsertEventMarkerEXTContextANGLE
glInvalidateFramebufferContextANGLE
glInvalidateSubFramebufferContextANGLE
glInvalidateTextureANGLE
glInvalidateTextureANGLEContextANGLE
glIsBufferContextANGLE
glIsEnabledContextANGLE
glIsEnablediEXTContextANGLE
glIsEnablediOESContextANGLE
glIsFenceNVContextANGLE
glIsFramebufferContextANGLE
glIsFramebufferOES
glIsFramebufferOESContextANGLE
glIsMemoryObjectEXTContextANGLE
glIsProgramContextANGLE
glIsProgramPipelineContextANGLE
glIsQueryContextANGLE
glIsQueryEXTContextANGLE
glIsRenderbufferContextANGLE
glIsRenderbufferOES
glIsRenderbufferOESContextANGLE
glIsSamplerContextANGLE
glIsSemaphoreEXTContextANGLE
glIsShaderContextANGLE
glIsSyncContextANGLE
glIsTextureContextANGLE
glIsTransformFeedbackContextANGLE
glIsVertexArrayContextANGLE
glIsVertexArrayOESContextANGLE
glLightModelf
glLightModelfContextANGLE
glLightModelfv
glLightModelfvContextANGLE
glLightModelx
glLightModelxContextANGLE
glLightModelxv
glLightModelxvContextANGLE
glLightf
glLightfContextANGLE
glLightfv
glLightfvContextANGLE
glLightx
glLightxContextANGLE
glLightxv
glLightxvContextANGLE
glLineWidthContextANGLE
glLineWidthx
glLineWidthxContextANGLE
glLinkProgramContextANGLE
glLoadIdentity
glLoadIdentityContextANGLE
glLoadMatrixf
glLoadMatrixfContextANGLE
glLoadMatrixx
glLoadMatrixxContextANGLE
glLoadPaletteFromModelViewMatrixOES
glLoadPaletteFromModelViewMatrixOESContextANGLE
glLogicOpContextANGLE
glLoseContextCHROMIUM
glLoseContextCHROMIUMContextANGLE
glMapBufferOESContextANGLE
glMapBufferRangeContextANGLE
glMapBufferRangeEXTContextANGLE
glMaterialf
glMaterialfContextANGLE
glMaterialfv
glMaterialfvContextANGLE
glMaterialx
glMaterialxContextANGLE
glMaterialxv
glMaterialxvContextANGLE
glMatrixIndexPointerOES
glMatrixIndexPointerOESContextANGLE
glMatrixMode
glMatrixModeContextANGLE
glMaxShaderCompilerThreadsKHRContextANGLE
glMemoryBarrierByRegionContextANGLE
glMemoryBarrierContextANGLE
glMemoryObjectParameterivEXTContextANGLE
glMultMatrixf
glMultMatrixfContextANGLE
glMultMatrixx
glMultMatrixxContextANGLE
glMultiDrawArraysANGLE
glMultiDrawArraysANGLEContextANGLE
glMultiDrawArraysInstancedANGLE
glMultiDrawArraysInstancedANGLEContextANGLE
glMultiDrawArraysInstancedBaseInstanceANGLE
glMultiDrawArraysInstancedBaseInstanceANGLEContextANGLE
glMultiDrawElementsANGLE
glMultiDrawElementsANGLEContextANGLE
glMultiDrawElementsBaseVertexEXTContextANGLE
glMultiDrawElementsInstancedANGLE
glMultiDrawElementsInstancedANGLEContextANGLE
glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE
glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
glMultiTexCoord4f
glMultiTexCoord4fContextANGLE
glMultiTexCoord4x
glMultiTexCoord4xContextANGLE
glNormal3f
glNormal3fContextANGLE
glNormal3x
glNormal3xContextANGLE
glNormalPointer
glNormalPointerContextANGLE
glObjectLabelKHRContextANGLE
glObjectPtrLabelKHRContextANGLE
glOrthof
glOrthofContextANGLE
glOrthox
glOrthoxContextANGLE
glPauseTransformFeedbackContextANGLE
glPixelStoreiContextANGLE
glPointParameterfContextANGLE
glPointParameterfvContextANGLE
glPointParameterx
glPointParameterxContextANGLE
glPointParameterxv
glPointParameterxvContextANGLE
glPointSizeContextANGLE
glPointSizePointerOES
glPointSizePointerOESContextANGLE
glPointSizex
glPointSizexContextANGLE
glPolygonOffsetContextANGLE
glPolygonOffsetx
glPolygonOffsetxContextANGLE
glPopDebugGroupKHRContextANGLE
glPopGroupMarkerEXTContextANGLE
glPopMatrix
glPopMatrixContextANGLE
glProgramBinaryContextANGLE
glProgramBinaryOESContextANGLE
glProgramParameteriContextANGLE
glProgramUniform1fContextANGLE
glProgramUniform1fvContextANGLE
glProgramUniform1iContextANGLE
glProgramUniform1ivContextANGLE
glProgramUniform1uiContextANGLE
glProgramUniform1uivContextANGLE
glProgramUniform2fContextANGLE
glProgramUniform2fvContextANGLE
glProgramUniform2iContextANGLE
glProgramUniform2ivContextANGLE
glProgramUniform2uiContextANGLE
glProgramUniform2uivContextANGLE
glProgramUniform3fContextANGLE
glProgramUniform3fvContextANGLE
glProgramUniform3iContextANGLE
glProgramUniform3ivContextANGLE
glProgramUniform3uiContextANGLE
glProgramUniform3uivContextANGLE
glProgramUniform4fContextANGLE
glProgramUniform4fvContextANGLE
glProgramUniform4iContextANGLE
glProgramUniform4ivContextANGLE
glProgramUniform4uiContextANGLE
glProgramUniform4uivContextANGLE
glProgramUniformMatrix2fvContextANGLE
glProgramUniformMatrix2x3fvContextANGLE
glProgramUniformMatrix2x4fvContextANGLE
glProgramUniformMatrix3fvContextANGLE
glProgramUniformMatrix3x2fvContextANGLE
glProgramUniformMatrix3x4fvContextANGLE
glProgramUniformMatrix4fvContextANGLE
glProgramUniformMatrix4x2fvContextANGLE
glProgramUniformMatrix4x3fvContextANGLE
glProvokingVertexANGLE
glProvokingVertexANGLEContextANGLE
glPushDebugGroupKHRContextANGLE
glPushGroupMarkerEXTContextANGLE
glPushMatrix
glPushMatrixContextANGLE
glQueryCounterEXTContextANGLE
glQueryMatrixxOES
glQueryMatrixxOESContextANGLE
glReadBufferContextANGLE
glReadPixelsContextANGLE
glReadPixelsRobustANGLE
glReadPixelsRobustANGLEContextANGLE
glReadnPixelsEXTContextANGLE
glReadnPixelsRobustANGLE
glReadnPixelsRobustANGLEContextANGLE
glReleaseShaderCompilerContextANGLE
glRenderbufferStorageContextANGLE
glRenderbufferStorageMultisampleANGLE
glRenderbufferStorageMultisampleANGLEContextANGLE
glRenderbufferStorageMultisampleContextANGLE
glRenderbufferStorageMultisampleEXTContextANGLE
glRenderbufferStorageOES
glRenderbufferStorageOESContextANGLE
glRequestExtensionANGLE
glRequestExtensionANGLEContextANGLE
glResumeTransformFeedbackContextANGLE
glRotatef
glRotatefContextANGLE
glRotatex
glRotatexContextANGLE
glSampleCoverageContextANGLE
glSampleCoveragex
glSampleCoveragexContextANGLE
glSampleMaskiANGLE
glSampleMaskiANGLEContextANGLE
glSampleMaskiContextANGLE
glSamplerParameterIivOESContextANGLE
glSamplerParameterIivRobustANGLE
glSamplerParameterIivRobustANGLEContextANGLE
glSamplerParameterIuivOESContextANGLE
glSamplerParameterIuivRobustANGLE
glSamplerParameterIuivRobustANGLEContextANGLE
glSamplerParameterfContextANGLE
glSamplerParameterfvContextANGLE
glSamplerParameterfvRobustANGLE
glSamplerParameterfvRobustANGLEContextANGLE
glSamplerParameteriContextANGLE
glSamplerParameterivContextANGLE
glSamplerParameterivRobustANGLE
glSamplerParameterivRobustANGLEContextANGLE
glScalef
glScalefContextANGLE
glScalex
glScalexContextANGLE
glScissorContextANGLE
glSemaphoreParameterui64vEXTContextANGLE
glSetFenceNVContextANGLE
glShadeModel
glShadeModelContextANGLE
glShaderBinaryContextANGLE
glShaderSourceContextANGLE
glSignalSemaphoreEXTContextANGLE
glStencilFuncContextANGLE
glStencilFuncSeparateContextANGLE
glStencilMaskContextANGLE
glStencilMaskSeparateContextANGLE
glStencilOpContextANGLE
glStencilOpSeparateContextANGLE
glTestFenceNVContextANGLE
glTexCoordPointer
glTexCoordPointerContextANGLE
glTexEnvf
glTexEnvfContextANGLE
glTexEnvfv
glTexEnvfvContextANGLE
glTexEnvi
glTexEnviContextANGLE
glTexEnviv
glTexEnvivContextANGLE
glTexEnvx
glTexEnvxContextANGLE
glTexEnvxv
glTexEnvxvContextANGLE
glTexGenfOES
glTexGenfOESContextANGLE
glTexGenfvOES
glTexGenfvOESContextANGLE
glTexGeniOES
glTexGeniOESContextANGLE
glTexGenivOES
glTexGenivOESContextANGLE
glTexGenxOES
glTexGenxOESContextANGLE
glTexGenxvOES
glTexGenxvOESContextANGLE
glTexImage2DContextANGLE
glTexImage2DExternalANGLE
glTexImage2DExternalANGLEContextANGLE
glTexImage2DRobustANGLE
glTexImage2DRobustANGLEContextANGLE
glTexImage3DContextANGLE
glTexImage3DOESContextANGLE
glTexImage3DRobustANGLE
glTexImage3DRobustANGLEContextANGLE
glTexParameterIivOESContextANGLE
glTexParameterIivRobustANGLE
glTexParameterIivRobustANGLEContextANGLE
glTexParameterIuivOESContextANGLE
glTexParameterIuivRobustANGLE
glTexParameterIuivRobustANGLEContextANGLE
glTexParameterfContextANGLE
glTexParameterfvContextANGLE
glTexParameterfvRobustANGLE
glTexParameterfvRobustANGLEContextANGLE
glTexParameteriContextANGLE
glTexParameterivContextANGLE
glTexParameterivRobustANGLE
glTexParameterivRobustANGLEContextANGLE
glTexParameterx
glTexParameterxContextANGLE
glTexParameterxv
glTexParameterxvContextANGLE
glTexStorage1DEXTContextANGLE
glTexStorage2DContextANGLE
glTexStorage2DEXTContextANGLE
glTexStorage2DMultisampleANGLE
glTexStorage2DMultisampleANGLEContextANGLE
glTexStorage2DMultisampleContextANGLE
glTexStorage3DContextANGLE
glTexStorage3DEXTContextANGLE
glTexStorage3DMultisampleOESContextANGLE
glTexStorageMem2DEXTContextANGLE
glTexStorageMem2DMultisampleEXTContextANGLE
glTexStorageMem3DEXTContextANGLE
glTexStorageMem3DMultisampleEXTContextANGLE
glTexSubImage2DContextANGLE
glTexSubImage2DRobustANGLE
glTexSubImage2DRobustANGLEContextANGLE
glTexSubImage3DContextANGLE
glTexSubImage3DOESContextANGLE
glTexSubImage3DRobustANGLE
glTexSubImage3DRobustANGLEContextANGLE
glTransformFeedbackVaryingsContextANGLE
glTranslatef
glTranslatefContextANGLE
glTranslatex
glTranslatexContextANGLE
glUniform1fContextANGLE
glUniform1fvContextANGLE
glUniform1iContextANGLE
glUniform1ivContextANGLE
glUniform1uiContextANGLE
glUniform1uivContextANGLE
glUniform2fContextANGLE
glUniform2fvContextANGLE
glUniform2iContextANGLE
glUniform2ivContextANGLE
glUniform2uiContextANGLE
glUniform2uivContextANGLE
glUniform3fContextANGLE
glUniform3fvContextANGLE
glUniform3iContextANGLE
glUniform3ivContextANGLE
glUniform3uiContextANGLE
glUniform3uivContextANGLE
glUniform4fContextANGLE
glUniform4fvContextANGLE
glUniform4iContextANGLE
glUniform4ivContextANGLE
glUniform4uiContextANGLE
glUniform4uivContextANGLE
glUniformBlockBindingContextANGLE
glUniformMatrix2fvContextANGLE
glUniformMatrix2x3fvContextANGLE
glUniformMatrix2x4fvContextANGLE
glUniformMatrix3fvContextANGLE
glUniformMatrix3x2fvContextANGLE
glUniformMatrix3x4fvContextANGLE
glUniformMatrix4fvContextANGLE
glUniformMatrix4x2fvContextANGLE
glUniformMatrix4x3fvContextANGLE
glUnmapBufferContextANGLE
glUnmapBufferOESContextANGLE
glUseProgramContextANGLE
glUseProgramStagesContextANGLE
glValidateProgramContextANGLE
glValidateProgramPipelineContextANGLE
glVertexAttrib1fContextANGLE
glVertexAttrib1fvContextANGLE
glVertexAttrib2fContextANGLE
glVertexAttrib2fvContextANGLE
glVertexAttrib3fContextANGLE
glVertexAttrib3fvContextANGLE
glVertexAttrib4fContextANGLE
glVertexAttrib4fvContextANGLE
glVertexAttribBindingContextANGLE
glVertexAttribDivisorANGLE
glVertexAttribDivisorANGLEContextANGLE
glVertexAttribDivisorContextANGLE
glVertexAttribDivisorEXTContextANGLE
glVertexAttribFormatContextANGLE
glVertexAttribI4iContextANGLE
glVertexAttribI4ivContextANGLE
glVertexAttribI4uiContextANGLE
glVertexAttribI4uivContextANGLE
glVertexAttribIFormatContextANGLE
glVertexAttribIPointerContextANGLE
glVertexAttribPointerContextANGLE
glVertexBindingDivisorContextANGLE
glVertexPointer
glVertexPointerContextANGLE
glViewportContextANGLE
glWaitSemaphoreEXTContextANGLE
glWaitSyncContextANGLE
glWeightPointerOES
glWeightPointerOESContextANGLE
s of 
' member '
' differ between 
 and 
 shaders.
GPU.ANGLE.ProgramCache.ProgramCacheHitTimeUS
The sum of the number of active image uniforms, active shader storage blocks and active fragment shader outputs exceeds MAX_COMBINED_SHADER_OUTPUT_RESOURCES (
resolveLinkImpl
Failed to save linked program to memory program cache.
Invalid program binary format.
Insufficient buffer size
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/Program.cpp
saveBinary
Program has not been successfully linked.
Samplers of conflicting types refer to the same texture image unit (
Both compute and graphics shaders are attached to the same program.
Attached compute shader is not compiled.
Work group size is not specified.
No compiled shaders.
Fragment shader is not compiled.
Vertex shader is not compiled.
No compiled fragment shader when at least one graphics shader is attached.
No compiled vertex shader when at least one graphics shader is attached.
Fragment shader version does not match vertex shader version.
The attached geometry shader isn't compiled.
Geometry shader version does not match vertex shader version.
Input primitive type is not specified in the geometry shader.
Output primitive type is not specified in the geometry shader.
'max_vertices' is not specified in the geometry shader.
 does not consume all varyings generated by 
 does not generate all varyings consumed by 
 varying 
 does not match any 
 varying
Exceeded maximum uniform location size
Attribute (
) at location 
 is too big to fit
Attribute '
' aliases attribute '
' at location 
Too many attributes (
The sum of the number of active uniform blocks exceeds MAX_COMBINED_UNIFORM_BLOCKS (
The sum of the number of active shader storage blocks exceeds MAX_COMBINED_SHADER_STORAGE_BLOCKS (
gl_Position
gl_PointSize
gl_FragCoord
gl_PointCoord
gl_FragCoord can only be declared invariant if and only if gl_Position is declared invariant.
gl_PointCoord can only be declared invariant if and only if gl_PointSize is declared invariant.
Capture of array elements is undefined and not supported.
Two transform feedback varyings include the same array element (
Two transform feedback varyings specify the same output variable (
Transform feedback varying 
 does not exist in the vertex shader.
Struct cannot be captured directly (
Capture of arrays is undefined and not supported.
Cannot capture outbound array element '
Varying '
' is not an array to be captured by element.
 components (
) exceed the maximum separate components (
Transform feedback varying total components (
) exceed the maximum interleaved components (
Location of variable 
 conflicts with another variable.
Could not fit output variable into available locations: 
serialize
Saving program binary with transform feedback, which is not supported on this driver.
Failed to allocate enough memory to serialize a program. (
Invalid program binary version.
Cannot load program binaries across different ES context versions.
Current driver does not support transform feedback in binary programs.
gl_DrawID
gl_BaseVertex
gl_BaseInstance
Type
Array size
Precision
Structure name
Field number
Field name
Interpolation type
Invariance
Binding layout qualifier
Location layout qualifier
Offset layout qualifier
Instance name qualifier
Format qualifier
Layout qualifier
Matrix Packing
 shader 
 count exceeds 
uniform block
shader storage block
GL_MAX_
UNIFORM_BUFFERS
SHADER_STORAGE_BLOCKS
_EXT
Name conflicts between uniform block field names: 
Name conflicts between a uniform and an attribute: 
Name conflicts between a uniform and a uniform block field: 
ProgramGL::load
ProgramGL::link
checkLinkStatus
Program link or binary loading failed: 
Program link or binary loading failed with no info log.
ProgramGL::LinkTask::run
ProgramGL::LinkEventNativeParallel::wait
ProgramGL::LinkEventGL::wait
Multiple uniforms bound to location 
atomic counter count exceeds MAX_COMBINED_ATOMIC_COUNTERS
s count exceeds 
texture image unit
image uniform
atomic counter
MAX_TEXTURE_IMAGE_UNITS
MAX_
UNIFORM_VECTORS
UNIFORM_COMPONENTS
TEXTURE_IMAGE_UNITS
IMAGE_UNIFORMS
ATOMIC_COUNTERS
 is not marked separable.
Program pipeline link failed
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/ProgramPipeline.cpp
syncState
Cannot have multiple different work group size specifiers
Cannot have multiple different primitive specifiers
Cannot have multiple different invocations specifiers
Cannot have multiple different max_vertices specifiers
Cannot have multiple index specifiers
qualifier sequence
unknown geometry shader primitive type
The invariant qualifier specified multiple times.
The precise qualifier specified multiple times.
The precision qualifier specified multiple times.
The layout qualifier specified multiple times.
The layout qualifier and invariant qualifier cannot coexist in the same declaration according to the grammar.
The interpolation qualifier specified multiple times.
Output layout location specified multiple times.
The invariant qualifier has to be first in the expression.
Storage qualifiers have to be after interpolation qualifiers.
Precision qualifiers have to be after interpolation qualifiers.
Storage qualifiers have to be after layout qualifiers.
Precision qualifiers have to be after layout qualifiers.
Precision qualifiers have to be after storage qualifiers.
Precision qualifiers have to be after memory qualifiers.
invalid parameter qualifier
Invalid parameter qualifier 
precise
invalid qualifier combination
Unreachable Code.
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/QueryGL.cpp
_webgl_struct_
Performance: dynamic indexing of vectors and matrices is emulated and can be slow.
dyn_index_
write_
ivec
bvec
uvec
base
value
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/RenderbufferGL.cpp
setStorage
functions->renderbufferStorage(GL_RENDERBUFFER, renderbufferFormat.internalFormat, static_cast<GLsizei>(width), static_cast<GLsizei>(height))
setStorageMultisample
functions->renderbufferStorageMultisample( GL_RENDERBUFFER, static_cast<GLsizei>(samples), renderbufferFormat.internalFormat, static_cast<GLsizei>(width), static_cast<GLsizei>(height))
ANGLE_FEATURE_OVERRIDES_ENABLED
ANGLE_FEATURE_OVERRIDES_DISABLED
, OpenGL
 compatibility
 core
avoid_1_bit_alpha_texture_formats
Issue with 1-bit alpha framebuffer formats
rgba4_is_not_supported_for_color_rendering
GL_RGBA4 is not color renderable
does_srgb_clears_on_linear_framebuffer_attachments
Issue clearing framebuffers with linear attachments when GL_FRAMEBUFFER_SRGB is enabled
do_while_glsl_causes_gpu_hang
Some GLSL constructs involving do-while loops cause GPU hangs
http://crbug.com/644669
vertex_id_does_not_include_base_vertex
gl_VertexID in GLSL vertex shader doesn't include base vertex value
finish_does_not_cause_queries_to_be_available
glFinish doesn't cause all queries to report available result
always_call_use_program_after_link
Always call useProgram after a successful link to avoid a driver bug
http://crbug.com/110263
unpack_overlapping_rows_separately_unpack_buffer
In the case of unpacking from a pixel unpack buffer, unpack overlapping rows row by row
pack_overlapping_rows_separately_pack_buffer
In the case of packing to a pixel pack buffer, pack overlapping rows row by row
initialize_current_vertex_attributes
During initialization, assign the current vertex attributes to the spec-mandated defaults
emulate_abs_int_function
abs(i) where i is an integer returns unexpected result
http://crbug.com/642227
add_and_true_to_loop_condition
Calculation of loop conditions in for and while loop has bug
unpack_last_row_separately_for_padding_inclusion
When uploading textures from an unpack buffer, some drivers count an extra row padding
http://anglebug.com/1512
pack_last_row_separately_for_padding_inclusion
When uploading textures from an pack buffer, some drivers count an extra row padding
emulate_isnan_float
Using isnan() on highp float will get wrong answer
http://crbug.com/650547
use_unused_blocks_with_standard_or_shared_layout
Unused std140 or shared uniform blocks will be treated as inactive
remove_invarient_and_centroid_for_essl3
Fix spec difference between GLSL 4.1 or lower and ESSL3
rewrite_float_unary_minus_operator
Using '-<float>' will get wrong answer
http://crbug.com/308366
emulate_atan_2_float
atan(y, x) may return a wrong answer
http://crbug.com/672380
reapply_ubo_bindings_after_using_binary_program
Some drivers forget about UBO bindings when using program binaries
http://anglebug.com/1637
emulate_max_vertex_attrib_stride
Some drivers return 0 when MAX_VERTEX_ATTRIB_STRIED queried
http://anglebug.com/1936
dont_initialize_uninitialized_locals
Initializing uninitialized locals caused odd behavior in a few WebGL 2 tests
http://anglebug.com/2046
clamp_point_size
The point size range reported from the API is inconsistent with the actual behavior
rewrite_vector_scalar_arithmetic
Certain types of GLSL arithmetic ops mixing vectors and scalars may be executed incorrectly
http://crbug.com/772651
dont_use_loops_to_initialize_variables
For loops used to initialize variables hit native GLSL compiler bugs
http://crbug.com/809422
clamp_frag_depth
gl_FragDepth is not clamped correctly when rendering to a floating point depth buffer
rewrite_repeated_assign_to_swizzled
Repeated assignment to swizzled values inside a GLSL user-defined function have incorrect results
disable_blend_func_extended
ARB_blend_func_extended does not pass the tests
http://anglebug.com/1085
unsized_srgb_read_pixels_doesnt_transform
Drivers returning raw sRGB values instead of linearized values when calling glReadPixels on unsized sRGB texture formats
http://crbug.com/565179
query_counter_bits_generates_errors
Drivers generate errors when querying the number of bits in timer queries
http://anglebug.com/3027
dont_relink_programs_in_parallel
Relinking a program in parallel is buggy
http://anglebug.com/3045
disable_worker_contexts
Some tests have been seen to fail using worker contexts
http://crbug.com/849576
max_texture_size_limit_4096
Limit max texture size to 4096 to avoid frequent out-of-memory errors
http://crbug.com/927470
max_msaa_sample_count_4
Various rendering bugs have been observed when using higher MSAA counts
http://crbug.com/797243
allow_clear_for_robust_resource_init
Using glClear for robust resource initialization is buggy on some drivers and leads to texture corruption. Default to data uploads except on MacOS where it is very slow.
http://crbug.com/883276
clamp_array_access
Clamp uniform array access to avoid reading invalid memory.
http://anglebug.com/2978
reset_teximage2d_base_level
Reset texture base level before calling glTexImage2D to work around pixel comparison failure.
https://crbug.com/705865
clear_to_zero_or_one_broken
Clears when the clear color is all zeros or ones do not work.
https://crbug.com/710443
max_3d_array_texture_size_1024
Limit max 3d texture size and max array texture layers to 1024 to avoid system hang
adjust_src_dst_region_for_blitframebuffer
Many platforms have issues with blitFramebuffer when the parameters are large.
http://crbug.com/830046
clip_src_region_for_blitframebuffer
Issues with blitFramebuffer when the parameters don't match the framebuffer size.
reset_texture_generates_errors
Calling glTexImage2D with zero size generates errors.
http://anglebug.com/3859
rgb_dxt1_textures_sample_zero_alpha
Sampling BLACK texels from RGB DXT1 textures returns transparent black on Mac.
http://anglebug.com/3729
unfold_short_circuits
Mac incorrectly executes both sides of && and || expressions when they should short-circuit.
http://anglebug.com/482
emulate_primitive_restart_fixed_index
When GL_PRIMITIVE_RESTART_FIXED_INDEX is not available, emulate it with GL_PRIMITIVE_RESTART and glPrimitiveRestartIndex.
http://anglebug.com/3997
set_primitive_restart_fixed_index_for_draw_arrays
Some drivers discard vertex data in DrawArrays calls when the fixed primitive restart index is within the number of primitives being drawn.
remove_dynamic_indexing_of_swizzled_vector
Dynamic indexing of swizzled l-values doesn't work correctly on various platforms.
http://crbug.com/709351
pre_add_texel_fetch_offsets
Intel Mac drivers mistakenly consider the parameter position of nagative vaule as invalid even if the sum of position and offset is in range, so we need to add workarounds by rewriting texelFetchOffset(sampler, position, lod, offset) into texelFetch(sampler, position + offset, lod).
http://crbug.com/642605
regenerate_struct_names
All Mac drivers do not handle struct scopes correctly. This workaround overwrites a structname with a unique prefix.
http://crbug.com/403957
read_pixels_using_implementation_color_read_format
Quite some OpenGL ES drivers don't implement readPixels for RGBA/UNSIGNED_SHORT from EXT_texture_norm16 correctly
http://anglebug.com/4214
flush_before_delete_texture_if_copied_to
Some drivers track CopyTex{Sub}Image texture dependencies incorrectly. Flush before glDeleteTextures in this case
http://anglebug.com/4267
rewrite_row_major_matrices
Rewrite row major matrices in shaders as column major as a driver bug workaround
http://anglebug.com/2273
avoid_dxt1_srgb_texture_format
Replaces DXT1 sRGB with DXT1 sRGB Alpha as a driver bug workaround.
disable_draw_buffers_indexed
Disable OES_draw_buffers_indexed extension.
disable_semaphore_fd
Disable GL_EXT_semaphore_fd extension
https://crbug.com/1046462
disable_timestamp_queries
Disable GL_EXT_disjoint_timer_query extension
https://crbug.com/811661
decode_encode_srgb_for_generatemipmap
Decode and encode before generateMipmap for srgb format textures.
http://anglebug.com/4646
emulate_copyteximage2d_from_renderbuffers
CopyTexImage2D spuriously returns errors on iOS when copying from renderbuffers.
https://anglebug.com/4674
disable_gpu_switching_support
Disable GPU switching support (use only the low-power GPU) on older MacBook Pros.
https://crbug.com/1091824
disable_native_parallel_compile
Do not use native KHR_parallel_shader_compile even when available.
http://crbug.com/1094869
emulate_pack_skip_rows_and_pack_skip_pixels
GL_PACK_SKIP_ROWS and GL_PACK_SKIP_PIXELS are ignored in Apple's OpenGL driver.
https://anglebug.com/4849
LogGLDebugMessage
Source: 
Type: 
ID: 
Severity: 
Message: 
extension `GL_ARB_gpu_shader5' unsupported in
extension `GL_EXT_gpu_shader5' unsupported in
Adreno (TM) 418
Adreno (TM) 530
Adreno (TM) 540
Mesa %d.%d.%d
GL_EXT_texture_lod_bias
ARB_draw_buffers
GL_ARB_sync
GL_ARB_texture_swizzle
GL_EXT_texture_swizzle
GL_ARB_explicit_attrib_location
GL_ARB_shader_storage_buffer_object
GL_ARB_explicit_uniform_location
GL_ARB_texture_gather
GL_ARB_texture_cube_map_array
GL_ARB_pixel_buffer_object
GL_EXT_pixel_buffer_object
GL_EXT_draw_buffers2
GL_ARB_fragment_shader
GL_ARB_shader_texture_lod
GL_ARB_shader_viewport_layer_array
GL_NV_viewport_array2
GL_NV_texture_border_clamp
GL_ARB_robust_buffer_access_behavior
GL_EXT_framebuffer_sRGB
GL_ARB_framebuffer_sRGB
GL_ARB_gpu_shader5
functions->standard == STANDARD_GL_DESKTOP && isAMD
functions->standard == STANDARD_GL_DESKTOP && isIntel
IsApple() && isIntel
isIntel && IsApple() && IsSkylake(device) && GetMacOSVersion() < OSVersion(10, 13, 2)
functions->standard == STANDARD_GL_DESKTOP && (isIntel || isAMD)
IsLinux() && functions->standard == STANDARD_GL_DESKTOP && isAMD
(IsApple() && functions->standard == STANDARD_GL_DESKTOP) || (IsLinux() && isAMD)
IsApple() && functions->standard == STANDARD_GL_DESKTOP && GetMacOSVersion() < OSVersion(10, 11, 0)
IsApple() && isIntel && GetMacOSVersion() < OSVersion(10, 12, 0)
IsApple() && isAMD
IsAndroid() && isQualcomm
functions->standard == STANDARD_GL_DESKTOP && isNvidia
isNvidia
IsApple() || isNvidia
functions->isAtMostGL(gl::Version(4, 1)) || (functions->standard == STANDARD_GL_DESKTOP && isAMD)
isAMD || IsAndroid()
IsAndroid() || isNvidia
(IsAndroid() && isQualcomm) || (isIntel && IsApple())
isAMD || isIntel
IsNexus5X(vendor, device)
IsAndroid() || (IsWindows() && isIntel)
(IsWindows() && (isIntel || isAMD)) || (IsLinux() && isNvidia) || IsIOS()
IsAndroid() || limitMaxTextureSize
IsAndroid() || (IsApple() && (isIntel || isAMD || isNvidia))
limitMaxTextureSize
IsApple()
IsAndroid() || isAMD || !functions->hasExtension("GL_KHR_robust_buffer_access_behavior")
IsApple() && isIntel && GetMacOSVersion() >= OSVersion(10, 12, 4)
IsApple() && isIntel && GetMacOSVersion() < OSVersion(10, 12, 6)
IsLinux() || (IsAndroid() && isNvidia) || (IsWindows() && isNvidia)
IsApple() || (IsLinux() && isAMD)
IsApple() || (IsWindows() && isAMD)
functions->standard == STANDARD_GL_DESKTOP && functions->isAtLeastGL(gl::Version(3, 1)) && !functions->isAtLeastGL(gl::Version(4, 3))
features->emulatePrimitiveRestartFixedIndex.enabled && IsApple() && isIntel
IsApple() || IsAndroid() || IsWindows()
functions->standard == STANDARD_GL_ES && functions->isAtLeastGLES(gl::Version(3, 1)) && functions->hasGLESExtension("GL_EXT_texture_norm16")
IsWindows() && isIntel
IsWindows() && isAMD
IsLinux() && isAMD && isMesa && mesaVersion < (std::array<int, 3>{19, 3, 5})
IsLinux() && isVMWare
IsApple() && functions->standard == STANDARD_GL_DESKTOP
IsApple() && functions->standard == STANDARD_GL_ES && !(isAMD && IsWindows())
isDualGPUMacWithNVIDIA
isTSANBuild && IsLinux() && isNvidia
IsApple() && (isAMD || isIntel || isNvidia)
GL_ARB_compute_shader
GL_ARB_occlusion_query2
GL_EXT_occlusion_query_boolean
GL_ARB_internalformat_query2
ClearErrors
Preexisting GL error 
 as of 
Unexpected driver error.
CheckError
GL call 
 generated error 
 in 
Additional GL error 
 generated.
Integer overflow.
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/renderergl_utils.cpp
ShouldApplyLastRowPaddingWorkaround
atomicCounterIncrement
atomicCounterDecrement
from
texelFetchOffset
texelFetch
VERTEX
FRAGMENT
COMPUTE
GEOMETRY
resolveCompile
Integer overflow when computing the product of local_size_x, 
local_size_y and local_size_z.
The total number of invocations within a work group exceeds 
MAX_COMPUTE_WORK_GROUP_INVOCATIONS.
Exceeded maximum shared memory size
checkShader
Shader compilation failed with no info log.
TranslateTaskGL::run
source
gpu.angle
egl::Surface::swap
operator()
Unhandled internal error: 
swapWithDamage implementation missing.
setPresentationTime implementation missing.
atomicCounter
gl_in
gl_FragCoord
gl_FrontFacing
gl_GlobalInvocationID
gl_HelperInvocation
gl_InvocationID
gl_LastFragColor
gl_LastFragColorARM
gl_Layer
gl_LocalInvocationID
gl_LocalInvocationIndex
gl_NumWorkGroups
gl_PointCoord
gl_PrimitiveID
gl_PrimitiveIDIn
gl_ViewID_OVR
gl_ViewportIndex
gl_WorkGroupID
gl_WorkGroupSize
gl_DepthRangeParameters
gl_MaxVertexAttribs
gl_MaxVertexUniformVectors
gl_MaxVertexTextureImageUnits
gl_MaxCombinedTextureImageUnits
gl_MaxTextureImageUnits
gl_MaxFragmentUniformVectors
gl_MaxVaryingVectors
gl_MaxDualSourceDrawBuffersEXT
gl_MaxVertexOutputVectors
gl_MaxFragmentInputVectors
gl_MinProgramTexelOffset
gl_MaxProgramTexelOffset
gl_MaxImageUnits
gl_MaxVertexImageUniforms
gl_MaxFragmentImageUniforms
gl_MaxComputeImageUniforms
gl_MaxCombinedImageUniforms
gl_MaxCombinedShaderOutputResources
gl_MaxComputeWorkGroupCount
gl_MaxComputeUniformComponents
gl_MaxComputeTextureImageUnits
gl_MaxComputeAtomicCounters
gl_MaxComputeAtomicCounterBuffers
gl_MaxVertexAtomicCounters
gl_MaxFragmentAtomicCounters
gl_MaxCombinedAtomicCounters
gl_MaxAtomicCounterBindings
gl_MaxVertexAtomicCounterBuffers
gl_MaxFragmentAtomicCounterBuffers
gl_MaxCombinedAtomicCounterBuffers
gl_MaxAtomicCounterBufferSize
gl_MaxGeometryInputComponents
gl_MaxGeometryOutputComponents
gl_MaxGeometryImageUniforms
gl_MaxGeometryTextureImageUnits
gl_MaxGeometryOutputVertices
gl_MaxGeometryTotalOutputComponents
gl_MaxGeometryUniformComponents
gl_MaxGeometryAtomicCounters
gl_MaxGeometryAtomicCounterBuffers
textureProj(00R30B00B
imageAtomicExchange(01g00D00E
interpolateAtOffset(30B10B
textureProjOffset(00g10B00D
imageAtomicOr(00z10D00D
texture2DProj(00I20B
textureProjGradOffset(00v30B10B10B10D
texelFetch(00o00D00D
imageLoad(01g00D
imageAtomicAdd(01S10D00D00E
imageLoad(01I20D
tanh(30B
imageAtomicCompSwap(01E20D00D00D
textureQueryLod(00m00B
not(10F
findMSB(20E
lessThanEqual(30B30B
imageAtomicAdd(00z10D00E
textureLod(00t00B00B
textureProjGradOffset(00O30B10B10B10D
outerProduct(20B30B
imageAtomicOr(00z10D00E
imageSamples(01W
imageSamples(01V
imageSamples(01U
imageSamples(01T
imageSamples(01S
mix(20B20B00B
textureLodOffset(00o00B00B00D
uintBitsToFloat(30E
imageAtomicExchange(01R10D00D00B
textureSize(00K00D
textureSize(00h00D
texelFetchOffset(00q10D10D
greaterThanEqual(10E10E
texture(00d20B
atan(10B10B
clamp(30B30B30B
imageAtomicCompSwap(01a20D00E00E
imageAtomicCompSwap(01R10D00D00D00D
textureLodOffset(00a20B00B10D
greaterThanEqual(20B20B
imageLoad(01F20D
ceil(10C
imageAtomicCompSwap(01b20D00D00D
imageAtomicAnd(01A10D00D
imageAtomicAdd(01D20D00E
atomicAdd(00D00D
textureSize(00p00D
floatBitsToUint(20B
textureProjOffset(00t30B00D00B
mix(20D20D20F
degrees(20B
imageAtomicMin(01Y10D00D
imageAtomicXor(01R10D00D00D
imageAtomicCompSwap(01D20D00D00D
min(00C00C
imageAtomicMax(01S10D00D00E
inversesqrt(00C
inversesqrt(00B
texelFetchOffset(00J20D00D20D
textureProjGrad(00S30B20B20B
equal(10D10D
max(30D00D
groupMemoryBarrier(
imageAtomicExchange(01b20D00B
imageAtomicExchange(01b20D00E
imageAtomicExchange(01b20D00D
step(20C20C
texelFetch(00I10D00D
mod(00C00C
transpose(E0B
imageAtomicMin(01R10D00D00E
imageAtomicMin(01R10D00D00D
imageAtomicExchange(01i00D00E
textureGather(00O20B
textureProjOffset(00Y30B20D00B
imageStore(01C20D30B
modf(10B10B
determinant(50B
imageAtomicCompSwap(01J20D00E00E
textureProj(00g10B00B
lessThan(20B20B
imageAtomicCompSwap(01W20D00D00E00E
imageStore(01K20D30E
sign(20C
cosh(20B
sign(20D
atanh(00B
imageAtomicAnd(01V20D00D00E
imageAtomicAnd(01V20D00D00D
textureProj(00t10B
texture(00p20B00B
fma(10C10C10C
imageAtomicXor(01Y10D00D
imageAtomicXor(01Y10D00E
imageAtomicAnd(01C20D00E
textureOffset(00d20B10D00B
textureOffset(00m20B00D
imageAtomicAnd(01C20D00D
lessThan(10E10E
imageAtomicCompSwap(01A10D00D00D
textureGrad(00X00B00B00B
textureProjLodOffset(00t30B00B00D
fma(30C30C30C
textureGrad(00v10B10B10B
textureProj(00N30B00B
step(00C00C
imageAtomicCompSwap(01T10D00D00D00D
texture(00I10B00B
texelFetch(00j00D
lessThan(20D20D
clamp(20C20C20C
imageAtomicXor(00z10D00E
all(10F
dFdyCoarse(00B
isinf(30B
textureGatherOffset(00a20B10D00D
textureGatherOffset(00I10B10D
textureProjOffset(00q30B10D
textureOffset(00L20B10D
lessThanEqual(30E30E
min(10E00E
imageAtomicXor(01a20D00E
imageAtomicXor(01a20D00D
textureProjOffset(00S30B20D
round(00C
round(00B
greaterThan(30D30D
texture(00U20B
imageAtomicCompSwap(01P10D00E00E
smoothstep(00C00C20C
texture2DRect(00O10B
imageLoad(01N00D
noise2(20B
step(20B20B
imageAtomicAnd(01b20D00E
findMSB(10E
findMSB(10D
interpolateAtOffset(00B10B
texture(00t00B
textureLodOffset(00S20B00B20D
textureQueryLod(00p00B
imageStore(00z10D30B
textureGatherOffsets(00X10B10Dx400D
outerProduct(10B20B
imageAtomicMax(01Z10D00E
fwidthFine(10B
cos(30B
unpackHalf2x16(00E
outerProduct(10B10B
imageAtomicOr(01M00D00D
imageAtomicMax(01Y10D00E
imageAtomicMax(01Y10D00D
sin(30B
imageAtomicAnd(01O10D00D
textureGather(00L20B00D
imageStore(01i00D30E
imageStore(01A10D30D
imageAtomicXor(01H20D00D
imageAtomicXor(01H20D00E
shadow1D(00m20B00B
max(10E10E
max(30B30B
clamp(10E10E10E
texture(00N10B
textureProjGrad(00t30B00B00B
imageAtomicOr(01E20D00D
imageAtomicOr(01E20D00E
texelFetchOffset(00a20D00D10D
imageLoad(01V20D00D
not(20F
imageAtomicExchange(01F20D00D
imageAtomicExchange(01F20D00B
imageStore(01L00D30B
outerProduct(20B20B
imageAtomicXor(01D20D00D
textureProjLodOffset(00R20B00B10D
textureOffset(00p10B00D
texture(00h20B
textureProjGrad(00J30B20B20B
imageAtomicOr(01R10D00D00E
imageAtomicOr(01R10D00D00D
imageLoad(01K20D
textureProjOffset(00g10B00D00B
imageAtomicAnd(01R10D00D00D
imageAtomicAdd(01E20D00E
radians(10B
textureGatherOffset(00n10B00B10D
noise2(10B
textureQueryLod(00a10B
textureGather(00e20B00B
distance(10B10B
textureGrad(00Z20B20B20B
sign(00B
bitfieldReverse(00D
bitfieldReverse(00E
bitfieldExtract(30E00D00D
textureLod(00I10B00B
greaterThanEqual(10D10D
imageAtomicCompSwap(01I20D00E00E
degrees(30B
inversesqrt(30B
inversesqrt(30C
imageAtomicMin(01I20D00D
textureGather(00v20B00D
intBitsToFloat(20D
exp(20B
imageAtomicMax(01A10D00E
imageAtomicMax(01A10D00D
acosh(00B
log(10B
textureProjLodOffset(00S30B00B20D
textureGather(00L20B
textureProj(00n30B
textureQueryLod(00i00B
texture(00p20B
outerProduct(30B20B
texture(00S20B
atomicXor(00D00D
texelFetch(00Y20D00D
imageAtomicOr(01P10D00D
imageAtomicOr(01P10D00E
bitfieldExtract(10D00D00D
sign(30B
sign(30C
sign(30D
texture(00Y20B00B
dFdy(20B
textureProj(00Y30B
textureOffset(00X10B10D00B
memoryBarrierBuffer(
isinf(00B
isinf(00C
clamp(20D00D00D
texture2DProj(00I20B00B
mod(30B00B
imageAtomicAnd(01A10D00E
textureGather(00f20B00B
textureProj(00m30B
greaterThan(20E20E
textureProjLod(00I30B00B
refract(00B00B00B
imageAtomicMin(01X10D00D
imageAtomicMin(01X10D00E
noise4(20B
textureSize(00e00D
imageStore(01N00D30E
texelFetch(00a20D00D
step(00C10C
frexp(30B30D
imageAtomicMin(01Y10D00E
texture(00t00B00B
min(30C00C
imageAtomicCompSwap(01X10D00E00E
texture(00I10B
normalize(20B
normalize(20C
imageAtomicCompSwap(01H20D00D00D
inverse(F0B
frexp(20C20D
atan(00B
textureGatherOffset(00R10B10D00D
imageAtomicMin(01h00D00E
imageAtomicMin(01h00D00D
greaterThan(30E30E
imageAtomicAdd(01N00D00D
imageAtomicAdd(01N00D00E
texelFetchOffset(00p10D00D00D
imageAtomicAnd(01J20D00D
imageAtomicAnd(01J20D00E
imageAtomicMax(01S10D00D00D
textureProj(00o30B
imageAtomicAdd(01I20D00E
bitfieldExtract(20D00D00D
texture(00L20B00B
imageAtomicOr(01L00D00E
imageAtomicOr(01L00D00D
mix(30D30D30F
imageLoad(01h00D
imageAtomicCompSwap(01E20D00E00E
textureProjOffset(00O30B10D
floor(10B
floor(10C
imageAtomicMax(01R10D00D00E
imageAtomicMax(01R10D00D00D
textureProjLodOffset(00o10B00B00D
textureGather(00x30B00D
interpolateAtSample(10B00D
imageAtomicMin(01F20D00E
imageAtomicMin(01F20D00D
outerProduct(10B30B
texture(00k30B
imageAtomicCompSwap(01O10D00E00E
cos(00B
imageAtomicXor(01F20D00E
imageAtomicXor(01B10D00E
frexp(00C00D
atomicCounterCompSwap(00G00E00E
textureOffset(00a20B10D00B
imageAtomicCompSwap(01b20D00E00E
textureGather(00X10B
imageLoad(01T10D00D
textureOffset(00R10B10D00B
textureGatherOffset(00d10B00B10D
textureSize(00i00D
equal(20E20E
uaddCarry(00E00E00E
textureQueryLod(00T20B
textureCube(00K20B
imageAtomicMax(01U20D00D00E
imageAtomicMax(01U20D00D00D
imageAtomicAnd(01K20D00D
matrixCompMult(90B90B
textureGatherOffsets(00I10B10Dx4
textureGradOffset(00p10B00B00B00D
textureProjLodOffset(00g30B00B00D
clamp(30E00E00E
asin(00B
textureProjOffset(00J30B20D00B
texelFetch(00w00D
notEqual(30E30E
imageAtomicOr(01K20D00D
imageAtomicOr(01K20D00E
lessThanEqual(10E10E
inversesqrt(20C
inversesqrt(20B
textureLod(00i20B00B
textureOffset(00u10B00D00B
reflect(00C00C
atomicAdd(00E00E
intBitsToFloat(30D
textureProjGradOffset(00v20B10B10B10D
textureGrad(00X10B10B10B
greaterThanEqual(30E30E
mix(20B20B20F
imageAtomicExchange(01T10D00D00E
imageAtomicExchange(01T10D00D00D
mix(20B20B20B
any(10F
textureProjGradOffset(00d30B10B10B10D
imageLoad(01X10D
textureProjOffset(00I30B10D
textureOffset(00X10B10D
texture(00R10B
imageAtomicXor(01R10D00D00E
imageStore(01M00D30D
radians(00B
textureGatherOffsets(00f20B00B10Dx4
step(10B10B
imageAtomicAdd(01Y10D00D
imageAtomicAdd(01Y10D00E
bitfieldReverse(10E
bitfieldReverse(10D
imageStore(01g00D30B
textureProjGradOffset(00q20B10B10B10D
imageAtomicExchange(01S10D00D00E
atomicXor(00E00E
mix(00C00C00F
textureLodOffset(00g00B00B00D
greaterThan(30B30B
faceforward(20B20B20B
textureSize(00x00D
textureProj(00S30B00B
fma(20B20B20B
textureProjLod(00o10B00B
imageAtomicMin(01J20D00E
outerProduct(30B30B
exp(30B
bitCount(10E
bitCount(10D
log(00B
mix(00F00F00F
imageAtomicCompSwap(01M00D00D00D
imageAtomicAdd(01Q10D00E
acosh(30B
imageAtomicOr(01Y10D00E
imageAtomicOr(01Y10D00D
textureGradOffset(00X10B10B10B10D
texelFetchOffset(00X10D00D10D
packUnorm2x16(10B
texture(00h20B00B
umulExtended(20E20E20E20E
texture(00m20B00B
textureProjGradOffset(00g30B00B00B00D
textureProj(00o30B00B
imageAtomicCompSwap(01T10D00D00E00E
textureCubeLod(00K20B00B
textureSize(00L00D
imageAtomicXor(01L00D00E
imageAtomicCompSwap(01Q10D00D00D
max(20E00E
textureProj(00S30B
dFdy(30B
isinf(10C
isinf(10B
greaterThanEqual(30B30B
texture2DProjLodEXT(00I20B00B
textureProjOffset(00t10B00D00B
acos(10B
textureCube(00K20B00B
lessThan(10B10B
imageAtomicCompSwap(01B10D00E00E
textureSize(00f00D
texelFetchOffset(00h10D00D00D
mod(20C00C
imageAtomicAnd(01g00D00D
textureGatherOffsets(00q10B10Dx4
lessThanEqual(20D20D
textureQueryLod(00k20B
imageAtomicAdd(01B10D00E
textureProjLod(00Y30B00B
imageAtomicAnd(01U20D00D00D
imageAtomicAnd(01U20D00D00E
transpose(B0B
imageAtomicXor(01b20D00E
mix(20F20F20F
smoothstep(00B00B30B
imageAtomicExchange(01M00D00B
imageAtomicExchange(01M00D00D
imageAtomicExchange(01M00D00E
textureQueryLod(00d10B
texelFetch(00N10D00D
textureSize(00a00D
EmitStreamVertex(00D
textureProjOffset(00Y30B20D
textureOffset(00n20B10D
atan(30B
imageAtomicMax(01b20D00E
imageAtomicMax(01b20D00D
ceil(10B
textureSize(00S00D
imageAtomicExchange(01S10D00D00B
atomicCounterDecrement(00G
ceil(30B
imageAtomicAnd(01Q10D00D
imageAtomicAnd(01Q10D00E
imageAtomicAnd(01c20D00E
imageAtomicAnd(01c20D00D
textureSize(00t00D
texture(00f30B
imageSamples(01R
texelFetch(00R10D00D
sign(20B
smoothstep(30B30B30B
imageAtomicExchange(01T10D00D00B
textureGrad(00R10B10B10B
min(00D00D
textureProj(00t10B00B
imageAtomicAdd(01V20D00D00E
ldexp(20B20D
greaterThanEqual(30D30D
imageLoad(01D20D
findLSB(10E
texture(00Z20B00B
imageAtomicXor(01S10D00D00E
imageAtomicXor(01S10D00D00D
cos(10B
texelFetch(00v10D
texture(00e30B
textureSize(00T00D
imageAtomicAnd(01g00D00E
textureSize(00u00D
textureProjGradOffset(00Y30B20B20B20D
noise3(30B
textureGrad(00T20B20B20B
texture1DProj(00g10B00B
textureProjOffset(00d30B10D00B
imageAtomicMin(01B10D00D
imageAtomicMin(01B10D00E
imageAtomicXor(01U20D00D00D
imageAtomicXor(01U20D00D00E
imageAtomicAdd(01h00D00D
imageAtomicAdd(01h00D00E
matrixCompMult(50B50B
equal(30B30B
imageAtomicExchange(01E20D00B
textureLod(00U20B00B
imageAtomicXor(01I20D00E
imageAtomicXor(01I20D00D
textureOffset(00h10B00D
textureLod(00p10B00B
max(20C20C
max(10B10B
imageAtomicCompSwap(01F20D00E00E
asin(10B
sinh(00B
imageAtomicAdd(01g00D00D
imageAtomicCompSwap(01h00D00E00E
textureOffset(00S20B20D
fma(20C20C20C
textureProj(00R20B
greaterThan(10E10E
imageAtomicAnd(01M00D00E
imageAtomicAdd(01B10D00D
imageAtomicAnd(01M00D00D
textureGatherOffsets(00n10B00B10Dx4
EmitVertex(
smoothstep(20B20B20B
textureSamples(00b
textureOffset(00J20B20D
texelFetch(00J20D00D
imageAtomicExchange(01V20D00D00E
imageAtomicExchange(01V20D00D00B
imageAtomicCompSwap(01Y10D00E00E
radians(30B
fract(30B
imageAtomicMin(01H20D00E
uaddCarry(20E20E20E
textureProjGrad(00X30B10B10B
textureSamples(00P
textureProjOffset(00v20B10D
shadow2D(00d20B00B
texelFetchOffset(00o00D00D00D
textureSamples(00V
textureSamples(00W
textureProjGrad(00q30B10B10B
textureGatherOffset(00O10B10D
clamp(10D00D00D
textureLod(00L20B00B
imageAtomicExchange(01A10D00B
imageAtomicCompSwap(01V20D00D00D00D
imageAtomicExchange(01A10D00E
imageAtomicExchange(01A10D00D
imageAtomicXor(01b20D00D
texture(00n20B
ldexp(20C20D
clamp(00E00E00E
length(20B
ldexp(00B00D
bitfieldInsert(00D00D00D00D
textureProjGrad(00Y30B20B20B
imageAtomicAdd(01W20D00D00E
roundEven(30B
roundEven(30C
acosh(20B
atanh(10B
length(20C
clamp(10B10B10B
textureGatherOffset(00L20B10D00D
bitCount(00D
bitCount(00E
floatBitsToInt(30B
max(20B00B
imageAtomicAdd(00z10D00D
texelFetchOffset(00Y20D00D20D
atomicExchange(00E00E
imageAtomicXor(01h00D00D
imageAtomicXor(01h00D00E
ldexp(30C30D
texture(00o00B
texture(00x30B00B
lessThanEqual(20B20B
min(10B00B
textureQueryLod(00f10B
smoothstep(10C10C10C
imageAtomicAnd(01L00D00D
imageAtomicAnd(01L00D00E
mix(30F30F30F
imageAtomicMax(01T10D00D00E
imageAtomicMax(01T10D00D00D
textureGatherOffsets(00O10B10Dx400D
abs(20D
abs(20C
abs(20B
lessThanEqual(10B10B
min(30E30E
imageAtomicOr(01a20D00D
mix(00B00B00B
mix(00B00B00F
textureGather(00s30B00D
textureProj(00I20B
textureLodOffset(00p10B00B00D
unpackDouble2x32(00C
acos(00B
textureGradOffset(00J20B20B20B20D
fma(00C00C00C
texture2DGradEXT(00I10B10B10B
imageAtomicCompSwap(01G20D00D00D
imageAtomicAnd(01I20D00D
texture2DProjGradEXT(00I30B10B10B
fma(30B30B30B
imageAtomicAdd(01L00D00D
texture(00i20B00B
clamp(20C00C00C
imageAtomicMax(01X10D00E
imageLoad(01i00D
mix(30E30E30F
imageAtomicMin(01G20D00D
imageAtomicMin(01G20D00E
imageAtomicExchange(01S10D00D00D
atan(20B
interpolateAtSample(30B00D
dFdxCoarse(30B
texture(00M10B
min(10B10B
textureLodOffset(00h10B00B00D
EndStreamPrimitive(00D
pow(10B10B
texture(00Y20B
imageAtomicXor(01P10D00D
texture(00X10B00B
frexp(00B00D
texture2D(00I10B
imageLoad(01O10D
ceil(20C
ceil(20B
imageAtomicMin(01b20D00E
imageAtomicMin(01b20D00D
imageAtomicMax(01P10D00D
imageAtomicMax(01P10D00E
imageAtomicExchange(01P10D00B
textureProjOffset(00R20B10D
imageStore(01V20D00D30D
subpassLoad(01m00D
textureOffset(00I10B10D
min(20B00B
reflect(00B00B
noise4(10B
sqrt(10C
sqrt(10B
clamp(20E20E20E
textureGradOffset(00g00B00B00B00D
textureGather(00q20B
noise3(00B
imageAtomicOr(01G20D00D
imageAtomicOr(01G20D00E
imageAtomicMin(01C20D00D
imageAtomicMin(01C20D00E
imageAtomicAnd(01F20D00E
imageStore(01a20D30B
textureProjLod(00d30B00B
imageLoad(01H20D
textureProjGradOffset(00I20B10B10B10D
interpolateAtSample(20B00D
reflect(10B10B
refract(10B10B00B
imageAtomicMax(01h00D00D
mix(20C20C20F
imageAtomicExchange(01X10D00D
imageAtomicExchange(01X10D00E
mix(20C20C20C
textureOffset(00v10B10D
imageAtomicExchange(01Q10D00E
imageAtomicExchange(01Q10D00D
imageAtomicMin(01P10D00D
sinh(30B
textureSize(00m00D
imageAtomicMin(01N00D00E
imageAtomicMin(01N00D00D
textureQueryLod(00e20B
asinh(20B
imageAtomicAdd(01C20D00D
imageAtomicCompSwap(01I20D00D00D
textureProj(00O20B
imageAtomicCompSwap(01M00D00E00E
frexp(10B10D
inverse(50B
dot(10B10B
noise2(00B
textureProjGradOffset(00o10B00B00B00D
radians(20B
atomicCompSwap(00E00E00E
textureGrad(00I00B00B00B
textureGrad(00Y20B20B20B
imageAtomicCompSwap(01Z10D00D00D
imageAtomicExchange(01W20D00D00B
textureOffset(00o00B00D00B
imageAtomicExchange(01W20D00D00E
imageAtomicExchange(01W20D00D00D
ftransform(
textureProj(00X20B
textureProjOffset(00n30B10D
imageAtomicOr(01W20D00D00E
imageAtomicOr(01W20D00D00D
greaterThanEqual(20E20E
textureProj(00M20B
texture3DProjLod(00J30B00B
isinf(30C
imageAtomicAdd(01Z10D00E
imageAtomicAdd(01Z10D00D
mix(10D10D10F
textureProjGrad(00g10B00B00B
log(20B
imageAtomicMax(01D20D00E
imageAtomicMax(01D20D00D
textureOffset(00h10B00D00B
modf(30B30B
roundEven(20C
roundEven(20B
outerProduct(30B10B
textureProj(00J30B
imageAtomicOr(01F20D00E
imageAtomicOr(01F20D00D
textureLodOffset(00t00B00B00D
floatBitsToInt(20B
texelFetch(00U20D00D
max(00D00D
round(20C
atomicMin(00E00E
textureGradOffset(00v10B10B10B10D
textureGrad(00n20B10B10B
imageLoad(01S10D00D
textureGatherOffsets(00a20B10Dx4
max(20E20E
imageAtomicCompSwap(01F20D00D00D
abs(10D
abs(10B
abs(10C
imageAtomicAdd(01V20D00D00D
modf(30C30C
imageAtomicMin(01T10D00D00E
imageAtomicMin(01T10D00D00D
textureGrad(00i20B00B00B
textureProj(00g10B
equal(20B20B
textureProjLodOffset(00X20B00B10D
max(30C00C
texture(00U20B00B
textureProj(00I30B
mix(00E00E00F
imageAtomicCompSwap(01h00D00D00D
mix(00D00D00F
textureProjOffset(00q20B10D
texture(00i20B
textureGradOffset(00a20B10B10B10D
smoothstep(00B00B20B
textureLod(00s30B00B
imageAtomicOr(01C20D00D
imageAtomicOr(01C20D00E
imageAtomicXor(01g00D00E
notEqual(30B30B
textureGatherOffset(00f20B00B10D
imageAtomicAnd(01N00D00D
imageAtomicAnd(01N00D00E
imageSize(00z
mod(10C10C
imageAtomicXor(01g00D00D
faceforward(00C00C00C
textureGrad(00a20B10B10B
dFdxCoarse(00B
imageAtomicMin(01a20D00D
texture(00J20B00B
refract(20B20B00B
ceil(30C
noise1(30B
log2(30B
textureProjGrad(00d30B10B10B
mod(20C20C
fract(30C
texelFetch(00t00D00D
imageAtomicXor(01L00D00D
max(30E30E
noise4(00B
distance(10C10C
textureProjLodOffset(00J30B00B20D
imageLoad(01B10D
imageAtomicMax(01H20D00E
imageAtomicMax(01H20D00D
imageStore(01h00D30D
imageAtomicExchange(01O10D00D
texelFetch(00c20D00D
sqrt(00B
sqrt(00C
textureProjLod(00R30B00B
noise3(10B
texelFetch(00q10D
imageAtomicAnd(01F20D00D
textureLod(00m20B00B
textureProjOffset(00m30B00D00B
textureProjGrad(00v30B10B10B
clamp(20D20D20D
imageAtomicMin(01P10D00E
imageAtomicAdd(01C20D00E
clamp(00C00C00C
imageAtomicXor(01N00D00D
imageAtomicXor(01N00D00E
texture(00x30B
max(10E00E
imageLoad(01c20D
textureGrad(00U20B10B10B
imageLoad(00z10D
clamp(30C00C00C
textureGatherOffsets(00a20B10Dx400D
sinh(20B
matrixCompMult(E0BE0B
fwidthFine(00B
textureGradOffset(00m20B00B00B00D
imageAtomicMin(01K20D00E
textureQueryLevels(00p
asinh(30B
cross(20C20C
textureGather(00a20B
textureProjGradOffset(00O20B10B10B10D
pow(30B30B
imageAtomicCompSwap(01G20D00E00E
smoothstep(10B10B10B
textureProj(00O30B
textureQueryLod(00R10B
imageAtomicAdd(01R10D00D00D
imageAtomicAdd(01R10D00D00E
imageAtomicExchange(01E20D00D
imageAtomicMin(01Q10D00E
imageAtomicMin(01Q10D00D
imageAtomicExchange(01E20D00E
isnan(00B
isnan(00C
imulExtended(10D10D10D10D
textureProjGrad(00o10B00B00B
imageAtomicMax(01i00D00D
imageAtomicMax(01i00D00E
refract(10C10C00B
min(00E00E
imageStore(01T10D00D30E
texture2DProj(00I30B
textureGradOffset(00I10B10B10B10D
textureLodOffset(00J20B00B20D
notEqual(20B20B
atomicCompSwap(00D00D00D
textureOffset(00i20B00D
dFdyFine(00B
textureLod(00a20B00B
textureProj(00N30B
refract(30C30C00B
equal(30D30D
imageStore(01D20D30D
packSnorm2x16(10B
floatBitsToUint(30B
textureOffset(00R10B10D
textureProjGrad(00q20B10B10B
textureProjGradOffset(00R20B10B10B10D
ldexp(30B30D
max(30B00B
atomicCounterOr(00G00E
imageAtomicMin(01i00D00E
step(30B30B
textureProj(00I30B00B
imageAtomicExchange(01D20D00E
textureOffset(00g00B00D00B
imageAtomicExchange(01D20D00B
imageAtomicMin(01g00D00E
imageAtomicMax(01c20D00D
abs(00D
abs(00C
abs(00B
textureLod(00R10B00B
dFdxCoarse(10B
texture1D(00g00B
frexp(10C10D
imageAtomicAdd(01g00D00E
texture2DLod(00I10B00B
textureProjGradOffset(00X20B10B10B10D
imageAtomicMax(01Z10D00D
texture(00s30B
EndPrimitive(
step(00B30B
round(20B
equal(30E30E
imageAtomicCompSwap(01R10D00D00E00E
step(00C20C
dot(00C00C
max(30C30C
atomicOr(00D00D
texture2DProj(00M20B
notEqual(10D10D
imageAtomicExchange(01Z10D00D
textureSize(00V
imageAtomicAnd(01h00D00D
min(20C00C
imageAtomicAdd(01G20D00E
imageAtomicAdd(01G20D00D
findLSB(30D
findLSB(30E
textureProj(00X20B00B
shadow2D(00d20B
textureGatherOffset(00U20B10D
imageAtomicExchange(01Z10D00E
faceforward(10B10B10B
imageAtomicAnd(01h00D00E
min(10D00D
imageAtomicCompSwap(01J20D00D00D
all(20F
imageSize(01J
imageSize(01K
textureOffset(00t00B00D00B
imageSize(01I
packHalf2x16(10B
textureProj(00I20B00B
imageSize(01L
imageSize(01M
imageSize(01B
imageSize(01C
imageSize(01A
imageSize(01F
imageSize(01G
imageSize(01D
imageSize(01E
imageAtomicExchange(01L00D00B
imageAtomicExchange(01L00D00E
texelFetch(00X10D00D
notEqual(30F30F
imageSize(01R
imageSize(01S
imageSize(01P
imageSize(01Q
imageSize(01V
textureQueryLod(00g00B
imageSize(01T
imageSize(01U
imageSize(01h
imageSize(01i
fract(20C
fract(20B
textureGatherOffset(00X10B10D
imageSize(01c
imageStore(01R10D00D30B
imageSize(01a
imageSize(01f
texture2DProjGradEXT(00I20B10B10B
imageSize(01d
textureLod(00S20B00B
step(30C30C
imageAtomicMin(01J20D00D
textureGather(00x30B
mix(30B30B30F
mix(30B30B30B
textureGather(00Z20B00D
imageAtomicAnd(01Z10D00E
imageAtomicAnd(01Z10D00D
imageStore(01E20D30E
sqrt(30C
sqrt(30B
exp(00B
max(30D30D
interpolateAtCentroid(10B
texture(00q10B
textureSize(00M00D
textureSamples(00c
mix(10F10F10F
textureGradOffset(00U20B10B10B10D
textureGradOffset(00O10B10B10B10D
textureProj(00M30B
textureGradOffset(00L20B10B10B10D
imageAtomicExchange(01V20D00D00D
imageAtomicExchange(01J20D00B
imageAtomicExchange(01J20D00E
imageAtomicExchange(01J20D00D
textureQueryLod(00l20B
imageAtomicOr(01M00D00E
dot(20B20B
textureProjGrad(00v20B10B10B
textureProjLod(00S30B00B
textureProjGrad(00R20B10B10B
imageAtomicAnd(01i00D00E
imageAtomicAnd(01i00D00D
imageAtomicMax(00z10D00E
imageAtomicMax(00z10D00D
normalize(30C
normalize(30B
textureOffset(00O10B10D
textureProjGrad(00I20B10B10B
textureGather(00e20B
imageAtomicMax(01V20D00D00E
texture2D(00M10B
imageAtomicAdd(01a20D00E
fwidthFine(30B
textureGather(00K20B00D
textureCubeLodEXT(00K20B00B
textureGather(00T20B00D
textureProj(00N20B
textureQueryLod(00I10B
imageAtomicCompSwap(01A10D00E00E
dFdyFine(10B
modf(10C10C
imageAtomicMax(01E20D00D
imageAtomicMax(01E20D00E
textureProjLodOffset(00X30B00B10D
imageStore(01W20D00D30E
textureProjLod(00m30B00B
textureProjOffset(00g30B00D00B
texelFetchOffset(00U20D00D10D
imageAtomicCompSwap(00z10D00E00E
imageAtomicMin(01D20D00E
textureProjGradOffset(00q30B10B10B10D
textureGradOffset(00d20B10B10B10D
fwidthCoarse(20B
imageAtomicCompSwap(01N00D00E00E
textureProjOffset(00d30B10D
imageAtomicOr(01T10D00D00E
imageAtomicOr(01T10D00D00D
equal(20F20F
mix(20C20C00C
usubBorrow(10E10E10E
equal(10B10B
textureLodOffset(00U20B00B10D
isnan(10C
isnan(10B
imageAtomicMin(01H20D00D
imageAtomicXor(01A10D00D
imageAtomicXor(01A10D00E
imageAtomicCompSwap(01C20D00D00D
textureGrad(00R00B00B00B
atomicMin(00D00D
textureSize(00X00D
greaterThan(10B10B
mix(00C00C00C
noise1(20B
clamp(30D00D00D
mix(20E20E20F
floatBitsToInt(10B
textureProjOffset(00R30B10D00B
textureGather(00U20B00D
floatBitsToInt(00B
imageLoad(01a20D
floatBitsToUint(00B
min(30C30C
textureSamples(00Q
textureGradOffset(00i20B00B00B00D
imageAtomicXor(00z10D00D
texture2DRectProj(00O20B
modf(20C20C
tan(20B
floor(00C
floor(00B
imageAtomicMax(01O10D00E
imageAtomicMax(01O10D00D
mod(30C30C
textureOffset(00t00B00D
texture3DLod(00J20B00B
imageLoad(01Q10D
texture(00R10B00B
imageStore(01Y10D30D
modf(00B00B
notEqual(20D20D
imageAtomicExchange(01R10D00D00E
imageAtomicExchange(01R10D00D00D
ldexp(10C10D
imageAtomicExchange(01F20D00E
determinant(A0B
imageAtomicExchange(01i00D00D
textureLodOffset(00i20B00B00D
imageAtomicExchange(01i00D00B
shadow1DLod(00m20B00B
imageAtomicOr(01I20D00E
distance(00C00C
isnan(30B
textureProjOffset(00o30B00D
lessThanEqual(30D30D
textureProj(00M30B00B
texture2DProj(00M30B
atomicCounterMax(00G00E
atomicCounterExchange(00G00E
textureGrad(00I10B10B10B
step(00B20B
texture2DProjLod(00I20B00B
step(00C30C
yuv_2_rgb(20B00H
texelFetch(00b10D00D
textureProj(00J30B00B
textureGather(00R10B
imageAtomicCompSwap(01c20D00D00D
imageAtomicOr(01V20D00D00D
imageAtomicOr(01V20D00D00E
imageAtomicExchange(01P10D00D
imageLoad(01L00D
min(10D10D
all(30F
imageAtomicExchange(01P10D00E
imageAtomicAnd(01S10D00D00E
imageAtomicAnd(01S10D00D00D
bitfieldReverse(20D
bitfieldReverse(20E
imageAtomicExchange(01I20D00D
imageAtomicExchange(01I20D00E
imageAtomicExchange(01I20D00B
imageAtomicExchange(01c20D00E
textureGatherOffsets(00X10B10Dx4
texture(00u20B
textureGather(00v20B
fract(10B
fract(10C
textureGatherOffset(00O10B10D00D
textureQueryLod(00K20B
textureLodOffset(00I10B00B10D
imageAtomicCompSwap(01S10D00D00E00E
imageAtomicXor(01c20D00E
imageAtomicXor(01c20D00D
textureOffset(00U20B10D
min(30B00B
atomicAnd(00D00D
exp(10B
bitCount(30E
bitCount(30D
unpackUnorm2x16(00E
sqrt(20B
sqrt(20C
textureGrad(00L20B10B10B
interpolateAtCentroid(00B
textureSize(00o00D
textureProjGrad(00o30B00B00B
imageAtomicOr(01Q10D00D
packUnorm4x8(30B
imageAtomicMax(01Q10D00E
texelFetch(00P10D00D
imageAtomicCompSwap(01i00D00D00D
textureGatherOffsets(00d10B00B10Dx4
texture(00O10B
imageAtomicMin(01M00D00D
imageAtomicMin(01M00D00E
texture(00e30B00B
imageAtomicMin(01O10D00E
imageAtomicMin(01O10D00D
imageAtomicMax(01Q10D00D
imageAtomicMax(01X10D00D
textureGrad(00u10B00B00B
fwidthFine(20B
textureQueryLod(00o00B
imageAtomicAnd(01E20D00E
imageAtomicAnd(01E20D00D
normalize(00B
normalize(00C
clamp(10C00C00C
imageAtomicOr(01A10D00E
imageAtomicOr(01A10D00D
imageAtomicCompSwap(01Q10D00E00E
atomicMax(00D00D
textureProjGrad(00m30B00B00B
imageAtomicAnd(01R10D00D00E
floatBitsToUint(10B
textureLod(00J20B00B
textureGrad(00O10B10B10B
dFdyFine(20B
imageLoad(01W20D00D
textureSize(00I00D
texelFetchOffset(00R10D00D10D
dFdxFine(10B
imageAtomicExchange(01D20D00D
textureLodOffset(00X10B00B10D
texture(00T20B00B
log(30B
notEqual(20F20F
allInvocationsEqual(00F
imageAtomicMax(01K20D00D
imageAtomicMax(01K20D00E
dFdyCoarse(30B
textureProjLod(00R20B00B
notEqual(30D30D
fwidthCoarse(30B
textureProjOffset(00I20B10D
textureQueryLevels(00l
textureQueryLevels(00m
textureQueryLevels(00o
textureQueryLevels(00h
textureQueryLevels(00i
textureQueryLevels(00k
textureQueryLevels(00d
textureQueryLevels(00e
textureQueryLevels(00f
textureQueryLevels(00g
textureQueryLevels(00a
atomicCounterMin(00G00E
textureGradOffset(00u10B00B00B00D
textureQueryLevels(00x
textureQueryLevels(00t
textureQueryLevels(00u
imageAtomicMin(01K20D00D
imulExtended(20D20D20D20D
any(30F
distance(30B30B
textureQueryLevels(00s
textureQueryLevels(00L
textureQueryLevels(00I
textureQueryLevels(00J
textureQueryLevels(00K
imageAtomicExchange(01L00D00D
texture3D(00J20B00B
texture1DLod(00g00B00B
textureQueryLevels(00X
textureQueryLevels(00Y
textureQueryLevels(00Z
dot(30B30B
textureQueryLevels(00T
textureQueryLevels(00U
textureQueryLevels(00R
textureQueryLevels(00S
usubBorrow(20E20E20E
textureProj(00t30B00B
shadow1DProj(00m30B00B
clamp(30B00B00B
textureGatherOffsets(00O10B10Dx4
texture2DRectProj(00O30B
max(10D00D
textureGradOffset(00n20B10B10B10D
clamp(00D00D00D
floor(30B
floor(30C
imageStore(01P10D30D
textureProjGradOffset(00S30B20B20B20D
reflect(30C30C
imageAtomicOr(01D20D00E
textureGatherOffset(00v10B10D
imageAtomicOr(01D20D00D
imageStore(01F20D30B
packDouble2x32(10E
clamp(10B00B00B
texelFetchOffset(00S20D00D20D
lessThan(10D10D
textureSize(00g00D
textureGatherOffset(00U20B10D00D
textureGatherOffset(00q10B10D00D
textureGather(00I10B00D
texture1DProjLod(00g30B00B
texelFetch(00V10D00D
imageAtomicExchange(01h00D00E
imageAtomicExchange(01h00D00D
atan(30B30B
imageAtomicExchange(01h00D00B
imageAtomicMax(01a20D00D
imageAtomicMax(01a20D00E
textureProjLod(00g30B00B
max(00B00B
imageAtomicOr(01J20D00E
imageAtomicOr(01J20D00D
imageAtomicMax(01F20D00E
imageAtomicMax(01F20D00D
exp2(20B
smoothstep(30C30C30C
imageAtomicExchange(00z10D00B
imageAtomicExchange(00z10D00E
imageAtomicExchange(00z10D00D
textureProj(00q20B
textureProjLod(00t10B00B
imageAtomicMin(01c20D00D
imageAtomicMin(01c20D00E
textureSize(00k00D
reflect(20B20B
imageAtomicXor(01V20D00D00E
imageAtomicXor(01V20D00D00D
equal(10F10F
acos(30B
textureVideoWEBGL(00y10B
dFdx(10B
bitfieldReverse(30E
bitfieldReverse(30D
imageAtomicOr(01Z10D00D
imageAtomicOr(01Z10D00E
texture1DProj(00g30B
textureGatherOffsets(00v10B10Dx400D
fract(00C
fract(00B
min(30E00E
imageAtomicOr(01Q10D00E
interpolateAtOffset(20B10B
imageAtomicOr(01c20D00D
imageAtomicOr(01c20D00E
reflect(30B30B
interpolateAtCentroid(30B
textureGather(00s30B
imageAtomicXor(01X10D00E
imageAtomicXor(01X10D00D
memoryBarrier(
texture1D(00g00B00B
pow(00B00B
mod(00B00B
faceforward(30C30C30C
imageAtomicExchange(01K20D00D
roundEven(10B
roundEven(10C
atanh(30B
textureLod(00K20B00B
bitCount(20D
bitCount(20E
texelFetch(00L20D00D
dFdxFine(00B
imageAtomicAnd(01K20D00E
distance(20B20B
textureGradOffset(00q10B10B10B10D
uaddCarry(30E30E30E
textureSize(00U00D
textureProjOffset(00o10B00D00B
atomicCounterXor(00G00E
imageAtomicOr(01g00D00D
imageAtomicOr(01g00D00E
imageAtomicMin(01L00D00E
smoothstep(20C20C20C
imageAtomicCompSwap(01U20D00D00D00D
atomicOr(00E00E
mix(10B10B10F
reflect(10C10C
mix(10B10B10B
textureProj(00Y30B00B
imageAtomicMax(01I20D00D
imageAtomicMax(01I20D00E
frexp(20B20D
textureGatherOffset(00I10B10D00D
notEqual(20E20E
textureLodOffset(00d20B00B10D
inverse(A0B
textureProjGrad(00X20B10B10B
imageLoad(01J20D
textureSize(00Y00D
atan(20B20B
usubBorrow(00E00E00E
imageAtomicXor(01M00D00E
textureGatherOffsets(00L20B10Dx400D
dFdyFine(30B
textureQueryLod(00s20B
texture(00v10B
textureGatherOffsets(00U20B10Dx4
subpassLoad(01n00D
imageAtomicCompSwap(01c20D00E00E
textureProjLodOffset(00g10B00B00D
step(10C10C
textureQueryLod(00x20B
fma(10B10B10B
smoothstep(00B00B10B
imageAtomicCompSwap(01a20D00D00D
imageSize(01N
textureLod(00u10B00B
textureProjGradOffset(00m30B00B00B00D
fwidthCoarse(00B
dFdyCoarse(20B
textureProjGradOffset(00o30B00B00B00D
imageStore(01b20D30D
textureProj(00g30B00B
bitfieldExtract(00E00D00D
distance(30C30C
any(20F
textureLod(00g00B00B
sin(10B
textureSize(00N00D
mod(20B20B
imageAtomicOr(01h00D00E
imageAtomicOr(01h00D00D
textureGrad(00k30B20B20B
textureProjOffset(00o10B00D
imageAtomicMin(01A10D00E
imageAtomicMin(01A10D00D
textureGradOffset(00f30B10B10B10D
max(20D20D
max(10D10D
textureGradOffset(00t00B00B00B00D
refract(30B30B00B
floor(20C
floor(20B
texelFetchOffset(00t00D00D00D
imageAtomicOr(01a20D00E
matrixCompMult(F0BF0B
umulExtended(10E10E10E10E
texture(00d20B00B
umulExtended(30E30E30E30E
textureGradOffset(00Y20B20B20B20D
textureGatherOffset(00a20B10D
textureGrad(00f30B10B10B
atomicCounterSubtract(00G00E
imageAtomicXor(01C20D00E
modf(20B20B
imageAtomicAnd(01Y10D00D
imageAtomicAnd(01Y10D00E
imageAtomicAdd(01i00D00E
imageAtomicAdd(01i00D00D
noise1(00B
imageLoad(01M00D
imageAtomicCompSwap(01L00D00E00E
texture(00y10B
length(30C
length(30B
imageStore(01B10D30E
mod(30B30B
mix(10C10C10F
imageAtomicMin(00z10D00E
imageAtomicMin(00z10D00D
imageStore(01I20D30B
exp2(30B
allInvocations(00F
max(20C00C
texture3DProj(00J30B00B
imageAtomicAdd(01K20D00E
imageAtomicAdd(01K20D00D
textureProjLod(00X30B00B
textureProjGradOffset(00I30B10B10B10D
imageAtomicAdd(01W20D00D00D
cosh(30B
textureProj(00q30B
textureOffset(00S20B20D00B
usubBorrow(30E30E30E
imageAtomicMax(01W20D00D00E
imageAtomicMax(01W20D00D00D
textureProjOffset(00R20B10D00B
imageSize(01H
textureOffset(00i20B00D00B
texture3DProj(00J30B
matrixCompMult(B0BB0B
lessThan(30B30B
cross(20B20B
imageSize(01O
textureGrad(00q10B10B10B
clamp(20B00B00B
dFdx(00B
findLSB(00D
textureProjLodOffset(00o30B00B00D
imageAtomicXor(01i00D00E
textureProj(00R20B00B
acos(20B
texelFetch(00r00D
max(20B20B
lessThan(20E20E
textureLod(00X10B00B
equal(30F30F
sign(00C
cosh(00B
bitfieldExtract(00D00D00D
imageAtomicMin(01E20D00D
imageAtomicMin(01E20D00E
textureLod(00Z20B00B
sign(00D
textureOffset(00Y20B20D
imageAtomicXor(01Q10D00D
imageAtomicXor(01Q10D00E
transpose(60B
imageStore(01G20D30D
imageAtomicAdd(01O10D00D
imageAtomicAdd(01O10D00E
faceforward(00B00B00B
imageLoad(01Z10D
imageAtomicOr(01O10D00E
imageAtomicOr(01O10D00D
imageAtomicAdd(01b20D00D
interpolateAtCentroid(20B
textureProjLodOffset(00R30B00B10D
textureGrad(00h10B00B00B
imageAtomicExchange(01U20D00D00B
texture1DProj(00g30B00B
textureQueryLod(00h00B
imageAtomicExchange(01U20D00D00E
modf(00C00C
textureProjLod(00t30B00B
textureOffset(00o00B00D
imageAtomicExchange(01U20D00D00D
imageStore(01H20D30E
textureGather(00U20B
texelFetch(00Q20D00D
roundEven(00C
roundEven(00B
texelFetchOffset(00O10D10D
atanh(20B
clamp(10E00E00E
dFdxFine(30B
imageAtomicAdd(01L00D00E
textureQueryLod(00J20B
textureProjOffset(00X30B10D
texture2DProjLod(00I30B00B
interpolateAtOffset(10B10B
max(10C10C
texelFetch(00g00D00D
abs(30B
bitfieldInsert(10E10E00D00D
packSnorm4x8(30B
mix(10B10B00B
imageSize(01b
clamp(30D30D30D
textureGatherOffsets(00L20B10Dx4
imageAtomicMax(01c20D00E
mod(10C00C
imageAtomicMax(01G20D00D
imageAtomicMax(01G20D00E
determinant(F0B
transpose(A0B
pow(20B20B
imageSize(01g
imageAtomicMax(01B10D00D
imageAtomicMax(01B10D00E
imageAtomicExchange(01G20D00B
imageSize(01e
imageAtomicExchange(01G20D00D
imageAtomicExchange(01G20D00E
imageLoad(01Y10D
imageAtomicMax(01g00D00D
imageAtomicMax(01g00D00E
textureProj(00v30B
textureProjGrad(00O20B10B10B
texture(00s30B00B
log2(20B
dot(30C30C
fwidthCoarse(10B
textureProjOffset(00I20B10D00B
imageAtomicAnd(01T10D00D00D
imageAtomicAnd(01T10D00D00E
notEqual(10F10F
smoothstep(00B00B00B
textureProjLodOffset(00d30B00B10D
imageAtomicAnd(01P10D00E
imageAtomicAnd(01P10D00D
textureProjLodOffset(00I30B00B10D
bitfieldInsert(10D10D00D00D
imageAtomicCompSwap(01N00D00D00D
imageAtomicCompSwap(01L00D00D00D
textureGather(00k30B
texture(00J20B
lessThanEqual(10D10D
textureProjOffset(00o30B00D00B
textureSize(00d00D
sin(00B
uaddCarry(10E10E10E
mix(10C10C00C
atomicCounterIncrement(00G
imageAtomicAdd(01J20D00D
imageAtomicAdd(01J20D00E
imageAtomicCompSwap(01S10D00D00D00D
imageStore(01Q10D30E
textureProj(00o10B00B
imageAtomicAdd(01U20D00D00D
imageAtomicAdd(01U20D00D00E
textureProjOffset(00m30B00D
imageAtomicExchange(01Y10D00B
equal(10E10E
imageAtomicExchange(01Y10D00E
imageAtomicExchange(01Y10D00D
imageAtomicExchange(01O10D00B
imageAtomicExchange(01O10D00E
textureProjOffset(00J30B20D
imageSize(01W
imageAtomicXor(01D20D00E
notEqual(10E10E
min(10C10C
textureProjGrad(00t10B00B00B
imageAtomicExchange(01N00D00B
textureGather(00q20B00D
imageAtomicExchange(01N00D00E
imageAtomicExchange(01N00D00D
textureGatherOffsets(00q10B10Dx400D
imageAtomicCompSwap(01O10D00D00D
shadow1DProjLod(00m30B00B
imageAtomicMin(01i00D00D
texture(00u20B00B
textureLodOffset(00R10B00B10D
trunc(10B
trunc(10C
imageAtomicAdd(01S10D00D00D
texelFetch(00u10D00D
dot(20C20C
noise4(30B
textureGather(00f20B
noise1(10B
textureProjGrad(00g30B00B00B
shadow2DProj(00d30B
textureProj(00d30B00B
sign(10B
max(00E00E
texture(00a20B00B
textureProj(00o10B
refract(20C20C00B
textureProj(00M20B00B
imageLoad(01A10D
textureProjOffset(00X30B10D00B
exp2(00B
imageAtomicExchange(01H20D00B
texelFetchOffset(00u10D00D00D
imageAtomicCompSwap(01H20D00E00E
imageAtomicExchange(01H20D00E
imageAtomicExchange(01H20D00D
textureGatherOffset(00q10B10D
textureGather(00a20B00D
imageStore(01S10D00D30D
ldexp(00C00D
textureSize(00s00D
imageAtomicXor(01P10D00E
imageAtomicOr(01I20D00D
texture(00N10B00B
imageAtomicCompSwap(01Y10D00D00D
textureProjGrad(00I30B10B10B
textureOffset(00d20B10D
dFdx(30B
textureGatherOffsets(00U20B10Dx400D
imageAtomicMin(01V20D00D00D
imageAtomicMin(01V20D00D00E
textureProjGradOffset(00t30B00B00B00D
min(20E20E
asin(20B
imageAtomicCompSwap(01U20D00D00E00E
texture(00l30B00B
texture1DProjLod(00g10B00B
fwidth(10B
dFdy(00B
shadow2DLod(00d20B00B
texture1DProj(00g10B
lessThan(30E30E
imulExtended(30D30D30D30D
transpose(70B
imulExtended(00D00D00D00D
imageAtomicAdd(01F20D00D
imageAtomicAdd(01F20D00E
texture(00S20B00B
textureLod(00Y20B00B
imageAtomicExchange(01c20D00D
faceforward(10C10C10C
imageStore(01Z10D30E
textureQueryLod(00u00B
imageAtomicExchange(01c20D00B
min(20D00D
imageAtomicCompSwap(01P10D00D00D
uintBitsToFloat(00E
dFdxFine(20B
imageAtomicMin(01L00D00D
imageAtomicExchange(01g00D00D
bitfieldInsert(20D20D00D00D
mix(30B30B00B
textureQueryLod(00U10B
tanh(00B
subpassLoad(01o00D
imageAtomicMax(01N00D00E
imageAtomicMax(01N00D00D
max(10C00C
matrixCompMult(D0BD0B
imageAtomicXor(01M00D00D
imageAtomicAnd(01X10D00E
shadow2DProjLod(00d30B00B
imageAtomicAnd(01X10D00D
min(30B30B
reflect(20C20C
texelFetch(00h10D00D
memoryBarrierAtomicCounter(
bitfieldInsert(00E00E00D00D
imageAtomicAdd(01b20D00E
imageAtomicMin(01a20D00E
textureGrad(00d20B10B10B
atan(10B
imageAtomicCompSwap(01g00D00D00D
clamp(30C30C30C
textureProj(00v20B
step(00B10B
textureProjLod(00I20B00B
rgb_2_yuv(20B00H
imageLoad(01P10D
texture(00T20B
log2(10B
imageAtomicAnd(01D20D00D
imageAtomicAnd(01D20D00E
findLSB(20E
findLSB(20D
imageAtomicCompSwap(01B10D00D00D
imageAtomicOr(01X10D00D
imageAtomicOr(01X10D00E
noise2(30B
imageAtomicOr(01U20D00D00E
greaterThanEqual(10B10B
clamp(10D10D10D
texelFetch(00M10D00D
textureQueryLod(00Y20B
transpose(F0B
textureOffset(00Y20B20D00B
textureGradOffset(00S20B20B20B20D
imageAtomicOr(01U20D00D00D
clamp(30E30E30E
textureSize(00R00D
acosh(10B
imageLoad(01b20D
imageAtomicCompSwap(01Z10D00E00E
textureOffset(00L20B10D00B
mod(20B00B
imageLoad(01U20D00D
textureProjLod(00J30B00B
subpassLoad(01k
transpose(90B
mix(30C30C00C
subpassLoad(01l
atomicAnd(00E00E
max(20D00D
texelFetchOffset(00I10D00D10D
imageAtomicMin(01Z10D00D
imageAtomicMin(01Z10D00E
imageAtomicCompSwap(01i00D00E00E
imageAtomicCompSwap(01K20D00D00D
textureQueryLod(00L10B
imageStore(01J20D30D
atomicCounter(00G
textureGrad(00m20B00B00B
noise3(20B
bitfieldInsert(30D30D00D00D
min(10C00C
greaterThan(10D10D
bitfieldExtract(10E00D00D
textureGradOffset(00h10B00B00B00D
imageAtomicMax(01V20D00D00D
texture2D(00I10B00B
greaterThan(20D20D
imageAtomicAnd(01W20D00D00D
imageAtomicAnd(01W20D00D00E
textureProjLodOffset(00t10B00B00D
textureProjOffset(00O20B10D
trunc(00B
length(10C
length(10B
imageLoad(01R10D00D
imageAtomicAdd(01H20D00D
imageAtomicAdd(01H20D00E
subpassLoad(01j
dot(00B00B
tan(30B
textureLod(00T20B00B
textureProjGrad(00R30B10B10B
exp2(10B
textureProjOffset(00X20B10D00B
textureProjGradOffset(00X30B10B10B10D
imageAtomicAnd(01B10D00D
imageStore(01U20D00D30B
matrixCompMult(A0BA0B
textureGrad(00S20B20B20B
round(30B
round(30C
anyInvocation(00F
textureGrad(00x30B20B20B
imageAtomicCompSwap(01D20D00E00E
textureProjLod(00o30B00B
smoothstep(00C00C10C
interpolateAtSample(00B00D
dFdx(20B
texture(00L20B
barrier(
imageAtomicOr(01N00D00E
imageAtomicOr(01N00D00D
imageAtomicAdd(01a20D00D
textureGather(00k30B00D
findMSB(20D
textureGatherOffset(00L20B10D
imageAtomicMin(01S10D00D00D
imageAtomicMin(01S10D00D00E
textureProjOffset(00S30B20D00B
imageAtomicAdd(01D20D00D
normalize(10C
unpackSnorm4x8(00E
imageLoad(01C20D
imageAtomicMax(01C20D00D
imageAtomicMax(01C20D00E
textureGather(00l30B00B
normalize(10B
asin(30B
isnan(20B
isnan(20C
fwidth(00B
dFdy(10B
imageAtomicAdd(01P10D00E
imageAtomicAdd(01P10D00D
max(30E00E
textureLod(00d20B00B
textureOffset(00q10B10D
imageAtomicAdd(01c20D00E
imageAtomicAdd(01c20D00D
mod(10B00B
texture(00g00B00B
uintBitsToFloat(10E
textureProjOffset(00t30B00D
matrixCompMult(70B70B
imageAtomicAdd(01I20D00D
imageAtomicMax(01M00D00D
imageAtomicMax(01M00D00E
textureLod(00k30B00B
imageAtomicAdd(01E20D00D
textureLodOffset(00Y20B00B20D
refract(00C00C00B
log2(00B
tanh(10B
imageAtomicMin(01I20D00E
textureLod(00h10B00B
textureGather(00O20B00D
clamp(00B00B00B
textureGather(00d10B
textureOffset(00p10B00D00B
clamp(10C10C10C
imageAtomicXor(01B10D00D
outerProduct(20B10B
textureProjOffset(00t10B00D
isinf(20C
textureGrad(00e30B20B20B
textureSize(00J00D
textureQueryLod(00Z20B
dot(10C10C
imageAtomicXor(01K20D00E
imageAtomicXor(01K20D00D
textureProjGrad(00n30B10B10B
imageAtomicMin(01U20D00D00E
imageAtomicMin(01U20D00D00D
imageAtomicAdd(01Q10D00D
texture2DProjLodEXT(00I30B00B
imageAtomicXor(01T10D00D00D
imageAtomicXor(01T10D00D00E
imageAtomicAnd(01b20D00D
step(00B00B
texture2DLodEXT(00I10B00B
texture(00K20B00B
textureProjGradOffset(00n30B10B10B10D
textureGrad(00J20B20B20B
imageAtomicCompSwap(01V20D00D00E00E
textureOffset(00U20B10D00B
intBitsToFloat(10D
min(20C20C
findLSB(10D
textureProjLodOffset(00Y30B00B20D
imageAtomicMax(01h00D00E
texture3D(00J20B
imageAtomicAdd(01X10D00E
faceforward(20C20C20C
imageAtomicAnd(01O10D00E
imageAtomicAdd(01X10D00D
imageAtomicXor(01W20D00D00D
imageAtomicXor(01W20D00D00E
textureGather(00n10B00B
imageAtomicXor(01Z10D00E
imageAtomicXor(01Z10D00D
textureGather(00X10B00D
imageAtomicMax(01L00D00E
imageAtomicMax(01L00D00D
imageAtomicXor(01G20D00E
imageAtomicXor(01G20D00D
textureOffset(00a20B10D
imageAtomicExchange(01X10D00B
textureGatherOffsets(00v10B10Dx4
texture2DProj(00I30B00B
textureQueryLod(00X10B
imageAtomicAnd(01I20D00E
textureCubeGradEXT(00K20B20B20B
min(00B00B
textureGradOffset(00o00B00B00B00D
imageAtomicExchange(01Q10D00B
mix(30C30C30F
mix(30C30C30C
degrees(00B
imageAtomicMax(01J20D00E
imageAtomicMax(01J20D00D
imageAtomicMin(01D20D00D
textureGatherOffsets(00R10B10Dx4
atomicExchange(00D00D
textureOffset(00m20B00D00B
textureOffset(00f30B10D
imageStore(01c20D30E
imageAtomicExchange(01a20D00D
imageAtomicExchange(01a20D00E
imageAtomicExchange(01a20D00B
matrixCompMult(60B60B
imageAtomicCompSwap(00z10D00D00D
textureProj(00t30B
textureProjGradOffset(00t10B00B00B00D
unpackSnorm2x16(00E
lessThan(30D30D
atan(00B00B
textureQueryLod(00S20B
notEqual(10B10B
imageLoad(01G20D
trunc(30B
trunc(30C
length(00B
length(00C
imageAtomicAnd(01H20D00D
imageAtomicAnd(01H20D00E
textureProj(00X30B00B
imageAtomicCompSwap(01C20D00E00E
tan(00B
min(20E00E
textureLod(00x30B00B
textureSize(00j
textureSize(00n
imageAtomicXor(01F20D00D
textureSize(00c
textureSize(00b
min(20B20B
textureSize(00q
textureSize(00r
textureSize(00w
textureSize(00v
bitfieldInsert(20E20E00D00D
textureSize(00O
imageAtomicAnd(01a20D00E
imageAtomicMin(01g00D00D
trunc(00C
imageAtomicAnd(01a20D00D
textureSize(00Q
textureSize(00P
imageAtomicAdd(01M00D00E
imageAtomicAdd(01M00D00D
textureSize(00W
textureProjLod(00X20B00B
smoothstep(00C00C00C
atomicCounterAnd(00G00E
faceforward(30B30B30B
distance(20C20C
atomicCounterAdd(00G00E
imageStore(01O10D30B
texture(00X10B
ceil(00C
ceil(00B
distance(00B00B
texelFetch(00O10D
imageAtomicExchange(01C20D00D
imageAtomicExchange(01C20D00E
textureGrad(00s30B20B20B
textureGather(00I10B
imageAtomicExchange(01C20D00B
min(30D30D
imageAtomicExchange(01Z10D00B
findMSB(30E
findMSB(30D
textureGradOffset(00R10B10B10B10D
fwidth(30B
textureGrad(00K20B20B20B
texelFetch(00S20D00D
max(10B00B
textureProjGradOffset(00R30B10B10B10D
texelFetchOffset(00L20D00D10D
isnan(30C
transpose(50B
greaterThanEqual(20D20D
asinh(00B
textureGather(00Z20B
textureGrad(00p10B00B00B
textureProjOffset(00v30B10D
greaterThan(20B20B
min(20D20D
texelFetchOffset(00g00D00D00D
imageAtomicCompSwap(01g00D00E00E
imageAtomicMin(01W20D00D00E
imageAtomicMin(01W20D00D00D
imageAtomicXor(01O10D00D
imageAtomicXor(01O10D00E
tanh(20B
textureProj(00m30B00B
sin(20B
smoothstep(00C00C30C
textureSize(00l00D
textureLod(00o00B00B
textureOffset(00I10B10D00B
imageAtomicAnd(00z10D00D
imageAtomicAnd(00z10D00E
imageAtomicCompSwap(01W20D00D00D00D
textureOffset(00J20B20D00B
lessThanEqual(20E20E
textureOffset(00g00B00D
textureProj(00g30B
bitfieldInsert(30E30E00D00D
bitfieldExtract(20E00D00D
uintBitsToFloat(20E
unpackUnorm4x8(00E
imageAtomicExchange(01K20D00E
mod(10B10B
imageAtomicExchange(01K20D00B
imageAtomicAnd(01B10D00E
imageAtomicXor(01i00D00D
equal(20D20D
mix(10E10E10F
textureGather(00R10B00D
textureSize(00Z00D
bitfieldExtract(30D00D00D
imageAtomicXor(01J20D00D
imageAtomicXor(01J20D00E
intBitsToFloat(00D
textureLodOffset(00m20B00B00D
findLSB(00E
texelFetch(00p10D00D
textureGather(00d10B00B
shadow2DProj(00d30B00B
imageAtomicAdd(01T10D00D00D
imageAtomicAdd(01T10D00D00E
inversesqrt(10B
inversesqrt(10C
abs(30D
transpose(D0B
abs(30C
textureProjGrad(00O30B10B10B
imageLoad(01E20D
textureProj(00N20B00B
dFdxCoarse(20B
clamp(20E00E00E
textureProj(00d30B
imageAtomicOr(01i00D00D
imageAtomicOr(01i00D00E
shadow1D(00m20B
textureOffset(00u10B00D
cosh(10B
sign(10C
imageAtomicAnd(01G20D00E
imageAtomicAnd(01G20D00D
sign(10D
umulExtended(00E00E00E00E
texture(00a20B
imageAtomicExchange(01g00D00B
imageAtomicExchange(01B10D00B
ldexp(10B10D
imageAtomicExchange(01B10D00D
imageAtomicExchange(01B10D00E
textureProjOffset(00g30B00D
texture(00Z20B
degrees(10B
texture(00k30B00B
texture(00K20B
sinh(10B
texture(00m20B
imageAtomicXor(01C20D00D
textureGatherOffsets(00I10B10Dx400D
not(30F
textureProjLodOffset(00I20B00B10D
textureGather(00K20B
textureGatherOffset(00R10B10D
memoryBarrierShared(
clamp(20B20B20B
texelFetch(00W20D00D
textureProjLod(00g10B00B
trunc(20C
trunc(20B
textureProjOffset(00I30B10D00B
max(00C00C
tan(10B
texture(00g00B
textureLodOffset(00L20B00B10D
textureLodOffset(00u10B00B00D
imageAtomicOr(01B10D00D
imageAtomicOr(01B10D00E
isinf(20B
dFdyCoarse(10B
textureGatherOffset(00X10B10D00D
min(10E10E
memoryBarrierImage(
round(10B
round(10C
textureProjLodOffset(00m30B00B00D
textureProjGradOffset(00g10B00B00B00D
textureProj(00R30B
shadow1DProj(00m30B
texture(00f30B00B
fma(00B00B00B
imageStore(01X10D30B
imageAtomicOr(01b20D00E
imageAtomicOr(01b20D00D
textureGatherOffset(00v10B10D00D
atomicMax(00E00E
textureQueryLod(00t00B
textureProjOffset(00R30B10D
textureProj(00X30B
findMSB(00D
findMSB(00E
textureProjOffset(00X20B10D
imageAtomicCompSwap(01X10D00D00D
frexp(30C30D
mix(10C10C10C
min(30D00D
imageAtomicCompSwap(01K20D00E00E
texture(00M10B00B
fwidth(20B
imageAtomicOr(01S10D00D00D
imageAtomicOr(01S10D00D00E
mod(30C00C
imageAtomicAdd(01A10D00D
imageAtomicAdd(01A10D00E
texture(00o00B00B
imageAtomicOr(01H20D00E
imageAtomicOr(01H20D00D
cos(20B
textureGather(00T20B
textureProjGradOffset(00J30B20B20B20D
asinh(10B
texelFetchOffset(00v10D10D
imageAtomicXor(01E20D00E
imageAtomicXor(01E20D00D
textureGatherOffsets(00R10B10Dx400D
imageAtomicExchange
interpolateAtOffset
textureProjOffset
imageAtomicOr
textureProjGradOffset
imageLoad
imageAtomicAdd
imageAtomicCompSwap
textureQueryLod
imageSamples
textureLodOffset
imageAtomicAnd
imageAtomicMin
imageAtomicXor
imageAtomicMax
textureGather
imageStore
textureOffset
textureProjLodOffset
dFdyCoarse
textureGatherOffset
noise2
textureGatherOffsets
fwidthFine
shadow1D
noise4
interpolateAtSample
atomicCounterCompSwap
textureGradOffset
EmitStreamVertex
noise3
texture1DProj
textureSamples
shadow2D
unpackDouble2x32
dFdxCoarse
EndStreamPrimitive
subpassLoad
ftransform
imageSize
noise1
textureQueryLevels
dFdyFine
atomicCounterOr
texture1D
interpolateAtCentroid
fwidthCoarse
shadow1DLod
atomicCounterMax
atomicCounterExchange
yuv_2_rgb
dFdxFine
allInvocationsEqual
atomicCounterMin
texture1DLod
shadow1DProj
packDouble2x32
texture1DProjLod
atomicCounterXor
atomicCounterSubtract
allInvocations
shadow1DProjLod
shadow2DProj
shadow2DLod
shadow2DProjLod
rgb_2_yuv
anyInvocation
atomicCounterAnd
atomicCounterAdd
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/SyncGL.cpp
onDestroy
Unhandled internal error: 
Error releasing tex image from texture
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/Texture.cpp
releaseTexImageInternal
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/TextureGL.cpp
setImageHelper
functions->texImage2D(nativegl::GetTextureBindingTarget(target), static_cast<GLint>(level), texImageFormat.internalFormat, size.width, size.height, 0, texImageFormat.format, texImageFormat.type, pixels)
functions->texImage3D(ToGLenum(target), static_cast<GLint>(level), texImageFormat.internalFormat, size.width, size.height, size.depth, 0, texImageFormat.format, texImageFormat.type, pixels)
setSubImageRowByRowWorkaround
setSubImagePaddingWorkaround
setCompressedImage
functions->compressedTexImage2D(ToGLenum(target), static_cast<GLint>(level), compressedTexImageFormat.internalFormat, size.width, size.height, 0, static_cast<GLsizei>(imageSize), pixels)
functions->compressedTexImage3D(ToGLenum(target), static_cast<GLint>(level), compressedTexImageFormat.internalFormat, size.width, size.height, size.depth, 0, static_cast<GLsizei>(imageSize), pixels)
copyImage
functions->texImage2D(ToGLenum(target), static_cast<GLint>(level), copyTexImageFormat.internalFormat, sourceArea.width, sourceArea.height, 0, gl::GetUnsizedFormat(copyTexImageFormat.internalFormat), type, zero->data())
functions->copyTexImage2D(ToGLenum(target), static_cast<GLint>(level), copyTexImageFormat.internalFormat, clippedArea.x, clippedArea.y, clippedArea.width, clippedArea.height, 0)
functions->texStorage2D(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height)
functions->compressedTexImage2D( ToGLenum(type), static_cast<GLint>(level), compressedTexImageFormat.format, levelSize.width, levelSize.height, 0, static_cast<GLsizei>(dataSize), nullptr)
functions->texImage2D(ToGLenum(type), static_cast<GLint>(level), texImageFormat.internalFormat, levelSize.width, levelSize.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->compressedTexImage2D( ToGLenum(face), static_cast<GLint>(level), compressedTexImageFormat.format, levelSize.width, levelSize.height, 0, static_cast<GLsizei>(dataSize), nullptr)
functions->texImage2D( ToGLenum(face), static_cast<GLint>(level), texImageFormat.internalFormat, levelSize.width, levelSize.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->texStorage3D(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height, size.depth)
functions->compressedTexImage3D( ToGLenum(type), i, compressedTexImageFormat.format, levelSize.width, levelSize.height, levelSize.depth, 0, static_cast<GLsizei>(dataSize), nullptr)
functions->texImage3D(ToGLenum(type), i, texImageFormat.internalFormat, levelSize.width, levelSize.height, levelSize.depth, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->texStorage2DMultisample( ToGLenum(type), samples, texStorageFormat.internalFormat, size.width, size.height, gl::ConvertToGLBoolean(fixedSampleLocations))
functions->texImage2DMultisample( ToGLenum(type), samples, texStorageFormat.internalFormat, size.width, size.height, gl::ConvertToGLBoolean(fixedSampleLocations))
functions->texStorage3DMultisample( ToGLenum(type), samples, texStorageFormat.internalFormat, size.width, size.height, size.depth, gl::ConvertToGLBoolean(fixedSampleLocations))
setStorageExternalMemory
functions->texStorageMem2DEXT(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height, memoryObjectGL->getMemoryObjectID(), offset)
functions->texStorageMem3DEXT(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height, size.depth, memoryObjectGL->getMemoryObjectID(), offset)
setImageExternal
generateMipmap
functions->texImage2D( ToGLenum(getType()), effectiveBaseLevel + levelIdx, texImageFormat.internalFormat, levelSize.width, levelSize.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->generateMipmap(ToGLenum(getType()))
initializeContents
Context has been lost.
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/Thread.cpp
getValidContext
// BEGIN: Generated code for built-in function emulation
#if defined(GL_FRAGMENT_PRECISION_HIGH)
#define emu_precision highp
#else
#define emu_precision mediump
#endif
// END: Generated code for built-in function emulation
#extension GL_NV_shader_framebuffer_fetch : 
#extension GL_NV_draw_buffers : 
#ifdef GL_EXT_geometry_shader
#extension GL_EXT_geometry_shader : 
#elif defined GL_OES_geometry_shader
#extension GL_OES_geometry_shader : 
#error "No geometry shader extensions available." // Only generate this if the extension is "required"
#endif
#extension 
invariant gl_Position;
#define emu_precision
out vec4 webgl_FragColor;
out vec4 webgl_FragData[gl_MaxDrawBuffers];
out vec4 angle_SecondaryFragColor;
out vec4 angle_SecondaryFragData[
#extension GL_ARB_shader_texture_lod : 
#extension GL_ARB_draw_buffers : 
#extension GL_ARB_geometry_shader4 : 
#extension GL_ARB_texture_multisample : 
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_gpu_shader5 : enable
#extension GL_EXT_gpu_shader5 : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_OES_texture_cube_map_array : enable
#extension GL_EXT_texture_cube_map_array : enable
 : enable
 : require
void
float
uint
bool
yuvCscStandardEXT
sampler2D
sampler3D
samplerCube
samplerExternalOES
__samplerExternal2DY2YEXT
sampler2DRect
sampler2DArray
sampler2DMS
sampler2DMSArray
samplerCubeArray
isampler2D
isampler3D
isamplerCube
isampler2DArray
isampler2DMS
isampler2DMSArray
isamplerCubeArray
usampler2D
usampler3D
usamplerCube
usampler2DArray
usampler2DMS
usampler2DMSArray
usamplerCubeArray
sampler2DShadow
samplerCubeShadow
sampler2DArrayShadow
samplerCubeArrayShadow
structure
interface block
image2D
iimage2D
uimage2D
image3D
iimage3D
uimage3D
image2DArray
iimage2DArray
uimage2DArray
imageCube
iimageCube
uimageCube
imageCubeArray
iimageCubeArray
uimageCubeArray
atomic_uint
samplerVideoWEBGL
unknown type
mat2
mat2x3
mat2x4
mat3x2
mat3
mat3x4
mat4x2
mat4x3
mat4
vec2
vec3
vec4
ivec2
ivec3
ivec4
bvec2
bvec3
bvec4
uvec2
uvec3
uvec4
Unknown error.
Window System
Shader Compiler
Third Party
Application
Other
Unknown Source
Error
Deprecated behavior
Undefined behavior
Portability
Performance
Marker
Unknown Type
High
Medium
Notification
Unknown Severity
Not initialized.
Bad access.
Bad allocation.
Bad attribute.
Bad config.
Bad context.
Bad current surface.
Bad display.
Bad match.
Bad native window.
Bad native pixmap.
Bad parameter.
Bad surface.
Context lost.
Bad stream.
Bad state.
Bad device.
Found child with two parents
<validateSingleParent>
<validateNullNodes>
Found nullptr child
Loop index cannot be statically assigned to within the body of the loop
Index expression must be constant
This type of loop is not allowed
while
Missing init declaration
Invalid init declaration
Invalid type for loop index
Loop index cannot be initialized with non-constant expression
Missing condition
Invalid condition
Expected loop index
Invalid relational operator
Loop index cannot be compared with non-constant expression
Missing expression
Invalid expression
Invalid operator
Loop index cannot be modified by non-constant expression
conflicting output locations with previously defined output '
output array locations would exceed MAX_DRAW_BUFFERS
output location must be < MAX_DRAW_BUFFERS
must explicitly specify all locations when using multiple fragment outputs
not allowed to specify yuv qualifier when using depth or multiple color fragment outputs
default
label statement nested inside control flow
duplicate default label
case label type does not match switch init-expression type
duplicate case label
statement before the first label
switch
no statement between the last label and the end of the switch statement
too complex expressions inside a switch statement
' conflicting location with previously defined '
display is not initialized.
display had a context loss
image is not valid.
device is EGL_NO_DEVICE.
device is not valid.
sync object is not valid.
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR is not
 valid for GLES with EGL 1.4 and KHR_create_context. Use
 EXT_create_context_robustness.
Invalid Context attribute.
Attribute must be EGL_TRUE or EGL_FALSE.
Attribute EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE requires EGL_ANGLE_create_context_webgl_compatibility.
EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE must be EGL_TRUE or EGL_FALSE.
Attribute EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM requires EGL_CHROMIUM_create_context_bind_generates_resource.
EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM must be EGL_TRUE or EGL_FALSE.
Attribute EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE requires EGL_ANGLE_display_texture_share_group.
EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE must be EGL_TRUE or EGL_FALSE.
All contexts within a share group must be created with the same value of EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE.
Attribute EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE requires EGL_ANGLE_create_context_client_arrays.
EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE must be EGL_TRUE or EGL_FALSE.
Attribute EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE requires EGL_ANGLE_program_cache_control.
EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE must be EGL_TRUE or EGL_FALSE.
Attribute EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE requires EGL_ANGLE_robust_resource_initialization.
EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE must be either EGL_TRUE or EGL_FALSE.
Attribute EGL_EXTENSIONS_ENABLED_ANGLE requires EGL_ANGLE_create_context_extensions_enabled.
EGL_EXTENSIONS_ENABLED_ANGLE must be either EGL_TRUE or EGL_FALSE.
Attribute EGL_POWER_PREFERENCE_ANGLE requires EGL_ANGLE_power_preference.
EGL_POWER_PREFERENCE_ANGLE must be either EGL_LOW_POWER_ANGLE or EGL_HIGH_POWER_ANGLE.
Attribute EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE requires EGL_ANGLE_create_context_backwards_compatible.
EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE must be either EGL_TRUE or EGL_FALSE.
Attribute EGL_CONTEXT_PRIORITY_LEVEL_IMG requires extension EGL_IMG_context_priority.
Attribute EGL_CONTEXT_PRIORITY_LEVEL_IMG must be one of: EGL_CONTEXT_PRIORITY_LOW_IMG, EGL_CONTEXT_PRIORITY_MEDIUM_IMG, or EGL_CONTEXT_PRIORITY_HIGH_IMG.
Unknown attribute.
Requested GLES version is not supported.
EGL_ANGLE_surface_orientation is not enabled.
EGL_GGP_STREAM_DESCRIPTOR_ANGLE requires EGL_ANGLE_ggp_stream_descriptor.
EGL_FLEXIBLE_SURFACE_COMPATIBILITY_SUPPORTED_ANGLE cannot be used without EGL_ANGLE_flexible_surface_compatibility support.
<buftype> EGL_IOSURFACE_ANGLE requires the EGL_ANGLE_iosurface_client_buffer extension.
<buffer> must be non null
Width and Height are not supported for thie <buftype>
Width and Height must be positive
Invalid value for EGL_TEXTURE_FORMAT
<buftype> doesn't support rectangle texture targets
Invalid value for EGL_TEXTURE_TARGET
<buftype> doesn't support iosurface plane
<buftype> doesn't support texture type
<buftype> doesn't support texture internal format
<buftype> doesn't support setting GL colorspace
IOSurface usage hint must only contain READ or WRITE
<buftype> doesn't support setting texture offset
Texture offset cannot be negative
invalid GL colorspace
EGL_IOSURFACE requires the texture target to match the config
EGL_IOSURFACE requires the EGL_TEXTURE_RGBA format
Missing required attribute for EGL_IOSURFACE
EGL_NOK_texture_from_pixmap is not enabled.
Unknown attribute
Congfig does not suport pixmaps.
If ctx is EGL_NO_CONTEXT, surfaces must be EGL_NO_SURFACE
If ctx is not EGL_NOT_CONTEXT, draw or read must both be EGL_NO_SURFACE, or both not
If ctx is not EGL_NO_CONTEXT, surfaces must not be EGL_NO_SURFACE
'dpy' not a valid EGLDisplay handle
'dpy' not initialized
Surface not compatible with OpenGL ES 1.x.
Surface not compatible with OpenGL ES 2.x.
Surface not compatible with OpenGL ES 3.x.
Surface not compatible with Context API.
Context with no config is not supported.
Color buffer types are not compatible.
Color buffer sizes are not compatible.
Color buffer component types are not compatible.
Depth-stencil buffer types are not compatible.
Surface type is not compatible.
EGL_IMAGE_PRESERVED must be EGL_TRUE or EGL_FALSE.
EGL_GL_TEXTURE_LEVEL cannot be used without KHR_gl_texture_*_image support.
EGL_GL_TEXTURE_LEVEL cannot be negative.
EGL_GL_TEXTURE_ZOFFSET cannot be used without KHR_gl_texture_3D_image support.
EGL_GL_COLORSPACE cannot be used without EGL_KHR_gl_colorspace support.
EGL_TEXTURE_INTERNAL_FORMAT_ANGLE and EGL_TEXTURE_TYPE_ANGLE cannot be used without EGL_ANGLE_image_d3d11_texture support.
Parameter cannot be used if target is not EGL_LINUX_DMA_BUF_EXT
Parameter cannot be used without EGL_EXT_image_dma_buf_import support.
Invalid value for EGL_YUV_COLOR_SPACE_HINT_EXT.
Invalid value for EGL_SAMPLE_RANGE_HINT_EXT.
Invalid value for EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT or EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT.
Parameter cannot be used without EGL_EXT_image_dma_buf_import_modifiers support.
invalid attribute: 0x
KHR_gl_texture_2D_image not supported.
buffer cannot reference a 2D texture with the name 0.
target is not a 2D texture.
texture has a surface bound to it.
target 2D texture does not have a valid size at specified level.
KHR_gl_texture_cubemap_image not supported.
buffer cannot reference a cubemap texture with the name 0.
target is not a cubemap texture.
target cubemap texture does not have a valid size at specified level and face.
if level is zero and the texture is incomplete, it must have all of its faces specified at level zero.
KHR_gl_texture_3D_image not supported.
buffer cannot reference a 3D texture with the name 0.
target is not a 3D texture.
target 3D texture does not have a valid size at specified level.
target 3D texture does not have enough layers for the specified Z offset at the specified level.
KHR_gl_renderbuffer_image not supported.
EGL_GL_TEXTURE_LEVEL cannot be used in conjunction with a renderbuffer target.
buffer cannot reference a renderbuffer with the name 0.
target is not a renderbuffer.
target renderbuffer cannot be multisampled.
EGL_ANDROID_image_native_buffer not supported.
ctx must be EGL_NO_CONTEXT.
EGL_ANGLE_image_d3d11_texture not supported.
EGL_EXT_image_dma_buf_import not supported.
buffer must be NULL.
Missing required parameter 
 for image target EGL_LINUX_DMA_BUF_EXT.
the list of attributes contains EGL_DMA_BUF_PLANE*_MODIFIER_LO_EXT but not EGL_DMA_BUF_PLANE*_MODIFIER_HI_EXT or vice versa.
invalid target: 0x
EGL_GL_TEXTURE_ZOFFSET must be used with a 3D texture target.
EGL_KHR_image not supported.
Device creation extension not active
Invalid attrib_list parameter
D3D11 device creation extension not active
Invalid device_type parameter
Invalid device parameter
Device must have been created using eglCreateDevice
Invalid attribute
EGL_ANDROID_native_fence_sync extension is not available.
Invalid type parameter
CreateSync can only be called on the current display
EGL_SYNC_FENCE_KHR cannot be used without GL_OES_EGL_sync support.
EGL_SYNC_CONDITION_KHR is not valid for this sync type.
EGL_KHR_fence_sync extension is not available
EGL_KHR_wait_sync extension is not available
No context is current.
Server-side waits cannot be performed without GL_OES_EGL_sync support.
flags must be zero
Invalid value parameter
Stream extension not active
Bad stream state
Consumer GLTexture extension not active
Stream consumer extension not active
EGL stream consumer external GL extension not enabled
Invalid stream
Invalid stream state
No external texture bound
No GL context current to calling thread.
Current GL context not associated with stream consumer
Invalid stream consumer type
Invalid color buffer type
Invalid plane count
Invalid texture unit
Plane count must be 0 for RGB buffer
Planes cannot be specified
Invalid YUV plane count
Invalid plane specified
Not all planes specified
No external texture bound at one or more specified texture units
Multiple planes bound to same texture object
Stream producer extension not active
Stream not in connecting state
Incompatible stream consumer type
Invalid subresource index
Invalid plane offset
Stream not fully configured
Incompatible stream producer
Texture is null
syncControlCHROMIUM extension not active
syncControlRateANGLE extension not active
numerator is null
denominator is null
ust is null
msc is null
sbc is null
EGL_KHR_swap_buffers_with_damage is not available.
Swap surface cannot be EGL_NO_SURFACE.
n_rects cannot be negative.
n_rects cannot be greater than zero when rects is NULL.
the 'engine' parameter has an unrecognized value
EGL_ANDROID_presentation_time is not available.
Blob cache functions can only be set once in the lifetime of a Display
Blob cache callbacks cannot be null.
num_config cannot be null.
EGL_EXT_platform_base not supported
ValidateCreatePlatformWindowSurfaceEXT unimplemented.
ValidateCreatePlatformPixmapSurfaceEXT unimplemented.
Extension not supported
Invalid program cache attribute.
Program index out of range.
keysize and binarysize must always be valid pointers.
Invalid program key size.
key and binary must both be null or both non-null.
null pointer in arguments.
binarysize out of valid range.
limit must be non-negative.
Invalid cache resize mode.
Surface cannot be EGL_NO_SURFACE.
Surface does not support EGL_MULTISAMPLE_RESOLVE_BOX.
Invalid multisample resolve type.
Surface does not support EGL_SWAP_BEHAVIOR_PRESERVED.
Invalid swap behaviour.
EGL_WIDTH or EGL_HEIGHT cannot be set without EGL_ANGLE_window_fixed_size support.
EGL_WIDTH or EGL_HEIGHT cannot be set without EGL_FIXED_SIZE_ANGLE being enabled on the surface.
EGL_TIMESTAMPS_ANDROID cannot be used without EGL_ANDROID_get_frame_timestamps support.
Invalid value.
Invalid surface attribute.
EGL_POST_SUB_BUFFER_SUPPORTED_NV cannot be used without EGL_ANGLE_surface_orientation support.
EGL_FIXED_SIZE_ANGLE cannot be used without EGL_ANGLE_window_fixed_size support.
EGL_SURFACE_ORIENTATION_ANGLE cannot be queried without EGL_ANGLE_surface_orientation support.
EGL_DIRECT_COMPOSITION_ANGLE cannot be used without EGL_ANGLE_direct_composition support.
EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE cannot be used without EGL_ANGLE_robust_resource_initialization support.
Invalid context attribute.
EGL_KHR_debug extension is not available.
message controls must be EGL_TRUE or EGL_FALSE.
unknown attribute.
EGL_ANDROID_get_frame_timestamps extension is not available.
invalid timing name.
names is NULL.
values is NULL.
numTimestamps must be at least 0.
invalid compositor timing.
compositor timing not supported by surface.
frameId is NULL.
invalid timestamp type.
timestamp collection is not enabled for this surface.
timestamps is NULL.
timestamp not supported by surface.
EGL_ANGLE_feature_control extension is not available.
index is negative.
name is not valid.
index is too big.
EGL_EXT_device_query extension is not available.
attribute is not valid.
NULL buffer.
EGL_ANGLE_swap_buffers_with_frame_token is not available.
display is EGL_NO_DISPLAY.
display is not a valid display.
when object type is EGL_OBJECT_DISPLAY_KHR, the object must be the same as the display.
unknown object type.
EXT_gl_colorspace_display_p3_linear is not available.
EXT_gl_colorspace_display_p3 is not available.
EGL_EXT_gl_colorspace_display_p3_passthrough is not available.
EXT_gl_colorspace_scrgb is not available.
EXT_gl_colorspace_scrgb_linear is not available.
texture must be complete if level is non-zero.
if level is zero and the texture is incomplete, it must have no mip levels specified except zero.
Attempt to initialize readonly parameter
Latency must be positive
Consumer GL extension not enabled
Timeout must be positive
Invalid stream attribute
EGL_EXT_pixel_format_float is not enabled.
EGL_ANDROID_recordable is not enabled.
EGL_ANDROID_framebuffer_target is not enabled.
EGL_ANGLE_iosurface_client_buffer is not enabled.
EGL_bind_to_texture invalid attribute: 
EGL_color_buffer_type invalid attribute: 
EGL_native_renderable invalid attribute: 
EGL_transparent_type invalid attribute: 
EGL_RECORDABLE_ANDROID invalid attribute: 
EGL_COLOR_COMPONENT_TYPE_EXT invalid attribute: 
Platform ANGLE extension is not active
Platform Device extension is not active
Bad platform type.
Invalid automatic trim attribute
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE extension not active.
Invalid D3D11on12 attribute
EGL_ANGLE_experimental_present_path extension not active
Invalid value for EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE
EGL_ANGLE_platform_angle_d3d is not supported
EGL_ANGLE_platform_angle_device_type_egl_angle is not supported
EGL_ANGLE_platform_angle_device_type_swiftshader is not supported
Invalid value for EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE attrib
EGL_ANGLE_platform_angle extension not active
EGL_PLATFORM_ANGLE_DEBUG_LAYERS_ENABLED_ANGLE must be EGL_TRUE, EGL_FALSE, or EGL_DONT_CARE.
EGL_ANGLE_platform_angle_context_virtualization extension not active
Invalid value for EGL_PLATFORM_ANGLE_CONTEXT_VIRTUALIZATION_ANGLE attrib
Must specify major version if you specify a minor version.
EGL_PLATFORM_ANGLE_DEVICE_TYPE_WARP_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE requires a platform type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE requires a device type of EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE or EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE
EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE and EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE require a platform type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
If either EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE and/or EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE are specified, at least one must non-zero.
This device type requires a platform type of EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE or EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE.
This device type requires a platform type of EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE.
EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE currently only supports Vulkan 1.0.
EGL_PLATFORM_ANGLE_EGL_HANDLE_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE.
native_display should be a valid EGL device if platform equals EGL_PLATFORM_DEVICE_EXT
EGL_ANGLE_feature_control is not supported
EGL_FEATURE_OVERRIDES_ENABLED_ANGLE must be a valid pointer
EGL_FEATURE_OVERRIDES_DISABLED_ANGLE must be a valid pointer
Direct3D platform is unsupported.
OpenGL platform is unsupported.
Display type EGL_PLATFORM_ANGLE_TYPE_NULL_ANGLE requires EGL_ANGLE_platform_angle_null.
Vulkan platform is unsupported.
Metal platform is unsupported.
Unknown platform type.
Invalid or unsupported texture target.
A texture must be bound.
Insufficient buffer size.
Enum is not currently supported.
OpenGL ES 3.0 Required.
GLES1-only function.
Invalid pname.
Base level must be at least 0.
Base level must be 0.
Level of detail outside of range.
Enum requires GLES 3.1
Extension is not enabled.
Sampler is not valid
Primcount must be greater than or equal to zero.
At least one enabled attribute must have a divisor of zero.
Negative size.
The texture is a non-power-of-two texture.
Integer overflow.
It is undefined behavior to use a pixel unpack buffer that is bound for transform feedback.
imageSize must be 0 if no texture data is provided.
imageSize is too small.
Stride is over the maximum stride allowed by WebGL.
Offset must be a multiple of the passed in datatype.
Stride must be a multiple of the passed in datatype.
Expected a program name, but found a shader name.
Program object expected.
Expected a shader name, but found a program name.
Shader object expected.
Invalid Attachment Type.
Invalid renderbuffer target.
Renderbuffer width and height cannot be negative and cannot exceed maximum texture size.
Invalid renderbuffer internalformat.
Desired resource size is greater than max renderbuffer size.
Invalid framebuffer target.
It is invalid to change default FBO's attachments
Invalid blit filter.
Invalid blit mask.
Only nearest filtering can be used when blitting buffers other than the color buffer.
Read and draw framebuffers must both exist for a blit to succeed.
Blit feedback loop: the read and draw framebuffers are the same.
BlitFramebuffer dimensions out of 32-bit integer range.
If the read buffer contains fixed-point or floating-point values, the draw buffer must as well.
If the read buffer contains fixed-point values, the draw buffer must as well.
If the read buffer contains unsigned integer values the draw buffer must as well.
If the read buffer contains signed integer values the draw buffer must as well.
Attempt to blit from a multisampled framebuffer and the bounds or format of the color buffer don't match with the draw framebuffer.
Read and write color attachments cannot be the same image.
Cannot use GL_LINEAR filter when blitting a integer framebuffer.
Attempt to read from a missing color attachment of a complete framebuffer.
Depth/stencil buffer format combination not allowed for blit.
Attempt to blit from a multisampled framebuffer and the bounds don't match with the draw framebuffer.
Read and write depth stencil attachments cannot be the same image.
Attempt to read from a missing depth/stencil attachment of a complete framebuffer.
Attempt to read from a multi-view framebuffer.
Attempt to write to a multi-view framebuffer.
Negative buffer size.
Query extension not enabled.
Invalid query type.
Invalid query Id.
Other query is active.
Query type does not match target.
Query is not active.
Invalid query target.
Query is active.
Context has been lost.
Negative count.
Program not linked.
Invalid uniform location
Only array uniforms may have count > 1.
Sampler uniform value out of range.
Uniform type does not match uniform method.
Index must be less than MAX_DRAW_BUFFERS.
GL_ANGLE_texture_multisample_array not enabled.
Read buffer is GL_NONE.
Read buffer has no attachment.
Negative offset.
Offset overflows texture dimensions.
Border must be 0.
Missing read attachment.
The active read framebuffer object has multiview attachments.
Texture is immutable.
Invalid format.
Texture is not cubemap complete. All cubemaps faces must be defined and be the same size.
Desired resource size is greater than max texture size.
Feedback loop formed between Framebuffer and active Texture.
The number of views in the active program and draw framebuffer does not match.
There is an active transform feedback object when the number of views in the active draw framebuffer is greater than 1.
There is an active query for target GL_TIME_ELAPSED_EXT when the number of views in the active draw framebuffer is greater than 1.
It is undefined behaviour to have a used but unbound uniform buffer.
It is undefined behaviour to use a uniform buffer that is too small.
It is undefined behavior to use an uniform buffer that is bound for transform feedback.
A program object is active for at least one, but not all of the shader stages that were present when the program was linked.
An active buffer is mapped
ValidateDrawStates
This ANGLE implementation does not support separate front/back stencil writemasks, reference values, or stencil mask values.
Stencil reference and mask values must be the same for front facing and back facing triangles.
GL_BLEND with floating-point color attachments requires the EXT_float_blend extension.
CONSTANT_COLOR (or ONE_MINUS_CONSTANT_COLOR) and CONSTANT_ALPHA (or ONE_MINUS_CONSTANT_ALPHA) cannot be used together as source and destination color factors in the blend function.
Simultaneous use of GL_CONSTANT_ALPHA/GL_ONE_MINUS_CONSTANT_ALPHA and GL_CONSTANT_COLOR/GL_ONE_MINUS_CONSTANT_COLOR as color factors is not supported by this implementation.
An enabled vertex array has no buffer.
An enabled vertex array has no buffer and no pointer.
Two textures of different types use the same sampler location.
Mismatch between texture format and sampler type (signed/unsigned/float/shadow).
A transform feedback buffer that would be written to is also bound to a non-transform-feedback target, which would cause undefined behavior.
Vertex shader input type does not match the type of the bound vertex attribute.
Active draw buffers with missing fragment shader outputs.
Fragment shader output type does not match the bound framebuffer attachment type.
It is undefined behavior to use a vertex buffer that is bound for transform feedback.
Draw mode must match current transform feedback object's draw mode.
GL_EXT_geometry_shader extension not enabled.
Invalid draw mode.
Primitive mode is incompatible with the input primitive type of the geometry shader.
The draw command is unsupported when transform feedback is active and not paused.
It is undefined behavior to use an element array buffer that is bound for transform feedback.
Must have element array buffer bound.
No Texture is bound to the specified target.
Program doesn't exist.
Negative number of attachments.
Invalid attachment when the default framebuffer is bound.
Index is greater than the maximum supported color attachments
EGL image is not valid.
Cannot create a 2D texture from a multisampled EGL image.
EGL image internal format is not supported as a texture.
Image has more than 1 layer, target must be TEXTURE_2D_ARRAY
EGL image internal format is not supported as a renderbuffer.
Vertex array does not exist.
Program binary format is not valid.
Cannot change program binary while program is associated with an active transform feedback object.
No program binary formats supported.
Invalid draw buffer.
Ith value does not match COLOR_ATTACHMENTi or NONE.
The default framebuffer must have exactly one draw buffer.
Only NONE or BACK are valid draw buffers for the default framebuffer
Invalid buffer target.
Can not get pointer for reserved buffer name zero.
Buffer is not mapped.
Negative length.
Attempted to map buffer object zero.
Mapped range does not fit into buffer dimensions.
Invalid access bits.
Length must not be zero.
Buffer is already mapped.
Need to map buffer for either reading or writing.
Invalid access bits when mapping buffer for reading
The explicit flushing bit may only be set if the buffer is mapped for writing.
Attempted to flush buffer object zero.
Attempted to flush a buffer not mapped for explicit flushing.
Flushed range does not fit into buffer mapping dimensions.
More parameters are required than were provided.
Attachment type must be compatible with attachment object.
Invalid parameter name for framebuffer attachment.
Enum requires GLES 3.0
No active compute shader stage in this program.
No active geometry shader stage in this program.
No defined conversion between clear value and attachment format.
dataSize is too small
A buffer must be bound.
GL_BUFFER_MAP_POINTER can only be queried with GetBufferPointerv.
A renderbuffer must be bound.
GL_ANGLE_get_image extension not enabled.
Index must be less than MAX_VERTEX_ATTRIBS.
It is undefined behavior to use a pixel pack buffer that is bound for transform feedback.
The provided parameters overflow with the provided buffer.
Invalid combination of pack parameters for WebGL.
Invalid format and type combination.
Index exceeds active uniform block count.
Internal format is not renderable.
GL_ANGLE_texture_multisample or GLES 3.1 required.
Invalid target.
Invalid operation on multisampled framebuffer
Specified unit must be in [GL_TEXTURE0, GL_TEXTURE0 + GL_MAX_TEXTURE_UNITS)
Width and height must be less than or equal to GL_MAX_TEXTURE_SIZE.
Samples may not be zero.
SizedInternalformat must be color-renderable, depth-renderable, or stencil-renderable.
Internalformat is one of the unsupported unsized base internalformats.
Samples must not be greater than maximum supported value for the format.
Zero is bound to target.
The value of TEXTURE_IMMUTABLE_FORMAT for the texture currently bound to target on the active texture unit is true.
Texture dimensions must all be greater than zero.
Index must be less than the value of SAMPLES.
MaskNumber cannot be greater than or equal to the value of MAX_SAMPLE_MASK_WORDS.
Vertex buffer is not big enough for the draw call
Reset status is not valid
Parameter outside of bounds.
Uniform size does not match uniform method.
Framebuffer is incomplete.
Invalid wrap mode for texture type.
Texture wrap mode not recognized.
Texture only supports NEAREST and LINEAR filtering.
Texture filter not recognized.
Unknown parameter value.
Enum is not currently supported.
GLES1-only function.
GL_OES_point_size_array not enabled.
Invalid client vertex array type.
Invalid stride for built-in vertex attribute.
Size for built-in vertex attribute is outside allowed range.
Invalid type for built-in vertex attribute.
Invalid light.
Light parameter out of range.
Invalid light parameter.
Material parameter out of range.
Invalid material parameter.
Invalid material face.
Invalid light model parameter.
Invalid clip plane.
Invalid fog mode.
Invalid fog density (must be nonnegative).
Invalid fog parameter.
Invalid texture environment mode.
Invalid texture combine mode.
Invalid texture combine source.
Invalid texture combine operand.
Invalid texture environment scale.
Invalid texture environment parameter.
Invalid texture environment target.
Invalid point parameter value (must be non-negative).
Invalid point parameter.
Invalid point size (must be positive).
Both width and height argument of drawn texture must be positive.
Near value cannot be greater than far.
Invalid projection matrix. Left/right, top/bottom, near/far intervals cannot be zero, and near/far cannot be less than zero.
Invalid width.
Invalid logical operation.
Invalid matrix mode.
Current matrix stack has only a single matrix.
Current matrix stack is full.
Invalid shading model.
Level of detail outside of range.
Rectangle texture cannot have a compressed format.
Each cubemap face must have equal width and height.
Invalid or unsupported texture target.
A buffer must be bound.
Invalid internal format.
Invalid compressed image size.
Enum is not currently supported.
Invalid texture target and format combination.
Pixel data must be null.
Texture level must be zero.
Texture level does not exist.
Passed in texture target and format must match the one originally used to define the texture.
Passed in texture type must match the one originally used to define the texture.
Pixel data cannot be null.
Invalid combination of format, type and internalFormat.
Texture dimensions must all be greater than zero.
Invalid level count.
Texture dimensions must be power-of-two.
No Texture is bound to the specified target.
Extension is not enabled.
Invalid framebuffer target.
Invalid debug source.
Invalid debug type.
Invalid debug severity.
If count is greater than zero, source and type cannot be GL_DONT_CARE.
Message length is larger than GL_MAX_DEBUG_MESSAGE_LENGTH.
Negative buffer size.
Cannot push more than GL_MAX_DEBUG_GROUP_STACK_DEPTH debug groups.
Cannot pop the default debug group.
Blit extension not available.
Scaling and flipping in BlitFramebufferANGLE not supported by this implementation.
Linear blit not supported in this extension.
Blits are only supported from 2D texture, renderbuffer or default framebuffer attachments in this extension.
Blits are only supported to 2D texture, renderbuffer or default framebuffer attachments in this extension.
Attempting to blit and the read and draw buffer formats don't match.
Only whole-buffer blit is supported from a multisampled read buffer in this extension.
Only whole-buffer depth and stencil blits are supported by this extension.
Multisampled depth/stencil blit is not supported by this extension.
Invalid mask bits.
There is an active query for target GL_TIME_ELAPSED_EXT when the number of views in the active draw framebuffer is greater than 1.
Integer overflow.
Compressed texture dimensions must exactly match the dimensions of the data passed in.
Invalid buffer target.
Attempted to map buffer object zero.
Invalid access bits.
Buffer is already mapped.
Invalid memory object.
Invalid memory object parameter.
The memory object is immutable.
Invalid handle type.
Invalid image layout.
Buffer is bound for transform feedback.
Location cannot be less than 0.
Location must be less than (MAX_VERTEX_UNIFORM_VECTORS + MAX_FRAGMENT_UNIFORM_VECTORS) * 4
Name contains invalid characters.
Attributes that begin with 'gl_' are not allowed.
components is not one of GL_RGB, GL_RGBA, GL_ALPHA or GL_NONE.
Source texture is not a valid texture object.
Invalid source texture level.
Source texture internal format is invalid.
Destination texture is not a valid texture object.
Invalid destination texture type.
Destination texture cannot be immutable.
Source texture must be a valid texture type.
Negative offset.
Negative size.
The specified dimensions are outside of the bounds of the texture.
The destination level of the destination texture must be defined.
Source texture must level 0 defined.
Source texture must have a compressed internal format.
OpenGL ES 3.1 Required
Invalid shader type.
Invalid buffer usage enum.
An active buffer is mapped
The provided parameters overflow with the provided buffer.
Insufficient buffer size.
Extension is not requestable.
Extension is not disablable.
Specified unit must be in [GL_TEXTURE0, GL_TEXTURE0 + GL_MAX_COMBINED_IMAGE_UNITS)
Shader attachment already has a shader.
Index must be less than MAX_VERTEX_ATTRIBS.
Object cannot be used because it has not been generated.
Invalid renderbuffer target.
Invalid blend equation.
Invalid blend function.
CONSTANT_COLOR (or ONE_MINUS_CONSTANT_COLOR) and CONSTANT_ALPHA (or ONE_MINUS_CONSTANT_ALPHA) cannot be used together as source and destination color factors in the blend function.
ValidateBlendFuncSeparate
Simultaneous use of GL_CONSTANT_ALPHA/GL_ONE_MINUS_CONSTANT_ALPHA and GL_CONSTANT_COLOR/GL_ONE_MINUS_CONSTANT_COLOR as color factors is not supported by this implementation.
Invalid name.
Invalid width.
Near value cannot be greater than far.
Samples must not be greater than maximum supported value for the format.
Cull mode not recognized.
Expected a program name, but found a shader name.
Program object expected.
Shader object expected.
Expected a shader name, but found a program name.
Shader to be detached must be currently attached to the program.
Index must be less than program active uniform count.
Negative maxcount.
A program must be bound.
Program not linked.
Compute shader precision not yet implemented.
Invalid or unsupported precision type.
Invalid pname.
param is negative.
Unpack alignment must be 1, 2, 4 or 8.
Invalid shader binary format.
Negative count.
Shader source contains invalid characters.
Invalid stencil.
Viewport size cannot be negative.
Current renderer doesn't support alpha-to-coverage.
ValidateEnable
Mipmap level must be 0 when attaching a texture.
GL_ANGLE_texture_multisample or GLES 3.1 required.
zoffset is larger than MAX_3D_TEXTURE_SIZE-1
Texture has incompatible target.
A texture must be bound.
Texture base level out of range
Texture format does not support mipmap generation.
The texture is a non-power-of-two texture.
Cannot generate mipmaps for a zero-size texture in a WebGL context.
OpenGL ES 3.0 Required.
Cannot link program while program is associated with an active transform feedback object.
Cannot change active program while transform feedback is unpaused.
GL_NV_fence is not supported
Invalid fence object.
Fence must be set.
Invalid value for condition.
The current context doesn't support setting a non-zero divisor on the attribute with index zero. Please reorder the attributes in your vertex shader so that attribute zero can have a zero divisor.
ValidateVertexAttribDivisorANGLE
Invalid provoking vertex.
Invalid Attachment Type.
Context does not support GL_ANGLE_texture_rectangle
GL_ANGLE_texture_multisample_array not enabled.
External texture extension not enabled
name is not a valid buffer.
name is not a valid vertex array.
name is not a valid query.
name is not a valid transform feedback.
name is not a valid sampler.
Not a valid texture object name.
name is not a valid renderbuffer.
name is not a valid framebuffer.
name is not a valid program pipeline.
Invalid identifier.
Label length is larger than GL_MAX_LABEL_LENGTH.
Not a valid sync pointer.
Location name lengths must not be greater than 256 characters.
Location lengths must not be greater than 1024 characters.
webgl_
_webgl_
Attributes that begin with 'webgl_', or '_webgl_' are not allowed.
Cannot have negative start.
Not enough space in bound transform feedback buffers.
Draw framebuffer is incomplete
Framebuffer is incomplete.
Rectangle texture cannot have a compressed format.
The cubemap depth must be a multiple of 6.
Enum is not currently supported.
No Texture is bound to the specified target.
Level of detail outside of range.
Compressed data is valid if-and-only-if the texture is compressed.
Invalid compressed image size.
Format must match internal format.
Invalid internal format.
Invalid or unsupported texture target.
Pixel data cannot be null.
Data is not evenly divisible into the number of bytes needed to store in memory a datum indicated by type.
An active buffer is mapped
Invalid combination of unpack parameters for WebGL.
Invalid copy texture format combination.
OpenGL ES 3.0 Required.
Negative layer.
Mip level invalid for framebuffer texture attachment.
Layer invalid for framebuffer texture attachment.
Texture is not a three-dimensional or two-dimensionsal array texture.
Compressed textures cannot be attached to a framebuffer.
Invalid framebuffer target.
Negative size.
Invalid element range.
No active read framebuffer.
Invalid read buffer
Read buffer must be GL_NONE or GL_BACK when reading from the default framebuffer.
Index is greater than the maximum supported color attachments
Not a valid compressed texture format.
Integer overflow.
Invalid buffer binding size.
Invalid boolean value. Must be GL_FALSE or GL_TRUE.
OpenGL ES 3.1 Required
Invalid pname.
Index must be less than MAX_DRAW_BUFFERS.
Draw buffer must be zero when using depth or stencil.
Source texture is not a valid texture object.
Destination texture is not a valid texture object.
Invalid source texture level.
Invalid source texture height or width.
Destination texture cannot be immutable.
x = y = or z cannot be negative.
Cannot have negative height, width, or depth.
Destination texture too small.
Extension is not enabled.
Attempt to delete an active transform feedback.
Invalid primitive mode.
Transform feedback is already active.
Transform feedback has a buffer bound to multiple outputs.
A program must be bound.
The active program has specified no output variables to record.
EXT/OES_draw_buffers_indexed is not available.
Index must be less than MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.
Index must be less than MAX_UNIFORM_BUFFER_BINDINGS.
Index must be less than the number of workgroup dimensions (3).
Enum requires GLES 3.1
Index must be less than MAX_ATOMIC_COUNTER_BUFFER_BINDINGS.
Index must be within [0, MAX_SHADER_STORAGE_BUFFER_BINDINGS).
Index must be within [0, MAX_VERTEX_ATTRIB_BINDINGS).
MaskNumber cannot be greater than or equal to the value of MAX_SAMPLE_MASK_WORDS.
Index must be within [0, MAX_IMAGE_UNITS).
A buffer must be bound.
Buffer is bound for transform feedback.
Buffer offset overflow.
The read and write copy regions alias memory.
Index must be within [0, NUM_EXTENSIONS).
Invalid name.
Index must be within [0, NUM_REQUESTABLE_EXTENSIONS_ANGLE).
Samples must not be greater than maximum supported value for the format.
Cannot have negative stride.
Stride must be within [0, MAX_VERTEX_ATTRIB_STRIDE).
Client data cannot be used with a non-default vertex array object.
Negative buffer size.
Context has been lost.
Sync object does not exist.
Negative baseViewIndex.
Texture has incompatible target.
baseViewIndex+numViews cannot be greater than GL_MAX_ARRAY_TEXTURE_LAYERS.
No Transform Feedback object is active.
Negative count.
Count exceeds MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.
Index must be less than the transform feedback varying count in the program.
The active Transform Feedback object is not paused.
Transform feedback object that does not exist.
The active Transform Feedback object is paused.
Program not linked.
Index must be less than program active uniform count.
Index must be less than program active uniform block count.
Invalid value for condition.
Invalid value for flags.
Invalid value for timeout.
Sampler is not valid
Specified unit must be in [GL_TEXTURE0, GL_TEXTURE0 + GL_MAX_COMBINED_IMAGE_UNITS)
Fragment output color index must be zero or one.
Color number for secondary color greater than or equal to MAX_DUAL_SOURCE_DRAW_BUFFERS
Color number for primary color greater than or equal to MAX_DRAW_BUFFERS
GL_ANGLE_texture_multisample or GLES 3.1 required.
internalformat is an ETC2/EAC format and target is not GL_TEXTURE_2D_ARRAY.
internalformat is an ASTC format and target is not GL_TEXTURE_2D_ARRAY.
internalformat is an S3TC format and target is not GL_TEXTURE_2D_ARRAY.
internalformat is an RGTC format and target is not GL_TEXTURE_2D_ARRAY.
Invalid type.
Format cannot be GL_DEPTH_COMPONENT or GL_DEPTH_STENCIL if target is GL_TEXTURE_3D
Index is greater than or equal to the number of TRANSFORM_FEEDBACK_BUFFER indexed binding points.
Offset and size must be multiple of 4.
Target is TRANSFORM_FEEDBACK_BUFFER and transform feedback is currently active.
Offset must be multiple of value of UNIFORM_BUFFER_OFFSET_ALIGNMENT.
offset must be a multiple of 4.
Offset must be multiple of value of SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT.
GL_ANGLE_copy_texture_3d extension not available.
Index must be less than MAX_VERTEX_ATTRIBS.
Vertex attribute size must be 1, 2, 3, or 4.
Type is INT_2_10_10_10_REV or UNSIGNED_INT_2_10_10_10_REV and size is not 4.
Type is INT_10_10_10_2_OES or UNSIGNED_INT_10_10_10_2_OES and size is not 3 or 4.
ANGLE_multiview is not available.
numViews cannot be less than 1.
numViews cannot be greater than GL_MAX_VIEWS_ANGLE.
Framebuffer is incomplete.
EXT/OES_draw_buffers_indexed or ES 3.1 are required but not available.
OpenGL ES 3.1 Required
Default vertex array object is bound.
Client data cannot be used with a non-default vertex array object.
Draw indirect buffer must be bound.
indirect must be a multiple of the size of uint in basic machine units.
Draw mode must match current transform feedback object's draw mode.
The draw command is unsupported when transform feedback is active and not paused.
The provided parameters overflow with the provided buffer.
Must have element array buffer bound.
Extension is not enabled.
Invalid framebuffer target.
Params less than 0 or greater than GL_MAX_FRAMEBUFFER_WIDTH.
Params less than 0 or greater than GL_MAX_FRAMEBUFFER_HEIGHT.
Params less than 0 or greater than GL_MAX_FRAMEBUFFER_SAMPLES.
GL_EXT_geometry_shader extension not enabled.
Framebuffer layer cannot be less than 0 or greater than GL_MAX_FRAMEBUFFER_LAYERS_EXT.
Invalid pname.
Default framebuffer is bound.
Invalid program interface.
Object cannot be used because it has not been generated.
Index must be within [0, MAX_VERTEX_ATTRIB_BINDINGS).
Negative offset.
Stride must be within [0, MAX_VERTEX_ATTRIB_STRIDE).
Index must be less than MAX_VERTEX_ATTRIBS.
Invalid program resource index.
Negative buffer size.
No active program for the compute shader stage.
num_groups_x cannot be greater than MAX_COMPUTE_WORK_GROUP_COUNT[0]
num_groups_y cannot be greater than MAX_COMPUTE_WORK_GROUP_COUNT[1]
num_groups_z cannot be greater than MAX_COMPUTE_WORK_GROUP_COUNT[2]
Offset must be a multiple of sizeof(uint) in basic machine units.
Dispatch indirect buffer must be bound.
Insufficient buffer size.
Index must be within [0, MAX_IMAGE_UNITS).
Level is negative.
Negative layer.
access is not one of the supported tokens.
format is not one of supported image unit formats.
texture is not the name of an existing texture object.
Texture is not immutable.
Program not linked.
Invalid propCount.
Invalid bufSize.
Invalid program resource property.
Not an allowed program resource property for this program interface
Active atomic counter resources are not assigned name strings.
MAX_NUM_ACTIVE_VARIABLES requires a buffer or block interface.
Unrecognized shader stage bit.
Program doesn't exist.
Program object was not linked with its PROGRAM_SEPARABLE status set.
Expected a program name, but found a shader name.
Invalid shader type.
Negative count.
Program pipeline does not exist.
Invalid memory barrier bit.
Not a valid texture object name.
Level of detail outside of range.
GL_ANGLE_texture_multisample_array not enabled.
Target must be TEXTURE_2D_MULTISAMPLE_ARRAY_OES.
Negative size.
programInterface must be set to GL_PROGRAM_OUTPUT.
Draw framebuffer is incomplete
Only UNSIGNED_SHORT and UNSIGNED_BYTE types are supported.
Enum is not currently supported.
Uniform size does not match uniform method.
relativeOffset cannot be greater than MAX_VERTEX_ATTRIB_RELATIVE_OFFSET.
Invalid type.
Vertex attribute size must be 1, 2, 3, or 4.
Type is INT_2_10_10_10_REV or UNSIGNED_INT_2_10_10_10_REV and size is not 4.
Type is INT_10_10_10_2_OES or UNSIGNED_INT_10_10_10_2_OES and size is not 3 or 4.
Draw buffer greater than MAX_DRAW_BUFFERS.
Index must be less than MAX_DRAW_BUFFERS.
Enum is not currently supported.
Extension is not enabled.
Invalid pointer query.
OpenGL ES 1.x or 3.2 Required
GL_ANGLE_get_image extension not enabled.
Invalid or unsupported texture target.
Level is negative.
Level of detail outside of range.
Invalid renderbuffer target.
Extension is not enabled.
Element value exceeds element range.
Invalid format.
Invalid type.
Could not pack varying 
Note: Additional non-conformant packing restrictions are enforced on D3D9.
Failed to unmap the client data streaming buffer.
/Library/Caches/com.apple.xbs/Sources/ANGLE_Sim/ANGLE-7610.2.6/src/libANGLE/renderer/gl/VertexArrayGL.cpp
streamAttributes
AsyncWaitableEvent::wait
AsyncWorkerPool::RunTask
thread constructor failed
WebSwapLayer
initWithAPI:
setCurrentContext:
processInfo
operatingSystemVersion
init
setFrame:
frame
setNeedsDisplay
presentRenderbuffer:
initWithSharedState:withContext:withFunctions:
display
mDisplayContext
initialized
mSwapState
mFunctions
mReadFramebuffer
removeFromSuperlayer
addSublayer:
contentsScale
setContentsScale:
@40@0:8^{SharedSwapState=[3{SwapTexture=IIIQ}]{_opaque_pthread_mutex_t=q[56c]}^{SwapTexture}^{SwapTexture}^{SwapTexture}}16@24r^{Functions{Version=II}ii{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}}32
v16@0:8
@"EAGLContext"
^{SharedSwapState=[3{SwapTexture=IIIQ}]{_opaque_pthread_mutex_t=q[56c]}^{SwapTexture}^{SwapTexture}^{SwapTexture}}
r^{Functions{Version=II}ii{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}}
