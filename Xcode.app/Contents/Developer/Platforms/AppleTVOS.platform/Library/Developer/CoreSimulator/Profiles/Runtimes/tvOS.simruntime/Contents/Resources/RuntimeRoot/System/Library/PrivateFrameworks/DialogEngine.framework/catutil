@(#)PROGRAM:catutil  PROJECT:DialogEngine-20104
?0123456789ABCDEFuuuuuuuubtnufruuuuuuuuuuuuuuuuuu
00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
N4siri12dialogengine15ValidationEntryE
NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__114basic_ofstreamIcNS_11char_traitsIcEEEE
  catutil diff
      Compare two CAT files.
Error: insufficient arguments specified for catutil diff
CAT files are equal.
CAT files are different.
Dialog added: 
Dialog changed: 
Dialog deleted: 
  catutil diff <catfile1> <catfile2>
      Compare two CAT files by loading into memory and comparing the in-memory representation.
      This comparison will therefore ignore whitespace differences between the two files.
Error: CAT file not found: 
Error: Cannot parse CAT file: 
  catutil execute
      Execute a CAT file.
--json
--templateDir
--catId
--locale
--params
--globalParams
--resetState
--test
--debug
Error: no --templateDir option specified
Error: no --catId option specified
Error: no --locale option specified
--randomSeed
Error: no value specified for option --randomSeed
Error: the value of --randomSeed is not a number or is out of range
templateDir
catId
locale
parameters
<PARAMS>
globalParameters
<GLOBALPARAMS>
randomSeed
resetState
test
debug
"<PARAMS>"
"<GLOBALPARAMS>"
v16@?0@"NSString"8
  catutil execute [--json] <cat-request.json>
  catutil execute --templateDir <dir> --catId <id> --locale <loc>
                  [--params <params-json>] [--globalParams <params-json>] [--randomSeed <seed>] [--resetState] [--test] [--debug]
      Execute a CAT file either by providing the path to a file that contains a JSON format
      request, or by specifying the same information through command line arguments. When
      providing arguments, --templateDir, --catId, and --locale are required. The optional
      --params value is a JSON string, e.g., '{ "name": "Fred" }'. When specifying a path
      to a JSON request file, the contents of the file should look like the following
      (only "templateDir", "catId" and "locale" are required; other keys are optional):
          {
            "templateDir": "<path-to-template-directory>",
            "catId": "example#hello",
            "locale": "en_US",
            "parameters": {
              "name": "Fred"
            },
            "globalParameters": {
              "device": {
                "isHomePod": true
              }
            },
            "randomSeed": 123,
            "resetState": true,
            "test": true,
            "debug": true
          }
      --catId <id>                 The CAT ID to execute (e.g.: "example#hello")
      --debug                      Output debug log messages
      --globalParams <params-json> JSON string containing global parameters (See --params)
      --json <cat-request.json>    Read all execution options from the given JSON file; Other options are ignored
      --locale <loc>               The locale for which to execute (e.g.: "en_US")
      --params <params-json>       JSON string containing parameters for the CAT (e.g.: '{ "name": "Fred" }')
      --randomSeed <seed>          Specify a seed value for the random number generator (unsigned int)
      --resetState                 Clear the dialog history for the given CAT ID (and its family) before execution
      --templateDir <dir>          Path to the template directory
      --test                       Activate test mode
PrettyPrefix
/Library/Caches/com.apple.xbs/Sources/DialogEngine_Sim/DialogEngine-2.1.4/rapidjson/prettywriter.h
type == kStringType
!Base::hasRoot_
/Library/Caches/com.apple.xbs/Sources/DialogEngine_Sim/DialogEngine-2.1.4/rapidjson/internal/stack.h
GetSize() >= sizeof(T)
PushUnsafe
stackTop_
static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)
String
str != 0
u32toa
/Library/Caches/com.apple.xbs/Sources/DialogEngine_Sim/DialogEngine-2.1.4/rapidjson/internal/itoa.h
buffer != 0
GetSize() >= count * sizeof(T)
EndObject
Base::level_stack_.GetSize() >= sizeof(typename Base::Level)
!Base::level_stack_.template Top<typename Base::Level>()->inArray
0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2
  catutil toxml
      Convert a CAT file to XML format.
  catutil tobinary
      Convert a CAT file to binary format.
  catutil tobinary [--preserve] [--templateDir <dir>] [<cat-in>] [<cat-out>] [--optimize] [--debug]
      Convert a CAT file to binary format. This may be called with two different CAT paths,
      or a single CAT path to convert in place.
      --tempateDir dir  A Templates director to walk recursively to find all CAT files
      --debug           Output debug log messages
      --optimize        Remove data from the file that's not needed for deployment, e.g., notes
      --preserve        Keep existing binary/XML files if present; otherwise they are deleted
Error: can't find input CAT file: 
Error: can't find any locales in CAT file: 
Converting 
 to 
BINARY
 (preserve existing)
 (delete existing)
Error: unable to load CAT file: 
)  Skipping...
Error: unable to save CAT file: 
.bin
.xml
Activate debug mode
dialog
toxml
tobinary
--preserve
--optimize
Error: insufficient arguments specified for catutil 
  catutil toxml [--preserve] [--templateDir <dir>] [<cat-in>] [<cat-out>] [--debug]
      Convert a CAT file to XML format, or all CAT files under a Templates directory.
      If the CAT file is already XML it will be re-written in a canonical layout.
      May be called with a --templateDir option, or two different CAT paths, or a
      single CAT path to convert in place.
      --tempateDir dir  A Templates director to walk recursively to find all CAT files
      --debug           Output debug log messages
      --preserve        Keep existing binary/XML files if present; otherwise they are deleted
  catutil morphun
      Perform operations on Morphun assets. (Subcommands: download, delete, getpath)
download
getpath
delete
Must specify 'download', 'delete' or 'getpath' for 'catutil morphun'
--nonBlocking
Must specify at least one locale for 'catutil download'
Initiating download of locale(s): 
v8@?0
Results: 
Deleting ALL Morphun assets...
  catutil morphun download --locale <locale1> [<locale2> ...] [--nonBlocking]
      Download Morphun assets for the specified locale(s) to device. If the optional --nonBlocking
      flag is supplied, a non-blocking download will be initiated. A minimum of one locale must
      be specified.
  catutil morphun delete [--locale <locale1> <locale2> ...]
      Delete Morphun assets for the specified locale(s) from device. If no locale is provided,
      all morphun assets are deleted from the device. This is a blocking process. When execution is
      complete, all specified assets will have been deleted from the device.
  catutil morphun getpath [--locale <locale1> <locale2> ...]
      Provides absolute paths on device to the Morphun assets for the specified locales. If no
      locales are provided, a list of paths to all Morphun assets present on device will be provided.
No Morphun locales installed on device!
No such locale(s) installed on device!
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
CAT file command line utility. Version 2.1.9.
usage:
  (See 'catutil <command> --help' for details about a specific command.)
  catutil [-h] [--help]
      Display this information and exit.
  catutil manifest
      Generate the CAT updater manifest.
--directory
block
parallel
background
--distribution
--block
--background
--summarize
--set-restrictions
--include-prefix
--exclude-prefix
--include-suffix
--exclude-suffix
  catutil manifest [--distribution <name>] <template-dir>
      Generate the CAT updater manifest file in the template directory, based on all of the files
      under that directory.
      Specify the distribution name with --distribution. This is required.
  catutil manifest [--distribution <name>] [--directory block|parallel|background] [--block <asset name>] [--background <asset name>] [--summarize] [--set-restrictions] [--include-prefix <prefix>] [--exclude-prefix <prefix>] [--include-suffix <suffix>] [--exclude-suffix <suffix>] <template-dir>
      
      Advanced and non-CAT usages for the manifest command. 
      To use a deprecated method of including the params files in the calculation of the 
      publication URL, use --summarize.
      To specify a download behavior for a particular asset other than 'parallel', use either --block
      or --background. 'block' means download immediately, 'parallel' means use what is on disk
      but immediately see in a update is available and if so download it, and 'background'
      means use what is on disk and download any available update with low priority. The
      default behavior for an asset is 'parallel', hence using the --block and --background
      options to selectively use a different behavior on an asset by asset basis.
      Noramally files can be updated individually, such that some files may represent the latest
      available while others may be out of date. If all files should be updated simultaneously,
      such that none of them are 'up-to-date' until all of them are, use the --directory option
      to make all files in the distribution updated as a single directory. Note that this
      requires different access APIs (e.g., 'findDirectory' instead of 'find'). When specifying
      --directory, a download behavior of 'block|parallel|background' must also be specified for
      the entire distribution, as it will be updated as one unit.
      When choosing files in a directory to put in the manifest, a series of prefixes and suffixes
      are used to include and exclude what is added. By default these are CAT specific. To package
      other types of assets, use '--set-restrictions' to remove the CAT specifci prefixes and suffixes,
      then optionally add relevant ones with --include-prefix, --include-suffix, --exclude-prefix, and
      --exlude-suffix. Each option can be used multiple times to add subsequent prefixes and suffixes.
      The following example shows how to generate a new manifest for a distribution named
      'com.apple.siri.DialogEngine.Example' that will include everything in the directory
      'srcDir' except an existing manifest file at srcDir/manifest.pb :
      catutil manifest --distribution com.apple.siri.DialogEngine.Example --set-restrictions --exclude-prefix manifest.pb srcDir
Cannot specify both --directory and either of --block or --background
--distribution is now required
Must specify directory download type of 'block', 'parallel', or 'background'
  catutil exclude
      Exclude CATs from an output/build folder.
================================================================================
BEGIN: 
END: 
Error: No template directory specified.
Error: The specified template directory does not exist or is not a directory: 
--delete
Template directory: 
Delete? 
  catutil exclude --templateDir <dir> [--delete] [--debug]
      Report or delete any CAT folders that have a "meta" element whose "name" attribute is
      "excludeIfSet" and whose "value" attribute is an existing environment variable.
      Example:
        <meta name="excludeIfSet" value="RC_SEED_BUILD"/>
      --debug              Output debug log messages
      --delete             Delete all CATs that meet the criteria instead of merely reporting
      --templateDir <dir>  Path to the template directory
BEGIN ExcludeCats
templateDir: [%s]
delete: %s
Error: Failed to load CAT: 
excludeIfSet
*** The environment variable '
' is defined.  DELETING this CAT. ***
Error: Failed to delete CAT: 
' is defined.  This CAT will be EXCLUDED. ***
' is not defined.  Leaving this CAT in place. ***
END ExcludeCats
execute
validate
diff
metadata
manifest
morphun
exclude
  catutil metadata
      Perform operations on dialog metadata. (Subcommands: write, read, copy)
metadata/dialog-metadata.yaml
Cannot find metadata config file: 
#CAT-DIALOG-METADATA
Error parsing dialog metadata config file: 
categories
locales
Unknown key in YAML file: %s
allowunbounded
Unsupported option in YAML file: %s
codegen
copy
read
write
Please specify one of the following metadata sub-commands: 
--verbose
--ignoreIncludes
--allLocales
--assistantDir
--category
--filename
--outputDir
--config
--swiftCaseStyle
  catutil metadata write --templateDir <dir> --assitantDir <dir> [--category <name>] [--verbose]
      [--ignoreIncludes] [--locale <locale1> <locale2> ...] [--allLocales]
      Read the Templates/metadata/dialog-metadata.yaml file to define the categories and locales
      to convert. If --category is specified, exclude all other configured categories except the
      one specified. Then read [d] tag metadata from VOC files in the assistant repository and
      generate a CAT dialog metadata file for every locale. You can specify if you want the VOC
      parser to follow include directives or not. You can override the list of locales in the YAML
      file with the --locale or --allLocales arguments.
  catutil metadata read --templateDir <dir> --category <name> --locale <locale>
  catutil metadata read --filename <filename>
      Read a dialog metadata file and output its contents to the shell. You can either specify
      the file through a combination of a template dir, category name (e.g. personRelationship),
      and a locale; or you can provide the full path to the file with the --filename option.
  catutil metadata copy --templateDir <dir> --category <name> --outputDir <dir>
      Copy all of the dialog metadata in a CAT .dtag directory into another directory and output
      the data in VOC format. This lets you easily view all of the metadata for all locales for a
      given category, and also lets you set up a local version of the data that's independent of
      the assistant repo.
  catutil metadata codegen --templateDir <dir> --outputDir <dir> [--category <name>]
      [--config <path>] [--swiftCaseStyle none|lower|upper] [--debug]
      Read dialog metadata files and generate Swift enum definitions from their contents.
      --category <name>         Process the specified category (or all categories if omitted)
      --config <path>           Path to a YAML file for configuring output
      --debug                   Output debug log messages
      --outputDir <dir>         Path to the folder in which to write generated source code files
      --swiftCaseStyle <style>  Choose the formatting of Swift enum case statements
                                  "none": Unmodified (default)
                                  "lower": All lower case
                                  "upper": All upper case
      --templateDir <dir>       Path to the template directory
No metdata file specified. Try --filename.
The metadata file does not exist: 
Failed to read file: 
; %s (allowUnbounded = %s)
    %s
 [d; 
 [d]
No template directory specified. Try --templateDir.
No category specified. Try --category.
No output directory specified. Try --outputDir.
.voc
Failed to write to file: 
No --templateDir specified
The --templateDir directory does not exist: 
No --assistantDir specified
The --assistantDir directory does not exist: 
No categories defined in config file
Error: Specified category '
' not found in config file.
Processing only the specified category: 
product/assistant/nl/src/main/filesystem/data/nl/siri/voc
product/assistant/nl/src/main/filesystem/data/nl/siri/override-voc
product/assistant/ontology/src/main/filesystem/data/nl/siri/voc
Category 
 for locale 
Parsing Voc file: 
#INCLUDE
Cannot find Voc include: 
  catutil validate
      Validate one or more CAT files.
Insufficient arguments specified for catutil validate
--schema
--xcode
--templateDir required for catutil validate
schema
catschema
=== Validate Schema: 
=== Validate CAT: 
.cat.xml
.cat.bin
CAT xml or binary found outside of .cat file directory
CAT xml or binary file extension is not lower case
  catutil validate --templateDir <dir> [--schema <type>] [--catId <id>] [--locale <locale>] [--xcode]
      If --templateDir and --catId are specified, then validate the specified CAT file.
      If --locale is also defined then only check that locale, otherwise check all locales.
      If --templateDir and --schema are specified, then validate the specified type name.
      If --templateDir is specified, but neither --catId or --schema are, then find and validate
      all schema files and all CAT files under the template directory. If --locale is also defined
      then only check that locale for each CAT file, otherwise check all locales for all CAT files.
      If --xcode is specified, output is generated in a format that can be used with Xcode's
      Build Phases > Run Script functionality to highlight errors/warnings within Xcode's UI.
error
yaml
Cannot find schema for type name: 
No errors detected for type schema: 
 error(s) for 
CAT does not exist
Cannot find any locale files in CAT directory
cannot find CAT file: 
failed to load CAT file: 
 validation warnings(s) for 
No validation errors for: 
 validation error(s) for 
_params.cat
warning
Null config passed to ReadCodegenConfigFile
No codegen config file specified
Error: Cannot find codegen config file: 
#CAT-METADATA-CODEGEN-CONFIG
Error: Failed to parse codegen config file: 
enums
Warning: Invalid data in YAML file: 
name
cases
swiftlintWarnings
disable
// GENERATED CODE. You shouldn't be editing this file.
Semantic
-'. 
upper
lower
swift
Write Swift enum: 
Error: Failed to write to file: 
// swiftlint:disable 
/// Semantic concept: 
internal enum 
: String, CaseIterable {
    case 
 = "
mOutputDir: %s
mTemplateDir: %s
mCategory: %s
mCodegenConfigPath: %s
mSwiftCaseStyle: %s
Error: No template directory specified. Try --templateDir.
Error: The specified template directory does not exist: 
Error: No output directory specified. Try --outputDir.
Error: The specified output directory does not exist: 
No categories defined in the metadata config file
Error: The specified category '
' was not found in the metadata config file.
Error: The specified codegen config file does not exist: 
none
Error: Invalid value for --swiftCaseStyle: 
(All)
Generate code for metadata
Output directory: 
Template directory: 
Category: 
Config file: 
(None)
Swift case style: 
Error: The metadata file does not exist: 
Read metadata file: 
Error: Failed to read file: 
currentRunLoop
stringWithUTF8String:
UTF8String
executeWithJson:completionBlock:
dateWithTimeIntervalSinceNow:
runMode:beforeDate:
mainRunLoop
setDownloadType:
setObject:forKey:
fileURLWithPath:isDirectory:
catUpdates
deprecatedCatSummary
initWithPrefixes:suffixes:
initWithInclude:exclude:
putDirectoryManifest:src:contents:summary:downloadType:
putManifest:src:contents:summary:overrides:
addObject:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>morphunassetsupdaterd-catutil</string>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.MorphunData</string>
<string>com.apple.MobileAsset.TempMorphunData</string>
</array>
<key>com.apple.private.siri-morphunassetsupdaterd</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.siri.morphunassetsupdaterd</string>
</array>
</dict>
</plist>
