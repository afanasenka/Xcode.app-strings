@(#)PROGRAM:nsurlsessiond  PROJECT:CFNetwork-1202
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>19A603013</string>
<key>CFBundleExecutable</key>
<string>nsurlsessiond</string>
<key>CFBundleIdentifier</key>
<string>com.apple.nsurlsessiond</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>nsurlsessiond</string>
<key>CFBundlePackageType</key>
<string>APPL</string>
<key>CFBundleShortVersionString</key>
<string>1206</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>AppleTVSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1206</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>12A8179f</string>
<key>DTPlatformName</key>
<string>appletvsimulator</string>
<key>DTPlatformVersion</key>
<string>14.2</string>
<key>DTSDKBuild</key>
<string>18K5047c</string>
<key>DTSDKName</key>
<string>appletvsimulator14.2.internal</string>
<key>DTXcode</key>
<string>1200</string>
<key>DTXcodeBuild</key>
<string>12A8179f</string>
<key>MinimumOSVersion</key>
<string>14.2</string>
<key>NSAppTransportSecurity</key>
<dict>
<key>NSAllowsArbitraryLoads</key>
<true/>
</dict>
<key>UIDeviceFamily</key>
<array>
<integer>3</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.nsurlsessiond</string>
<key>com.apple.carousel.defaulturlsessionpolicy</key>
<true/>
<key>com.apple.chronoservices</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.duet.activityscheduler.allow</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.mobile.keybagd.UserManager.sync</key>
<true/>
<key>com.apple.multitasking.systemappassertions</key>
<true/>
<key>com.apple.networkd.configure_connection_pool</key>
<true/>
<key>com.apple.networkd.join_connection_pool</key>
<true/>
<key>com.apple.networkd.set_account_identifier</key>
<true/>
<key>com.apple.networkrelay.companionLink.isEnabled</key>
<true/>
<key>com.apple.private.CacheDelete</key>
<array>
<string>CLIENT_ENTITLEMENT</string>
<string>PURGEABLE_ENTITLEMENT</string>
<string>PURGE_ENTITLEMENT</string>
<string>CANCEL_PURGE_ENTITLEMENT</string>
<string>SERVICE_ENTITLEMENT</string>
</array>
<key>com.apple.private.InstallCoordination.allowed</key>
<true/>
<key>com.apple.private.MobileContainerManager.allowed</key>
<true/>
<key>com.apple.private.MobileContainerManager.userManagedAssets</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.accounts.bundleidspoofing</key>
<true/>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.TopLevelDomainDafsa</string>
</array>
<key>com.apple.private.dark-wake-network-reachability</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.nsurlsessionproxy</string>
</array>
<key>com.apple.private.ids.messaging.high-priority</key>
<array>
<string>com.apple.private.alloy.nsurlsessionproxy</string>
</array>
<key>com.apple.private.ids.nearby</key>
<true/>
<key>com.apple.private.ids.prefer-infrawifi</key>
<array>
<string>com.apple.private.alloy.nsurlsessionproxy</string>
</array>
<key>com.apple.private.ids.self-session</key>
<array>
<string>com.apple.private.alloy.nsurlsessionproxy</string>
</array>
<key>com.apple.private.network.interface-control</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.nsurlsession-allow-override-connection-pool</key>
<true/>
<key>com.apple.private.nsurlsession.impersonate</key>
<true/>
<key>com.apple.private.nsurlsession.set-task-priority</key>
<true/>
<key>com.apple.rootless.storage.com.apple.MobileAsset.DuetExpertCenterAsset</key>
<true/>
<key>com.apple.rootless.storage.nsurlsessiond</key>
<true/>
<key>com.apple.runningboard.assertions.cfnetwork</key>
<true/>
<key>com.apple.runningboard.targetidentities</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.nano.nanoregistry.paireddeviceregistry</string>
<string>com.apple.terminusd</string>
<string>com.apple.chronoservices</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.nsurlstoragedresources</string>
</array>
<key>com.apple.telephony.cupolicy-monitor-access</key>
<true/>
<key>com.apple.usermanagerd.persona.background</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>nsurlsessiond</string>
</array>
</dict>
</plist>
PDURLSessionProxyOpenSocket
NSCopying
NDPowerlogReporter
PDURLSessionProxyDidReceiveChallengeReply
PDURLSessionProxyCreateSession
nsurlsessiond_Additions
PDURLSessionProxySetTaskPriority
PDURLSessionProxyDataTaskWithRequestReply
PDURLSessionProxyDataTaskWithRequest
PDURLSessionProxyGetAuthHeaders
NDAVAssetDownloadSessionWrapper
AVAssetDownloadSessionDelegate
NDSessionManager
NDBackgroundSessionDelegate
NSObject
NDBackgroundSessionManagerProtocol
NDBackgroundSession
NDApplicationObserver
NDCredentialStorageDelegate
NSURLSessionDelegate_Internal
NSURLSessionDelegate
NSURLSessionDownloadDelegate_Private
NSURLSessionTaskDelegatePrivate
NSURLSessionTaskDelegate
NSURLSessionDownloadDelegate
NSURLSessionDataDelegate_Internal
NSURLSessionDataDelegate
NDCallbackQueueDelegate
NDBackgroundSessionProtocol
PDURLSessionProxyStartedUp
PDURLSessionProxyGetAuthHeadersReply
PDURLSessionProxyDidReceiveData
PDURLSessionProxyDidReceiveResponse
PDURLSessionProxyResumeTask
PDURLSessionProxySetTaskDescription
NDStatusMonitor
NDUserEventAgentConnection
NSCoding
NSSecureCoding
PDURLSessionProxySocketDisconnected
NDFileUtilities
PDURLSessionProxyOpenSocketReply
PDURLSessionProxyResponse
TLDMobileAssetManager
NDApplication
NDSpringBoardApplication
NDSpringBoardAppObserver
PDURLSessionProxyDidReceiveResponseReply
PDURLSessionProxyWillPerformRedirectionReply
PDURLSessionProxyRequest
PDURLSessionProxyCredential
PDURLSessionProxyTaskWaiting
PDURLSessionProxyDidReceiveDataReply
PDURLSessionProxySuspendTask
PDURLSessionProxyInvalidateSession
NDCredentialStorage
PDURLSessionProxyWillSendRequest
PDURLSessionProxyOpenBodyStream
PDURLSessionProxyDidSendBodyData
PDURLSessionProxyCancelTask
PDURLSessionProxyTaskMessage
NDTaskMonitor
PDURLSessionProxyDidReceiveChallenge
PDURLSessionProxyError
Daemon
NDSessionManagerDelegate
NSXPCListenerDelegate
LSApplicationWorkspaceObserverProtocol
PDURLSessionProxyUploadBodyData
NDSpringBoard
NDAVThroughputMonitor
PDURLSessionProxySessionMessage
PDURLSessionProxyTaskWillBeRetried
PDURLSessionProxyConnectedToServer
PDURLSessionProxyAuthChallenge
SZExtractor
PendingCallback
NDCallbackQueue
PDURLSessionProxySessionBecameInvalid
NDAVBackgroundSession
NDAVAssetDownloadSessionWrapperDelegate
NDAVAdditions
PDURLSessionProxyTaskCompleted
PDURLSessionProxyWillPerformRedirection
hasSession
TB,R,N
session
T@"PDURLSessionProxySessionMessage",&,N,V_session
hasSocketUUID
socketUUID
T@"NSString",&,N,V_socketUUID
hasHost
host
T@"NSString",&,N,V_host
hasPort
TB,N
port
TI,N,V_port
%@ %@
hasTask
task
T@"PDURLSessionProxyTaskMessage",&,N,V_task
hasDisposition
disposition
Ti,N,V_disposition
hasCredential
credential
T@"PDURLSessionProxyCredential",&,N,V_credential
UseCredential
PerformDefaultHandling
CancelAuthenticationChallenge
RejectProtectionSpace
(unknown: %i)
hasConfiguration
configuration
T@"NSData",&,N,V_configuration
hasSupportsRedirects
supportsRedirects
TB,N,V_supportsRedirects
hasDelegateImplementsWillSendRequest
delegateImplementsWillSendRequest
TB,N,V_delegateImplementsWillSendRequest
hasDelegateImplementsSessionAuthChallenge
delegateImplementsSessionAuthChallenge
TB,N,V_delegateImplementsSessionAuthChallenge
hasDelegateImplementsTaskAuthChallenge
delegateImplementsTaskAuthChallenge
TB,N,V_delegateImplementsTaskAuthChallenge
hasDelegateImplementsWillPerformRedirection
delegateImplementsWillPerformRedirection
TB,N,V_delegateImplementsWillPerformRedirection
hasDelegateImplementsDidReceiveResponse
delegateImplementsDidReceiveResponse
TB,N,V_delegateImplementsDidReceiveResponse
%02x
errorFailingURL
errorFailingURLSessionTask
_NSURLErrorFailingURLSessionTaskErrorKey
errorCFStreamErrorDomain
errorCFStreamErrorCode
errorDomain
errorCode
_nsurlsessiondErrorDomain
_unsafe
com.apple.nsurlsessiond
background
--privileged
--postlogoutsync
hasPriority
priority
TI,N,V_priority
hasTaskInfo
taskInfo
T@"NSData",&,N,V_taskInfo
hasOriginalRequest
originalRequest
T@"PDURLSessionProxyRequest",&,N,V_originalRequest
hasCurrentRequest
currentRequest
T@"PDURLSessionProxyRequest",&,N,V_currentRequest
hasTaskSequenceNumber
taskSequenceNumber
TQ,N,V_taskSequenceNumber
hasResponse
response
T@"PDURLSessionProxyResponse",&,N,V_response
countOfBytesWritten
TQ,V_countOfBytesWritten
countOfBytesExpectedToWrite
TQ,V_countOfBytesExpectedToWrite
progressTimerRunning
TB,V_progressTimerRunning
downloadSession
T@"AVAssetDownloadSession",&,V_downloadSession
delegate
T@"<NDAVAssetDownloadSessionWrapperDelegate>",R,W,V_delegate
delegateQueue
T@"NSObject<OS_dispatch_queue>",R,&,V_delegateQueue
T@"NSURL",R,C,V_URL
destinationURL
T@"NSURL",R,C,V_destinationURL
options
T@"NSDictionary",R,&,V_options
downloadToken
TQ,R,V_downloadToken
taskIdentifier
TQ,V_taskIdentifier
TimeoutActionTurnOff
TimeoutAction
TimeoutSeconds
AVAssetDownloadSessionWrapper %llu
AssertName
AssertLevel
PreventUserIdleSystemSleep
AssertType
AVAssetDownloadSessionCurrentLoadedTimeRangesKey
AVAssetDownloadSessionTimeRangeExpectedToLoadKey
AVAssetDownloadSessionNewlyLoadedTimeRangeKey
com.apple.nsurlsessionf.avassetdownloadersessionwrappercallback
AVAssetDownloadTaskMinimumRequiredMediaBitrateKey
AVAssetDownloadTaskMediaSelectionKey
AVAssetDownloadTaskMediaSelectionsForMultichannelKey
AVAssetDownloadSessionMediaSelectionArrayKey
B24@?0@"NSURL"8@"NSError"16
.tmp
CFNetworkDownload_
com.apple.nsurlsessiond-cachedelete
^{__CFDictionary=}20@?0i8^{__CFDictionary=}12
q24@?0@"NSDate"8@"NSDate"16
CACHE_DELETE_AMOUNT
CACHE_DELETE_VOLUME
queue
T@"NSObject<OS_dispatch_queue>",&,V_queue
xpcConn
T@"NSXPCConnection",W,V_xpcConn
T@"<NDSessionManagerDelegate>",W,V_delegate
isSpringBoardApp
TB,V_isSpringBoardApp
obliterationCompletion
T@?,C,V_obliterationCompletion
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v32@?0@8@16^B24
options.plist
configuration.plist
NDBackgroundSessionManagerRestoredStateKeyTLSSessionCachePrefix
NDBackgroundSessionManagerKeySessionUUID
NDBackgroundSessionManagerRestoredStateKeyTasks
kNSURLSessionImmediateInvalidationErrorKey
kNSURLSessionThrowImmediateAVExceptionKey
com.apple.security.application-groups
com.apple.private.nsurlsession.set-max-watch-cell-transfer-size
com.apple.private.nsurlsession.allow-duet-preauthorization
com.apple.private.nsurlsession-allow-override-connection-pool
com.apple.private.dark-wake-network-reachability
com.apple.private.nsurlsession.allow-discretionary-cellular
com.apple.private.nsurlsession.impersonate
Holding boost for %@
com.apple.OTACrashCopier
downloadDirectoryPath.plist
sessions.plist
com.apple.nsurlsessiond.session-manager
com.apple.nsurlsessiond.session-archive-queue
T@"<NDBackgroundSessionDelegate>",W,V_delegate
uuid
T@"NSUUID",R,V_uuid
identifier
T@"NSString",R,V_identifier
clientBundleID
T@"NSString",R,V_clientBundleID
monitoredAppBundleID
T@"NSString",R,V_monitoredAppBundleID
secondaryID
T@"NSString",R,V_secondaryID
invalidateReply
T@?,C,V_invalidateReply
sharedContainerIdentifier
T@"NSString",C,V_sharedContainerIdentifier
trailers
v16@?0@"NSURLRequest"8
NSURLAuthenticationMethodServerTrust
NSURLAuthenticationMethodClientCertificate
NSURLAuthenticationMethodNegotiate
NSURLAuthenticationMethodNTLM
com.apple.private.nsurlsession.set-discretionary-override-value
com.apple.private.nsurlsession.set-task-priority
v16@?0@"NSData"8
v32@?0@"NSURLProtectionSpace"8@"NSURLCredential"16^B24
__com.apple.CFNetwork.prefix__
%@%@%@
CFNetworkUpload_%@
v24@?0q8@"NSURLRequest"16
Task <?>.<0>
New task
_NSURLRequestIsDiscretionaryOverrideValue
v32@?0@"NSNumber"8@"__NSCFURLSessionTaskInfo"16^B24
com.apple.mobileassetd
com.apple.sharingd
v12@?0B8
NSURLErrorBackgroundTaskCancelledReasonKey
__NSCFLocalUploadTask
__NSCFLocalDataTask
__NSCFLocalDownloadTask
pathToDownloadTaskFile
NSKeyedArchiveRootObjectKey
effectiveConfig
VPN not connected
Duet Said No
Waiting for start time
Duration expired
Waiting for power
Waiting for inexpensive network
Waiting for non-cellular network
Link quality too poor
Cellular service is unavailable
Thermal conditions are not good
Conflicting parameters
Required data protection level is locked
Connection pool is full
Opportunistic
Network unavailable
Blocked by proxy
In battery saver mode
Network quality
Unknown (%llu)
%@ [allowsCellularAccess: %d]
%@ [delay: %f, duration: %f, allowsCellularAccess: %d]
Task <?>.<%lu>
tasks.plist
Library/Caches/com.apple.nsurlsessiond/Downloads
NSURLSessionDelegateImplementsTaskAuthChallengeKey
NSURLSessionDelegateImplementsSessionAuthChallengeKey
NSURLSessionDelegateImplementsWillBeginDelayedRequestKey
NSURLSessionDelegateImplementsWillSendRequestForEstablishedConnectionKey
Uploads
NSURLSessionBackgroundPoolName-sync-%d
NSURLSessionBackgroundPoolName
hasVersion
version
TI,N,V_version
hasLaunchUUID
launchUUID
T@"NSString",&,N,V_launchUUID
hasHeaderData
headerData
T@"NSData",&,N,V_headerData
hasContinueLoad
continueLoad
TB,N,V_continueLoad
hasReceivedData
receivedData
T@"NSData",&,N,V_receivedData
hasAdditionalProperties
additionalProperties
T@"NSData",&,N,V_additionalProperties
hasTaskDescription
taskDescription
T@"NSString",&,N,V_taskDescription
com.apple.nsurlsessiond.status-monitor
com.apple.nsurlsessiond-events.message-type
v16@?0@"NSObject<OS_xpc_object>"8
com.apple.nsurlsessiond-events.registered-clients
com.apple.nsurlsessiond-launchondemand
com.apple.nsurlsessiond.UserEventAgentConnectionQueue
supportsSecureCoding
TB,R
nsurlsessiond
com.apple.nsurlsessiond.szmodtime
com.apple.nsurlsessiond.purged
/nsurlsessiond.launch
com.apple.nsurlsessiond/Downloads
-launchd
hasStreamErrorDomain
streamErrorDomain
Ti,N,V_streamErrorDomain
hasStreamErrorCode
streamErrorCode
Ti,N,V_streamErrorCode
hasArchiveList
archiveList
T@"NSData",&,N,V_archiveList
installedAssetVersion
TQ,V_installedAssetVersion
DafsaData.bin
Library/dafsaData.bin
systemgroup.com.apple.nsurlstoragedresources
v16@?0q8
com.apple.MobileAsset.TopLevelDomainDafsa
bundleIdentifier
T@"NSString",&,V_bundleIdentifier
currentRequestDelay
Td,V_currentRequestDelay
isInTransitionalDiscretionaryPeriod
TB,VisInTransitionalDiscretionaryPeriod
com.apple.nsurlsessiond.NDSpringBoardApplication.request-delay-queue
Cancel
Allow
BecomeDownload
hasRequest
request
T@"PDURLSessionProxyRequest",&,N,V_request
hasReason
reason
TI,N,V_reason
hasShouldCancel
shouldCancel
TB,N,V_shouldCancel
T@"<NDCredentialStorageDelegate>",W,V_delegate
bundleID
T@"NSString",C,V_bundleID
v16@?0@"NSURLCredential"8
v24@?0@"NSDictionary"8@"NSDictionary"16
com.apple.nsurlsessiond.credential-storage-queue
hasHasBodyStream
hasBodyStream
TB,N,V_hasBodyStream
hasBytesSent
bytesSent
TQ,N,V_bytesSent
hasTotalBytesSent
totalBytesSent
TQ,N,V_totalBytesSent
hasTotalBytesExpectedToSend
totalBytesExpectedToSend
TQ,N,V_totalBytesExpectedToSend
hasTaskIdentifier
TQ,N,V_taskIdentifier
basePriority
Tq,V_basePriority
hasChallenge
challenge
T@"PDURLSessionProxyAuthChallenge",&,N,V_challenge
hasDomain
domain
T@"NSString",&,N,V_domain
hasCode
code
TQ,N,V_code
hasUserInfo
userInfo
T@"NSData",&,N,V_userInfo
T@"NSObject<OS_dispatch_queue>",R,V_queue
privileged
TB,GisPrivileged,V_privileged
inSyncBubble
TB,GisInSyncBubble,V_inSyncBubble
com.apple.nsurlsessiond.started
v32@?0@"NSString"8@"NDSessionManager"16^B24
q24@?0@8@16
NDTaskInfo
bundles.plist
com.apple.nsurlsessiond.daemon-queue
com.apple.nsurlsessiond-xpc-transaction-queue
hasBodyData
bodyData
T@"NSData",&,N,V_bodyData
UIApplicationLaunchOptionsURLSessionKey
com.apple.cfnetwork
BackgroundDownload
com.apple.nsurlsessiond.handlesession %@
could not find
found
v32@?0@8@"RBSAssertion"16^B24
v32@?0@"NSString"8@"NSArray"16^B24
v32@?0@"NSString"8@"NSNumber"16^B24
KeepAppsUpToDateAppList
com.apple.mt
v16@?0@"NSDictionary"8
com.apple.nsnetwork.SpringBoard-queue
kKeepAppsUpToDateEnabledChangedNotification
hasSessionIdentifier
sessionIdentifier
T@"NSString",&,N,V_sessionIdentifier
hasUuidString
uuidString
T@"NSString",&,N,V_uuidString
hasSequenceNumber
sequenceNumber
TQ,N,V_sequenceNumber
hasIdsPriority
idsPriority
Tq,N,V_idsPriority
hasError
error
T@"PDURLSessionProxyError",&,N,V_error
extractorDelegate
T@"<SZExtractorDelegate>",W,N
doesConsumeExtractedData
file-write-create
nw_activityUUID
DisallowCellularDueToSystemPolicy
TimeoutIntervalForResource
v24@?0Q8@"NSError"16
SZExtractor
CountOfBytesClientExpectsToReceive
CountOfBytesClientExpectsToSend
EarliestBeginDate
PublishingURL
StatusCodes
type
Ti,V_type
args
T@"NSArray",C,V_args
hasBeenDrained
TB,V_hasBeenDrained
T@"<NDCallbackQueueDelegate>",W,V_delegate
v28@?0B8@"NSDictionary"12@"NSURLRequest"20
v16@?0@"NSError"8
v16@?0@"NSFileHandle"8
v24@?0@"NSURLRequest"8@"NSFileHandle"16
v24@?0q8@"NSURLCredential"16
v8@?0
v20@?0I8r^v12
configuration.apple.com
https
http
file-write-data
com.apple.private.nsurlsession.media-asset-download.can-specify-destination-url
%@%@%@.movpkg
%llu
{CGSize=dd}
AVAssetDownloadSessionDebugIdentifierKey
AVAssetDownloadTaskMinimumRequiredPresentationSizeKey
_host
_port
_session
_socketUUID
_has
copyWithZone:
hasSession
hasSocketUUID
hasHost
setPort:
setHasPort:
hasPort
description
dictionaryRepresentation
readFrom:
writeTo:
copyTo:
isEqual:
hash
mergeFrom:
session
setSession:
socketUUID
setSocketUUID:
host
setHost:
port
.cxx_destruct
allocWithZone:
numberWithUnsignedInt:
setObject:forKey:
dictionary
stringWithFormat:
_task
_hasStarted
_lastUpdateTime
_lastSuspendTime
_suspendedDurationSinceLastUpdate
initWithTask:
taskWillResume
taskWillSuspend
taskTransferredData:countOfBytesReceived:
cancel
_credential
_disposition
hasTask
disposition
setDisposition:
setHasDisposition:
hasDisposition
dispositionAsString:
StringAsDisposition:
hasCredential
task
setTask:
credential
setCredential:
isEqualToString:
_configuration
_delegateImplementsDidReceiveResponse
_delegateImplementsSessionAuthChallenge
_delegateImplementsTaskAuthChallenge
_delegateImplementsWillPerformRedirection
_delegateImplementsWillSendRequest
_supportsRedirects
hasConfiguration
setSupportsRedirects:
setHasSupportsRedirects:
hasSupportsRedirects
setDelegateImplementsWillSendRequest:
setHasDelegateImplementsWillSendRequest:
hasDelegateImplementsWillSendRequest
setDelegateImplementsSessionAuthChallenge:
setHasDelegateImplementsSessionAuthChallenge:
hasDelegateImplementsSessionAuthChallenge
setDelegateImplementsTaskAuthChallenge:
setHasDelegateImplementsTaskAuthChallenge:
hasDelegateImplementsTaskAuthChallenge
setDelegateImplementsWillPerformRedirection:
setHasDelegateImplementsWillPerformRedirection:
hasDelegateImplementsWillPerformRedirection
setDelegateImplementsDidReceiveResponse:
setHasDelegateImplementsDidReceiveResponse:
hasDelegateImplementsDidReceiveResponse
configuration
setConfiguration:
supportsRedirects
delegateImplementsWillSendRequest
delegateImplementsSessionAuthChallenge
delegateImplementsTaskAuthChallenge
delegateImplementsWillPerformRedirection
delegateImplementsDidReceiveResponse
numberWithBool:
UTF8String
_errorShouldSuppressWake
_errorShouldBeRewritten
_cancelledReasonForError
_errorDictionaryForPowerlog
_priorityValue
set_priority:
_setPriority:withMonitoredApplication:
valueForEntitlement:
boolValue
_connectionHasEntitlement:
setWithObjects:
unionSet:
addObject:
defaultManager
fileExistsAtPath:
stringByDeletingLastPathComponent
lastPathComponent
stringByAppendingString:
stringByAppendingPathComponent:
fileSystemRepresentation
dataWithContentsOfFile:
unarchivedObjectOfClasses:fromData:error:
_safe_unarchiveObjectWithFile:
stringWithCapacity:
appendFormat:
uppercaseString
_sha1Hash
objectForKeyedSubscript:
integerValue
objectForKey:
numberWithInteger:
setObject:forKeyedSubscript:
_isRecoverableErrorForBackgroundTask
_isPriorityChangedError
_shouldRemoveCacheFileForError
initWithMachServiceName:
_setQueue:
currentRunLoop
_priority
setPriority:
setHasPriority:
hasPriority
priority
_taskInfo
hasTaskInfo
taskInfo
setTaskInfo:
_taskSequenceNumber
_currentRequest
_originalRequest
hasOriginalRequest
hasCurrentRequest
setTaskSequenceNumber:
setHasTaskSequenceNumber:
hasTaskSequenceNumber
originalRequest
setOriginalRequest:
currentRequest
setCurrentRequest:
taskSequenceNumber
numberWithUnsignedLongLong:
_response
hasResponse
response
setResponse:
_asset
_timer
_powerAssertion
_callbackQueue
_progressTimerRunning
_downloadSession
_delegate
_delegateQueue
_URL
_destinationURL
_options
_downloadToken
_countOfBytesWritten
_countOfBytesExpectedToWrite
_taskIdentifier
assetDownloadSessionDidFinishDownload:
assetDownloadSession:didFailWithError:
assetDownloadSession:didFinishDownloadForMediaSelection:
assetDownloadSession:didResolveMediaSelection:
assetDownloadSession:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:
doesAVAssetDownloadSessionSupportMultipleDownloads
initWithURL:destinationURL:options:delegate:queue:
initWithURLAsset:destinationURL:options:delegate:queue:
addSessionObservers
removeSessionObservers
disavowSession
didReceiveSucceededNotification:
didReceiveFailedNotification:
didReceiveFileSizeAvailableNotification:
didReceiveTimeRangesChangedNotification:
didReceiveMediaSelectionResolutionNotification:
sendProgressUpdate
takePowerAssertion
releasePowerAssertion
resume
suspend
cancelAndDeliverError:
startLoadingMetadata
downloadSession
setDownloadSession:
delegate
delegateQueue
destinationURL
options
downloadToken
countOfBytesWritten
setCountOfBytesWritten:
countOfBytesExpectedToWrite
setCountOfBytesExpectedToWrite:
taskIdentifier
setTaskIdentifier:
progressTimerRunning
setProgressTimerRunning:
propertyList
valueWithCMTimeRange:
pause
dictionaryWithObjects:forKeys:count:
fileSize
countOfBytesReceived
resolvedMediaSelection
removeObserver:name:object:
defaultCenter
addObserver:selector:name:object:
assetDownloadSessionWithAsset:destinationURL:options:
setDelegate:queue:
assetDownloadSessionWithAsset:mediaSelections:destinationURL:options:
removeObjectForKey:
initWithAsset:propertyList:
countByEnumeratingWithState:objects:count:
array
mutableCopy
assetDownloadSessionWithURL:destinationURL:options:
numberWithUnsignedLong:
fileURLWithPath:
addEntriesFromDictionary:
dateWithTimeIntervalSinceNow:
earlierDate:
compare:
keysSortedByValueUsingComparator:
UUID
UUIDString
fileURLWithPath:isDirectory:relativeToURL:
moveItemAtURL:toURL:error:
numberWithLongLong:
arrayWithObjects:count:
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
nextObject
longLongValue
fileURLWithPath:isDirectory:
getResourceValue:forKey:error:
removeItemAtURL:error:
hasPrefix:
hasSuffix:
_sessions
_reconnectingProxies
_clientBundleID
_bundleDirectory
_sessionArchiveQueue
_boost
_isSpringBoardApp
_queue
_xpcConn
_obliterationCompletion
sessionCompleted:withCompletionHandler:
debugDescription
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
boost
dropBoost
createSessionWithConfiguration:clientProxy:cachesDirectory:options:reply:
sendPendingCallbacksForIdentifier:reply:
releaseAssertionForSession:reply:
okayToSendPendingCallbacksForIdentifier:reply:
getActiveSessionIdentifiersWithReply:
obliterateAllSessionsWithReply:
initWithDelegate:bundleID:isSpringBoardApp:
dealloc
archivePath
downloadDirectoryDataPath
restoreOptionsFromArchivePath:
restoreState:
archiveState
copyAndSanitizeClientConfiguration:
connection:canUseSharedContainerIdentifier:
cleanupWithCompletionHandler:
getSessionWithIdentifier:
clientApplicationWasReinstalled
obliterate
archiveTimerFired
queue
setQueue:
xpcConn
setXpcConn:
setDelegate:
isSpringBoardApp
setIsSpringBoardApp:
obliterationCompletion
setObliterationCompletion:
enumerateKeysAndObjectsUsingBlock:
allKeys
writeToFile:atomically:
archivedDataWithRootObject:requiringSecureCoding:error:
_web_errorWithDomain:code:URL:
_xpcConnection
currentConnection
_supportsAVAssetDownloads
containsObject:
set_maximumWatchCellularTransferSize:
_maximumWatchCellularTransferSize
set_duetPreauthorized:
_duetPreauthorized
set_directoryForDownloadedFiles:
_isSafeDirectoryForDownloads:withToken:
auditToken
processIdentifier
_directoryForDownloadedFiles
set_connectionPoolName:
_connectionPoolName
set_allowsPowerNapScheduling:
_allowsPowerNapScheduling
set_respectsAllowsCellularAccessForDiscretionaryTasks:
_respectsAllowsCellularAccessForDiscretionaryTasks
_sourceApplicationAuditTokenData
set_sourceApplicationSecondaryIdentifier:
_sourceApplicationSecondaryIdentifier
set_sourceApplicationBundleIdentifier:
_sourceApplicationBundleIdentifier
copy
endActivity:
processInfo
beginActivityWithOptions:reason:
addObjectsFromArray:
fileExistsAtPath:isDirectory:
path
URLByAppendingPathComponent:
_userInitiatedSession
_discretionaryPrioritySession
_credentialStorage
_archiveQueue
_clientApplication
_connectedExtension
_tasksToIdentifiers
_identifiersToTasks
_identifiersToMonitors
_identifiersToStreams
_identifiersToStreamQueues
_outstandingTaskIDs
_lastArchiveTime
_archiveWasDeferred
_sessionDirectory
_downloadDirectory
_uploadsDirectory
_performsEVCertCheck
_clientImplementsWillSendRequest
_clientImplementsWillBeginDelayedRequest
_clientImplementsSessionChallenge
_clientImplementsTaskChallenge
_sendsLaunchEvents
_discretionary
_obliterated
_cleanedUp
_hasBeenSignalledToDeliverPendingEvents
_infersDiscretionary
_shouldPullInitialCredentials
_completeReconnectionBlock
_clientPID
_watchExtensionBundleIdentifier
_retryDataTasks
_workQueue
_monitoredApplication
_identifiersToTaskInfo
_clientProxy
_uuid
_identifier
_monitoredAppBundleID
_secondaryID
_invalidateReply
_sharedContainerIdentifier
applicationWasQuitFromAppSwitcher:
backgroundUpdatesDisabledForApplication:
backgroundUpdatesEnabledForApplication:
applicationWasSuspended:
applicationEnteredForeground:
applicationNoLongerInForeground:
applicationEndedNonDiscretionaryBackgroundGracePeriod:
applicationEndedExtendedNonDiscretionaryBackgroundGracePeriod:
applicationEndedTransitionalDiscretionaryBackgroundPeriod:
getClientProxy
_URLSession:openFileAtPath:mode:completionHandler:
_URLSession:companionAvailabilityChanged:
_URLSession:needConnectedSocketToHost:port:completionHandler:
_URLSession:task:getAuthHeadersForResponse:completionHandler:
URLSession:didBecomeInvalidWithError:
URLSession:didReceiveChallenge:completionHandler:
URLSessionDidFinishEventsForBackgroundURLSession:
_URLSession:downloadTask:didReceiveResponse:
_URLSession:downloadTaskNeedsDownloadDirectory:
URLSession:task:_schemeUpgraded:completionHandler:
URLSession:task:_willSendRequestForEstablishedConnection:completionHandler:
URLSession:task:_isWaitingForConnectionWithError:
URLSession:task:_isWaitingForConnectionWithReason:
URLSession:_taskIsWaitingForConnection:
URLSession:task:_conditionalRequirementsChanged:
URLSession:task:willBeginDelayedRequest:completionHandler:
URLSession:taskIsWaitingForConnectivity:
URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:
URLSession:task:didReceiveChallenge:completionHandler:
URLSession:task:needNewBodyStream:
URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:
URLSession:task:didFinishCollectingMetrics:
URLSession:task:didCompleteWithError:
URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:
URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:
URLSession:downloadTask:didFinishDownloadingToURL:
_URLSession:dataTask:didReceiveData:completionHandler:
URLSession:dataTask:didReceiveResponse:completionHandler:
URLSession:dataTask:didBecomeDownloadTask:
URLSession:dataTask:didBecomeStreamTask:
URLSession:dataTask:didReceiveData:
URLSession:dataTask:willCacheResponse:completionHandler:
wakeUpClient:
errorOccurredDuringFinishedCallbackDelivery:
errorOccurredDuringAuthCallbackDelivery:completionHandler:
clientAcknowledgedTerminalCallbackForTask:
descriptionForTaskWithIdentifier:
pingForXPCObjectValidityWithReply:
downloadTaskWithRequest:originalRequest:downloadFilePath:identifier:uniqueIdentifier:reply:
uploadTaskWithRequest:originalRequest:fromFile:sandboxExtensionData:identifier:uniqueIdentifier:potentialCredentials:reply:
dataTaskWithRequest:originalRequest:identifier:uniqueIdentifier:reply:
downloadTaskWithResumeData:identifier:uniqueIdentifier:reply:
cancelTaskWithIdentifier:
cancelTaskWithIdentifier:byProducingResumeData:
suspendTaskWithIdentifier:
resumeTaskWithIdentifier:withProperties:
setDescription:forTask:
setPriority:forTaskWithIdentifier:
setLoadingPoolPriority:forTaskWithIdentifier:
setBytesPerSecondLimit:forTaskWithIdentifier:
setExpectedProgressTarget:forTaskWithIdentifier:
setTLSMinimumSupportedProtocolVersion:forTaskWithIdentifier:
setTLSMaximumSupportedProtocolVersion:forTaskWithIdentifier:
setDiscretionaryOverride:forTaskWithIdentifier:
setTLSSessionCachePrefix:
resetStorageWithReply:
invalidateWithReply:
setPropertyOnStreamWithIdentifier:propDict:propKey:withReply:
avAssetDownloadTaskWithDownloadToken:URL:destinationURL:temporaryDestinationURL:assetTitle:assetArtworkData:options:identifier:uniqueIdentifier:reply:
avAggregateAssetDownloadTaskWithDownloadToken:serializedMediaSelections:assetTitle:assetArtworkData:options:childDownloadSessionIdentifier:identifier:uniqueIdentifier:reply:
defaultWindowDurationForResourceTimeout:
configurationWithClientConfiguration:discretionary:
initWithConfiguration:bundleID:isSpringBoardApp:downloadDirectory:options:clientProxy:delegate:workQueue:archiveQueue:
sessionForDiscretionaryStatus:
setXPCConnection:
hasConnectedClient
setupDownloadDirectory
cleanupSessionWithCompletionHandler:
tasksArchivePath
archiveTaskInfo:
_onqueue_archiveTaskInfo
descriptionForRequest:
descriptionForTCPConnectionWaitingReason:
requestWithAdjustedWindowForTaskInfo:
updateTaskInfoBasedOnCurrentDiscretionaryStatus:
adjustDiscretionaryStatusForTaskInfo:
sanitizeTaskProperties:
configureAdditionalPropertiesOnTask:taskInfo:
configureTask:withTaskInfo:
ensureSessionDownloadDirectoryExists
createNewTaskFromInfo:
restoreInProgressTask:
restoreCompletedTask:
restoreTask:isOutstanding:
restoreTasksFromArchivedInfo:
restoreTasks:
clientErrorForError:
retryTask:originalError:transactionMetrics:
removeDownloadFileForTaskInfo:
removeUploadFileForTaskInfo:
sessionHasOutstandingTasks
clientIsActive
handleCompletionOfTask:identifier:taskInfo:isRecoverable:suppressWake:
finalizeTaskCompletionWithSuppressedWake:
cancelTasksRequiringClientConnectionAndResumeUnstartedTasks
clientDidDisconnect
reconnectClient:withCompletion:
allowReconnect
fillInByteCountsForTaskInfo:withTaskID:
fillInPropertiesForTaskInfo:withTaskID:
getTasksForReconnection
getTLSSessionCachePrefix
priorityForDiscretionaryStatus:
currentDiscretionaryStatus:withOptionalTaskInfo:
cancelMonitorForTask:
handleEarliestBeginDateForTaskWithIdentifier:completionHandler:
handleWillBeginDelayedRequestForTaskWithIdentifier:completionHandler:
taskShouldResume:
taskShouldSuspend:
enqueueTaskWithIdentifier:
addOutstandingTaskWithIdentifier:
removeOutstandingTaskWithIdentifier:
requeueTask:skipResume:
requeueTask:
makeTempUploadFile:withExtensionData:
inputStreamWithFileHandle:taskIdentifier:
setupDASPropertiesOnTask:taskInfo:discretionaryStatus:
performCommonSetupForTask:taskInfo:identifier:discretionaryStatus:
trustPassesExtendedValidation:
uuid
identifier
clientBundleID
monitoredAppBundleID
secondaryID
invalidateReply
setInvalidateReply:
sharedContainerIdentifier
setSharedContainerIdentifier:
_releasePreventIdleSleepAssertionIfAppropriate
arrayWithObjects:
_takePreventIdleSleepAssertionIfAppropriate
backgroundTask:getAuthHeadersForResponse:reply:
remoteObjectProxyWithErrorHandler:
_loggableDescription
unsignedIntegerValue
numberWithInt:
closeFile
fileDescriptor
backgroundTask:didReceiveResponse:transactionMetrics:
_daemon_currentTransactionMetrics
_metrics
numberWithUnsignedInteger:
statusCode
cancel_with_error:
error:code:
backgroundTask:hasConnectionWaitingWithError:
errorWithDomain:code:userInfo:
setHTTPBodyStream:
close
open
streamStatus
HTTPBodyStream
setShouldCancelOnDisconnect:
shouldCancelOnDisconnect
taskKind
setEstablishedConnection:
backgroundDownloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:
setExpectingResumeCallback:
backgroundDownloadTask:didResumeAtOffset:expectedTotalBytes:
expectingResumeCallback
arrayWithObject:
_hasSZExtractor
setTaskKind:
backgroundDataTaskDidBecomeDownloadTask:
setDownloadFileURL:
downloadFile
backgroundDataTask:didReceiveData:withReply:
countOfBytesExpectedToReceive
length
backgroundTask:didReceiveResponse:transactionMetrics:reply:
terminateExtractorWithError:completion:
_extractorFinishedDecoding
taskMetrics
null
_backgroundTrailers
set_backgroundTrailers:
_trailers
setState:
set_doesSZExtractorConsumeExtractedData:
_doesSZExtractorConsumeExtractedData
set_hasSZExtractor:
set_extractor:
_extractor
state
establishedConnection
disablesRetry
downloadFileURL
setTaskMetrics:
backgroundTask:needNewBodyStream:withReply:
setDisablesRetry:
backgroundTask:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:
backgroundTask:willPerformHTTPRedirection:withNewRequest:reply:
set_legacySocketStreamProperties:
_legacySocketStreamProperties
_copySocketStreamProperties
_groupConfiguration
_taskGroup
scheme
isDiscretionary
proposedCredential
previousFailureCount
credentialForTrust:
serverTrust
authenticationMethod
protectionSpace
set_tlsSessionCachePrefix:
setMayBeDemotedToDiscretionary:
setDiscretionaryOverride:
set_discretionaryOverride:
set_TLSMaximumSupportedProtocolVersion:
set_TLSMinimumSupportedProtocolVersion:
setExpectedProgressTarget:
set_expectedProgressTarget:
setBytesPerSecondLimit:
set_bytesPerSecondLimit:
setLoadingPriority:
set_loadingPriority:
setBasePrioritySetExplicitly:
setDiscretionary:
_requiresPowerPluggedIn
allowsCellularAccess
_socketStreamProperties
hasStarted
setProperty:forKey:
startResourceTimer
backgroundTaskDidResume:
setQos:
setSuspendCount:
suspendCount
backgroundTaskDidSuspend:
setResumedAndWaitingForEarliestBeginDate:
cancelByProducingResumeData:
initWithDataTask:uniqueIdentifier:bundleID:sessionID:
dataTaskWithRequest:
setFileURL:
sharedCredentialStorage
credentialWithUser:password:persistence:
initWithHost:port:protocol:realm:authenticationMethod:
realm
protocol
password
user
initWithUploadTask:uniqueIdentifier:bundleID:sessionID:
uploadTaskWithStreamedRequest:
uploadTaskWithRequest:fromFile:
_isSafeFileForBackgroundUpload:withToken:
initWithDownloadTask:uniqueIdentifier:bundleID:sessionID:
_downloadTaskWithRequest:downloadFilePath:
_isSafeRequestForBackgroundDownload
downloadTaskWithResumeData:
_requestFromResumeData
setCreationTime:
timeIntervalSinceReferenceDate
setIdentifier:
set_pathToDownloadTaskFile:
pathToDownloadTaskFile
set_storagePartitionIdentifier:
storagePartitionIdentifier
set_uniqueIdentifier:
uniqueIdentifier
startedUserInitiated
_onBehalfOfPairedDevice
numberWithDouble:
_timeWindowDelay
set_DuetActivityProperties:
_effectiveConfiguration
copyItemAtURL:toURL:error:
getBytes:length:
removeObject:
resumedAndWaitingForEarliestBeginDate
setHasStarted:
setStartedUserInitiated:
publish
unpublish
progress
_backgroundPublishingURL
updateCurrentRequest:
setRespondedToWillBeginDelayedRequestCallback:
respondedToWillBeginDelayedRequestCallback
timeIntervalSinceNow
earliestBeginDate
discretionaryOverride
_propertyForKey:
_tlsSessionCachePrefix
setCountOfBytesExpectedToReceive:
setCountOfBytesExpectedToSend:
countOfBytesExpectedToSend
setCountOfBytesReceived:
setCountOfBytesSent:
countOfBytesSent
resourceTimeoutError
fileURL
setRetryCount:
retryCount
lowThroughputTimerRetryCount
setLowThroughputTimerRetryCount:
willRetryBackgroundDataTask:withError:transactionMetrics:
set_metrics:
_TLSMaximumSupportedProtocolVersion
_TLSMinimumSupportedProtocolVersion
expectedProgressTarget
bytesPerSecondLimit
loadingPriority
setStartTime:
creationTime
setCountOfBytesClientExpectsToReceive:
countOfBytesClientExpectsToReceive
setCountOfBytesClientExpectsToSend:
countOfBytesClientExpectsToSend
setEarliestBeginDate:
initWithBackgroundTaskInfo:taskGroup:
defaultTaskGroup
encodedData
encodeObject:forKey:
initRequiringSecureCoding:
createResumeInformation:
immutableEffectiveConfigurationFromSessionConfig:
_sessionConfiguration
basePrioritySetExplicitly
mayBeDemotedToDiscretionary
_setTimeWindowDelay:
_setTimeWindowDuration:
timeoutIntervalForResource
_timeWindowDuration
finishTasksAndInvalidate
URLByAppendingPathComponent:isDirectory:
applicationProxyForIdentifier:
groupContainerURLs
pluginKitProxyForIdentifier:
setPath:
invalidate
_allowsExpensiveAccess
allowsExpensiveNetworkAccess
timeoutIntervalForRequest
_infersDiscretionaryFromOriginatingClient
_allowsRetryForBackgroundDataTasks
_useTLSSessionCacheFromSession:
_sessionWithConfiguration:delegate:delegateDispatchQueue:
_sessionSendsLaunchOnDemandEvents
sessionSendsLaunchEvents
setSkip_download_unlink:
set_socketStreamProperties:
set_forcedNetworkServiceType:
set_clientIsNotExplicitlyDiscretionary:
_clientIsNotExplicitlyDiscretionary
set_allowsReachabilityCheck:
_allowsReachabilityCheck
set_duetPreClearedMode:
_duetPreClearedMode
set_loggingPrivacyLevel:
_loggingPrivacyLevel
set_requiresClientToOpenFiles:
set_sourceApplicationAuditTokenData:
set_watchExtensionBundleIdentifier:
set_requiresPowerPluggedIn:
set_shouldSkipPreferredClientCertificateLookup:
_shouldSkipPreferredClientCertificateLookup
set_timingDataOptions:
_timingDataOptions
set_preventsIdleSleepOnceConnected:
set_longLivedConnectionCachePurgeTimeout:
set_connectionCachePurgeTimeout:
set_tcpConnectionPoolName:
set_multipathAlternatePort:
_multipathAlternatePort
setAllowsConstrainedNetworkAccess:
allowsConstrainedNetworkAccess
setAllowsExpensiveNetworkAccess:
set_allowsConstrainedNetworkAccess:
_allowsConstrainedNetworkAccess
set_allowsExpensiveAccess:
setShouldUseExtendedBackgroundIdleMode:
setWaitsForConnectivity:
setAllowsCellularAccess:
setURLCredentialStorage:
setURLCache:
setHTTPCookieStorage:
set_prefersInfraWiFi:
_prefersInfraWiFi
set_alwaysPerformDefaultTrustEvaluation:
_alwaysPerformDefaultTrustEvaluation
set_IDSMessageTimeout:
_IDSMessageTimeout
set_requiresSustainedDataDelivery:
_requiresSustainedDataDelivery
set_onBehalfOfPairedDevice:
set_TCPAdaptiveWriteTimeout:
_TCPAdaptiveWriteTimeout
set_TCPAdaptiveReadTimeout:
_TCPAdaptiveReadTimeout
set_reportsDataStalls:
_reportsDataStalls
set_tlsTrustPinningPolicyName:
_tlsTrustPinningPolicyName
set_allowsTLSFallback:
_allowsTLSFallback
set_allowsTLSFalseStart:
_allowsTLSFalseStart
set_atsContext:
_atsContext
set_authenticatorStatusCodes:
_authenticatorStatusCodes
setNetworkServiceType:
networkServiceType
setHTTPMaximumConnectionsPerHost:
HTTPMaximumConnectionsPerHost
setHTTPAdditionalHeaders:
HTTPAdditionalHeaders
setTLSMaximumSupportedProtocol:
TLSMaximumSupportedProtocol
setTLSMinimumSupportedProtocol:
TLSMinimumSupportedProtocol
setConnectionProxyDictionary:
connectionProxyDictionary
setTimeoutIntervalForResource:
setTimeoutIntervalForRequest:
defaultSessionConfiguration
_launchUUID
_version
setVersion:
setHasVersion:
hasVersion
hasLaunchUUID
version
launchUUID
setLaunchUUID:
_headerData
_continueLoad
hasHeaderData
setContinueLoad:
setHasContinueLoad:
hasContinueLoad
headerData
setHeaderData:
continueLoad
_receivedData
hasReceivedData
receivedData
setReceivedData:
_additionalProperties
hasAdditionalProperties
additionalProperties
setAdditionalProperties:
_taskDescription
hasTaskDescription
taskDescription
setTaskDescription:
_dynamicStoreSource
_blocksToExecuteAfterNetworkChange
_networkChangeEventCount
_symptomToken
init
performBlockAfterNetworkChangedEvent:numberOfPreviousRetries:
performBlockAfterNetworkChangedEvent:delay:
handleDynamicStoreCallback:changedKeys:
handleBetterNetworkEvent
startMonitoringDynamicStore
stopMonitoringDynamicStore
start
stop
sharedMonitor
_connection
_listener
_registeredClients
_pendingWakes
handleNewConnection:
canLaunchProcessWithIdentifier:
launchProcessWithIdentifier:sessionIdentifier:
performWake:uponNotification:sessionIdentifier:
removePendingWakeForClient:sessionIdentifier:
sharedUserEventAgentConnection
encodeWithCoder:
initWithCoder:
supportsSecureCoding
nsurlsessiondPath
bundleManagerPath:
sessionPath:forBundleID:
nsurlsessiondLaunchdPath
removeItemAtPath:
removeItemAtURL:
createDataVaultDirectoryAtPath:
createDirectoryAtPath:
createDirectoryAtURL:
defaultDownloadDirectoryContainer
defaultDownloadDirectoryForBundleID:
setDaemonWorkState:
updateStreamingZipModificationDate:
removeStreamingZipModificationDate:
fetchStreamingZipModificationDate:
markItemAsPurged:
itemShouldBePurged:
dateWithTimeIntervalSinceReferenceDate:
removeItemAtPath:error:
createFileAtPath:contents:attributes:
URLForDirectory:inDomain:appropriateForURL:create:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
cStringUsingEncoding:
objectAtIndex:
_streamErrorCode
_streamErrorDomain
setStreamErrorDomain:
setHasStreamErrorDomain:
hasStreamErrorDomain
setStreamErrorCode:
setHasStreamErrorCode:
hasStreamErrorCode
streamErrorDomain
streamErrorCode
_archiveList
hasArchiveList
archiveList
setArchiveList:
_installedAssetVersion
queryAndFindBestAsset
findBestAssetFrom:
downloadAsset:
moveFileAtomicallyAndCheckIntegrity:toLocation:
moveInstalledAsset:withVersion:
installedAssetVersion
setInstalledAssetVersion:
stringWithCString:encoding:
getLocalFileUrl
fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:
writeToFile:options:error:
localizedDescription
dataWithContentsOfURL:options:error:
startDownload:
intValue
attributes
purge:
startCatalogDownload:then:
results
lastFetchDate
queryMetaDataSync
returnTypes:
initWithType:
_bundleIdentifier
_observers
isInTransitionalDiscretionaryPeriod
_currentRequestDelay
initWithIdentifier:
containerURL
supportsWakes
maySupportWakesLater
wakeForSessionIdentifier:withSessionUUID:wakeRequirement:
hasForegroundBackgroundStates
isForeground
isAwake
canBeSuspended
isSuspended
isBeingDebugged
hasBackgroundTaskCompletion
isHandlingBackgroundURLSessionWithIdentifier:withSessionUUID:
addObserver:
removeObserver:
invokeSelectorForAllObservers:
backgroundUpdatesEnabled
_onqueue_resetRequestDelay
setIsInTransitionalDiscretionaryPeriod:
bundleIdentifier
setBundleIdentifier:
currentRequestDelay
setCurrentRequestDelay:
removeObjectAtIndex:
indexOfObject:
initialize
applicationWithIdentifier:
springboardApplicationWithBundleIdentifier:
springBoardApplicationExistsWithIdentifier:
_delayTimer
_nonDiscretionaryGracePeriodTimer
_extendedNonDiscretionaryGracePeriodTimer
_transitionalDiscretionaryStateTimer
_containingApplication
applicationBackgroundUpdatesTurnedOff:
applicationBackgroundUpdatesTurnedOn:
setupDelayTimer
setupTransitionalDiscretionaryPeriodTimer
disableTransitionalDiscretionaryPeriodTimer
startTransitionalDiscretionaryPeriodTimer
requestDelayQueue
dataContainerURL
containingBundle
_request
hasRequest
request
setRequest:
_reason
setReason:
setHasReason:
hasReason
reason
_shouldCancel
setShouldCancel:
setHasShouldCancel:
hasShouldCancel
shouldCancel
_cachedCredentials
_cachedDefaultCredentialUsers
_bundleID
initWithDelegate:forBundleID:
populateWithInitialCredentials
credentialsForProtectionSpace:
allCredentials
setCredential:forProtectionSpace:
removeCredential:forProtectionSpace:
defaultCredentialForProtectionSpace:
setDefaultCredential:forProtectionSpace:
reset
bundleID
setBundleID:
removeAllObjects
credStorage_setDefaultCredential:forProtectionSpace:
credStorage_defaultCredentialForProtectionSpace:reply:
synchronousRemoteObjectProxyWithErrorHandler:
credStorage_setCredential:forProtectionSpace:
dictionaryWithDictionary:
credStorage_allCredentialsWithReply:
credStorage_credentialsForProtectionSpace:reply:
credStorage_getInitialCredentialDictionariesWithReply:
_hasBodyStream
setHasBodyStream:
setHasHasBodyStream:
hasHasBodyStream
hasBodyStream
_bytesSent
_totalBytesExpectedToSend
_totalBytesSent
setBytesSent:
setHasBytesSent:
hasBytesSent
setTotalBytesSent:
setHasTotalBytesSent:
hasTotalBytesSent
setTotalBytesExpectedToSend:
setHasTotalBytesExpectedToSend:
hasTotalBytesExpectedToSend
bytesSent
totalBytesSent
totalBytesExpectedToSend
setHasTaskIdentifier:
hasTaskIdentifier
_clientBundleIdentifier
_clientSecondaryIdentifier
_throughputTimer
_progressTimestamps
_progressValues
_throughputInterval
_throughputMonitoringStartTime
_startedDuetReporter
_connectionIsCellular
_hasTransferredData
_explicitlyDiscretionary
_performsNonDiscretionaryThrougputMonitoring
_mayBeDemotedToDiscretionary
_powerMonitorToken
_basePriority
initWithTask:taskInfo:clientBundleIdentifier:secondaryIdentifier:monitoredApplication:priority:options:queue:
currentThroughputThreshold
currentIntervalEndDelta
calculateThroughput
setThroughputTimerForCurrentInterval
startThroughputMonitoring
stopThroughputMonitoring
startThroughputMonitoringIfAppropriate
basePriority
setBasePriority:
removeLastObject
doubleValue
lastObject
firstObject
_challenge
hasChallenge
challenge
setChallenge:
_code
_domain
_userInfo
hasDomain
setCode:
setHasCode:
hasCode
hasUserInfo
domain
setDomain:
code
userInfo
setUserInfo:
_clients
_transactionQueue
_createdDataVault
_archiveTimer
_privileged
_inSyncBubble
managerBecameEmpty:bundleID:withCompletionHandler:
listener:shouldAcceptNewConnection:
applicationInstallsDidStart:
applicationInstallsDidChange:
applicationInstallsDidUpdateIcon:
applicationsWillInstall:
applicationsDidInstall:
pluginsDidInstall:
applicationsDidFailToInstall:
applicationsWillUninstall:
pluginsWillUninstall:
applicationsDidUninstall:
pluginsDidUninstall:
applicationsDidFailToUninstall:
applicationInstallsArePrioritized:arePaused:
applicationInstallsDidPause:
applicationInstallsDidResume:
applicationInstallsDidCancel:
applicationInstallsDidPrioritize:
applicationStateDidChange:
applicationIconDidChange:
networkUsageChanged:
observeLaunchProhibitedApps
deviceManagementPolicyDidChange:
applicationsDidChangePersonas:
createDaemonDirectory
applicationIsInstalled:
setupNewClassMappingsForUnarchiver
restoreState
setupArchiveTimer
getSessionWithIdentifier:forBundleID:
addTransaction
releaseTransaction
bundleIDsForAppProxies:
waitUntilDeviceIsUnlocked
isPrivileged
setPrivileged:
isInSyncBubble
setInSyncBubble:
pluginIdentifier
plugInKitPlugins
endTransaction
beginTransaction
setInterruptionHandler:
setInvalidationHandler:
setExportedObject:
setExportedInterface:
bgSessionManagerInterface
isValid
appState
sessionID
sortedArrayUsingComparator:
setClass:forClassName:
isAppUpdate
isPlaceholder
defaultWorkspace
bundleURL
setAttributes:ofItemAtPath:error:
sharedDaemon
_bodyData
hasBodyData
bodyData
setBodyData:
_monitor
_assertions
_appStates
_observedBackgroundSettings
_backgroundUpdatesAllowed
_monitoredBundleIDs
_assertion_lock
setupMonitor
getBackgroundSettingsAppList
handleBackgroundSettingsChange
handleApplicationStateChange:
addObserver:forApplication:
removeObserver:forApplication:
startMonitoringBundleID:
stopMonitoringBundleID:
applicationStateForBundleID:
applicationIsForeground:
applicationIsAwake:
applicationIsSuspended:
applicationIsBeingDebugged:
isValidAssertion:withName:
application:hasAssertionWithName:
applicationHasBackgroundTaskCompletion:
application:isHandlingBackgroundSessionWithIdentifier:withSessionUUID:
applicationBackgroundUpdatesEnabled:
_onqueue_releaseAssertionForBundleID:sessionID:
releaseAssertionForBundleID:sessionID:
removePendingLaunchTasksForBundleID:sessionID:cancel:
assertionNameForSessionUUID:
takeAssertionForBundleID:sessionID:sessionUUID:
wakeUpApp:forSession:withSessionUUID:
identifierIsForSpringBoardApplication:
openApplication:options:withResult:
sharedService
dictionaryWithObject:forKey:
acquireWithError:
initWithExplanation:target:attributes:
targetWithProcessIdentity:
identityForEmbeddedApplicationIdentifier:
attributeWithDomain:name:
unsignedIntValue
applicationInfoForApplication:
explanation
isApplicationBeingDebugged:
applicationStateForApplication:
updateInterestedBundleIDs:
allObjects
isEqualToNumber:
isAutomaticAppUpdatesAllowed
sharedConnection
persistentDomainForName:
standardUserDefaults
resetStandardUserDefaults
sharedSpringBoard
setHandler:
_wrapper
_performsNonDiscretionaryThroughputMonitoring
initWithWrapper:monitoredApplication:priority:options:queue:
wrapperWillSuspend
wrapperTransferredData:
currentIntervalDuration
currentIntervalThroughputThreshold
unsignedLongLongValue
_idsPriority
_sequenceNumber
_sessionIdentifier
_uuidString
hasSessionIdentifier
hasUuidString
setSequenceNumber:
setHasSequenceNumber:
hasSequenceNumber
setIdsPriority:
setHasIdsPriority:
hasIdsPriority
sessionIdentifier
setSessionIdentifier:
uuidString
setUuidString:
sequenceNumber
idsPriority
_error
hasError
error
setError:
consumeExtractedDataIfNeeded
prepareForExtractionToPath:completionBlock:
doesConsumeExtractedData
prepareForExtraction:
supplyBytes:withCompletionBlock:
suspendStreamWithCompletionBlock:
finishStreamWithCompletionBlock:
terminateStreamWithError:completionBlock:
extractorDelegate
setExtractorDelegate:
knownSZExtractorImplementations
_DuetActivityProperties
_extractorPreparedForExtraction
set_extractorPreparedForExtraction:
set_timeoutIntervalForResource:
set_disallowCellular:
getUUIDBytes:
set_nw_activity:
_onqueue_adoptEffectiveConfiguration:
initializeHTTPAuthenticatorWithAppleIDContext:statusCodes:
set_authenticatorConfiguredViaTaskProperty:
set_backgroundPublishingURL:
_hasBeenDrained
_type
_args
initWithCallbackType:taskIdentifier:args:
type
setType:
args
setArgs:
hasBeenDrained
setHasBeenDrained:
decodeObjectOfClass:forKey:
decodeIntegerForKey:
encodeInteger:forKey:
_callbacks
initWithDelegate:
performCallback:
drainCallback:
addPendingCallbackToFront:
addPendingCallback:wakeRequirement:
performAllCallbacks
drainCallbacksForTaskIdentifier:
count
insertObject:atIndex:
objectAtIndexedSubscript:
backgroundTask:willBeginDelayedRequest:reply:
backgroundAVAssetDownloadTask:didResolveMediaSelectionProperyList:reply:
openFileAtPath:mode:withReply:
backgroundTask:_willSendRequestForEstablishedConnection:reply:
backgroundSessionDidFinishAppWake:reply:
backgroundSessionDidStartAppWake:reply:
backgroundTask:didReceiveChallenge:reply:
backgroundDownloadTask:didFinishDownloadingToURL:reply:
backgroundTask:didCompleteWithError:taskMetrics:info:reply:
_identifiersToAVWrappers
_identifiersToThroughputMonitors
_identifiersToTCPConnections
_identifiersToDASActivities
_assetDownloadTokensToAssets
_clientConfig
_delayedWakeTimer
NDAVAssetDownloadSessionWrapper:didCompleteWithError:
NDAVAssetDownloadSessionWrapper:didUpdateProgressWithLastBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:
NDAVAssetDownloadSessionWrapper:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelectionPropertyList:
NDAVAssetDownloadSessionWrapper:didResolveMediaSelectionPropertyList:
NDAVAssetDownloadSessionWrapper:didFinishDownloadForMediaSelectionPropertyList:
setupDelayedCompletionWakeTimer
cancelDelayedCompletionWakeTimer
setupThroughputMonitorForWrapper:taskInfo:identifier:
cancelThroughputMonitorForWrapper:
updatePriorityForTaskID:
avAssetDownloadsDirectory
downloadDirectoryToUse:
destinationURLToUseForTask:
downloadTaskWithRequest:originalRequest:identifier:uniqueIdentifier:reply:
uploadTaskWithRequest:originalRequest:fromFile:identifier:uniqueIdentifier:reply:
dataTaskWithRequest:originalRequest:pipeHandle:identifier:uniqueIdentifier:reply:
hasEntitlementToSpecifyDownloadDestinationURL
avAssetForURL:downloadToken:
cancelAVDownloadAndFailTaskWithIdentifier:withError:
setPriority:forTCPConnectionWithTaskIdentifier:
retryTask:originalError:
adjustedTCPConnectionPriorityForTaskPriority:
newAVAssetDownloadSessionWrapperForTaskInfo:
ensureAVAssetDownloadSessionWrapperForTaskIdentifier:
startAVAssetDownloadSessionWithTaskIdentifier:
stopAVAssetDownloadSessionWithTaskIdentifier:
cancelTCPConnectionForTask:withError:
taskWithIdentifier:didCompleteWithError:
setResolvedMediaSelectionPlist:
backgroundAVAssetDownloadTask:didFinishDownloadForMediaSelectionPropertyList:
backgroundAVAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelectionPropertyList:
backgroundAVAssetDownloadTaskDidUpdateProgress:totalBytesWritten:totalBytesExpectedToWrite:
_destinationURLToUse
setAVURLAsset:
backgroundAVAssetDownloadTask:didReceiveDownloadToken:
setAVAssetDownloadToken:
_URLToUse
_AVAssetDownloadSesssionOptions:config:
AVURLAsset
absoluteString
caseInsensitiveCompare:
lowercaseString
setAVAssetURL:
URLAssetWithURL:options:
setInitializedWithAVAsset:
initWithAVAggregateAssetDownloadChildDownloadSessionIdentifier:assetTitle:assetArtworkData:options:taskIdentifier:uniqueIdentifier:bundleID:sessionID:
backgroundAVAssetDownloadTask:willDownloadToURL:
setDestinationURL:
setAssetArtworkData:
setAssetTitle:
setTemporaryDestinationURL:
initializedWithAVAsset
initWithAVAssetDownloadURL:destinationURL:assetTitle:assetArtworkData:options:taskIdentifier:uniqueIdentifier:bundleID:sessionID:
initWithAVAggregateDownloadTaskNoChildTaskKindWithURL:destinationURL:assetTitle:assetArtworkData:options:taskIdentifier:uniqueIdentifier:bundleID:sessionID:
substringWithRange:
stringByAddingPercentEncodingWithAllowedCharacters:
assetTitle
removeCharactersInString:
URLPathAllowedCharacterSet
AVAssetDownloadToken
isFileURL
URLByDeletingLastPathComponent
_web_errorWithDomain:code:failingURL:
AVAssetURL
initWithKeyOptions:valueOptions:capacity:
originalNetworkContentURL
temporaryDestinationURL
assetArtworkData
setOptions:
valueWithBytes:objCType:
@"NSString"
@"PDURLSessionProxySessionMessage"
{?="port"b1}
@24@0:8^{_NSZone=}16
B16@0:8
v20@0:8I16
v20@0:8B16
@16@0:8
B24@0:8@16
v24@0:8@16
Q16@0:8
I16@0:8
v16@0:8
@"NSURLSessionTask"
@24@0:8@16
v32@0:8q16q24
@"PDURLSessionProxyCredential"
@"PDURLSessionProxyTaskMessage"
{?="disposition"b1}
i16@0:8
v20@0:8i16
@20@0:8i16
i24@0:8@16
@"NSData"
{?="delegateImplementsDidReceiveResponse"b1"delegateImplementsSessionAuthChallenge"b1"delegateImplementsTaskAuthChallenge"b1"delegateImplementsWillPerformRedirection"b1"delegateImplementsWillSendRequest"b1"supportsRedirects"b1}
v32@0:8q16@24
{?="priority"b1}
@"PDURLSessionProxyRequest"
{?="taskSequenceNumber"b1}
v24@0:8Q16
@"PDURLSessionProxyResponse"
@"AVURLAsset"
@"NSObject<OS_dispatch_source>"
@"NSObject<OS_dispatch_queue>"
@"AVAssetDownloadSession"
@"<NDAVAssetDownloadSessionWrapperDelegate>"
@"NSURL"
@"NSDictionary"
v24@0:8@"AVAssetDownloadSession"16
v32@0:8@"AVAssetDownloadSession"16@"NSError"24
v32@0:8@"AVAssetDownloadSession"16@"AVMediaSelection"24
v136@0:8@"AVAssetDownloadSession"16{?={?=qiIq}{?=qiIq}}24@"NSArray"72{?={?=qiIq}{?=qiIq}}80@"AVMediaSelection"128
v32@0:8@16@24
v136@0:8@16{?={?=qiIq}{?=qiIq}}24@72{?={?=qiIq}{?=qiIq}}80@128
@56@0:8@16@24@32@40@48
@"NSMutableDictionary"
@"NSXPCConnection"
@"<NDSessionManagerDelegate>"
v32@0:8@"NDBackgroundSession"16@?<v@?>24
v32@0:8@16@?24
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8@"Protocol"16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
v56@0:8@"NSURLSessionConfiguration"16@"<NDBackgroundSessionClient>"24@"NSURL"32@"NSDictionary"40@?<v@?@"<NDBackgroundSessionProtocol>"@"NSDictionary"B>48
v32@0:8@"NSString"16@?<v@?>24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?>16
v56@0:8@16@24@32@40@?48
v24@0:8@?16
@36@0:8@16@24B32
@24@0:8^B16
B32@0:8@16@24
@?16@0:8
@"NSURLSession"
@"NDCredentialStorage"
@"NDApplication"
@"NSMutableArray"
@"NDCallbackQueue"
@"<NSXPCProxyCreating><NDBackgroundSessionClient>"
@"<NDBackgroundSessionDelegate>"
@"NSUUID"
v24@0:8@"NDApplication"16
@"<NSXPCProxyCreating><NDBackgroundSessionClient>"16@0:8
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLResponse"32@?<v@?B@"NSDictionary"@"NSURLRequest">40
v44@0:8@"NSURLSession"16@"NSString"24i32@?<v@?i>36
v28@0:8@"NSURLSession"16B24
v48@0:8@"NSURLSession"16@"NSString"24Q32@?<v@?i{?=qi}>40
v44@0:8@16@24i32@?36
v28@0:8@16B24
v48@0:8@16@24Q32@?40
v48@0:8@16@24@32@?40
v32@0:8@"NSURLSession"16@"NSError"24
v40@0:8@"NSURLSession"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"NSURLSession"16
v40@0:8@16@24@?32
v40@0:8@"NSURLSession"16@"NSURLSessionDownloadTask"24@"NSURLResponse"32
@"NSURL"32@0:8@"NSURLSession"16@"NSURLSessionDownloadTask"24
v40@0:8@16@24@32
@32@0:8@16@24
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLRequest"32@?<v@?@"NSURLRequest">40
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSError"32
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24q32
v32@0:8@"NSURLSession"16@"NSURLSessionTask"24
v36@0:8@"NSURLSession"16@"NSURLSessionTask"24B32
v40@0:8@16@24q32
v36@0:8@16@24B32
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLRequest"32@?<v@?q@"NSURLRequest">40
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSHTTPURLResponse"32@"NSURLRequest"40@?<v@?@"NSURLRequest">48
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLAuthenticationChallenge"32@?<v@?q@"NSURLCredential">40
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@?<v@?@"NSInputStream">32
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24q32q40q48
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLSessionTaskMetrics"32
v56@0:8@16@24q32q40q48
v40@0:8@"NSURLSession"16@"NSURLSessionDownloadTask"24@"NSURL"32
v56@0:8@"NSURLSession"16@"NSURLSessionDownloadTask"24q32q40q48
v48@0:8@"NSURLSession"16@"NSURLSessionDownloadTask"24q32q40
v48@0:8@16@24q32q40
v48@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSData"32@?<v@?>40
v48@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSURLResponse"32@?<v@?q>40
v40@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSURLSessionDownloadTask"32
v40@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSURLSessionStreamTask"32
v40@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSData"32
v48@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSCachedURLResponse"32@?<v@?@"NSCachedURLResponse">40
v24@0:8q16
v24@0:8@"NSError"16
v32@0:8@"NSError"16@?<v@?q@"NSURLCredential">24
@"NSString"24@0:8Q16
@24@0:8Q16
v64@0:8@"NSURLRequest"16@"NSURLRequest"24@"NSString"32Q40@"NSUUID"48@?<v@?B>56
v80@0:8@"NSURLRequest"16@"NSURLRequest"24@"NSURL"32@"NSData"40Q48@"NSUUID"56@"NSDictionary"64@?<v@?B>72
v56@0:8@"NSURLRequest"16@"NSURLRequest"24Q32@"NSUUID"40@?<v@?B>48
v48@0:8@"NSData"16Q24@"NSUUID"32@?<v@?B>40
v32@0:8Q16@?<v@?@"NSData">24
v32@0:8Q16@"NSDictionary"24
v32@0:8@"NSString"16Q24
v32@0:8q16Q24
v32@0:8d16Q24
v32@0:8Q16Q24
v28@0:8S16Q20
v24@0:8@"NSString"16
v48@0:8Q16@"NSDictionary"24@"NSString"32@?<v@?B>40
v96@0:8Q16@"NSURL"24@"NSURL"32@"NSURL"40@"NSString"48@"NSData"56@"NSDictionary"64Q72@"NSUUID"80@?<v@?B>88
v88@0:8Q16@"NSArray"24@"NSString"32@"NSData"40@"NSDictionary"48@"NSString"56Q64@"NSUUID"72@?<v@?B>80
v64@0:8@16@24@32Q40@48@?56
v80@0:8@16@24@32@40Q48@56@64@?72
v56@0:8@16@24Q32@40@?48
v48@0:8@16Q24@32@?40
v32@0:8Q16@?24
v32@0:8Q16@24
v32@0:8@16Q24
v48@0:8Q16@24@32@?40
v96@0:8Q16@24@32@40@48@56@64Q72@80@?88
v88@0:8Q16@24@32@40@48@56Q64@72@?80
d24@0:8d16
@28@0:8@16B24
@84@0:8@16@24B32@36@44@52@60@68@76
@20@0:8B16
@24@0:8q16
@32@0:8@16^B24
B40@0:8@16@24@32
v48@0:8@16Q24@32B40B44
B20@0:8B16
q20@0:8B16
v28@0:8Q16B24
@32@0:8@16Q24
v44@0:8@16@24Q32B40
B24@0:8^{__SecTrust=}16
{?="version"b1}
{?="continueLoad"b1}
^{__CFRunLoopSource=}
v32@0:8@?16Q24
v32@0:8@?16q24
v32@0:8^{__SCDynamicStore=}16^{__CFArray=}24
@"NSObject<OS_xpc_object>"
v40@0:8@?16@24@32
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
{?="streamErrorCode"b1"streamErrorDomain"b1}
B40@0:8@16@24q32
v24@0:8:16
d16@0:8
v24@0:8d16
@"NDSpringBoardApplication"
{?="reason"b1}
{?="shouldCancel"b1}
@"<NDCredentialStorageDelegate>"
{?="hasBodyStream"b1}
{?="bytesSent"b1"totalBytesExpectedToSend"b1"totalBytesSent"b1}
{?="taskIdentifier"b1}
@"__NSCFURLSessionTaskInfo"
@80@0:8@16@24@32@40@48q56Q64@72
q16@0:8
@"PDURLSessionProxyAuthChallenge"
{?="code"b1"version"b1}
v40@0:8@"NDSessionManager"16@"NSString"24@?<v@?>32
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"NSArray"16
v32@0:8@"NSArray"16@"NSArray"24
@"BKSApplicationStateMonitor"
@"NSMutableSet"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
I24@0:8@16
@"NDAVAssetDownloadSessionWrapper"
@56@0:8@16@24q32Q40@48
{?="idsPriority"b1"sequenceNumber"b1}
@"PDURLSessionProxyError"
v24@0:8@?<v@?Q@"NSError">16
v32@0:8@"NSData"16@?<v@?@"NSError"B>24
v24@0:8@?<v@?@"NSError">16
v32@0:8@"NSError"16@?<v@?@"NSError">24
@"<SZExtractorDelegate>"16@0:8
v24@0:8@"<SZExtractorDelegate>"16
v32@0:8@"NSString"16@?<v@?Q@"NSError">24
@"NSArray"
@36@0:8i16Q20@28
@"<NDCallbackQueueDelegate>"
v32@0:8@16q24
@"NSMapTable"
@"NSURLSessionConfiguration"
v32@0:8@"NDAVAssetDownloadSessionWrapper"16@"NSError"24
v48@0:8@"NDAVAssetDownloadSessionWrapper"16Q24Q32Q40
v56@0:8@"NDAVAssetDownloadSessionWrapper"16@"NSValue"24@"NSArray"32@"NSValue"40@"NSDictionary"48
v32@0:8@"NDAVAssetDownloadSessionWrapper"16@"NSDictionary"24
v48@0:8@16Q24Q32Q40
v56@0:8@16@24@32@40@48
v40@0:8@16@24Q32
q24@0:8q16
B24@0:8Q16
Failure trying to unarchive file at %@ error: %@ [%d]
Error %d renaming item at %@ to %@
Error %d renaming item at %@ to %@. Won't try to unarchive.
SIGTERM received, shutting down.
AVAssetDownloadSession download finished for media selection
AVAssetDownloadSession download failed
AVAssetDownloadSession download complete
Starting AVAssetDownloadSession
Releasing power assertion for AVAssetDownloadSessionWrapper %llu with taskIdentifier %lu
Taking power assertion for AVAssetDownloadSessionWrapper %llu with taskIdentifier %lu
Failed to take power assertion for AVAssetDownloadSessionWrapper %llu with taskIdentifier %lu
%p Disavowing AVAssetDownloadSession
Got a nil AVAssetDownloadSession
NDCacheDeleteFixUpDirectoriesOnStartup enumeration failed at %@ error=%@
NDCacheDeleteFixUpDirectoriesInContainer enumeration failed at %@ error=%@
CacheDelete callback registration succeeded.
CacheDelete callback registration failed!
CacheDelete request - Purged %@ [%zu bytes]
Purged %lld bytes on volume %@.  CacheDelete requested %lld.
NDCacheDeletePurgableItemsForVolume enumeration failed at %@ error=%@
NDCacheDeleteGetPurgableItemsInContainer enumeration failed at %@ error=%@
Informing CacheDelete purgable bytes %lld on %@
Obliterating session manager for bundle ID: %@
NDSession <%{public}@>.<%@>.<%@>: removing session
obliterateAllSessions for bundleID %@
NDSession <%{public}@>.<%@>.<%@>: notified it is OK to send pending callbacks
Signalled that it is okay to send pending callbacks for session %@ that we have no record of. This shouldn't happen
releaseAssertionForSession: %@
NDSession <%{public}@>.<%@>.<%@>: instructed to send pending callbacks
Asked to send pending callbacks for session %@ that we have no record of. This shouldn't happen
NDSession <%{public}@>.<%@>.<%@>: already has a connected client, returning nil proxy object to client
Connected client is an extension is attempting to a connect to a session without a valid shared data container
NDSession <%{public}@>.<%@>.<%@>: reconnecting existing session
Connected client is an extension and did not specify a valid shared container identifier
Creating session with identifier: %@ for bundle id: %@
NDSession <%{public}@>.<%@>.<%@>: created successfully
Coudn't create session with identifier: %@ for bundle id: %@
Client specified shared container identifier %@. %@ can access: %d
Client %@ tried to specify a shared container that it cannot access: %@
Client tried to set _sourceApplicationBundleIdentifier but is missing the %@ entitlement
Client tried to set _sourceApplicationSecondaryIdentifier but is missing the %@ entitlement
Client tried to set _sourceApplicationAuditTokenData but is missing the %@ entitlement
Client tried to set _respectsAllowsCellularAccessForDiscretionaryTasks but is missing the %@ entitlement
Client tried to set _allowsPowerNapScheduling but is missing the %@ entitlement
Client tried to set _connectionPoolName but is missing the %@ entitlement
Client tried to set _directoryForDownloadedFiles but does not have access to directory %@
Client tried to set _duetPreauthorized but is missing the %@ entitlement
Client tried to set _maximumWatchCellularTransferSize but is missing the necessary entitlement
Ending boost activity from %@
Capturing boost activity from %@ unnecessary
Capturing boost activity from %@
Not restoring session with identifier: %@ for bundleID: %@ since it does not have any tasks
Coudn't restore session with identifier: %@ for bundle id: %@
Missing or invalid configuration.plist for bundleID: %@, sessionID: %@. Removing session directory
No directory for bundleID: %@, sessionID: %@
Launching application %@ since we could not restore session %@
NDSession <%{public}@> %{public}@ getAuthHeadersForResponse for %@ _sendsLaunchEvents=%s [_clientApplication supportsWakes]=%s
NDSession <%{public}@> %{public}@ waking %@ for auth headers
NDSession <%{public}@> %{public}@ getAuthHeadersForResponse does not have a remote object and does not support app wakes, canceling.
NDSession <%{public}@> %{public}@ received auth headers for response, continueLoad: %d authHeaders %@ newRequest %@
NDSession <%{public}@> %{public}@ client disconnected (error %@) when attempting to communicate with HTTP Authenticator for Client %@
NDSession <%{public}@> Need file descriptor for file at path %@
NDSession <%{public}@> Client %@ does not support app wakes, cannot get file descriptor for download file!
NDSession <%{public}@> Client %@ does not support app wakes, but it is still running. Will attempt to get file descriptor for download file.
NDSession <%{public}@> %{public}@ download for client %@ received response, status code: %d
NDSession <%{public}@> %{public}@ for client %@ conditions changed - satisfied: %d
NDSession <%{public}@> %{public}@ for client %@ is waiting for connection - reason: %lld
NDSession <%{public}@> %{public}@ for client %@ _willSendRequestForEstablishedConnection
NDSession <%{public}@> Client does not implement _willSendRequestForEstablishedConnection, so using proposed request
NDSession <%{public}@> %{public}@ established a connection which requires the client to be running, but it isn't running and doesn't support app wakes. Canceling the task.
NDSession <%{public}@> Perhaps the client %@ was uninstalled?
NDSession <%{public}@> %{public}@ using proposed request since the client application is not running and doesn't support wakes
NDSession <%{public}@> %{public}@ didResumeAtOffset: %lld expectedTotalBytes: %lld
NDSession <%{public}@> %{public}@ finished downloading to %@
NDSession <%{public}@> %{public}@ became download task
NDSession <%{public}@> %{public}@ did receive data (%lld of %lld total bytes)
NDSession <%{public}@> %{public}@ received data and there is no connected client. Canceling task.
NDSession <%{public}@> %{public}@ client disconnected (error %@) during didReciveData delegate
NDSession <%{public}@> %{public}@ didReceiveResponse: %@, status code: %d
NDSession <%{public}@> %{public}@ received data task didReceiveResponse callback and there is no connected client. Canceling task.
NDSession <%{public}@> %{public}@ client responded to didReceiveResponse with disposition %d
NDSession <%{public}@> %{public}@ client disconnected (error %@) with didReceiveResponse outstanding, responding with a cancel disposition
NDSession <%{public}@> %{public}@ for client %@ will be retried after error %@ - code: %ld
NDSession <%{public}@> %{public}@ failed to retry
NDSession <%{public}@> Removing client proxy due to task failure caused by app quit
NDSession <%{public}@> %{public}@ completed with error %@ [%ld]. C(%c)
NDSession <%{public}@> %{public}@ for client %@ was cancelled
NDSession <%{public}@> %{public}@ for client %@ completed with error - code: %ld
NDSession <%{public}@> %{public}@ for client %@ completed successfully
NDSession <%{public}@> %{public}@ needs new body stream
NDSession <%{public}@> %{public}@ client disconnected (error %@) with new body stream request outstanding, providing no body
NDSession <%{public}@> %{public}@ modifying conditional connection properties since new request %@ is to a different host than previous request %@
NDSession <%{public}@> %{public}@ willPerformHTTPRedirection, response: %@, new request: %@
NDSession <%{public}@> %{public}@ client disconnected (error %@) with redirection outstanding, following redirect
NDSession <%{public}@> %{public}@ didReceiveChallenge: %@ protection space: %@ for client %@ received auth challenge with type %@
NDSession <%{public}@> %{public}@ performing Extended Validation Trust evaluation
NDSession <%{public}@> %{public}@ Extended Validation Trust evaluation succeeded
NDSession <%{public}@> %{public}@ Extended Validation Trust evaluation failed
NDSession <%{public}@> %{public}@ client doesn't implement session-level or task-level auth challenge delegate, performing default handling for auth challenge
NDSession <%{public}@> %{public}@ client doesn't implement task-level auth challenge delegate, performing default handling for auth challenge
NDSession <%{public}@> %{public}@ client is not running and doesn't support app wakes, performing default handling for auth challenge
NDSession <%{public}@> %{public}@ client is not running and trust is valid, performing default handling for auth challenge
NDSession <%{public}@> %{public}@ client is not running and challenge has a previousFailureCount of 0 and a proposedCredential, performing default handling for auth challenge
NDSession <%{public}@> Invalid trust status: %ld
NDSession <%{public}@> Extended trust validation failed
NDSession <%{public}@> Session %@ didBecomeInvalidWithError: %@ [%ld]
NDSession <%{public}@> InvalidateWithReply: for session %@ bundle ID %@
NDSession <%{public}@> Cleaning up and invalidating immediately since there are no tasks
NDSession <%{public}@> %{public}@ setting discretionaryOverrride to %c
NDSession <%{public}@> %{public}@ attempted to set discretionaryOverrride to %c but lacks required entitlement %@
NDSession <%{public}@> %{public}@ setting limit of %lld bytes per second
NDSession <%{public}@> %@ tried to set the loading priority of a task but is missing the %@ entitlement
NDSession <%{public}@> %{public}@ setting loading priority to %f
NDSession <%{public}@> %@ tried to set the priority of a task but is missing the %@ entitlement
NDSession <%{public}@> %{public}@ setting priority to %ld
NDSession <%{public}@> %{public}@ setPropertyOnStreamWithIdentifier, client %@ property %@
NDSession <%{public}@> %{public}@ resumeTaskWithIdentifier, props %@
NDSession <%{public}@> %{public}@ resuming, QOS(0x%x)
NDSession <%{public}@> %{public}@ suspendTaskWithIdentifier
NDSession <%{public}@> %{public}@ cancelTaskWithIdentifier
NDSession <%{public}@> %{public}@ received resume data
NDSession <%{public}@> Task <%{public}@>.<%lu> dataTaskWithRequest: %@
NDSession <%{public}@> Task <%{public}@>.<%lu> uploadTaskWithRequest: %@ fromFile: %@
NDSession <%{public}@> Received a background upload request for a file that the client cannot read: %@ from %@
NDSession <%{public}@> Task <%{public}@>.<%lu> downloadTaskWithRequest: %@
NDSession <%{public}@> Received an unsafe request for background download: %@ from %@
NDSession <%{public}@> Received a background download request from unsafe resume data from %@
NDSession <%{public}@> Couldn't create task or taskInfo: task = %@, taskInfo = %@
NDSession <%{public}@> %{public}@ enqueueing
NDSession <%{public}@> %{public}@ adding delay of %f
NDSession <%{public}@> %{public}@ is duet preauthorized
NDSession <%{public}@> Not waking up client %@ since wake request is unnecessary
NDSession <%{public}@> Not waking up client %@ since sessionSendsLaunchEvents is NO
NDSession <%{public}@> Not waking up client %@ since it doesn't support app wakes
NDSession <%{public}@> Not waking up client %@ since session is obliterated
NDSession <%{public}@> Not waking up client %@ since it's already connected
NDSession <%{public}@> Not waking up client %@ since background updates are not enabled
NDSession <%{public}@> Waking up the client app: %@
NDSession <%{public}@> Failed to wake app: %@
NDSession <%{public}@> %{public}@ skipping acknowledgement teardown since it's not actually complete
NDSession <%{public}@> Encountered error %@ error delivering auth challenge to client, performing default handling
NDSession <%{public}@> Encountered error %@ during task completion callback delivery
NDSession <%{public}@> Created stream with file descriptor: %d
NDSession <%{public}@> Failed to consume sandbox extension %s for fileURL %@
NDSession <%{public}@> Error copying upload file: %@ [%ld]
NDSession <%{public}@> %{public}@ suspending
NDSession <%{public}@> %{public}@ cannot resume because task: %@ or taskInfo: %@ is nil
NDSession <%{public}@> %{public}@ resuming
NDSession <%{public}@> %{public}@ will begin
NDSession <%{public}@> %{public}@ cannot handle delayed request callback because task: %@ or taskInfo: %@ is nil
NDSession <%{public}@> %{public}@ already replied to delayed request callback - not calling again
NDSession <%{public}@> %{public}@ receiving delayed request callback
NDSession <%{public}@> %{public}@ client is not running and doesn't support wakes, continuing load for delayed request
NDSession <%{public}@> %{public}@ skipping delayed request callback - delegate not implemented
NDSession <%{public}@> %{public}@ using new request from delayed request callback
NDSession <%{public}@> %{public}@ will be canceled due to delayed request callback
NDSession <%{public}@> %{public}@ continuing load from delayed request callback
NDSession <%{public}@> %{public}@ should not begin before %@
NDSession <%{public}@> %{public}@ can begin immediately - begin date is in past
NDSession <%{public}@> %{public}@ has not requested a begin delay
NDSession <%{public}@> %{public}@ can now begin - earliest begin date satisfied
NDSession <%{public}@> %{public}@ no longer has a valid task or taskInfo, no need to begin
NDSession <%{public}@> %{public}@ ignoring stale delay begin timer
NDSession <%{public}@> %{public}@ for %@ is overriding discretionary status by request - forcing to %c
NDSession <%{public}@> %{public}@ for %@ is overriding discretionary status - forcing to %c
NDSession <%{public}@> %{public}@ current discretionary status for %@ is non-discretionary because the connected client is an extension
NDSession <%{public}@> %{public}@ current discretionary status for %@ is non-discretionary, since the app is being debugged
NDSession <%{public}@> %{public}@ current discretionary status for %@ is non-discretionary, since nsurlsessiond is running in EDU sync mode
NDSession <%{public}@> %{public}@ current discretionary status for %@ is discretionary (opt-in: %d)
NDSession <%{public}@> %{public}@ current discretionary status for %@ is non-discretionary
NDSession <%{public}@> Session: %@ get tasks for reconnection: %@
NDSession <%{public}@> Received signal to deliver pending events for client session: <%@>.<%@>
NDSession <%{public}@> Delivering pending events for client session: <%@>.<%@>
NDSession <%{public}@> Application %@ is not handling a background URLSession but we still received a signal to deliver pending events
NDSession <%{public}@> Delivering pending events immediately for client session: <%@>.<%@>. Signalled already: %d, isHandlingBackgroundSession: %d
NDSession <%{public}@> Waiting for notification to deliver pending events for client session: <%@>.<%@>
NDSession <%{public}@> Invoking client reconnection completion block
NDSession <%{public}@> client %@ disconnected, XPC(%c) proxy(%c) for %@
NDSession <%{public}@> %{public}@ not resumed but client disconnected, terminating it with timeout
NDSession <%{public}@> %{public}@ not resumed but client disconnected, resuming it implicitly
NDSession <%{public}@> client %@ is active result (%c), XPC(%c) proxy(%c) for %@
NDSession <%{public}@> has %lu outstanding tasks
NDSession <%{public}@> %{public}@ will retry after %lld seconds
NDSession <%{public}@> Download directory for bundle %@ has moved to %@, but saved download file path is %@. Need to fix download path
NDSession <%{public}@> New download path: %@
NDSession <%{public}@> %{public}@ completed with error %@ [%ld] (was active before nsurlsessiond exit)
NDSession <%{public}@> Couldn't recreate existing task with identifier: %@ in session: <%@>.<%@>
NDSession <%{public}@> Exception caught while restoring a task: %@
NDSession <%{public}@> %{public}@ restoring, which had never been started, will resume implicitly
NDSession <%{public}@> %{public}@ restored but never started, terminating with timeout
NDSession <%{public}@> %{public}@ is being restored as completed with download file still at %@
NDSession <%{public}@> %{public}@ error creating resume data: %@
NDSession <%{public}@> %{public}@ could not create resume data. The server might not support resumable downloads. Will retry full download
NDSession <%{public}@> %{public}@ download created from resume data
NDSession <%{public}@> %{public}@ couldn't create new task. task: %@, path: %@
NDSession <%{public}@> %{public}@ couldn't create new task becuase adjusted request is nil, taskInfo.currentRequest = %@
NDSession <%{public}@> Session <%@>.<%@> download path %@ did not exist, recreating.
NDSession <%{public}@> Client tried to set _sourceApplicationBundleIdentifier but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _sourceApplicationSecondaryIdentifier but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _sourceApplicationAuditTokenData but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _respectsAllowsCellularAccessForDiscretionaryTasks but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _allowsPowerNapScheduling but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _connectionPoolName but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _directoryForDownloadedFiles but does not have access to directory %@
NDSession <%{public}@> Client tried to set _duetPreauthorized but is missing the %@ entitlement
NDSession <%{public}@> Client tried to set _maximumWatchCellularTransferSize but is missing the necessary entitlement
NDSession <%{public}@> Client tried to set _pathToDownloadTaskFile but is not allowed to create %@: %{errno}d
NDSession <%{public}@> %{public}@ potentially discretionary, re-scheduling, was discretionary: %d, is now discretionary: %d
NDSession <%{public}@> %{public}@ %f seconds past start time, new delay: %f, new window: %f
NDSession <%{public}@> Obliterating session: <%@>.<%@>
NDSession <%{public}@> Cleaning up
NDSession <%{public}@> Application %@ was reinstalled, adjusting download paths
NDSession <%{public}@> Couldn't find out download directory for re-installed application %@. It must not have been re-installed properly. Obliterating session
NDSession <%{public}@> notified associated application %@ was suspended, XPC(%c)
NDSession <%{public}@> client %@ connected result (%c), XPC(%c) proxy(%c) for %@
NDSession <%{public}@> Using XPC connection %@ for client %@ with identifier %@ and PID %d
NDSession <%{public}@> XPC connection is to PlugIn or Catalyst/iOS apps on macOS %@ for session <%@>.<%@>
NDSession <%{public}@> Client %@ is acting on behalf of application %@, impersonatingSpringBoardApp: %d
NDSession <%{public}@> Client %@ is a SpringBoard application
NDSession <%{public}@> Client %@ is a daemon or non-SpringBoard application
NDSession <%{public}@> Couldn't find out download directory for %@. Not creating session
NDSession <%{public}@> Session <%{public}@> is for <%@>.<%@> using resource timeout: %f, request timeout: %f allowsCellularAccess: %d, allowsExpensiveAccess: %d [%d] _sourceApplicationBundleIdentifier: %@, _sourceApplicationSecondaryIdentifier: %@
SCDynamicStoreCreateRunLoopSource failed: %s [%d]
SCDynamicStoreSetNotificationKeys failed: %s [%d]
Simulating network change event since %lld seconds have passed
Will wake client %@ for session %@ if we receive a notification that it supports launch-on-demand
Attempting to launch client %@ for session %@
Couldn't launch application %@ because we don't have an xpc connection to UserEventAgent
Received a new connection from UserEventAgent! Canceling the old one
Updated Registered Launch-On-Demand Clients: %@
Created xpc listener: %@
Received xpc event
NDUserEventAgentConnection received connection
Error getting caches directory: %@ [%ld]
Failed to set mode 700 on path %s.  errno=%d
Failed to convert %s to a data-vault directory.  errno=%d
Couldn't create directory at %@, error: %@ [%ld]
Failed to create data-vault directory.  errno=%d
Couldn't create directory.  Unable to extract C-string from path argument: %@
Couldn't create directory.  No path provided.
Error removing item at url: %@, error: %@ [%ld]
Error removing item at path: %@, error: %@ [%ld]
Error reading the TLD Asset version
TLD versions different. Old: [%u] New: [%d]  
Read Asset at %@
Error getting the system group container for Group ID %@ 
Unable to get the system container for nsurlstoraged
Reading from a file at location %@ failed. Error is %@ [%ld]
Writing to file at location %@ failed. Error is %@ [%ld]
The file contents of dafsa file are not the same as the mobile asset file
Asset download requested
Asset download completed. Asset Version downloaded is %lu
Asset download failed. Result  %ld
Asset (state %ld  Version %ld),  Current version %ld,  best installed version %ld,  best not installed version %ld
Asset version %lu has compatibilty version set to %lu. Not supported on the current OS
Purging asset version %@
Download best not installed asset ver %lu
Read installed asset ver %lu
Asset version %@ purged
Failed to purge the asset with version %@. Purge result = %ld
Empty results for asset update query
Catalogue fetch succeeded
Catalogue fetch failed with result %ld. Fall back to the currently installed asset
Resetting request delay for %@
Resetting request delay and clearing pending wake requests for %@ since it came into the foreground
Application %@ has been in background for %lu seconds. Will reevaluate discretionary downloads
Resetting request delay and clearing pending wake requests for %@ since the first observer is being added
Set request delay for %@ to %f
An XPC error occurred when obtaining the default credential: %@
An XPC error occurred when obtaining all credentials %@
An XPC error occurred when obtaining a credential: %@
%{public}@ canceling because of low throughput monitoring! Current throughput: %f bytes/sec, current threshold: %f bytes/sec, samples %@/%@
nsurlsessiond started
Bundle %@ uninstalled. Need to obliterate
Bundle %@ re-installed. Need to adjust download paths
Evaluating new XPC connection %@ with client bundle identifier %@
Client is a PlugIn with bundle identifier %@
Containing app for PlugIn is %@
Client is an extension
Using identifier %@ for PlugIn %@ with containing app %@
Process with pid %d does not have a bundle ID, rejecting connection
Process with bundleID %@ [pid %d] does not have a bundle path, rejecting connection
NDSession <%{public}@>.<%@>.<%@> Lost connection to app -- connection interrupted
NDSession <%{public}@>.<%@>.<%@> Lost connection to app -- connection invalidated
Failed to write archive to path: %@
Bundle ID Archive %@ has unexpected format
NDSessionManager for client %@ was empty, not restoring
Application %@ is not installed, removing directory
No directory for bundleID: %@
Could not set attributes of directory at %@, error: %@ [%ld]
Non-directory file exists at: %@. Removing it.
Will request wake of app %@ for NDSession <%{public}@> with identifier %@
Failed to take process assertion for %@
Successfully woke application %@ and took process assertion
Failed to open application %@, error: %@ timeout: %c
Couldn't create process assertion for %@ (%@)
We already have an assertion for bundleID: %@, sessionID: %@
took assertion for %@, session %@, uuid %@
Invalidating assertion for bundleID: %@. sessionID: %@
looking for background session %@ for bundle id %@
looking for background task completion for bundle id %@
%s assertion with name %@ for bundle id %@
validating assertion %@
Stopped monitoring app %@, now %lu total %@
Started monitoring app %@, now %lu total %@
Removed observer for app %@, now %lu observers
Added observer for app %@, now %lu observers
Application %@ no longer foreground
Application %@ no longer foreground, and no observers
Application %@ entered foreground
Application %@ entered foreground, and no observers
Application %@ was suspended
Application %@ was suspended, and no observers
Application %@ was quit in the app switcher
Application %@ was quit in the app switcher, and no observers
Background updates are on
Background updates were turned off
Background update setting for %@ was changed to %@
Notifying observers for %@ that background update setting was turned off
Notifying observers for %@ that background update setting was turned on
Canceling AVAssetTask because of low throughput monitoring! Current throughput: %f bytes/sec, current threshold: %f bytes/sec, samples %@/%@
%{public}@ Updating configuration on daemon
%{public}@ initialized appleIDAuthenticator, status codes = %@
%{public}@ StreamingZip - not yet prepared for extraction while setting additional properties
%{public}@ StreamingZip - terminating lingering extractor from previous download attempt
%{public}@ StreamingZip - preparing for extraction to %@
%{public}@ Failed to prepare for extraction - timed-out.
%{public}@ StreamingZip - no path available.  Wait for init with resume-info for the path.
%{public}@ Object does not support SZExtractor protocol.  Dropping this object. Class=%@
%{public}@ StreamingZip - already prepared for extraction while setting additional properties
[Telemetry]: Assiging taskMetrics on the daemon side
%{public}@ Extractor prepare - Offset: %lld, error: %@ [%ld]
%{public}@ draining authentication challenge callback
%{public}@ draining willSendRequest callback
%{public}@ draining openFileAtPath callback
%{public}@ performing auth challenge callback, challenge %@
%{public}@ performing did start app wake callback.
%{public}@ performing did finish app wake callback.
%{public}@ performing will send request callback, request %@
Performing open file at path callback for path %@ mode %d
%{public}@ performing begin delayed request callback
%{public}@ performing get auth headers for response callback.
%{public}@ client responded to getAuthHeadersForResponse callback with continueLoad=%@, authHeaders=%@, newRequest=%@
%{public}@ failed to ask client for getAuthHeadersForResponse. Error=%@
%{public}@ client responded to delayed request callback with disposition %d
%{public}@ failed to ask client for delayed request disposition, continuing load
%{public}@ failed to deliver resolved MediaSelection
Client responded to open file callback with handle %@
%{public}@ client responded to will send request callback with request %@ handle %@
%{public}@ failed to ask client for modified request, using original proposed request
%{public}@ client responded to task challenge with disp %d, cred %@
%{public}@ client acknowledged file download
%{public}@ client acknowledged completion
%{public}@ AVAssetDownloadSession did complete with error %@ [%ld]
%{public}@ completion woke client: %c
%{public}@ completion did not wake client and client is not active - requesting delayed wake
%{public}@ completion woke client or client is active - not requesting delayed wake
%{public}@ finished downloading to %@
%{public}@ canceling tcp_connection
%{public}@ startAVAssetDownloadSessionWithTaskIdentifier wrapper: %@ taskIdentifier: %lu
%{public}@ couldn't create AVAssetDownloadSession; returning an error
%{public}@ created AVAssetDownloadSession with token %llu
Creating tcp_connection to host: %@, port: %d
%{public}@ tcp_connection_create() returned NULL (host %@, port %d, queue %@, taskInfo %@, URL %@)
Created tcp_connection: %@
%{public}@ received tcp_connection event %d
%{public}@ retrying AVAssetDownloadTask
%{public}@ removing destination file for AVAssetDownloadTask in order to retry
%{public}@ will retry after %f seconds
%{public}@ cancelTaskWithIdentifier
Task <%{public}@>.<%lu> avAggregateAssetDownloadTaskWithDownloadToken: %llu, serializedMediaSelections: %@, assetTitle: %@, assetArtworkData: %@, options: %@
%{public}@ new AVAggregateAssetDownloadTask asset: %@
Task <%{public}@>.<%lu> avAssetDownloadTaskWithDownloadToken: %llu, URL: %@, destinationURL: %@, temporaryDestinationURL: %@, assetTitle: %@, assetArtworkData: %@, options: %@
%{public}@ new AVAssetDownloadSession %@ with token %llu
%{public}@ failed to instantiate AVAssetDownloadSession
%{public}@ failed to instantiate AVAsset, token %llu
Task <%{public}@>.<%lu> for client %@ does not have write access to destination directory %@
Client exited transitional discretionary period.  Re-evaluating task priorities for session <%@>.<%@>
Cancelling AVAssetDownloads for session <%@>.<%@> since client was quit from app switcher
Bumping priority of AVAssetDownloads for %@ since it entered the foreground
Lowering priority of AVAssetDownloads for %@ since it is no longer in the foreground
Error getting container path: %llu
Error getting User managed assets path: %llu
Error removing file at location of asset downloads directory: %@ [%ld]
Error creating asset downloads directory: %@ [%ld]
%{public}@ failed to re-instantiate AVURLAsset with token %llu
%{public}@ restoring, which had never been started, will resume implicitly
Canceling delayed wake for session <%@>.<%@>
Scheduled delayed wake for session <%@>.<%@>
Delayed wake timer fired for session <%@>.<%@>
Triggering delayed wake for session <%@>.<%@>
