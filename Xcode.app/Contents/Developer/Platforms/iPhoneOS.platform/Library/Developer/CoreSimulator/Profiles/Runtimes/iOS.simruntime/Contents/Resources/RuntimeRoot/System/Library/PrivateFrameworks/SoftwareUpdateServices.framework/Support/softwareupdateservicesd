initWithGlobalOptions:
init
setGlobalOptions:
globalOptions
updateMetricEventFields
cacheDeleteUrgency
_stringForBool:
checkAvailableSpace
updateMetricContext
stringWithFormat:
description
.cxx_destruct
_globalOptions
dictionaryWithObjects:forKeys:count:
initWithDictionary:
addEntriesFromDictionary:
appendUpdateMetricEventFields:
setUpdateMetricEventFields:
_updateMetricEventFields
setAsset:
setReleaseDate:
setSessionID:
setScanOptions:
setDownloadOptions:
setInstallOptions:
setInstallTonightConfig:
setAtPhase:
asset
releaseDate
sessionID
scanOptions
downloadOptions
installTonightConfig
atPhase
phaseToString:
initWithFormat:
initWithAsset:releaseDate:sessionID:scanOptions:downloadOptions:installTonightConfig:downloadAtPhase:
summary
resetPhase
armInstall:
disarmInstall
installOptions
_asset
_releaseDate
_sessionID
_scanOptions
_downloadOptions
_installOptions
_installTonightConfig
_atPhase
setIsDaemon:
sharedInstance
stringWithUTF8String:
mainWorkQueue
handleXPCEvent:
runUntilIdleExit
initWithScanOptions:
sharedConnection
isSupervised
initWithScanOption:
assetType
discretionary
mdmOptions
_mdmScanOption
objectForKey:
setObject:forKey:
UUID
UUIDString
dealloc
isEqualToString:
isSuccess
serverURL
absoluteString
allFields
reportedUUID
initWithLong:
longValue
initWithData:encoding:
longLongValue
numberWithLongLong:
date
timeIntervalSince1970
initWithEventDictionary:reportingToServer:
isEqualErrorEvent:
incrementErrorCount
setAllFields:
changedSinceReported
setChangedSinceReported:
setServerURL:
setReportedUUID:
_changedSinceReported
_allFields
_serverURL
_reportedUUID
isForced
forceFullReplacement
allowSameBuildUpdates
currentReleaseTypeIsInternal
allowsCellular
requiresPowerPluggedIn
restrictToIncremental
restrictToFull
allowSameVersion
downloadTimeoutSecs
scanType
handleSendFinishedInvalidFileUUID:sendSucceeded:withStatusCode:
taskDescription
response
statusCode
handleSendFinishedWithFileUUID:sendSucceeded:withStatusCode:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
URLSession:didBecomeInvalidWithError:
URLSession:didReceiveChallenge:completionHandler:
URLSessionDidFinishEventsForBackgroundURLSession:
initWithReporter:
URLSession:task:didCompleteWithError:
reporter
setReporter:
_reporter
isAlive
setAlive:
message
setMessage:
messageType
setMessageType:
_alive
_messageType
_message
currentNetworkType
assignError:withCode:
_createRequest:
sleepForTimeInterval:
_logIPAddressIfNecessary
sendSynchronousRequest:allowRedirects:returningResponse:error:
_parseResponse:error:
errorWithCode:
assignError:withError:translate:
serialNumber
hasCellularRadio
safeObjectForKey:ofClass:
dictionary
numberWithInt:
errorWithDomain:code:userInfo:
setSafeObject:forKey:
dataWithPropertyList:format:options:error:
URLWithString:
initWithURL:
setHTTPMethod:
setHTTPBody:
setValue:forHTTPHeaderField:
setCachePolicy:
setTimeoutInterval:
propertyListWithData:options:format:error:
_createHealthcheckResponseFromDictionary:
hostWithName:
addresses
count
countByEnumeratingWithState:objects:count:
checkActivationServerStatus:
isAutoDownload
isEnabledForCellular
isEnabledForExpensiveNetwork
initWithDownloadOptions:
allowExpensiveNetwork
autoInstallManager
scheduleDefaultAutoScanTaskIfNecessary
scheduleEmergencyAutoScanTaskIfNecessary
scheduleAutodownloadRetryTaskIfNecessary
scheduleAutodownloadWifiPeriodEndTaskIfNecessary
cancelDefaultAutoScanTask
cancelEmergencyAutoScanTask
cancelAutodownloadRetryTask
cancelAutodownloadWifiPeriodEndTask
scheduleAutoInstallExpirationTask:
scheduleAutoInstallUnlockWindowStartTask:
scheduleAutoInstallStartInstallTask:
cancelAutoInstallWindowEndTask
cancelAutoInstallUnlockWindowStartTask
cancelAutoInstallStartInstallTask
cancelPresentAutoUpdateBanner
scheduleInstallAlertAlarm:
deleteKeepAliveFile
cancelInstallAlertAlarm
suStartDate
scheduleAutoInstallStartInstallTaskWithDate:
scheduleAnyTasksIfNecessary
cancelAllTasks
cancelAllAutoscanTasks
cancelAllAutodownloadTasks
scheduleAllAutoInstallUpdateTasks:
cancelAllAutoInstallTasks
scheduleDelayEndAutoScan:
cancelDelayEndAutoScan
_addPowerRequirementsToRequest:
scheduleAutodownloadRetryTaskFromDate:toDate:policy:
schedulePresentAutoUpdateBanner
scheduleInstallAlertRegistration:
cancelInstallAlertRegistration
_handleAutodownloadRetryTask:
scheduleAutodownloadWifiPeriodEndTask
_handleAutodownloadWifiPeriodEndTask:
scheduleAutoInstallTaskAtDate:jobName:needsNetwork:needsPower:
_handleAutoInstallUnlockStartTask:parameters:
_handleAutoInstallStartInstall:parameters:
_handleAutoInstallExpirationTask:parameters:
_handlePresentAutoUpdateBanner
_manager
_autoInstallManager
_alarm
currentState
mdmDelay
initWithDelay:
lastAssetAudience
registerProfileChangeListener
unregisterProfileChangeListener
UTF8String
profileChanged
refreshDelayedState
setAssetAudience:
setLastAssetAudience:
save
assetAudienceChanged:
isSoftwareUpdateResisted
shouldDelayUpdates
enforcedSoftwareUpdateDelayInDays
delayPeriod
setDelayPeriod:
isDelayed
setIsDelayed:
setMdmDelay:
managedDeviceDelayPeriodChanged:
delayedStartDate
isEqualToDate:
prettyPrintDate:
setDelayedStartDate:
delayUnit
laterDate:
startDelayWindow:
mdmDelayInterval
updateDelayInterval
unsignedLongLongValue
timeIntervalSinceNow
delayEndDate
refreshAssetAudience
shouldDelayUpdate:
delegate
setDelegate:
_delegate
_assetAudience
_notifyToken
_workQueue
_mdmDelay
registerInstallAlertConditionsWithHandler:
scheduleAlarm:date:
cancelAlarm:
unregisterInstallationAlertAction
_csScheduler
options
setOptions:
callback
setCallback:
result
setResult:
error
setError:
_options
_callback
_result
_error
hashTableWithOptions:
initWithDomain:storingToPath:
addObserver:
defaultCenter
_autoDownloadWiFiPeriodDidEnd
addObserver:selector:name:object:
isAutoUpdateEnabled
updateInstallPolicyAutoUpdateEnabled:
loadSavedState
removeObserver:
unlockCallbacks
mutableCopy
installPolicy
initWithInstallPolicyType:
mandatoryUpdateDict
setPotentialNextSessionID:
createSessionID
addObject:
removeObject:
lock
unlock
beginTransaction:keepAlive:
endTransaction:
beginTransaction:
setHoldsWiFiAssertion:
isDownloading
lastScannedDescriptor
_setupManualDownloadPolicyPeriodIfNecessary:fromDate:save:
_updateAssetDownloadOptions
lastProductBuild
lastProductVersion
currentProductType
currentProductBuild
currentProductVersion
currentReleaseType
setCacheable:
_resumeFromLastKnownState
clearBadgeAndBanner
cleanupAllSoftwareUpdateAndRelatedAssets
setLastAutoInstallOperationModel:
_clearUnlockCallbacks
setMandatoryUpdateDictionary:
resetAllHistory
setLastProductType:
setLastProductBuild:
setLastProductVersion:
setLastReleaseType:
newOSDetected:
length
substringWithRange:
lastDownload
copy
isValidDownload
_resetDownloadState
descriptor
copySuAssetInCatalogMatchingDescriptor:
attributes
progress
phase
isInstalled
setDownload:
setDownloadAsset:
taskQueue
_resumeUpdate
setDownloading:
_loadBrainAndPrepare
__startBrainAssetDownload
__startUpdateAssetDownload:
_cleanupPreviousDownload
activeDownloadPolicyType
_doAutodownload:error:
startDownloadWithOptions:withResult:
removeUnlockCallback:
_verifyAndPrepareUpdate
autoScanAndDownloadIfAvailable:withResult:
isCellularRoaming
addType:
setIdentifier:
setForced:
initWithDescriptor:
lastScannedDescriptorTime
computeTimeOfWifiOnlyPeriodEndFromDate:
setScheduledAutodownloadWifiPeriodEndTime:
_tryOrScheduleAutodownloadWithPolicy:allowOneTimeRetry:
types
code
scanForUpdates:complete:
isInstalling
isDownloadable
isAutoDownloadDisabled
noteAutodownloadFailedToStartWithError:
_isWithinAutodownloadWifiWindow
isPowerRequired
scheduledAutodownloadWifiPeriodEndTime
timeIntervalSinceReferenceDate
gregorianCalendar
dateWithTimeIntervalSinceReferenceDate:
_endOrRescheduleAutodownloadRetryInOneDay:
setAutoDownload:
setActiveDownloadPolicyType:
_endAutodownloadTasksAndResetState:
automaticDownloadDidFailToStartForNewUpdateAvailable:withError:
setScheduledAutodownloadPolicyChangeTime:
setAutodownloadNeedsOneTimeRetry:
_isDateWithinAutodownloadWifiWindow:
endAutodownloadTasksAndResetState
isDownloadHalted
_cancelDownload:userRequested:error:
numberWithBool:
currentDescriptor
presentAutoUpdateBanner:
dismissAutoUpdateBanner
unbadgeSettingsForManualSoftwareUpdate
scanRequestDidStartForOptions:
scanRequestDidFinishForOptions:update:error:
scanDidCompleteWithNewUpdateAvailable:error:
scheduledManualDownloadWifiPeriodEndTime
wifiOnlyPeriodInDaysForUpdate:
addToDate:numberOfDays:
setScheduledManualDownloadWifiPeriodEndTime:
distantPast
requestedPMV
setRequestedPMV:
identifier
MDMUseDelayPeriod
numberWithInteger:
isPreparing
notifyScanRequestDidStart:
notifyScanRequestDidFinish:update:error:
notifyScanDidComplete:error:
isScanning
lastObject
setScanning:
createpotentialNextSessionID
setAssetToDownloadFromLastScan:
setAssetToDownloadFromLastScanReleaseDate:
translateError:
refreshState
state
_handleScanError:
assetID
lastDeletedSUAssetID
autoDownloadDeletedBuild
findsAnyUpdate
updateType
containsType:
rampEnabled
shouldIgnoreForAutoInstall
_sendDownloadInvalidatedForNewDescriptor:
productBuildVersion
compare:options:
setFailedPatchDescriptor:
updateInstallPolicyType:
setManifestSubmitted:
_clearKeybagStash
badgeSettingsForManualSoftwareUpdate
setLastScannedDescriptorTime:
setLastScannedDescriptor:
adoptPotentialSessionID
_reportAvailableEvent
removeAllObjects
_doScanWithInfo:completion:
matcherForCurrentDeviceWithInfo:
tryCreateDescriptorFromSoftwareUpdateAsset:withReleaseDate:
isValidDescriptor
matcherInfo
productVersion
errorWithCode:originalError:
setCurrentDescriptor:
documentation
hasAnyDocumentation
setDocumentation:
_fetchDocumentationFromSoftwareUpdateAsset:completion:
_remoteQueryWithMatcher:completion:
matcherDocumentationFromAsset:
tryCreateDocumentationFromDocumentationAsset:
cancelDownloadIfNecessary
_scheduleDocumentationDownloadTimeoutTimer:
stringForAssetType:
totalWritten
totalExpected
attachProgressCallBack:
setAllowsCellularAccess:
setAllowsExpensiveAccess:
setDiscretionary:
_invalidateDocumentationDownloadTimeoutTimer
startDownload:then:
invalidate
initWithObjectsAndKeys:
_documentationDownloadTimeout:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
userInfo
cleanupAsset
findAssetWithMatcher:localSearch:releaseDate:error:
downloadWasInvalidatedForNewUpdateAvailable:
_killDownload:userRequested:error:
cancelDownload
setLastDeletedSUAssetID:
initWithDomain:code:userInfo:
_downloadFailedWithError:
setPhase:
setLastDownload:
initWithMetadata:andDescriptor:
updateDownloadOptions:withResult:
downloadProgressDidChange:
_updateLastSavedDownloadsOptions:
activeDownloadPolicy
setActiveDownloadPolicy:
assetToDownloadFromLastScan
assetToDownloadFromLastScanReleaseDate
matcherForCurrentDevice
totalRequiredFreeSpace
minimumSystemPartitionSize
systemPartitionPadding
devicePadding:
downloadFeeAgreementStatus
hasEnoughDiskSpace:growth:deltaSpaceNeeded:isAutoDownload:includePurging:
cdLevel4Disabled
siriVoiceDeletionDisabled
appDemotionDisabled
freeCachedSpaceSynchronous:timeout:isAutoDownload:disableCDLevelFour:disableSiriDeletion:disableAppDemotion:
_cleanupPreviousDownload:
setIsDone:
setProgress:
setDescriptor:
downloadDidStart:
_reapplyExistingDownloadPolicyIfDownloadable:
percentComplete
isStalled
_updateDownloadProgress:withState:
isDownloadAllowableForCellular
allowsCellularAccess
_changeDownloadPhase:progress:
MADownloadErrorCodeToSUDownloadErrorCode:
_verifyAndPrepareWhenReady
cancelDownloadUserRequested:withResult:
isMainThread
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
normalizedPercentComplete
intValue
_orderForPhase:
allKeys
isPasscodeLocked
_reportDownloadedEvent:
_notePhaseCompleted:
expectedTimeRemaining
_changeDownloadPhase:progress:timeRemaining:
setPercentComplete:
setTimeRemaining:
_updateNormalizedDownloadProgressAndNotifyDelegate
_updateNormalizedDownloadProgress
_shouldSendUpdatedProgressToDelegate
_snapshotProgress
_isStreamingZipCapable
setNormalizedPercentComplete:
numberWithFloat:
localizedStringFromNumber:numberStyle:
downloadDidFail:withError:
translateError:withAddedUserInfo:
setCurrentPolicyType:
downloadDidFinish:withInstallPolicy:
setUnlockCallbacks:
removeObjectForKey:
currentThread
_purgeSUAsset:
allObjects
downloadWasInvalidated:
setPreparing:
_downloadFinished
purgeMSUUpdate:
disableKeybagStash
setLastStashbagPersistedDate:
setStashbagPersisted:
allowCellularDownload
timeRemaining
_isUpdateReadyForInstallation:forceDiskCleanupIfNeeded:ShouldRetry:
getLocalUrl
path
initWithDownload:
unsatisfiedConstraints
monitorOfClass:
deltaSpaceNeeded
numberWithUnsignedLongLong:
refreshConstraints
unmetConstraints
unsignedIntegerValue
download
dismissNotification
postNotificationForError:withUpdateBuildNumber:
isDarkBoot
isRequired
installUpdateWithOptions:withResult:
containsObject:
type
managedInstallRequested
updateInstallPolicyDarkBootEnabled:
reportPostponedEvent:withStatus:
installDidFail:withError:
setInstalling:
installDidStart:
createPreventLockAssertionWithDuration:
domain
installDidFinish:
isInstallTonight
autoUpdateEnabled
_setType:
setInstallPolicy:
installPolicyDidChange:
managedInstallationRequested:
_setAutoUpdateEnabled:
useDarkBoot
_setDarkBoolEnabled:
slaVersion
createInstallationKeybagForDescriptor:withSecret:forUnattendedInstall:
unattendedInstallationKeybagCreated
isAutomaticUpdateV2Enabled
autoUpdateForceOn
autoUpdateForceOff
mandatorySUFlags
integerValue
isEqualToDictionary:
boolValue
enableAutomaticUpdateV2:
setMandatoryUpdateDict:
_describeAndReportEvent:
augmentEvent:withError:
lastStashbagPersistedDate
buildSplunkServerURLFromBase:
updateTypeName
newInstallTonightConfig
coreReporter
sendEvent:toServerURL:
autoScanAndDownloadIfAvailable:
_doUnlockEvents
initialize
keybagInterface:hasPasscodeSetDidChange:
keybagInterface:passcodeLockedStateDidChange:
resumeOrResetIfNecessary
tryAutodownload
startDownload:
startDownloadWithMetadata:withResult:
updateDownloadMetadata:withResult:
purgeDownloadUserRequested:withResult:
pauseDownload:
resumeDownload:
isDelayingUpdates
isUpdateReadyForInstallation:
isUpdateReadyForInstallationWithReplyHandler:
installUpdateWithInstallOptions:withResult:
autoSUFailedWithError:
isCurrentUpdateAutoUpdate
addUnlockCallback:forKey:
createInstallationKeybag:forUnattendedInstall:withResult:
persistStashOnUnlock
isForeground
setForeground:
setIsInstallTonight:
isInstallTonightScheduled
setIsInstallTonightScheduled:
mandatoryUpdateDictionary
passcodePolicy
setPasscodePolicy:
networkChangedFromNetworkType:toNetworkType:
cellularRoamingStatusChanged:
carrierBundleChanged
operatorBundleChanged
_presentAutoUpdateBannerOnUnlock
_updateLastSavedDownloadPhase:
_downloadPriority
_isPhase:afterPhase:
_isPhase:beforePhase:
_updateDownloadStatusForBrainAssetState:
_verifyAndPrepareOnUnlock
_setVerifyExclusions:
_setUMEventFields:reason:
_addRecordingServiceBaseURLToOptions:
setState:
downloadAsset
managedDeviceManager
setManagedDeviceManager:
followUpController
setFollowUpController:
setCoreReporter:
potentialNextSessionID
_state
_foreground
_autoScanOptions
_scanning
_scanRequests
_managedScanInProgress
_assetToDownloadFromLastScan
_assetToDownloadFromLastScanReleaseDate
_downloading
_downloadAsset
_download
_downloadProgressSnapshot
_documentationDownloadTimer
_preparing
_installing
_installed
_isInstallTonight
_isInstallTonightScheduled
_ignoreMAProgress
_observers
_autoSUFailureNotification
_unlockCallbacks
_managedDeviceManager
_installPolicy
_passcodePolicy
_mandatoryUpdateDictionary
_potentialNextSessionID
_autoUpdateQueue
_lastStashbagPersistedDate
_scanQueue
_followUpController
_coreReporter
deviceIsSupervised
skipPhase
additionalOptions
_additionalOptions
_clientMessagabilityDidChange:
_clientForegroundnessDidChange:
manager
initWithManager:
currentAutoInstallOperationCreatingIfNecessary:error:
deviceHasSufficientSpaceForDownloadIncludeAppPurging:replyHandler:
installationKeybagStateForDescriptor:
operationModel
agreementStatus
forecast
suEndDate
compare:
trySchedulingAnotherTimeInInstallWindow:
cancelAutoInstallOperation:
consentToAutoInstallOperation:
currentPolicyType
useSUCore
fastWorkQueue
enableAutomaticDownload:
isAutomaticDownloadEnabled
proxy
object
isMessagable
_sendLatestStatusForClient:
_evaluateForegroundness
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
_clientForCurrentConnection
setType:
wakeupIfNecessary
downloadDidFinish:
noteInstallDidFail:withError:
writeKeepAliveFile
noteInstallDidFinish:
autoInstallOperationDidConsent:
autoInstallOperationWasCancelled:
autoInstallOperationDidExpire:withError:
autoInstallOperationIsReadyToInstall:withResult:
autoInstallOperationPasscodePolicyChanged:passcodePolicyType:
isScanning:
scanForUpdates:withResult:
descriptor:
isDownloading:
cancelDownload:
purgeDownload:
downloadAndInstallState:
deviceHasSufficientSpaceForDownload:
extraSpaceNeededForDownloadWithoutAppPurging:
currentAutoInstallOperation:withResult:
cancelAutoInstallOperation:withResult:
consentToAutoInstallOperation:withResult:
currentPasscodePolicy:
isAutoUpdateEnabled:
isAutoUpdateScheduled:
isInstallationKeybagRequired:
installUpdate:
setClientType:withResult:
slaVersion:
isDelayingUpdates:
delayEndDate:
setMandatorySoftwareUpdateDictionary:
getMandatorySoftwareUpdateDictionary:
isAutomaticUpdateV2Enabled:
isAutomaticDownloadEnabled:
registerCSInstallPredicatesOnDate:
autoInstallManager:operationWasConsented:
autoInstallManager:didCancelOperation:
autoInstallManager:didExpireOperation:withError:
autoInstallManager:isReadyToInstall:
autoInstallManager:passcodePolicyChanged:forOperation:
clients
addClient:
removeClient:
_clients
_clientQueue
initWithInstallOptions:
_notifyServerStart
loadPlugin:
resumeOrResetStateIfNecessary
scheduleStartupTasksIfNecessary
setKeepAliveClearable:
clearKeepAliveIfNecessary:
isKeepAliveEnabled
enableTransactions
initWithMachServiceName:
_setQueue:
resume
serverInitAndResumeWork
_run
copyTransactions
currentConnection
initWithConnection:
setInterruptionHandler:
setInvalidationHandler:
interfaceWithProtocol:
setRemoteObjectInterface:
setExportedInterface:
setExportedObject:
setUserInfo:
connectionQueue
listener:shouldAcceptNewConnection:
_queue
auditToken
arrayWithObject:
initWithBundleIDs:states:
mostElevatedApplicationStateForPID:
_isStateMessagable:
_applicationStateChanged:
setHandler:
remoteObjectProxy
postNotificationName:object:
_isStateForeground:
hasPrefix:
_evaluateMessagability
isApplication
connection
_appStateMonitor
_lastAppState
_type
_pid
_identifier
_isApplication
_isMessagable
_isForeground
_connection
_activityNameHandlerMap
scheduleBackgroundScanIfNecessary:scanType:
scheduleAutodownloadIfNecessary
cancelAutodownloadTask
cancelAllBackgroundScans
cancelAllEmergencyBackgroundScans
cancelAutoInstallWindowExpirationTask
_activityIsScheduled:cancelIfExpired:
_randomizedAutoScanDelayForType:
dateWithTimeIntervalSinceNow:
scheduleBackgroundScan:scanDate:
_queue_unscheduleAllActivitiesWithName:
scheduleAutoDownload
scheduleAutoDownloadWithDate:
_queue_cancelAutoInstallStartInstallTask
_queue_setAutoinstallActivity:
_queue_handleAutoScan:info:rescheduler:
_queue_handleAutoDownload:info:
_queue_handleAutoInstallStart:info:
_queue_handleAutoInstallEnd:info:
_queue_handleAutoInstallUnlock:info:
_queue_handleInstallAlert:info:
_queue_handlePresentBanner:info:
_queue_handleActivity:info:
objectForKeyedSubscript:
_autoScanTimeIntervalForType:
randomIntWithMinVal:maxVal:
scanWeeklyInternally
noteAutoInstallOperationWantsToBegin
noteAutoInstallOperationDidExpire
noteAutoInstallOperationUnlockWindowDidBegin
cancelAllStartupTasks
scheduleBackgroundScan:
setAutoInstallActivityStateDone
setAutoinstallActivity:
_queue_handleCancelPresentBannerOnUnlock
_schedulerQueue
_autoInstallActivity
hasOpenTransactionForName:
stringWithString:
appendString:
_toggleKeepAliveStatus
_isKeepAliveEnabled:
_setKeepAlive:
_openTransactions
_keepAliveTransactions
_keepAliveClearable
initWithCString:encoding:
stringByAppendingPathComponent:
_errorDomainAbbreviation:
_splunkAccessSetup
lastErrorEvent
setLastErrorEvent:
_adoptLastErrorEvent:
_sendEvents:secondEvent:
defaultSessionConfiguration
setMaxConcurrentOperationCount:
sessionWithConfiguration:delegate:delegateQueue:
initWithString:
defaultManager
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
_sendInterruptedFromStorage
_getSplunkServerURL:
_sendSplunkEvents:forEventUUID:toServerURL:
_newScrubbedEvents:
_getJSONDataFromPayload:withFileUUID:forEventUUID:
_storeJSONData:withFileUUID:forEventUUID:
_uploadFromFile:withFileUUID:forEventUUID:toServerURL:
_getSplunkRequestForURL:
_awaitRetryingFileUUID:
uploadTaskWithRequest:fromFile:
setTaskDescription:
_newExistingFileUUIDs
fileURLWithPath:
objectAtIndex:
removeObjectAtIndex:
_removeFileUUID:loggingError:
contentsOfDirectoryAtPath:error:
requestWithURL:
_copyEscapeStringsForEventData:
enumerateObjectsUsingBlock:
characterSetWithCharactersInString:
controlCharacterSet
formUnionWithCharacterSet:
newlineCharacterSet
characterSetWithRange:
invertedSet
formIntersectionWithCharacterSet:
null
objectsForKeys:notFoundMarker:
stringByReplacingOccurrencesOfString:withString:
stringByAddingPercentEncodingWithAllowedCharacters:
replaceObjectAtIndex:withObject:
initWithObjects:forKeys:
isValidJSONObject:
dataWithJSONObject:options:error:
writeToURL:options:error:
storeToPath
removeItemAtPath:error:
_sendAllAwaitingRetry
sendEvent:
flushEvent
logger
setLogger:
awaitingRetry
setAwaitingRetry:
splunkURL
setSplunkURL:
splunkStateQueue
inProcessConfig
setInProcessConfig:
inProcessOperationQueue
setInProcessOperationQueue:
inProcessSession
setInProcessSession:
reporterDelegate
setReporterDelegate:
setDomain:
setStoreToPath:
splunkAccessCreated
setSplunkAccessCreated:
_splunkAccessCreated
_logger
_awaitingRetry
_splunkURL
_splunkStateQueue
_inProcessConfig
_inProcessOperationQueue
_inProcessSession
_reporterDelegate
_domain
_storeToPath
_lastErrorEvent
sharedController
_setAutoInstallActivityAttempted:
lastAutoInstallOperationModel
isDone
unlockStartDate
metadata
currentAutoInstallOperationCreatingIfNecessary:notifyIfExpired:error:
isAutoSUDisabled
installTonightDisabled
_isExpired
_createOperationModel
_clearAutoInstallOperationForReason:disableKeybagStash:
setAgreementStatus:
unlockEndDate
hasPasscodeSet
isAutoInstallOperationReadyToBegin
isAutoUpdateFollowUpCurrentlyBeingPresented
_installAttemptDone
_createForecast
setForecast:
setId:
passcodePolicyInterface:passcodePolicyTypeChanged:
_autoInstallActivityAttempted
_operationModel
_autoInstallAttempted
_stateQueue
setRequest:
initWithRequest:delegate:startImmediately:
_finished
setData:
setResponse:
cancel
HTTPBody
HTTPMethod
cachePolicy
HTTPShouldHandleCookies
setHTTPShouldHandleCookies:
HTTPShouldUsePipelining
setHTTPShouldUsePipelining:
timeoutInterval
allHTTPHeaderFields
setAllHTTPHeaderFields:
setURL:
initWithData:
appendData:
connection:didFailWithError:
connectionShouldUseCredentialStorage:
connection:willSendRequestForAuthenticationChallenge:
connection:canAuthenticateAgainstProtectionSpace:
connection:didReceiveAuthenticationChallenge:
connection:didCancelAuthenticationChallenge:
connection:willSendRequest:redirectResponse:
connection:didReceiveResponse:
connection:didReceiveData:
connection:needNewBodyStream:
connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:
connection:willCacheResponse:
connectionDidFinishLoading:
initWithRequest:
main
request
data
allowRedirects
setAllowRedirects:
setStatusCode:
_request
_data
_response
_statusCode
_allowRedirects
_done
_saveData
addOperation:
waitUntilAllOperationsAreFinished
            cacheDeleteUrgency: %@
            checkAvailableSpace: %@
            updateMetricContext: %@
            updateMetricEventFields: %@
globalOptions
T@"SUPolicyGlobalOptions",&,N,V_globalOptions
cacheDeleteUrgency
Ti,R,N
checkAvailableSpace
TB,R,N
updateMetricEventFields
T@"NSDictionary",R,N
updateMetricContext
T@"NSString",R,N
controllerVersion
context
            updateMetricEventFields: %@
T@"NSDictionary",&,N,V_updateMetricEventFields
DownloadPhaseUnknown
DownloadPhaseBegin
DownloadPhaseDownloading
DownloadPhaseDownloaded
DownloadPhasePrepared
DownloadPhaseInstalling
DownloadPhaseUndefined
asset:%@ releaseDate:%@ sessionID:%@ scanOptions:%@ downloadOptions:%@ installTonightConfig:%@ atPhase:%@
asset
T@"MAAsset",&,N,V_asset
releaseDate
T@"NSDate",&,N,V_releaseDate
sessionID
T@"NSString",&,N,V_sessionID
scanOptions
T@"SUScanOptions",&,N,V_scanOptions
downloadOptions
T@"SUDownloadOptions",&,N,V_downloadOptions
installOptions
T@"SUInstallOptions",&,N,V_installOptions
installTonightConfig
T@"NSString",&,N,V_installTonightConfig
atPhase
Tq,N,V_atPhase
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
Daemon recived notification: %@
Daemon handling notification: %@
v8@?0
mdmOptions
T@"SUMDMScanOptions",R,&,N
SUCoreEvent
Unknown
event
UUID
result
false
true
reportVersion
eventTime
currentOSType
currentOSVersion
deviceClass
deviceModel
batteryLevel
batteryIsCharging
storageCapacity
systemFsCapacity
systemFsFree
dataFsCapacity
dataFsFree
failureReason
sameErrorSignature
errorCount
success
ota-uuid
BuildVersion
ReleaseType
DeviceClass
HWModelStr
BatteryCurrentCapacity
BatteryIsCharging
DiskUsage
event incrementErrorCount when event does not represent an error (no result)
NVRAM value requested with no key specified
IODeviceTree:/options
unable to get registry entry for IODeviceTree:/options
NVRAM variable %@ has unexpected value '%@'
%llu
allFields
T@"NSMutableDictionary",&,N,V_allFields
changedSinceReported
TB,N,V_changedSinceReported
serverURL
T@"NSURL",&,N,V_serverURL
reportedUUID
T@"NSString",&,N,V_reportedUUID
            assetType:%@
            discretionary: %@
            allowsCellular: %@
            requiresPowerPluggedIn: %@
            restrictToIncremental: %@
            restrictToFull: %@
            allowSameVersion: %@
            sessionID: %@
            downloadTimeoutSecs: %d
restrictToIncremental
restrictToFull
allowSameVersion
assetType
T@"NSString",R,&,N
scanType
task nil or not NSURLSessionTask
task description nil or not NSString
task response nil or not NSHTTPURLResponse
task descriptor nil or not NSString (after get)
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
reporter
T@"SUCoreReporter",&,N,V_reporter
isAlive: %@
              Message: %@
              MessageType: %@
alive
TB,N,GisAlive,V_alive
messageType
Ti,N,V_messageType
message
T@"NSString",&,N,V_message
Attempting activation healthcheck: #%d...
Successfully connected for the healthcheck, but failed to parse the result: %@
Unable to contact the activation healthcheck after %d attempts: %@
Unable to create request for activation healthcheck: %@
CTErrorCode
Unable to retrieve telephony properties: %@
Unable to create connection to telephony.
SerialNumber
IMEI
ICCID
IMSI
MEID
https://albert.apple.com/WebObjects/ALUnbrick.woa/wa/ALActivationMonitor/checkUnbrickHealth
POST
iOS/SoftwareUpdate
User-Agent
Sending activation healthcheck request: %@
Status
Message
MessageType
WARN
ERROR
Unable to parse result from albert healthcheck: %@
Albert healthcheck result was not a dictionary: %@
albert.apple.com
Found IP address for activation healthcheck server: %@
No IP address found for activation healthcheck server.
com.apple.softwareupdateservices.mdmWorkQueue
Received profile change notification in registerProfileChangeListener
v12@?0i8
recived profile change notification
Asset audience changed from:%@ to:%@
Overridding shouldDelay to YES
delay interval is outside valid range. Defaulting to %d day delay interval
Setting delay period to %lu days
Setting isDelayed to %d
Setting delayedStartTime to %@
Delayed updates not set in profile
delayedStartDate is nil. Not delaying
delayedStartDate is in the future. Resetting to now
Overriding delay interval via asset XML:  %llu
Overriding delay interval with CFPrefereneces setting:  %llu
Time delayed:  %llu
Time to delay: %llu
Delay timer has expired. No longer delaying update
Delay timer still active. Delaying update
ShouldDelay = %d
mdmDelay
T@"SUManagedDeviceUpdateDelay",&,N,V_mdmDelay
delegate
T@"<SUManagedDeviceManagerDelegate>",&,N,V_delegate
com.apple.alarm
Handling wakeup alarm
No event name
installAlertAlarmName
Registering ContextStore Predicates
B16@?0@"NSString"8
ContextStore reports ready for installation UI
Scheduling alarm: %@
Date
Canceling alarm: %@
_EventRecordingServiceURL
options
T@"SUScanOptions",&,N,V_options
callback
T@?,C,N,V_callback
T@"SUDescriptor",&,N,V_result
error
T@"NSError",&,N,V_error
com.apple.softwareupdateservices.reporter
/var/mobile/Library/SoftwareUpdate
com.apple.softwareupdateservices.scanQueue
com.apple.softwareupdateservices.autoupdateenable
Found install policy: %@
No install policy saved, using default: %@
reset install policy to: %@
loading saved sessionID: %@
downloading
installing
com.apple.softwareupdateservicesd.installUpdate
Failed to acquire power assertion for update installation.
Failed to release power assertion for update installation.
scanning
Foreground status changed: isForeground? %@
Updating download options for foreground status change if necessary.
Attempting to resume from last known state.
New OS detected; resetting all prior state.
Internal
State reset complete.
Created new sessionID: %@
Creating potentialNextSessionID when no sessionID
%@%@
Created new potentialNextSessionID: %@
Adopted potentialNextSessionID as new sessionID: %@
No previous download recognized; cleaning up all software update assets.
No asset found matching last known descriptor. Cleaning up all software update assets
Found asset at startup: %@
Asset is installed
Previous update found on disk and verified.
Previous update found on disk and unarchived.  Resuming verification...
Previous update asset hadn't yet finished brain loading (downloading, verifying, or extracting).  Resuming brain download...
Previous update asset hadn't yet finished update processing (downloading, verifying, or extracting).  Resuming update download...
No previous download state to resume from.
Previous update was found queued for downloading.  Attempting to resume download...
Successfully verified update
Calling verifyAndPrepareUpdate in resumeFromLastKnownState
Automatic scan for type [%@] disabled while roaming over cellular.
Coalesced auto-scan request for [%@] into existing autoscan.
auto-tryScan
Starting software update auto scan for type: %@
Auto scan found update available: %@
Automatic scan for types [%@] failed with error: %@
v24@?0@"SUDescriptor"8@"NSError"16
auto-tryDownload
_tryOrScheduleAutodownloadWithPolicy: current network type: %@, within wifi window? %@, pluggedIntoPower? %@
_tryOrScheduleAutodownloadWithPolicy: wifi download failed to start due to error: %@
Download failed because auto-download has been disabled by preference.
Attempting to autodownload...
_doAutodownload: Error starting autodownload: %@
v20@?0B8@"NSError"12
_endOrRecheduleAutodownloadRetryInOneDay: within wifi window
_endOrRecheduleAutodownloadRetryInOneDay: download should end
Sending autodownload did fail to start notification to clients.
Ending/clearing any oustanding autodownload tasks and state
Download is currently halted @ end of autodownload period - trying to cancel it silently.
Scheduled new manual wifi period ending: %@
Scan [identifier: %@] requested during existing scan. This scan will take precedence
Scan request [identifier: %@] coalesced into existing scan
Scanning for new OTA software update...
Ignoring non managed scan result in favor of managed scan result
Device is up to date
Purging SU asset because server says device is up to date
Error scanning for update: %@
Found update while delayed update is enabled
Background scan found previously deleted update; Ignoring the build.
Background scan found build already download(ing|ed); Ignoring the build
Scanned for [%@] updates, but didn't find any.
Ramp is enabled for asset. Ignoring the update
Found update descriptor, but delaying due to MDM setttings: %@
Background scan for new build, but auto install is scheduled on internal build. Ignoring update
Update found for scan options: %@
Update found was newer than curently download(ed|ing) update.  Attempting to cancel download.
Download successfully cancelled.
Unable to cancel download: %@
Previous download invalidated/destroyed for new update.
Unexpected result from scan - no update descriptor or error returned!
v36@?0@"SUDescriptor"8@"MAAsset"16B24@"NSError"28
Requested PMV %@ does not match PMV returned by MobileAsset %@
v24@?0@"SUDocumentation"8@"NSError"16
v36@?0@"MAAsset"8@"NSDate"16B24@"NSError"28
Fetching associated documentation.
Failed to find documentation asset: %@
Documentation asset found: %@
%@ download progress: %d% (%d/%d)
v16@?0@"MAProgressNotification"8
documentation download completed succesfully
Documentation asset download failed: %d
v16@?0q8
Documentation download timed out.
Managed scan == %d
Asset refresh state: %@
No update asset found. Device is up to date
Asset refresh error: %@
Found new update while waiting for unlock. Clearing download
Update asset has not started downloaded yet. Canceling planned download
Cancellation/purging success.
Error cancelling/purging software update asset: %@
Download options changed from: %@ 
Refreshing asset locally to start download...
Attempted to download update that's already on disk and downloaded.
Latest software update asset is not the last scanned update asset; should never occur, but updating last scanned descriptor to match.
Sytem partition growth = %llu bytes
Starting space checks for download
Insufficient space for download. Trying to free %llu bytes
Insufficient space after purging files. Update requires another %llu bytes
Unable to purge enough space for downlaod. Not starting download
SU asset
Documentation asset
Brain asset
Ignoring MAProgress
allow SU download over cellular = %d
failed to download %@: %d
%@ asset already installed. Starting prepare
successfully downloaded %@
Resuming download found to be undownloadable, and unable to cancel the download: %@
SUManager.m
Download status can only be invoked on the main thread.
callback count = %lu
selector string = %@
Unknown selector %@ for SUManager
_verifyAndPrepareOnUnlock lockState = %d
calling _verifyAndPrepareUpdate from unlock callback
Download complete and brain is loadable. Verifying update
Software update download phase changed from %@ to %@.
Download halted after wifi window; attempting to cancel download silently.
Download %@ phase completed.
Download Phase: %@, Phase Progress: %@, Overall Progress: %@
Download failed with error: %@
Scheduling autodownload retry through BTA since we're within the wifi autodownload window.
Cannot add unlock callback with nil selector
Cannot add unlock callbakc with nil unlockCallbackKey
Failed to create NSString from selector
Adding unlock callback %@ for key %@
unlock callback count = %lu
removing unlock callback for key %@
Clearing unlock callbacks
Download status can only be invoked on the main thread, but was: %@
Cleaning up previous download..Dismissing Auto/ManualUpdate followup(if present) and purging SU asset
Update is currently preparing. Coalescing prepare requests.
com.apple.softwareupdateservicesd.verifyUpdate
Failed to acquire power assertion for update verification.
v16@?0@"NSError"8
Purging MSU update since it was cancelled - success? %d, error=%@
Failed to release power assertion for update verification.
Cellular operator status changed, and now the download is not downloadable.  Attempting to cancel the download.
Unable to cancel download for cellular bundle change: %@
Insufficient disk space detected for installation - attempting to free: %@ bytes
Insufficient disk space detected for installation but ignoring attempt to free space because we're within buffer from a prior attempt to do so.
InternalBuild
Is ready for installation?  No due to constraints unmet: %@
Requiring installation of asset: %@
Received managed installation request: %@
Installation error: download not ready for installation: %@
Installation error: no network found
Installation error: activation service not available: %@
Installation failed with error: %@
%@,%@,%@,%@
autoOn
autoOff
enabled
disabled
createInstallationKeybag - unattended:%d
Overriding mandatoryUpdateDictionary to %@
DisableAutoUpdate
Mandatory update dictionary is disabling auto updates
https://xp.apple.com/report
failed to allocate event for otaAvailable event so not reported
failed to allocate event for otaDownloaded event so not reported
failed to allocate event for otaPostponed event so not reported
reporting OTA event: %@
managedDeviceDelayPeriodChanged
Updated delay period takes us out of delay period
Failed to purge/cancel download: %@
Asset audience changed. Kicking off background scan
Background scan resulted in error: %@
Background scan found descriptor: %@
Device lock status changed: passcodeLocked = %@
Device unlocked
T@"<SUManagerDelegate>",N
foreground
TB,N,GisForeground
isInstallTonight
TB,N
isInstallTonightScheduled
mandatoryUpdateDictionary
T@"NSDictionary",&,N
passcodePolicy
T@"SUAutoUpdatePasscodePolicy",&,N
state
T@"SUState",&,N,V_state
download
T@"SUDownload",&,N,V_download
TB,D,N,GisDownloading
TB,N,GisScanning,V_scanning
preparing
TB,N,GisPreparing,V_preparing
TB,N,GisInstalling,V_installing
downloadAsset
T@"MAAsset",&,N,V_downloadAsset
assetToDownloadFromLastScan
T@"MAAsset",&,N,V_assetToDownloadFromLastScan
assetToDownloadFromLastScanReleaseDate
T@"NSDate",&,N,V_assetToDownloadFromLastScanReleaseDate
lastStashbagPersistedDate
T@"NSDate",&,N,V_lastStashbagPersistedDate
managedDeviceManager
T@"SUManagedDeviceManager",&,N,V_managedDeviceManager
installPolicy
T@"SUInstallPolicy",&,N,V_installPolicy
potentialNextSessionID
T@"NSString",&,N,V_potentialNextSessionID
T@"<SUManagerDelegate>",N,V_delegate
TB,N,GisForeground,V_foreground
TB,N,V_isInstallTonight
TB,N,V_isInstallTonightScheduled
T@"NSDictionary",&,N,V_mandatoryUpdateDictionary
T@"SUAutoUpdatePasscodePolicy",&,N,V_passcodePolicy
followUpController
T@"SUSFollowUpController",&,N,V_followUpController
coreReporter
T@"SUCoreReporter",&,N,V_coreReporter
            discretionary: %@
            allowsCellular: %@
            requiresPowerPluggedIn: %@
            downloadTimeoutSecs: %d
            supervised: %@
discretionary
allowsCellular
allowExpensiveNetwork
requiresPowerPluggedIn
skipPhase
downloadTimeoutSecs
deviceIsSupervised
additionalOptions
T@"NSDictionary",R,&,N,V_additionalOptions
com.apple.softwareupdateservicesd.clientQueue
device does%@ have enough space for download
 not
v28@?0B8@"NSNumber"12@"NSError"20
v24@?0B8B12@"NSError"16
Install Update Failed on AutoSU. Going to schedule retry
AutomaticUpdateV2 enabled : %d
Scheduled auto install operation: %@
Error scheduling auto install operation: %@
Setting automatic download enabled : %@
Added client: %@, count: %u
Removed client: %@, count: %u
Auto install operation cancelled..Dismissing AutoUpdateBanner
isReadyToInstall (SUS) Returned NO
isReadyToInstall (SB) Returned NO. Error: %@
isReadyToInstall Returned YES
otaAvailable
otaDownloaded
otaPostponed
targetOSVersion
updateType
installTonight
controllerStatus
persistDuration
verifyingUpdate
downloadNotReady
noNetwork
noActivation
T@"SUInstallOptions",R,&,N
Notifying observers of start
/System/Library/PrivateFrameworks/SoftwareUpdateServicesUI.framework/Plugins/SoftwareUpdateServicesUIPlugin.servicebundle
Starting the server: keepAlive = %@
ENABLED
DISABLED
Starting the server.
com.apple.softwareupdateservices.connectionQueue
SUMinimumLaunchTransaction
Software update daemon continuing to run - transactions: %@
Software update daemon continuing to run - busy.
SUAddClientTransaction
SUClientMessagabilityChangedNotification
SUClientForegroundnessChangedNotification
v16@?0@"NSDictionary"8
com.apple.softwareupdateservicesd.wakeup
Trying to waking up client...: %@
Unable to wakeup client: %@
Client [%@:<%p>] - messagability changed: isMessagable? %@
Client [%@:<%p>] - foregroundness changed: isForeground? %@
Client <%p>:
            
type: %@
            
pid: %@
            
bundle ID: %@
            
application? %@
            
messagable? %@
            
foreground? %@
connection
T@"NSXPCConnection",R,N,V_connection
type
Ti,N,V_type
identifier
T@"NSString",R,N,V_identifier
Ti,R,N,V_pid
isApplication
TB,R,N,V_isApplication
isMessagable
TB,R,N,V_isMessagable
isForeground
TB,R,N,V_isForeground
proxy
T@"<SUManagerClientInterface>",R,D,N
unlockCallbackVerifyAndPrepare
unlockCallbackPersistStash
unlockCallbackResumeUpdate
unlockCallbackPresentAutoUpdateBanner
com.apple.softwareupdateservicesd.activity.autoScan
com.apple.softwareupdateservicesd.activity.emergencyAutoScan
com.apple.softwareupdateservicesd.activity.delayEndScan
com.apple.softwareupdateservicesd.activity.autoDownload
com.apple.softwareupdate.autoinstall.startInstall
com.apple.softwareupdateservicesd.activity.autoInstallEnd
com.apple.softwareupdateservicesd.activity.autoInstallUnlock
com.apple.softwareupdateservicesd.activity.presentBanner
com.apple.softwareupdateservicesd.activity.installAlert
com.apple.softwareupdateservicesd.scheduler
Expired or no background scan activity found. Rescheduling for %@
Not scheduling auto download: Currently Downloading
Failed to set %@ activity state to XPC_ACTIVITY_STATE_DONE
v24@?0@"NSString"8@"NSDictionary"16
Received activity: %@: %@
schedulerAction
No handler block found for activity Name: %@
Beginning transaction: %@%@
 (with keepAlive)
com.apple.SoftwareUpdateServices.
Ended transaction: %@
Keep alive status: %@
Enabled
Disabled
softwareupdateservicesd could not toggle keep alive status to launchd.
softwareupdateservicesd could not read keep alive status from launchd.
psr_ota
https://xp.apple.com/report/2/psr_ota
clientId
events
/RecorderSplunkRecords
core.splunk.state
com.apple.softwareupdatecore.splunk.state
Notice
%s.%s
NoDomain
%@ %ld
%@/%d/%@
application/json
Content-Type
v32@?0@"NSDictionary"8Q16^B24
v32@?0@8Q16^B24
com.apple.softwareupdateservices.errors
SUControllerError
SUBError
BridgeOSSoftwareUpdateError
MobileSoftwareUpdateErrorDomain
ASError
MobileAssetError
succeeded
failed
logger
T@"NSObject<OS_os_log>",&,N,V_logger
awaitingRetry
T@"NSMutableArray",&,N,V_awaitingRetry
splunkURL
T@"NSURL",&,N,V_splunkURL
splunkStateQueue
T@"NSObject<OS_dispatch_queue>",R,N,V_splunkStateQueue
inProcessConfig
T@"NSURLSessionConfiguration",&,N,V_inProcessConfig
inProcessOperationQueue
T@"NSOperationQueue",&,N,V_inProcessOperationQueue
inProcessSession
T@"NSURLSession",&,N,V_inProcessSession
reporterDelegate
T@"SUCoreReporterDelegate",&,N,V_reporterDelegate
domain
T@"NSString",&,N,V_domain
storeToPath
T@"NSString",&,N,V_storeToPath
lastErrorEvent
T@"SUCoreEvent",&,N,V_lastErrorEvent
splunkAccessCreated
TB,N,V_splunkAccessCreated
com.apple.softwareupdateservices.autoInstallManager.stateQueue
New OS detected. Clearing last SUAutoInstallOperation
Saved SUAutoInstallOperation is expired
There is no downloaded asset. Clearing last SUAutoInstallOperation
resumeOrResetStateIfNecessary: Dismissing AutoUpdateBanner if present
Last AutoInstall operation found
Error creating new autoInstallOperationModel: %@
Setting isInstallTonightScheduled to YES
Unlock window passed. Firing unlock window timer manually
AutoSU disabled. Not scheduling AutoSU timers
AutoSU disabled for this update. Not scheduling AutoSU timers
Cancel
AutoSU consented
User consented during unlock window. Persisting stash
Auto update consented and no passcode set. Displaying banner
Window ending at %@, attempting to reschedule auto install for date %@
Unlock window did begin
Ready to install timer fired, but operation model is nil
Ready to install timer fired, but operation was not agreed to
Not ready to begin AutoInstall operation. Is update ready for install? %@
Could not install due to %@, retrying in 15 mins.
Could not install due to %@, and should not retry. Canceling auto install
AutoUpdate cannot be installed and user has been informed of the update..Presenting error alert
AutoUpdate cannot be installed, but user is not yet aware of the same..NOT presenting error alert
AutoInstallOperation expired
unattendedInstallationKeybagCreated: isAutoUpdate and isAutoDownload are true..Scheduling presentation of AutoUpdateBanner
clearing autoInstallOperation for reason: %@
Setting isInstallTonightScheduled to NO
T@"<SUAutoInstallManagerDelegate>",N,V_delegate
operationModel
T@"_SUAutoInstallOperationModel",R,N,V_operationModel
T@"SUState",R,N,V_state
T@"SUAutoUpdatePasscodePolicy",R,N,V_passcodePolicy
T@"SUSFollowUpController",R,N,V_followUpController
Connection completed successfully.
Connection failed with error: %@
Connection received redirect request to: %@
Connection received response: %d
Connection received %d bytes of data.
request
T@"NSURLRequest",&,N,V_request
data
T@"NSMutableData",&,N,V_data
response
T@"NSURLResponse",&,N,V_response
statusCode
Tq,N,V_statusCode
allowRedirects
TB,N,V_allowRedirects
SUPolicyGlobal
SUPolicyGlobalOptions
SUManagerEngineDownloadDescriptor
SUSFollowUpController
SUPolicyScanBrain
SUCoreEvent
SUPolicyScan
SUCoreReporterDelegate
NSURLSessionDelegate
NSObject
SUActivationStatusResponse
SUActivationService
SUPolicyDownload
SUBackgroundTaskAgent
SUManagedDeviceManager
SUXPCAlarm
SUScanRequest
SUManager
SUKeybagInterfaceObserver
SUManagerInterface
SUNetworkObserver
SUManagedDeviceManagerDelegate
SUPolicyScanSoftwareUpdate
SUPolicy
SUManagerServer
SUManagerServerInterface
SUManagerDelegate
SUAutoInstallManagerDelegate
SUManagerObserver
SUPolicyApply
SUManagerClientInterface
Daemon
SUManagerScanRequest
SUManagerServerClient
SUManagerInterfaceFactory
SUScheduler
SUPolicyDocumentationDownload
SUTransactionManager
SUPolicyScanSUDocumentation
SUCoreReporter
SUAutoInstallManager
SUAutoUpdatePasscodePolicyObserver
SUHttpOperation
NSURLConnectionDataDelegate
NSURLConnectionDelegate
@16@0:8
@24@0:8@16
i16@0:8
B16@0:8
@20@0:8B16
v24@0:8@16
v16@0:8
@"SUPolicyGlobalOptions"
@"NSDictionary"
@24@0:8q16
@72@0:8@16@24@32@40@48@56q64
B24@0:8@16
q16@0:8
v24@0:8q16
@"MAAsset"
@"NSDate"
@"NSString"
@"SUScanOptions"
@"SUDownloadOptions"
@"SUInstallOptions"
@"SUMDMScanOptions"
@32@0:8@16@24
v20@0:8B16
@"NSMutableDictionary"
@"NSURL"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v40@0:8@16@24@?32
v32@0:8@"NSURLSession"16@"NSError"24
v40@0:8@"NSURLSession"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"NSURLSession"16
v40@0:8@16@24@32
@"SUCoreReporter"
v20@0:8i16
@24@0:8^@16
@32@0:8@16^@24
v40@0:8@16r*24B32B36
v32@0:8r*16@24
@"<SUManagerInterface>"
@"SUAutoInstallManager"
@"SUXPCAlarm"
@"SUManagedDeviceUpdateDelay"
@"<SUManagedDeviceManagerDelegate>"
@"NSObject<OS_dispatch_queue>"
@"SUCSScheduler"
@?16@0:8
v24@0:8@?16
@"SUDescriptor"
@"NSError"
v28@0:8@16B24
v28@0:8@"SUKeybagInterface"16B24
v28@0:8i16@?20
v32@0:8@16@?24
v28@0:8B16@?20
B24@0:8^@16
v32@0:8:16@24
v36@0:8@16B24@?28
v24@0:8@"<SUManagerObserver>"16
v28@0:8i16@?<v@?@"SUDescriptor"@"NSError">20
v24@0:8@"NSError"16
@"SUDescriptor"16@0:8
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"SUScanOptions"16@?<v@?@"SUDescriptor"@"NSError">24
v32@0:8@"SUDownloadOptions"16@?<v@?B@"NSError">24
v32@0:8@"SUDownloadMetadata"16@?<v@?B@"NSError">24
v28@0:8B16@?<v@?B@"NSError">20
@"SUDownload"16@0:8
@"SUInstallPolicy"16@0:8
@"NSDate"16@0:8
v24@0:8@?<v@?BB@"NSError">16
v32@0:8@"SUInstallOptions"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
@"NSNumber"16@0:8
v32@0:8:16@"NSString"24
v24@0:8@"NSString"16
v36@0:8@"NSString"16B24@?<v@?B@"NSError">28
v32@0:8@"NSError"16@"NSString"24
@"<SUManagerDelegate>"16@0:8
v24@0:8@"<SUManagerDelegate>"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
@"SUAutoUpdatePasscodePolicy"16@0:8
v24@0:8@"SUAutoUpdatePasscodePolicy"16
v24@0:8i16i20
v24@0:8@"SUManagedDeviceManager"16
B32@0:8@16^@24
v36@0:8@16@24B32
B32@0:8B16B20^@24
B20@0:8B16
i24@0:8@16
B32@0:8@16@24
v32@0:8@16q24
v28@0:8@16f24
v36@0:8@16f24d28
B36@0:8^@16B24^B28
v24@0:8Q16
@"<SUManagerDelegate>"
@"SUState"
@"NSMutableArray"
@"SUDownload"
@"SUOperationProgress"
@"NSTimer"
@"NSHashTable"
@"SUAutoInstallFailureNotification"
@"SUManagedDeviceManager"
@"SUInstallPolicy"
@"SUAutoUpdatePasscodePolicy"
@"SUSFollowUpController"
v24@0:8@?<v@?@"SUDescriptor"@"NSError">16
v24@0:8@?<v@?@"SUDownload"@"SUInstallPolicy"@"_SUAutoInstallOperationModel"@"NSError">16
v24@0:8@?<v@?@"NSNumber"@"NSError">16
v28@0:8B16@?<v@?@"_SUAutoInstallOperationModel"@"NSError">20
v32@0:8@"NSUUID"16@?<v@?B@"NSError">24
v24@0:8@?<v@?Q@"NSError">16
v28@0:8i16@?<v@?B@"NSError">20
v24@0:8@?<v@?@"NSDate"@"NSError">16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v24@0:8@"NSDate"16
v24@0:8@"SUScanOptions"16
v40@0:8@"SUScanOptions"16@"SUDescriptor"24@"NSError"32
v32@0:8@"SUDescriptor"16@"NSError"24
v24@0:8@"SUDownload"16
v32@0:8@"SUDownload"16@"NSError"24
v32@0:8@"SUDownload"16@"SUInstallPolicy"24
v24@0:8@"SUDescriptor"16
v24@0:8@"SUInstallPolicy"16
v40@0:8@16Q24@32
v32@0:8@"SUAutoInstallManager"16@"_SUAutoInstallOperationModel"24
v40@0:8@"SUAutoInstallManager"16@"_SUAutoInstallOperationModel"24@"NSError"32
v40@0:8@"SUAutoInstallManager"16Q24@"_SUAutoInstallOperationModel"32
v32@0:8@16Q24
v24@0:8@"NSUUID"16
v32@0:8@"NSUUID"16@"NSError"24
v32@0:8@"NSUUID"16Q24
B20@0:8I16
@"BKSApplicationStateMonitor"
@"NSXPCConnection"
v32@0:8@16^i24
d20@0:8i16
B28@0:8@16B24
@"NSObject<OS_xpc_object>"
@"NSMutableSet"
@32@0:8*16@24
v48@0:8@16@24@32@40
@40@0:8@16@24@32
v36@0:8@16B24q28
@"NSObject<OS_os_log>"
@"NSURLSessionConfiguration"
@"NSOperationQueue"
@"NSURLSession"
@"SUCoreReporterDelegate"
@"SUCoreEvent"
v32@0:8@"SUAutoUpdatePasscodePolicy"16Q24
@28@0:8B16^@20
@32@0:8B16B20^@24
v24@0:8d16
@"<SUAutoInstallManagerDelegate>"
@"_SUAutoInstallOperationModel"
v32@0:8@"NSURLConnection"16@"NSError"24
B24@0:8@"NSURLConnection"16
v32@0:8@"NSURLConnection"16@"NSURLAuthenticationChallenge"24
B32@0:8@"NSURLConnection"16@"NSURLProtectionSpace"24
v48@0:8@16q24q32q40
@"NSURLRequest"40@0:8@"NSURLConnection"16@"NSURLRequest"24@"NSURLResponse"32
v32@0:8@"NSURLConnection"16@"NSURLResponse"24
v32@0:8@"NSURLConnection"16@"NSData"24
@"NSInputStream"32@0:8@"NSURLConnection"16@"NSURLRequest"24
v48@0:8@"NSURLConnection"16q24q32q40
@"NSCachedURLResponse"32@0:8@"NSURLConnection"16@"NSCachedURLResponse"24
v24@0:8@"NSURLConnection"16
@"NSURLConnection"
@"NSURLRequest"
@"NSMutableData"
@"NSURLResponse"
@44@0:8@16B24^@28^@36
MbP?
SUCoreReporter ANOMALY: unable to create label for splunk reporter queue - using default label
SUCoreReporter INIT: storing to path: %@
SUCoreReporter BLOCKED: failed to create core event from provided event information
SUCoreReporter STATUS: sending event [success]
SUCoreReporter STATUS: not sending event [error matching last error]
SUCoreReporter STATUS: sending event [error different from last error]
SUCoreReporter STATUS: sending event [error when no last error]
SUCoreReporter SETUP: default Splunk URL: %@
SUCoreReporter ANOMALY: failed to create directory: %@, error: %@
SUCoreReporter ANOMALY: send events with nothing to send
SUCoreReporter ANOMALY: missing required event resources [UUID: %@]
SUCoreReporter UPLOADING: sending [UUID: %@] file: %@ payload: %@
SUCoreReporter QUEUED: unable to create request to reach server [UUID: %@] file: %@
SUCoreReporter QUEUED: unable to create NSURL session task [UUID: %@] file: %@
SUCoreReporter STARTUP: retrying send recovered from file: %@
SUCoreReporter UPLOADING: retrying send from file: %@
SUCoreReporter DROP: too many awaiting retry - not reporting file: %@
SUCoreReporter SYNC: failed to get existing files error: %@
SUCoreReporter SYNC: failed to copy existing files array
SUCoreReporter DROP: unable to serialize data into JSON [UUID: %@] file: %@ error: %@
SUCoreReporter DROP: encountered invalid JSON payload [UUID: %@] file: %@
SUCoreReporter DROP: failed to write JSON data to file [UUID: %@] file: %@ error: %@
SUCoreReporter DROP: failed to form JSON data file [UUID: %@] file: %@
SUCoreReporter ANOMALY: could not remove event file: %@, error: %@
SUCoreReporter UPLOADED: successfully sent event (status=%ld) validated file: %@
SUCoreReporter QUEUED: failed to send event (status=%ld) validated file: %@
SUCoreReporter ANOMALY: callback [send %@ (status=%ld)] without file UUID - event file may be left on filesystem
SUCoreReporter ANOMALY: callback [send %@ (status=%ld)] fileUUID invalid (%@) - event file may be left on filesystem
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.softwareupdateservicesd</string>
<key>CFBundleName</key>
<string>${PRODUCT_NAME}</string>
<key>CFBundleExecutable</key>
<string>${EXECUTABLE_NAME}</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleVersion</key>
<string>1</string>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>allow-softwareupdated</key>
<true/>
<key>application-identifier</key>
<string>com.apple.softwareupdateservicesd</string>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>identity</string>
</array>
<key>com.apple.appstored.private</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboard.shutdown</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.keystore.lockassertion</key>
<true/>
<key>com.apple.keystore.stash.access</key>
<true/>
<key>com.apple.keystore.stash.persist</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.private.CacheDelete</key>
<array>
<string>SERVICE_REQUEST_ENTITLEMENT</string>
<string>DEMOTABLE_APPS_ENTITLEMENT</string>
<string>DEMOTE_APPS_ENTITLEMENT</string>
</array>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.VoiceServicesVocalizerVoice</string>
<string>com.apple.MobileAsset.VoiceServices.CustomVoice</string>
<string>com.apple.MobileAsset.VoiceServices.GryphonVoice</string>
<string>com.apple.MobileAsset.SoftwareUpdate</string>
<string>com.apple.MobileAsset.SoftwareUpdateDocumentation</string>
</array>
<key>com.apple.private.assets.change-daemon-config</key>
<true/>
<key>com.apple.private.kernel.darkboot</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.networkextension.configuration</key>
<true/>
<key>com.apple.rootless.storage.coreduet_knowledge_store</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.coreduetd.context</string>
</array>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>AGXDevice</string>
<string>AGXDeviceUserClient</string>
<string>AGXSharedUserClient</string>
<string>AGXCommandQueue</string>
<string>IOAVControllerConcreteUserClient</string>
<string>IOMobileFramebufferUserClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.system-container</key>
<true/>
<key>com.apple.springboard-ui.client</key>
<true/>
<key>com.apple.springboard.activateRemoteAlert</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.remote-alert</key>
<true/>
<key>com.apple.springboard.software-update-service.passcode-policy</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
</array>
<key>com.apple.wifi.manager-access</key>
<true/>
</dict>
</plist>
