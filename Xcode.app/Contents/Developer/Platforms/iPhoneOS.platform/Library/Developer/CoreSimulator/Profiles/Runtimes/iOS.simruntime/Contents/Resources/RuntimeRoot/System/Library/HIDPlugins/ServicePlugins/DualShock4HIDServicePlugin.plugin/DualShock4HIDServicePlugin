_GCDriverClientInterface
_GCDriverServerInterface
_GCHapticEvent
NSSecureCoding
NSCoding
GCHapticMotor
NSCopying
DualShock4HIDServicePlugin
GCLightServiceServerInterface
GCMotionServiceServerInterface
HIDServicePlugin
NSObject
GCMotionServiceClientInterface
GCLightServiceClientInterface
GCGamepadHIDServicePlugin
GCBatteryServiceServerInterface
GCHIDXPCInterface
GCBatteryServiceClientInterface
fetchDeviceRegistryIDWithReply:
connectToLightServiceWithClient:reply:
connectToMotionServiceWithClient:reply:
connectToBatteryServiceWithClient:reply:
setHapticMotor:frequency:amplitude:
enqueueTransient:hapticMotor:
enableHaptics
interfaceWithProtocol:
setInterface:forSelector:argumentIndex:ofReply:
driverCheckIn
countByEnumeratingWithState:objects:count:
identifier
value
valueForNoteParam:inParameters:
init
tokenAndParams
time
token
params
evaluateDeviceNoteParams:
eventID
stringWithFormat:
initWithSyntheticCommand:
description
setIdentifier:
type
setType:
subtype
setSubtype:
startTime
setStartTime:
intensity
setIntensity:
sharpness
setSharpness:
stopped
setStopped:
transientBeganAsContinuousEvent
setTransientBeganAsContinuousEvent:
_stopped
_transientBeganAsContinuousEvent
_identifier
_type
_subtype
_startTime
_intensity
_sharpness
decodeIntegerForKey:
decodeBoolForKey:
decodeDoubleForKey:
encodeInteger:forKey:
encodeBool:forKey:
encodeDouble:forKey:
initWithCoder:
encodeWithCoder:
supportsSecureCoding
dataWithBytes:length:
array
initWithIndex:name:features:frequency:amplitude:
initWithIndex:name:features:
initWithIndex:
encodeObject:forKey:
encodeFloat:forKey:
decodeObjectOfClass:forKey:
decodeFloatForKey:
allocWithZone:
name
copyWithZone:
index
features
frequency
amplitude
setFrequency:
setAmplitude:
addObject:
removeAllObjects
initWithIndex:name:
applyValuesFrom:
enqueueHapticTransientEvent:
drainQueuedTransients
queuedTransients
setQueuedTransients:
.cxx_destruct
_index
_frequency
_amplitude
_name
_features
_queuedTransients
stringWithCapacity:
appendString:
stringWithString:
initWithSuiteName:
boolForKey:
intValue
initWithService:
service
determineSupportMode
setLeftThumbstickNoiseBuffer:
setRightThumbstickNoiseBuffer:
requestPairingInfo
dispatchOutputReport
stringByAppendingString:
stringForKey:
caseInsensitiveCompare:
isBluetoothClassic
setExtendedSupportEnabled:
requestFirmwareInfo
requestSensorCalibrationInfo
isVirtualDevice
device
getReport:reportLength:withIdentifier:forType:error:
objectForKeyedSubscript:
bytes
length
sendBatteryReport
updateBatteryLevel:isPowerSupplyConnected:
dispatchHomeButtonEventWithValue:
dispatchMenuButtonEventWithValue:
dispatchOptionsButtonEventWithValue:
dispatchGameControllerExtendedEventWithState:
dispatchMotionEventWithState:
setInputReportHandler:
hapticMotors
objectAtIndex:
setReport:reportLength:withIdentifier:forType:error:
batteryReport
isEqualToString:
propertyForKey:client:
setObject:forKeyedSubscript:
propertyForKey:
boolValue
setProperty:forKey:client:
setProperty:forKey:
arrayWithObjects:count:
dispatchQueue
isHapticsActive
matchService:options:score:
updateLightWithRed:green:blue:
readLightWithReply:
updateSensorsActive:
readSensorsActiveWithReply:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
eventMatching:forClient:
setEventDispatcher:
setCancelHandler:
activate
cancel
setDispatchQueue:
clientNotification:added:
setupRawReportHandling
shouldDisconnectWhenIdle
dispatchHapticEvent
defaultHapticDispatchFrequency
defaultHapticMotors
extendedSupportEnabled
_modelVariant
_powerSupplyConnected
_batteryLevel
_haveReportedBatteryOnce
_batteryStabilized
_supportMode
_serialNumber
_sensorsActive
_ledR
_ledG
_ledB
_flashOnDuration
_flashOffDuration
_gyroSensitivityPitch
_gyroSensitivityYaw
_gyroSensitivityRoll
_accelBiasX
_accelBiasY
_accelBiasZ
_accelSensitivityX
_accelSensitivityY
_accelSensitivityZ
_batteryDeviceToken
_sensorCalibrationInfo
_firmwareInfo
_pairingInfo
_lightClient
_motionClient
_extendedSupportEnabled
dictionary
numberWithUnsignedChar:
stringWithUTF8String:
numberWithUnsignedShort:
numberWithUnsignedInt:
dictionaryWithObjects:forKeys:count:
numberWithShort:
initWithMachServiceName:options:
setInterruptionHandler:
setInvalidationHandler:
invalidate
remoteObjectProxy
setRemoteObjectInterface:
setExportedInterface:
setExportedObject:
resume
defaultIdleTimeoutDuration
scheduleIdleTimer
defaultLeftThumbstickNoiseBuffer
defaultRightThumbstickNoiseBuffer
defaultLeftThumbstickDeadzoneRadius
defaultLeftAxisSnapRadius
defaultRightThumbstickDeadzoneRadius
defaultRightAxisSnapRadius
open
createVirtualHIDDeviceForBattery
initGameControllerDaemonXPC
stringWithCString:encoding:
dealloc
initWithInt:
initWithBool:
numberWithBool:
unsignedIntValue
initWithType:timestamp:senderID:
close
cStringUsingEncoding:
shouldCreateBatteryDevice
numberWithUnsignedLongLong:
initWithProperties:
updateBattery:isCharging:
updateClientBattery
dataWithBytesNoCopy:length:freeWhenDone:
handleReport:error:
updateIdleState
isIdle
disconnect
lastEventTime
timestamp
dispatchEvent:
dispatchEvent:updateLastEventTime:
createEvent:
setIntegerValue:forField:
setDoubleValue:forField:
applyDeadzone:axisSnapRadius:input:
isTwoAxisInputIdle:prevInput:noiseBuffer:
count
numberOfTimesToSendZeroHapticReport
isAnyHapticMotorEnabled
stopHaptics
regID
updateHapticMotor:
readBatteryWithReply:
ping
requestServiceWithReply:
updateHaptics:
client
setClient:
dispatcher
setDispatcher:
batteryUserDevice
uniqueIdentifier
isUSB
isBluetoothLE
idleTimeoutDuration
setIdleTimeoutDuration:
leftThumbstickNoiseBuffer
rightThumbstickNoiseBuffer
setHapticMotors:
leftThumbstickDeadzoneRadius
setLeftThumbstickDeadzoneRadius:
leftThumbstickAxisSnapRadius
setLeftThumbstickAxisSnapRadius:
rightThumbstickDeadzoneRadius
setRightThumbstickDeadzoneRadius:
rightThumbstickAxisSnapRadius
setRightThumbstickAxisSnapRadius:
_cancelHandler
_prop
_activated
_clientAdded
_idleDispatchSource
_session
_buttonHome
_buttonMenu
_buttonOptions
_buttonShare
_gameControllerState
_gameControllerExtendedState
_motionSequenceNumber
_motionState
_hapticsActive
_pendingHapticZeroReports
_hapticDispatchFrequency
_currentHapticClipTime
_currentHapticDispatchTime
_loopHapticEvent
_hapticDispatchSource
_daemonConnection
_batteryClient
_internalQueue
_bluetoothClassic
_usb
_bluetoothLE
_virtualDevice
_service
_idleTimeoutDuration
_leftThumbstickNoiseBuffer
_rightThumbstickNoiseBuffer
_leftThumbstickDeadzoneRadius
_leftThumbstickAxisSnapRadius
_rightThumbstickDeadzoneRadius
_rightThumbstickAxisSnapRadius
_client
_dispatcher
_dispatchQueue
_device
_batteryUserDevice
_regID
_lastEventTime
_uniqueIdentifier
_batteryReport
_hapticMotors
v24@0:8@?16
v32@0:8@16@?24
v32@0:8Q16f24f28
v32@0:8@16Q24
v16@0:8
v24@0:8@?<v@?@"NSNumber">16
v32@0:8@"<GCLightServiceClientInterface>"16@?<v@?@"<GCLightServiceServerInterface>"@"NSError">24
v32@0:8@"<GCMotionServiceClientInterface>"16@?<v@?@"<GCMotionServiceServerInterface>"@"NSError">24
v32@0:8@"<GCBatteryServiceClientInterface>"16@?<v@?@"<GCBatteryServiceServerInterface>"@"NSError">24
v32@0:8@"_GCHapticEvent"16Q24
{pair<bool, float>=Bf}28@0:8I16@20
v24@0:8@16
@24@0:8@16
@16@0:8
Q16@0:8
v24@0:8Q16
q16@0:8
v24@0:8q16
d16@0:8
v24@0:8d16
B16@0:8
v20@0:8B16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@44@0:8i16@20Q28f36f40
@36@0:8i16@20Q28
@28@0:8i16@20
@20@0:8i16
i16@0:8
f16@0:8
v20@0:8f16
@"NSString"
@"NSMutableArray"
B36@0:8I16@20^q28
v28@0:8f16f20f24
v24@0:8@?<v@?fff>16
v24@0:8@?<v@?B>16
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@20@0:8I16
@32@0:8@16@24
B40@0:8@16@24@32
v28@0:8@16B24
@32@0:8@"NSString"16@"HIDConnection"24
B40@0:8@16@"NSString"24@"HIDConnection"32
@"HIDEvent"32@0:8@"NSDictionary"16@"HIDConnection"24
v24@0:8@"<HIDEventDispatcher>"16
v24@0:8@?<v@?>16
B36@0:8I16@"NSDictionary"20^q28
v24@0:8@"NSObject<OS_dispatch_queue>"16
v28@0:8@"HIDConnection"16B24
v24@0:8C16B20
{?="reportID"C"gyroPitchBias"s"gyroYawBias"s"gyroRollBias"s"gyroRefPitchPlus"s"gyroRefPitchMinus"s"gyroRefYawPlus"s"gyroRefYawMinus"s"gyroRefRollPlus"s"gyroRefRollMinus"s"gyroRefSpeedPlus"s"gyroRefSpeedMinus"s"accelRefXPlus"s"accelRefXMinus"s"accelRefYPlus"s"accelRefYMinus"s"accelRefZPlus"s"accelRefZMinus"s"calibrationTemp"S"crc32"I}
{?="reportID"C"buildDate"[16c]"buildTime"[16c]"deviceRevision"S"hardwareVersion"S"softwareVersion"I"softwareSubVersion"S"softwareSeriesInfo"S"codeSize"I"crc32"I}
{?="reportID"C"localBDAddress"[6C]"categoryOfDevice"[3C]"hostBDAddress"[6C]}
@"<GCLightServiceClientInterface>"
@"<GCMotionServiceClientInterface>"
v24@0:8@?<v@?CB>16
v32@0:8f16f20^24
B36@0:8^16^24f32
v120@0:8{?=BdddBdddBdddd}16
v192@0:8{?=Q[41f]}16
I16@0:8
^{?=CCC}16@0:8
@"NSNumber"
@"NSObject<OS_dispatch_source>"
^{BTSessionImpl=}
{?="directionPadUp"d"directionPadDown"d"directionPadLeft"d"directionPadRight"d"buttonA"d"buttonB"d"buttonX"d"buttonY"d"buttonL1"d"buttonR1"d"buttonL2"d"buttonR2"d"leftThumbstick""rightThumbstick""buttonL3"B"buttonR3"B"controllerType"I}
{?="mask"Q"buttons"[41f]}
{?="supportsGyro"B"gyroPitch"d"gyroYaw"d"gyroRoll"d"supportsAccelerometer"B"accelerometerX"d"accelerometerY"d"accelerometerZ"d"supportsAttitude"B"attitudeX"d"attitudeY"d"attitudeZ"d"attitudeW"d}
{timespec="tv_sec"q"tv_nsec"q}
@"NSXPCConnection"
@"<GCBatteryServiceClientInterface>"
@"NSObject<OS_dispatch_queue>"
@"HIDConnection"
@"<HIDEventDispatcher>"
@"HIDDevice"
@"HIDUserDevice"
^{?=CCC}
@"NSArray"
v8@?0
InternalBuild
com.apple.GameController
default
com.apple.GameController.Daemon
com.apple.GameController.HID
com.apple.GameController.Settings
com.apple.GameController.Haptics
<%@ %lu (%@), i=%f s=%f (started at %f)>
transient
continuous
identifier
TQ,N,V_identifier
type
Tq,N,V_type
subtype
Tq,N,V_subtype
startTime
Td,N,V_startTime
intensity
Td,N,V_intensity
sharpness
Td,N,V_sharpness
stopped
TB,N,V_stopped
transientBeganAsContinuousEvent
TB,N,V_transientBeganAsContinuousEvent
supportsSecureCoding
TB,R
_index
_name
_features
_frequency
_amplitude
GCHapticMotor - %@(%d) f=%f a=%f
queuedTransients
T@"NSMutableArray",&,N,V_queuedTransients
name
T@"NSString",R,C,N,V_name
index
Ti,R,N,V_index
features
TQ,R,N,V_features
frequency
Tf,N,V_frequency
amplitude
Tf,N,V_amplitude
%02x%@
GCPartnersEnable
FirmwareInfo
IsExtendedSupportEnabled
DualShock4SupportMode
Basic
Extended
DualShock4
ProductID
VendorID
IOService
SerialNumber
Bluetooth
Local BD Address
v48@?0@"HIDDevice"8Q16q24q32@"NSData"40
DualShock4HIDServicePlugin
ServicePluginDebug
ActivateExtendedSupport
Rumble (Small)
Rumble (Large)
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
extendedSupportEnabled
TB,N,V_extendedSupportEnabled
ReportID
Build Date
Build Time
Device Revision
Hardware Version
Software Version
Software Subversion
Software Series Info
Code Size
CRC 32
gyroPitchBias
gyroYawBias
gyroRollBias
gyroRefPitchPlus
gyroRefPitchMinus
gyroRefYawPlus
gyroRefYawMinus
gyroRefRollPlus
gyroRefRollMinus
gyroRefSpeedPlus
gyroRefSpeedMinus
accelRefXPlus
accelRefXMinus
accelRefYPlus
accelRefYMinus
accelRefZPlus
accelRefZMinus
calibrationTemp
Category of Device
Host BD Address
com.apple.GameController.gamecontrollerd.driver
com.apple.gamecontroller.serviceplugin
Transport
isVirtual
BluetoothLowEnergy
GCGamepadHIDServicePlugin
BatteryCapacity
IsPowerSupplyConnected
XboxOneHIDServicePlugin
PluginName
cancelHandler
dispatchQueue
activated
clientAdded
GameControllerPointer
EventType
ReportDescriptor
PhysicalDeviceUniqueID
Product
GameControllerType
 - will disconnect if permitted
client
T@"HIDConnection",W,N,V_client
dispatcher
T@"<HIDEventDispatcher>",W,N,V_dispatcher
service
TI,R,N,V_service
T@"NSObject<OS_dispatch_queue>",R,N,V_dispatchQueue
device
T@"HIDDevice",R,N,V_device
batteryUserDevice
T@"HIDUserDevice",R,N,V_batteryUserDevice
regID
TQ,R,N,V_regID
lastEventTime
TQ,R,N,V_lastEventTime
uniqueIdentifier
T@"NSString",R,N,V_uniqueIdentifier
batteryReport
T^{?=CCC},R,N,V_batteryReport
bluetoothClassic
TB,R,N,GisBluetoothClassic,V_bluetoothClassic
TB,R,N,GisUSB,V_usb
bluetoothLE
TB,R,N,GisBluetoothLE,V_bluetoothLE
virtualDevice
TB,R,N,GisVirtualDevice,V_virtualDevice
idleTimeoutDuration
Tf,N,V_idleTimeoutDuration
leftThumbstickNoiseBuffer
Tf,N,V_leftThumbstickNoiseBuffer
rightThumbstickNoiseBuffer
Tf,N,V_rightThumbstickNoiseBuffer
hapticMotors
T@"NSArray",&,N,V_hapticMotors
leftThumbstickDeadzoneRadius
Tf,N,V_leftThumbstickDeadzoneRadius
leftThumbstickAxisSnapRadius
Tf,N,V_leftThumbstickAxisSnapRadius
rightThumbstickDeadzoneRadius
Tf,N,V_rightThumbstickDeadzoneRadius
rightThumbstickAxisSnapRadius
Tf,N,V_rightThumbstickAxisSnapRadius
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
-(knN
Partners mode enabled? %d
Serial Number: %@
Support mode: "%@" - %@ %@ support
Enabling extended support.
Unable to retrieve firmware info from DualShock 4.
Firmware Info = %@
Unable to retrieve sensor calibration info from DualShock 4.
Sensor Calibration Info = %@
Gyro Pitch Sensitivity = %f
Gyro Yaw Sensitivity = %f
Gyro Roll Sensitivity = %f
Accelerometer X Bias = %f
Accelerometer Y Bias = %f
Accelerometer Z Bias = %f
Accelerometer X Sensitivity = %f
Accelerometer Y Sensitivity = %f
Accelerometer Z Sensitivity = %f
Unable to retreive pairing info from DualShock 4.
Pairing Info = %@
setupRawReportHandling
Unable to send output report to DualShock 4.
updateBatteryLevel - Charging complete.
updateBatteryLevel - Charging prohibited.
updateBatteryLevel - Charging fault detected.
readLightWithReply
updateLightWithRed:%f green:%f blue:%f
connectToLightServiceWithClient %@
updateSensorsEnabled %d
connectToMotionServiceWithClient %@
listening for XPC daemon
Connect To Daemon
Connection to com.apple.GameController.gamecontrollerd.driver invalidated
Connection to com.apple.GameController.gamecontrollerd.driver interrupted.  Attempting to re-establish.
initWithService: %d
processing io_service
creating HIDDevice for service %d
opening HIDDevice
registering for BTSessionCallbacks sessionEvent
dealloc
Freeing HIDDevice on %@
PropertyForKey: %@
setProperty: %@ forKey: %@
eventMatching: %@ client: %@
setEventDispatcher %@
setCancelHandler %p
calling cancel handler
activate
cancel
setDispatchQueue %p
clientNotification %@ added: %d
GCHIDLog::disconnect: unable to get BTDevice; no valid BTSession
GCHIDLog::disconnect: SUCCESS
GCHIDLog::disconnect: error code = %d
GCHIDLog::disconnect: unable to get BTDevice; error code = %d
GCHIDLog::disconnect: unable to get device address from %s; errCode = %d
creating battery device
created battery device %@ with properties %@
updateClientBattery reporting battery level %d%%
updateBatteryStats reporting battery level %d%%
scheduleIdleTimer
disconnectIfIdle disconnecting...
isIdle for %.2f seconds%@
Stopping timer...
Dispatching event...
ping
requestServiceWithReply
connectToBatteryServiceWithClient %@
BTSessionEventCallback: attached session = %p
BTSessionEventCallback: detached session = %p
BTSessionEventCallback: terminated session = %p
BTSessionEventCallback: failed session = %p
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
</dict>
</plist>
