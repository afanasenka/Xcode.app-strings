@(#)PROGRAM:identityservicesd  PROJECT:IDSAgent-1000
?333333
fff?
IDSDaemon
IDSFoundation
setting up the realtime encryption controller for the unique ID: %@
Warning
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
object
xpc-object
public-keys
object-type
object-context
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
v8@?0
sending the master key material recovery request for the unique ID: %@ to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
supportsSecureCoding
TB,R
nrDeviceIdentifier
T@"NSUUID",R,N,V_nrDeviceIdentifier
pairingProtocolVersion
TQ,N,V_pairingProtocolVersion
outOfBandKey
T@"NSData",&,N,V_outOfBandKey
wasInitiallySetupUsingIDSPairing
TB,N,V_wasInitiallySetupUsingIDSPairing
bluetoothMACAddress
T@"NSData",&,N,V_bluetoothMACAddress
pairWithSPPLink
TB,N,V_pairWithSPPLink
isAltAccountPairing
TB,N,V_isAltAccountPairing
inputBytesPerSecond
T@"NSNumber",&,N,V_inputBytesPerSecond
outputBytesPerSecond
T@"NSNumber",&,N,V_outputBytesPerSecond
packetsPerSecond
T@"NSNumber",&,N,V_packetsPerSecond
bluetoothLinkPreferences
T@"IDSNRBluetoothLinkPreferences",&,N,V_bluetoothLinkPreferences
deviceIdentifier
T@"IDSNRDeviceIdentifier",R,&,N,V_deviceIdentifier
hasPreferWiFiRequest
TB,R,N,V_hasPreferWiFiRequest
policyTrafficClassifiers
T@"NSSet",&,N,V_policyTrafficClassifiers
T@"IDSNRDeviceIdentifier",R,N,V_deviceIdentifier
isRegistered
TB,R,N,V_isRegistered
isEnabled
TB,R,N,V_isEnabled
isNearby
TB,R,N,V_isNearby
isConnected
TB,R,N,V_isConnected
isAsleep
TB,R,N,V_isAsleep
isClassCConnected
TB,R,N,V_isClassCConnected
portString
T@"NSString",R,N,V_portString
dataProtectionClass
TC,R,N,V_dataProtectionClass
OpportunisticCache
v16@?0@"IDSOpportunisticData"8
<%@:%p accessCount: %lld, cache: %@>
keychainCache
T@"NSMutableDictionary",&,N,V_keychainCache
accessCount
Tq,N,V_accessCount
keychainWrapper
T@"IDSKeychainWrapper",&,N,V_keychainWrapper
uriSuggester
T@"IDSFrequentURISuggester",&,N,V_uriSuggester
com.apple.ids
DeviceHBI
com.apple.conference
forceRandomDeviceHeartbeatInterval
DeviceHeartbeat
forceDeviceHeartbeat
Registration
com.apple.identityservices.device-hbi
vc-temporary-get-dependent-interval
MagnetIso
%c MagnetIso(%s)  Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
UnexpectedState
bytesReceived
bytesSent
packetsReceived
packetsSent
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
cbuuid
T@"NSString",&
deviceUniqueID
linkTypeString
T@"NSString",R,GlinkTypeString
state
headerOverhead
delegate
T@"<IDSLinkDelegate>",W
alternateDelegate
T@"NSString",&,V_cbuuid
T@"NSString",&,V_deviceUniqueID
TQ,R,V_state
T@"<IDSLinkDelegate>",W,V_delegate
T@"<IDSLinkDelegate>",W,V_alternateDelegate
<%@:%p; disableRegistration: %@>
disableReg
disableRegistration
TB,R,N,V_disableRegistration
*** Lockdown state is expired, ignoring
v24@?0@"IDSDAccount"8@"IDSServiceProperties"16
accountController
T@"IDSDAccountController",&,N,V_accountController
serviceController
T@"IDSDServiceController",&,N,V_serviceController
registrationController
T@"IDSRegistrationController",&,N,V_registrationController
restrictions
T@"IDSRestrictions",&,N,V_restrictions
registrationStateChangedDate
T@"NSDate",&,N,V_registrationStateChangedDate
registrationStateChangedCounter
Tq,N,V_registrationStateChangedCounter
registration-state-changed-max-count
NRDeviceMonitor
IPsecLinkType
IPsec Link
T@"<IDSNRDeviceBridgeDelegate>",W,N,V_delegate
nrMonitorQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_nrMonitorQueue
nrDeviceMonitor
T@"IDSNRDeviceMonitor",&,N,V_nrDeviceMonitor
T@"NSUUID",&,N,V_deviceIdentifier
latestLinkType
TC,N,V_latestLinkType
<%@: %p serviceIdentifier: %@, localURI: %@, subscribedURIs: %@>
v16@?0@"NSDictionary"8
v32@?0@"NSString"8@"IDSURI"16@"NSDictionary"24
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
endpointMap
T@"NSMutableDictionary",&,N,V_endpointMap
peerIDManagerToken
T@"NSString",R,N,V_peerIDManagerToken
serviceIdentifier
T@"NSString",R,N,V_serviceIdentifier
localURI
T@"IDSURI",R,N,V_localURI
subscribedURIs
T@"NSArray",R,N,V_subscribedURIs
resolvedEndpointsDidUpdateHandler
T@?,C,N,V_resolvedEndpointsDidUpdateHandler
/Library/IdentityServices/ids-pub-id.db
PublicIdentityCache
%@-%@-%@
IDSPublicIdentityCache
Adding identity to last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Checking last resort DB for identity { token: %@, uri: %@, service: %@ }
Found identity in last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
public-identity-clear-time-seconds
public-identity-future-clear-time-seconds
Cleaning last resort DB with date range %@ to %@
x-push-cert
Warning, missing %@ to add to %s
dictionary
pnv-retry-count
hardware-version
os-version
software-version
device-name
IMSI
PLMN
pnr-reason
test-data
id-preflight
status
mechanisms
mechanism
mechanism-data
SMSLess
protocolVersion
T@"NSString",C,N,V_protocolVersion
phoneNumberValidationRetryCount
T@"NSNumber",C,N,V_phoneNumberValidationRetryCount
hardwareVersion
T@"NSString",C,N,V_hardwareVersion
osVersion
T@"NSString",C,N,V_osVersion
softwareVersion
T@"NSString",C,N,V_softwareVersion
deviceName
T@"NSString",C,N,V_deviceName
T@"NSString",C,N,V_IMSI
T@"NSString",C,N,V_PLMN
testData
T@"NSString",C,N,V_testData
pnrReason
T@"NSNumber",C,N,V_pnrReason
responseStatus
T@"NSNumber",C,N,V_responseStatus
responseMechanisms
T@"NSArray",C,N,V_responseMechanisms
<%p> name %@ instanceID [%s] nextStreamID %u
_serviceNameToStreamIDMap %@
_streamIDToServiceNameMap %@
UTunPeerServiceMap
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
serviceMap[%@ <=> %lu] serviceNameMismatch %@ streamIDMismatch %@ [%@ <=> %lu]
Unexpected streamID %lu found when asked to translate %@
ServiceMap is at maximum capacity! %lu
IDSDelivery-oversized
Previous Remote Instance IDs (next:%d) {%@}
count
com.apple.private.alloy.multiplex1
com.apple.private.alloy.willow
com.apple.identityservicesd.aps
Get Service User ID's Completed with response %@
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
Get Admin Access Tokens Completed with response %@
accessory-id
adminAccessTokenDict
access-token
expiry
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
v32@?0@"NSString"8Q16^B24
IDSDuet
-[IDSDuetInterface forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
%p %s Sending IDS message, no CoreDuet on platform
-[IDSDuetInterface checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
initialSyncClientIDs
T@"NSMutableSet",&,N,V_initialSyncClientIDs
reunionSyncClientIDs
T@"NSMutableSet",&,N,V_reunionSyncClientIDs
T@"<IDSDuetInterfaceDelegate>",W,N,V_delegate
pushToken
T@"NSData",R,N
com.apple.icloud.presence.
com.apple.icloud.presence
@16@?0@"IDSURI"8
v64@?0@"NSString"8@"NSDictionary"16@"NSDictionary"24@"NSString"32B40@"NSDictionary"44B52@"NSDictionary"56
@16@?0@8
listeningOnActivities
T@"NSMutableSet",&,N,V_listeningOnActivities
listenersByActivity
T@"NSMutableDictionary",&,N,V_listenersByActivity
stateProvider
T@"<IDSActivityStateProvider>",&,N,V_stateProvider
pushListener
T@"IDSActivityPushListener",&,N,V_pushListener
messageDelivery
T@"FTMessageDelivery",&,N,V_messageDelivery
peerIDManager
T@"IDSPeerIDManager",&,N,V_peerIDManager
%@%@
v36@?0I8@"<NSObject>"12^B20^B28
T@"NSString",C,N,V_cbuuid
T@"NSString",C,N,V_deviceUniqueID
remoteSA
T@"IDSSockAddrWrapper",C,N,V_remoteSA
connectionsByID
T@"NSMutableDictionary",R,&,N,V_connectionsByID
controlChannel
T@"IDSUTunControlChannel",&,N,V_controlChannel
controlChannelCachedSYN
T@"NSData",&,N,V_controlChannelCachedSYN
controlChannelVersion
T@"NSString",&,N,V_controlChannelVersion
highPriorityConnectionSendingSet
T@"NSMutableSet",&,N,V_highPriorityConnectionSendingSet
suspendTraffic
TB,N,V_suspendTraffic
suspendTrafficCheckTime
Td,N,V_suspendTrafficCheckTime
linkLayerConnected
TB,N,V_linkLayerConnected
linkLayerDisconnectTime
Td,N,V_linkLayerDisconnectTime
vifName
T@"NSString",C,N,V_vifName
localSA
T@"IDSSockAddrWrapper",C,N,V_localSA
portMap
T^{IDSPortMap=[1024Q]S},R,N
connectionsTableByLocalRemotePortKey
T^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i},R,N
outgoingEncryptionTableBySSRC
incomingEncryptionTableBySSRC
utunSocket
Ti,N,V_utunSocket
selfInstanceID
T^[16C],R,N
instanceID
T^[16C],N
capabilityFlags
TQ,N,V_capabilityFlags
serviceMinCompatibilityVersion
TS,N,V_serviceMinCompatibilityVersion
shouldUseIPsecLink
TB,N,V_shouldUseIPsecLink
serviceConnector
T@"NSObject<OS_nw_service_connector>",&,N,V_serviceConnector
cloudServiceConnector
T@"NSObject<OS_nw_service_connector>",&,N,V_cloudServiceConnector
serviceConnectionCache
T@"NSMutableDictionary",R,&,N,V_serviceConnectionCache
Engram Error
v24@?0@"IDSMPFullAccountIdentityCluster"8Q16
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1692.6/IDSAgent/IDSAccountIdentityElector.m
currentCluster.groupID
![newServiceTypeNames containsObject:serviceTypeName]
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke_2
createdCluster.groupID
v24@?0@"IDSCloudKitKeyElectionStoreItem"8@"NSError"16
-[IDSAccountIdentityElector _createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:]
[oldCluster isParentOfCluster:newCluster]
newPublicCluster
[oldPublicCluster isParentOfCluster:newPublicCluster]
v32@?0@"IDSGroupServerKeyElectionStoreItem"8@"ENGroupID"16@"NSError"24
v24@?0@"IDSMPFullAccountIdentityCluster"8@"NSError"16
keychainElectionStore
T@"IDSKeychainKeyElectionStore",R,N,V_keychainElectionStore
cloudKitElectionStore
T@"IDSCloudKitKeyElectionStore",R,N,V_cloudKitElectionStore
groupServerElectionStore
T@"IDSGroupServerKeyElectionStore",R,N,V_groupServerElectionStore
user
T@"IDSPhoneUser",R,N,V_user
phoneSignature
T@"NSData",R,N,V_phoneSignature
certificateSigningRequest
T@"NSData",R,N,V_certificateSigningRequest
T@"NSData",R,N,V_pushToken
Tq,R,N,V_status
authenticationCertificate
T@"IDSAuthenticationCertificate",R,N,V_authenticationCertificate
__kIDSRegistrationKeyManagerPrivateIdentityRebuiltNotification
__kIDSRegistrationKeyManagerPrivateIdentityGeneratedNotification
__kIDSRegistrationKeyManagerKeychainMigrationComplete
__kIDSRegistrationKeyManagerEncryptionIdentityNeedsRollNotification
build-of-identity-generation
build-of-unregistered-identity-generation
message-protection-public-data-registered
ngm-message-protection-public-data-registered
ngm-message-protection-public-prekey-data-registered
ngm-message-protection-public-data-registered-version
KTAccountKey
hasRegIdentityContainer
hasUnregIdentityContainer
failedToGeneratedPublicDataForNGMIdentity
registrationKeyManagerRateLimit
ForceRefreshIdentityWithServer
PurgePreviousIdentityInterval
RegenerateIdentityInterval
ShowKeyRollingNotifications
ShowNGMKeyRollingNotifications
IDSRegistrationKeyManager.m
Invalid parameter not satisfying: %@
systemMonitor
identityDataSource
NGM Key Rolling
Rolling key
Tried and failed to generate new key to roll
Key Rolling
Generating new identity
Failed to generate new identity
Rolled key, did succeed %@
Registered new identity
Failed to compare registered identity
Purged previous identity
Failed to purge previous identity
ClassKeys
We saved our keys, resuming OTR session negotiation
com.apple.identityservicesd.identity-purge
com.apple.identityservicesd.identity-regenerate
T@"IMSystemMonitor",&,N,V_systemMonitor
loadingRateLimiter
T@"IDSRateLimiter",&,N,V_loadingRateLimiter
keyPairProvider
T@"<IDSRegistrationKeyManagerKeyPairProvider>",&,N,V_keyPairProvider
allowPairingIdentities
TB,N,V_allowPairingIdentities
allowRegenerateRegisteredIdentity
TB,N,V_allowRegenerateRegisteredIdentity
config
T@"IDSRegistrationKeyConfig",&,N,V_config
T@"IDSRegistrationKeyManagerIdentityDataSource",&,N,V_identityDataSource
forceRoll
TB,N,V_forceRoll
registeredIdentityContainer
T@"IDSMPFullDeviceIdentityContainer",&,N,V_registeredIdentityContainer
previousRegisteredIdentityContainer
T@"IDSMPFullDeviceIdentityContainer",&,N,V_previousRegisteredIdentityContainer
unregisteredIdentityContainer
T@"IDSMPFullDeviceIdentityContainer",&,N,V_unregisteredIdentityContainer
unappliedRollingTicket
T@"IDSNGMKeyRollingTicket",&,N,V_unappliedRollingTicket
buildOfIdentityGeneration
T@"NSString",&,N,V_buildOfIdentityGeneration
buildOfUnregisteredIdentityGeneration
T@"NSString",&,N,V_buildOfUnregisteredIdentityGeneration
identityClassA
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassA
unSavedidentityClassA
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassA
identityClassC
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassC
unSavedidentityClassC
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassC
identityClassD
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassD
unSavedidentityClassD
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassD
accountSigningKeyReference
T@"IDSAccountSigningKeyReference",&,N,V_accountSigningKeyReference
privateKey
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_privateKey
publicKey
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_publicKey
signature
T@"NSString",&,N,V_signature
isMigratedSignature
TB,N,V_isMigratedSignature
CNContact
Contacts
CNPhoneNumber
CNContactIdentifierKey
CNContactStore
IDSDDatabase
Setting IDSOutgoingMessage property %d of %d
New message record [%@] has ID [%lld].
IMDSpotlight
Done with IDSOutgoingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
v16@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND pending_delete = 0 LIMIT 1;
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND alternate_guid = ? AND pending_delete = 0 LIMIT 1;
v32@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I{CSDBLookAsideBufferConfig=iib1}}16^{CSDBSqliteStatement=^{CSDBSqliteConnection}^{sqlite3_stmt}i}24
SELECT DISTINCT account_guid FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND duet_identifiers IS NOT NULL 
AND message_type 
LIMIT ?
v24@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I{CSDBLookAsideBufferConfig=iib1}}16
SELECT duet_identifiers FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND bypass_duet = 0 AND pending_delete = 0 AND account_guid = ? 
SELECT SUM(stored_size) FROM outgoing_message WHERE pending_delete = 0 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid
SELECT account_guid, MAX(sum_stored_size) FROM (SELECT account_guid, SUM(stored_size) AS sum_stored_size FROM outgoing_message WHERE pending_delete = 0 GROUP BY account_guid ) 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid ORDER BY count(ROWID) DESC LIMIT 1 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp FROM outgoing_message 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp FROM outgoing_message 
ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp 
ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp 
WHERE pending_delete = 0 AND guid = ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid = ? 
AND local_destination_device_uuid = ? 
AND local_destination_device_uuid is null 
WHERE is_sent = 0 AND pending_delete = 0 AND expiration_date > 0 AND expiration_date <= ? LIMIT ? 
SELECT DISTINCT account_guid FROM outgoing_message WHERE is_sent = 0 AND pending_delete = 0 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
LIMIT ? 
NULL accountGUIDs passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriority(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL)
AND priority = ? 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriorityAndType(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL, int64_t, BOOL *)
AND message_type = ? 
NULL accountGUID passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimit(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL)
SELECT DISTINCT 
 FROM (   SELECT 
  FROM outgoing_message o   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC   LIMIT ? ) AS ofilt WHERE (SELECT SUM(stored_size) FROM outgoing_message s where s.ROWID <= ofilt.ROWID) <= ? UNION SELECT 
 FROM outgoing_message   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC LIMIT 1 ) 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimitWithTypes(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL, NSArray *__strong)
WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND account_guid = ? 
AND bypass_duet = 0 
ORDER BY ROWID ASC LIMIT ?
UPDATE outgoing_message SET is_sent = ? WHERE guid = ?
UPDATE outgoing_message SET is_sent = 0
UPDATE outgoing_message SET is_sent = 0 WHERE local_destination_device_uuid = ?
Empty/nil accountGUIDs passed to %s
void IDSOutgoingMessageRecordUpdateLocalDestinationDeviceOnAccountsWithUUIDs(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET local_destination_device_uuid = ? WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
void IDSOutgoingMessageRecordUpdatePendingDeleteOnAccountsWithDeviceUUID(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET pending_delete = 1 WHERE local_destination_device_uuid = ? AND account_guid 
WHERE pending_delete = 1 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND enqueued_date > 0 AND enqueued_date <= ? AND local_destination_device_uuid IS NOT NULL AND local_destination_device_uuid != ? LIMIT ? 
InternalMigration
IDSOutgoingMessageRecord
Deleting postponed message GUIDs
IDSOutgoingMessageRecordDeleteMessage %@ alternateGUID %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp FROM outgoing_message WHERE guid = ? AND alternate_guid = ? ORDER BY ROWID ASC;
Could not delete outgoing message from database. Postponing delete. Guid: %@  AlternateGuid: %@
INSERT OR IGNORE INTO outgoing_messages_to_delete (data_protection_class, guid%s;
) VALUES (?, ?)
, alternate_guid) VALUES (?, ?, ?)
Could not postpone delete.
IDSOutgoingMessageRecordDeleteMessageWithQueueOneIdentifier %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp FROM outgoing_message WHERE queue_one_identifier = ? ORDER BY ROWID ASC;
IDSOutgoingMessageRecordDeleteMessagesForAccount %@
DELETE FROM outgoing_message WHERE account_guid = ? 
NULL message passed to %s
void IDSOutgoingMessageRecordBulkCopy(IDSOutgoingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, int64_t *, BOOL *, CFDataRef *, CFDataRef *, int64_t *, int64_t *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, CFDataRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, int64_t *, int64_t *, BOOL *, int64_t *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, IDSDatabase *__strong)
<IDSOutgoingMessageRecord %p [%p]>{}
guid
alternate_guid
account_guid
from_identifier
message_data
data
protobuf_data
destinations
data_to_encrypt
encrypt_payload
compress_payload
use_top_level_dict
wants_response
expiration_date
command
wants_delivery_status
delivery_status_context
message_uuid
priority
date
is_sent
identifier
forced_local
peer_response_identifier
expects_peer_response
wants_app_ack
non_waking
fire_and_forget
stored_size
duet_identifiers
bypass_duet
queue_one_identifier
enforce_remote_timeout
main_account_guid
pending_delete
local_destination_device_uuid
enqueued_date
message_type
skip_self
push_priority
non_cloud_waking
live_delivery
require_bluetooth
require_local_wifi
wants_progress
ignore_max_retry_count
wants_certified_delivery
original_timestamp
Database
_IDSOutgoingMessageRecordCreate()
outgoing_message
Invalid encryption parameters (using) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %@}
Encryption
Using full identity: %@
   Public/Private encryption failed with error: %@
Invalid encryption parameters (used) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
Invalid decryption parameters -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
   Public/Private decryption failed with error: %@
Using previous full identity: %@
v16@?0@"CUTResult"8
registrationKeyManager
T@"IDSRegistrationKeyManager",R,N,V_registrationKeyManager
LastKeyGeneration
ids_querytime
ids_build
ids_msg_command
ids_decrypt_equal
ids_tried_last_resort
ids_lastgeneration
ids_sender_EC_success
ids_sender_EC_error_domain
ids_sender_EC_enc_error_code
ids_sender_leg_success
ids_sender_leg_error_domain
ids_sender_leg_error_code
ids_recieved_leg_success
ids_recieved_EC_success
ids_EC_error_domain
ids_legacy_error_domain
ids_EC_error_code
ids_legacy_error_code
1to1EC
Failed to setup RTCReporting to report EC metric { error: %@ }
Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}
EC (%@:%@) and Legacy (%@:%@)
Legacy (%@:%@)
EC (%@:%@)
v24@?0@"NSString"8@"NSError"16
packetBuffer
T^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]},R,N,V_packetBuffer
metadata
Tr*,R,N,V_metadata
metadataSize
TI,R,N,V_metadataSize
transportType
Tq,R,N,V_transportType
clientReady
TB,N,V_clientReady
closed
TB,R,N,V_closed
verboseFunctionalLogging
TB,N,V_verboseFunctionalLogging
verbosePerformanceLogging
TB,N,V_verbosePerformanceLogging
uuid
T@"NSUUID",C,N,SsetUUID:,V_uuid
readHandler
T@?,C,N,V_readHandler
writeHandler
T@?,C,N,V_writeHandler
packetBufferHandler
T@?,C,N,V_packetBufferHandler
hasMetadata
TB,R,N,V_hasMetadata
cachedDataForClient
T@"NSMutableArray",&,N,V_cachedDataForClient
excessiveCachingReportCounter
Ti,N,V_excessiveCachingReportCounter
excessiveCachingCount
Ti,N,V_excessiveCachingCount
destination
T@"NSString",R,N,V_destination
IDSClientChannel
FTMessageDelivery
IDSAgent
%@ instance created with a dead file descriptor!
Created with {socket:%d}
v12@?0B8
%@ endSession at %@!
SPConnection
%p: reset the stall detector
originalMessage
v32@?0@8Q16^B24
Error %d received on {socket:%d}
Remote side closed the connection, cleaning up {socket:%d}
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
v16@?0@"<IDSSocketPairConnectionDelegate>"8
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
idsotr
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Remote side closed the connection, cleaning up
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
remainingFragments
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending {socket:%d}
Failed to queue outgoing data - possible message fragmentation issue
{socket:%d} timeout, ignoring ...
got send error %d, cleaning up {socket:%d} ...
totalFragmentCount
fragmentedMessageID
%@ removing {socket:%d} from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
inFlightMessages
T@"NSSet",R,N
hasEndedSession
TB,N,V_hasEndedSession
TB,R,N
isEmpty
fragmentationSize
TI,N
inFlightMessageCount
TQ,R,N
inFlightMessageCountLowWaterMark
TQ,N
maxAllowedMessageSize
TI,N,V_maxAllowedMessageSize
connectionID
T@"NSString",C,N,V_connectionID
lastSocketActivityTime
Td,R,N
outgoingStallDetector
T@"IDSStallDetector",&,N,V_outgoingStallDetector
Accounts
ACAccountStore
primaryAccount
personID
dsid
IDSSystemAccountAdapterErrorDomain
<%@: %p username: %@, DSID: %@>
username
T@"NSString",R,N,V_username
DSID
T@"NSString",R,N,V_DSID
B16@?0@"ACAccount"8
v24@?0@"ACAccount"8@"NSError"16
D:%@
ACAccountTypeIdentifierAppleAccount
ACAccountTypeIdentifieriTunesStore
ids-opportunistic-send-percentage
com.apple.ids.opportunisticdeliverycontroller
v16@?0@"IDSDeliveryContext"8
v16@?0@"<IDSDaemonListenerProtocol>"8
opportunisticQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_opportunisticQueue
cache
T@"IDSOpportunisticCache",&,N,V_cache
APSConnectionOverrideNamedDelegatePort
ApplePushService
message
IDSDSessionMessenger
Sending MESSAGE to %@, %@ <%@>
%@ - No account with unique ID %@ found to send a message, bailing...
No destinations to send message to, ignoring...
guest-device:
v32@?0@"NSArray"8@"NSArray"16@"NSDictionary"24
IDSDSession
This Phone Continuity session supports the local message. Trying the local...
Sending REINITIATE (subcommand %@) %@ to %@, %@
sharedState
T@"IDSDSessionSharedState",&,N,V_sharedState
alwaysSkipSelf
TB,N,V_alwaysSkipSelf
apsConnection
T@"APSConnection",&,N,V_apsConnection
T@"<IDSDSession><IDSDSessionAWDMetrics>",W,N,V_delegate
remoteUsePhoneContinuityLocalMessage
T@"NSNumber",&,N,V_remoteUsePhoneContinuityLocalMessage
pS: %llu pR: %llu bS: %llu bR: %llu
TQ,N,V_packetsSent
TQ,N,V_packetsReceived
TQ,N,V_bytesSent
TQ,N,V_bytesReceived
x-id-sub-service
x-service-user-id
user-id
user-handle
tokens
id-get-user-token
access-tokens
serviceUserID
T@"NSString",C,V_serviceUserID
userID
T@"NSString",C,V_userID
userHandle
T@"NSString",C,V_userHandle
accessoryRequests
T@"NSArray",C,V_accessoryRequests
responseAccessTokens
T@"NSArray",C,V_responseAccessTokens
/System/Library/IdentityServices/Plugins/com.apple.NanoRegistry.bundle
com.apple.IDS.IDSNanoRegistryPluginManager.callbackQ
IDSNanoRegistryPluginManager
Bundle {isAdvertising:%@}
Bundle has no principal class
Failed to initialize bundle
Plugin class is nil
Protocol is nil
Plugin initialized successfully
Plugin does not respond to any useful messages
Plugin failed to initialize
Plugin class "%{public}s" does not conform to protocol
callbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_callbackQueue
pluginImplementsWatchDidStartAdvertising
TB,N,V_pluginImplementsWatchDidStartAdvertising
pluginImplementsWatchDidStopAdvertising
TB,N,V_pluginImplementsWatchDidStopAdvertising
peripheralManagers
T@"NSMutableArray",&,N,V_peripheralManagers
plugin
T@"<IDSPluginNanoRegistryProtocol>",&,N,V_plugin
isAdvertising
TB,N,V_isAdvertising
backingCache
T@"NSMutableDictionary",&,N,V_backingCache
Server Heartbeat
Need to re-register now
forceHeartbeat
com.apple.identityservices.registration-hbi
registrationHBI
forceRandomHeartbeatInterval
forceHeartbeatInterval
vc-registration-hbi
vc-profile-get-default-invitation-context
Default invitation context response: %@
region-id
base-phone-number
extra
validated
responseRegionID
T@"NSString",C,V_responseRegionID
responseBasePhoneNumber
T@"NSString",C,V_responseBasePhoneNumber
responseExtraInfo
T@"NSDictionary",C,V_responseExtraInfo
responseValidated
TB,V_responseValidated
time
activity
subactivity
<%@: %p; timeSubscribed: %fL; activity: %@; subActivity: %@>
timeSubscribed
Td,N,V_timeSubscribed
T@"NSString",&,N,V_activity
subActivity
T@"NSString",&,N,V_subActivity
-Urgent
urgent
-Default
default
-Sync
sync
%@%@%@
%@%@Cloud%@
 Cloud
PipePeripheralUUID
UTunPeer
Initing IDSUTunPeer %p %@
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@ uniqueID %@ shouldUseIPsecLink: %@
incoming:%@
outgoing:%@
 Deallocing UTunPeer %p
v32@?0@"IDSUTunConnection"8Q16^B24
%@ ignoring btuuid update from %@ to %@
v16@?0@"IDSUTunConnection"8
localDeliveryQueueStatMessageCount
localDeliveryQueueStatBytes
localDeliveryQueueStatDeliveredMessageCount
localDeliveryQueueStatDeliveredBytes
localDeliveryQueueStatsLastDeliveredTime
IDSLocalOutgoingMessageBytes
IDSLocalOutgoingMessages
IDSLocalIncomingMessageBytes
IDSLocalIncomingMessages
URGENT
Default
Sync
IDSLocalStatisticsCategory
-[IDSUTunPeer _powerlogDictionaryForPriority:]
%s: self %p reporting stats for %@ %@
IDS Local Network Stats
IDSLocalOutgoingSocketBytes
IDSLocalOutgoingSocketPackets
IDSLocalIncomingSocketBytes
IDSLocalIncomingSocketPackets
Sockets
IDSUTunPeer
-[IDSUTunPeer _powerlogDictionaryForSockets]
%s: self %p reporting stats for sockets %@
Enabling power logging for sockets {_shouldUseIPsecLink: %@}
-[IDSUTunPeer _startPowerLogTimersForAllPriorities]
%s: self %p Enabling power logging for transport stats
-[IDSUTunPeer logCurrentTransportStatsAndResetTimers]
%s: self %p Will log the current transport stats and restart timers.
%@ logCurrentTransportStatsAndResetTimers shouldLog=%@, _shouldUseIPsecLink=%@
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
UTunConnection
enable connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable connection %@.
disable cloud connection for peer %@:%p withReason %ld
Client Request
Idle Remove
IDSServicePrefersInfraWifi
Reason
InfraWiFiState
Services
IDS Local InfraWiFi Request
InfraWiFi
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Enabling %@ Cloud Connections on this peer
_pendingCloudEnable: %@, _supportsCloudConnections: %@, _isPeerAlwaysConnected: %@
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
gl-cloud-msg-disable-interval
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
%@ forceOTRNegotiationForTopic is no-op when ipsec is used
emptyStatesLock
T{os_unfair_lock_s=I},N,V_emptyStatesLock
localSetupInProgress
TB,N,V_localSetupInProgress
T@"<IDSUTunPeerDelegate>",W,N,V_delegate
btUUID
T@"NSString",C,N,V_btUUID
uniqueID
T@"NSString",C,N,V_uniqueID
originalbtUUID
T@"NSString",C,N,V_originalbtUUID
isDefaultPairedDevice
TB,N,V_isDefaultPairedDevice
TB,N,V_isNearby
isMagnetIndicatingPeerIsAwake
TB,N,V_isMagnetIndicatingPeerIsAwake
isPeerAlwaysConnected
TB,N,V_isPeerAlwaysConnected
isCloudConnected
TB,N,V_isCloudConnected
TB,N,V_isClassCConnected
supportsCloudConnections
TB,N,V_supportsCloudConnections
pendingCloudEnable
TB,N,V_pendingCloudEnable
T@"NSString",R,N,V_identifier
sendingMessageStatistics
T@"NSDictionary",R,N
urgentPriorityMessageStatistics
urgentCloudPriorityMessageStatistics
defaultPriorityMessageStatistics
syncPriorityMessageStatistics
continuityConnectCount
Ti,N,V_continuityConnectCount
id-authenticate-%@
realm-user-id
authentication-data
x-protocol-version
x-ds-client-id
phone-number
IDS Authentication response: %@
cert
alert
realm
T@"NSString",C,V_realm
T@"NSData",C,V_csr
authenticationInfo
T@"NSDictionary",C,V_authenticationInfo
responseUserID
T@"NSString",C,V_responseUserID
responseCertificate
T@"NSData",C,V_responseCertificate
IDSKeychainWrapperErrorDomain
IDSKeychainWrapperErrorOSStatus
Class D
Class C
Class A
IDSKeychainWrapper
Loading IDS keychain data with account %@
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
   OTR encryption failed with error: %d
   OTR decryption failed with error: %d
backingOTRSessionRef
T^{_SecOTRSession=},N,V_backingOTRSessionRef
SecOTRSSignAndProtectMessage
Security
SecOTRSVerifyAndExposeMessage
encryptedResult
T@"IDSEncryptedData",R,N,V_encryptedResult
dataLength
T@"NSNumber",R,N,V_dataLength
fileCleanupBlock
T@?,R,N,V_fileCleanupBlock
connection
T@"IDSXPCConnection",&,N,V_connection
opportunisticCache
T@"IDSOpportunisticCache",&,N,V_opportunisticCache
setup-phone-auth-enabled
RegisterDuringBuddy
com.apple.IDSRegistrationController
%s: Unable to create preferences handle: %s
-[IDSRegistrationController initWithUserStore:]
Failed to create dynamic store
kScreenSharingChangedNotification
kiMessageChangedNotification
kFaceTimeChangedNotification
kCallingChangedNotification
*** Lockdown state is expired, not allowing registration
HomeNumberBypassServer
Exception: %@ in handler: %@ while executing: %@
com.apple.madrid
com.apple.ess
(%@, %@, %@)
%s (%@)
-[IDSRegistrationController center:succeededRegistration:]
Succeeded HTTP registration with info: %@
-[IDSRegistrationController center:allSucceededRegistrations:]
All succeeded HTTP registrations: %@
-[IDSRegistrationController center:succeededIdentification:phoneNumber:token:]
Succeeded SMS identification with info: %@
-[IDSRegistrationController center:failedIdentification:error:]
Failed SMS identification with info: %@ error: %d
-[IDSRegistrationController center:succeededIDSAuthentication:]
Succeeded IDS Authentication with info: %@
-[IDSRegistrationController center:succeededCurrentEmailsRequest:emailInfo:]
Succeeded Validated Email Query info: %@    Emails: %@
-[IDSRegistrationController center:failedCurrentEmailsRequest:error:info:]
Failed Validated Email Query info: %@  Info: %@
-[IDSRegistrationController center:succeededInitialRegionQuery:]
Succeeded Initial Region Query info: %@
-[IDSRegistrationController center:failedAuthentication:error:info:]
registration info: %@   error: %d  info: %@
-[IDSRegistrationController center:succeededLinkHandlesConfirmation:emailAddress:]
succeeded email confirmation: %@
Add New Phone Number
IDSLocalizable
Home number add alert title; Add New Phone Number
Would you like to add the phone number %@ to use with %@?
Home number add alert message; Would you like to add the phone number %@ to use with iMessage and FaceTime?
Add Number
Home number add alert button
Not Now
Home number add alert cancel button
HomeNumberAdd
v16@?0@"IMUserNotification"8
userStore
T@"IDSUserStore",&,N,V_userStore
displayingAddNumberPrompt
TB,N,V_displayingAddNumberPrompt
trackedRegistrations
T@"NSArray",R,N,V_trackedRegistrations
activeRegistrations
T@"NSArray",R,N,V_activeRegistrations
activeRegistrationsToRegister
T@"NSArray",R,N
AggregateMessage
removing token %@ from %@
IDSDelivery
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
NiceRateLimited
Triggered auto bug capture for rate limiting {session : %@, error: %@}
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
v32@?0@8@16^B24
sourcePeerID
T@"NSString",C,V_sourcePeerID
encryptionType
T@"NSString",C,V_encryptionType
messageID
T@"NSString",C,V_messageID
targetService
T@"NSString",C,V_targetService
T@"NSNumber",C,V_priority
expirationDate
T@"NSDate",C,V_expirationDate
fromIdentity
T@"NSData",C,V_fromIdentity
additionalDictionary
T@"NSDictionary",C,V_additionalDictionary
individualPeerMessages
T@"NSMutableSet",&,V_individualPeerMessages
pendingResponseTokens
T@"NSMutableSet",&,V_pendingResponseTokens
maxSize
Tq,V_maxSize
currentSize
Tq,V_currentSize
fireAndForget
TB,V_fireAndForget
hasReceivedAPSDAck
TB,V_hasReceivedAPSDAck
chunkNumber
T@"NSNumber",C,V_chunkNumber
isFinalMessage
TB,V_isFinalMessage
groupPayload
T@"NSData",C,N,V_groupPayload
groupIdentifer
T@"NSData",C,N,V_groupIdentifer
%@ %@
ngm_public_identity
ngm_version
kt_version
hasNgmPublicIdentity
ngmPublicIdentity
T@"NSData",&,N,V_ngmPublicIdentity
hasNgmVersion
TB,N
ngmVersion
TI,N,V_ngmVersion
hasKtVersion
ktVersion
TI,N,V_ktVersion
params
isInitiator
TB,N,V_isInitiator
joinType
T@"NSNumber",&,N,V_joinType
participantID
T@"NSNumber",&,N,V_participantID
participantData
T@"NSData",&,N,V_participantData
publishedStreams
T@"NSArray",&,N,V_publishedStreams
subscribedStreams
T@"NSDictionary",&,N,V_subscribedStreams
maxConcurrentStreams
T@"NSNumber",&,N,V_maxConcurrentStreams
generationCounter
T@"NSNumber",&,N,V_generationCounter
urisToParticipantIDs
T@"NSDictionary",&,N,V_urisToParticipantIDs
clientContextData
T@"NSData",&,N,V_clientContextData
relaySessionID
T@"NSString",&,N,V_relaySessionID
dictionaryRepresentation
Error retrieving data from last resort cache: { error: %@ }
Flushing peer tokens, in hopes this resolves in the next error
Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}
Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
v28@?0@"IDSMPPublicDeviceIdentityContainer"8B16@"NSError"20
Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
T@"IDSPeerIDManager",R,N,V_peerIDManager
rateLimiter
T@"IDSRateLimiter",R,N,V_rateLimiter
replayCommitter
T@"IDSCertifiedDeliveryReplayCommitter",R,N,V_replayCommitter
publicIdentityCache
T@"IDSPublicIdentityCache",R,N,V_publicIdentityCache
avoidMainQueue
TB,R,N,V_avoidMainQueue
fullDeviceIdentityContainerEncrypter
T@"<IDSMPFullDeviceIdentityContainerEncrypter>",R,N,V_fullDeviceIdentityContainerEncrypter
remoteURI
T@"IDSURI",R,N,V_remoteURI
service
T@"NSString",R,N,V_service
T@"NSData",R,N,V_cert
forceLegacy
TB,N,V_forceLegacy
Tried to PK to default paired device!! -- failing
Tried to encrypt to nil device ID -- failing
Missing identity to encrypt with {deviceID: %@}
Missing identity to decrypt with {deviceID: %@}
Missing device encryption keys -- querying {deviceID: %@}
Device encryption query completed {success: %@, deviceID: %@}
Error committing replay state for device ID decryption { error: %@ }
Missing device decryption keys -- querying {deviceID: %@}
Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}
publicKeyStorage
T@"IDSPublicKeyStorage",R,N,V_publicKeyStorage
T@"IDSDAccountController",R,N,V_accountController
TB,R,N,V_forceLegacy
deviceID
T@"NSString",&,N,V_deviceID
IDSPreflightStack { IMSI: %@, PLMN: %@, mechanisms: %@ }
validationMechanisms
T@"NSArray",R,N,V_validationMechanisms
T@"NSString",R,N,V_IMSI
T@"NSString",R,N,V_PLMN
*** options : %@
IDSDSession::init { self: %p, uniqueID: %@, instanceID: %@ }
[!] This session will be suppressing client notifications { self.sharedState.uniqueID: %@ }
SessionFunctionalLogging
SessionPerformanceLogging
com.apple.private.alloy.screensharing
com.apple.ids.Session-ConnectionQueue-%@
com.apple.private.alloy.facetime.mw
com.apple.private.alloy.facetime.multi
com.apple.private.alloy.facetime.video
com.apple.private.alloy.facetime.audio
com.apple.private.alloy.willow.stream
com.apple.private.alloy.%@
com.apple.private.alloy.safeview
com.apple.private.alloy.screensharing.qr
com.apple.private.alloy.tincan.audio
com.apple.private.alloy.phonecontinuity
com.apple.private.alloy.phonecontinuity: set connectionCountHint to: %@
use QR directly for %@.
 self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu
outgoing
incoming
Created session (%@) %@ with destinations %@
QuickRelayLinkProtocol
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
IDSDSession::dealloc { self: %p, uniqueID: %@, instanceID: %@ }
Destroyed session %@
<%p> - uniqueID: %@   accountID: %@   service: %@   destinations: %@   transportType: %@
Reliable
Unreliable
didReceiveReport, broadcaster: %p for session: %@
No valid RTC reports to report
-[IDSDSession _cleanupSessionConnection]
%s: session %@ connection %p
reportFirstMKMReceived: get allocbind RTC report, time of allocbind response: %f, set the duration to %d ms
session:
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
v24@?0@"NSString"8@"IDSClientChannel"16
IDSClientChannel has excessively cached too many packets. Invalidating IDSClientChannel...
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
writeToClientChannel: there is no real packet or metadata.
%@-%@
SessionLogDumpSimulateCrash
SessionLogDumpSysdiagnose
SessionLogDumpPacketCapture
SessionLogDumplskq
SessionLogDumplsof
Added cachedData - total %lu cached client data to send
greater than threshold:  [clientChannel excessiveCachingCount]: %d
writeToClientChannel: current data cached time: %f
invalid client channel: currentTime: %f, _channelDataCachedTime: %f, dataCachedDuration: %f, clientChannelTimedout: %f
%p: writeHandler: IDSDSession %p
_checkAndSendCachedDataForClient: clear cached data time
Have %lu cached client data to send
_checkAndSendCachedDataForClient: there is no real packet or metadata
generateClientChannelDataTest
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
IDSDataChannels
<%@> read returned 0 bytes errno %d
ClientChannel read error %@
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
B36@?0^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}8r^v16I24@"NSError"28
v20@?0Q8I16
socket %d connected to IDSClientChannel %p
ClientChannel read error %@, self.sharedState.state %d
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
v16@?0@"NSError"8
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
got the process PID %d
kClientChannelMetadataType_ProcessIDKey should be %d byte, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.
IDSSession
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
Couldn't create NSUUID for kClientChannelMetadataType_TimeDeltaBetweenFirstPacketAndMKIKey.
kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u
 kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey
Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey
Unknown metadata type: %u
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
UnexpectedSendResult
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
allocatorOptions
v24@?0@"NSError"8@"NSDictionary"16
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
newOptions
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
%@: _sendingOfflineActiveParticipantInfoRequest for groupID %@ relayGroupID %@ relaySessionID %@
newLinkOptions
connectQRServer failed due to invalid parameter.
User already left group %@; don't connect
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
sessionInfoCopy
pluginAllocInfo
Notifying delegate for %@ about plugin allocation: %@
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
failureReport
Connect to QR server succeeded for %@.
Completed send of join notification fanout message { groupID: %@, success: %@ }
v40@?0@"NSArray"8@"NSString"16@"NSString"24C32B36
Cannot fan out the join notification to the group, no groupID!
Not in join state, group = %@, state = %d
Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }
Starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, timeoutBlock: %@ destinations: %@ }
Not starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, destinations: %@ }
Canceling timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
Triggering early execution of timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
ids-session-join-reliability-timeout
IPsecLink is enabled. UTun bypass: %@ service: %@, session: %@.
SessionBypassUTun
UTun bypass: %@ service: %@, session: %@.
openSocketToDevice deviceID %@, self.sharedState.useQRDirectly %@, _isFaceTime %@
open socket for session, byPassUtun: %d
v16@?0^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}8
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
v64@?0@"NSString"8Q16^[16C]24S32i36Q40@"NSObject<OS_nw_connection>"48@"NSError"56
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
sessionID
session-device-socket
sessionStartWithSocketDescriptor socketDescriptor %d, bypassUtun: %@
set initial link type %d for session %@.
session-initial-link-type
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
options
-[IDSDSession setHasPendingAllocation:forIDSSession:]
%s IDSSessionID is nil!
v20@?0B8@"NSData"12
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
Cleanup session: %@
REPORT RTC: %@
Releasing the client channel %p
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
disconnectGlobalLink failed with error %@
Reconnect initiated By TU
Sending END to %@, %@ <%@>
Ending session with data
Ending session
notifyLeaveToGroup and sessionDidLeaveGroup for group session %@
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantID = %@
Resetting preferences for service %{public}@
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
utunOptions
protocol
Made options to open socket %@
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Enabling audio ? %@
Muting ? %@
Setting preferences %@
%@ session did start %@ with error %@
%@ session did stop with error %@
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
tcpssl
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> add the new QR event for the RTC report: %@
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectUnderlyingLink:%d linkUUID:%@ localAttributes:%@ remoteAttributes:%@
-[IDSDSession link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:]
%s incorrect attribute length: %d
<%@> need a client channel to send the event kClientChannelMetadataType_LinkConnected
destinationsContainFromID: %@ is not in the destinations %@
Ignored updateMembers since destinations have not been changed.
Updated destinations for group %@ to %@ (triggeredLocally %@)
Resetting keys for group %@ and sending membership change event.
setGroupStreamInfo: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@, sessionInfo:%@, streamInfo.subscribedStreams:%@
Client data blob size is greater than push size limitation which is %ld and groupID: %@
Client data blob size %lu is greater than push size limitation %ld
joinGroupSessionError
Participant query in process or defaults are not set for hardcoded QR session info, self.sharedState.groupID: %@, self.sharedState.destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
sessionInfoFromDefaults
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
Message %@ got response code %lu error %@ lastCall %@
Received the new MKM %lld milleseconds after the membership change event for group %@
participant-id to push token mapping changed for sessionID: %@, participants: %@, plugins: %@
Sending the session info request to update the active participant list...
Allocation failure for session %@, status = %d, code = %d
v32@?0@"IDSGroupSessionActiveParticipant"8Q16^B24
Couldn't get the URI from the QRAllocate response. We'll get the URI from push tokens...
Failed to get URI from QR allocate response
B24@?0^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}8@"<IDSMultiplexerTransportClientConnection>"16
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate, enableQuickRelay: %d, useQRDirectly: %d
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
clientID
T@"NSString",&,N,V_clientID
disallowCellularInterface
TB,R,N,V_disallowCellularInterface
disallowWifiInterface
TB,R,N,V_disallowWifiInterface
groupSessionState
TI,R,N,V_groupSessionState
T@"NSString",R,N,V_instanceID
invitationManager
T@"IDSDSessionInvitationManager",&,N,V_invitationManager
keyMaterial
T*,R,N
messenger
T@"IDSDSessionMessenger",&,N,V_messenger
qrError
T@"NSNumber",&,N,V_qrError
qrReason
T@"NSNumber",&,N,V_qrReason
shouldConnectToQRServer
TB,N,V_shouldConnectToQRServer
66776766663F02535E35
QRAllocator
 invalid port %d
broadcastID
Tq,N,V_broadcastID
broadcastBlock
T@?,C,N,V_broadcastBlock
broadcastNeedsClientAck
TB,N,V_broadcastNeedsClientAck
broadcastPerformed
TB,N,V_broadcastPerformed
transient
TB,N,V_transient
messageUUID
T@"NSString",&,N,V_messageUUID
messagePriority
Tq,N,V_messagePriority
messageSenderID
T@"NSString",&,N,V_messageSenderID
messageSequenceNumber
TI,N,V_messageSequenceNumber
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
SATbl
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
@"CUTUnsafePromise"16@?0@"IMPair"8
T@"IDSMPFullDeviceIdentityContainerEncrypter",R,N,V_fullDeviceIdentityContainerEncrypter
messageHashChecker
T@"IDSMessageHashChecker",R,N,V_messageHashChecker
hasStatus
TI,N,V_status
NGMFullPrekey
lastPrKey
T@,R,N
IDSDaemonShutdownNotification
com.apple.identityservicesd
com.apple.pds.xpc.workloop
com.apple.identityservicesd.pds
/Library/IdentityServices/PDS/
GUIDTRACE
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
ackStateMachine
T@"IDSAckStateMachine",R,N,V_ackStateMachine
ids-persistent-map-metadata
ids-persistent-map
versionNumber
Tq,R,N,V_versionNumber
IDSPersistentMap.m
Block on `IDSPersistentMapPolicy` was nil, this should never happen!
block
T@?,C,N,V_block
policy
TQ,N,V_policy
@"NSMutableDictionary"24@?0@"NSDictionary"8q16
com.apple.ids.persistent-map.%@.persist
<%@: %p; identifier = %@; cachedMap = %@; persister = %@>
-[IDSPersistentMap setObject:forKey:]
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1692.6/IDSAgent/IDSPersistentMap.m
key && obj
-[IDSPersistentMap removeObjectForKey:]
IDSPersistentMap
We're not loaded; ignoring save to disk for cache %@
-[IDSPersistentMap setObject:forKeyedSubscript:]
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@ => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Error during Decoding %@
com.apple.identityservices.%@
lock
T{os_unfair_lock_s=I},N,V_lock
serialPersistQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialPersistQueue
saveTimer
T@"NSObject<OS_dispatch_source>",&,N,V_saveTimer
writeCoalescingDelay
Td,N,V_writeCoalescingDelay
writeCoalescingLeeway
Td,N,V_writeCoalescingLeeway
migrationBlock
T@?,C,N,V_migrationBlock
persister
T@"<IDSPersistentMapPersister>",&,N,V_persister
decodableClasses
T@"NSSet",&,N,V_decodableClasses
cachedMap
T@"NSMutableDictionary",R,N,V_cachedMap
isLoaded
TB,R,N,V_isLoaded
mergePolicyType
TQ,N,V_mergePolicyType
mergePolicy
T@"IDSPersistentMapMergePolicy",&,N,V_mergePolicy
T@"<IDSPersistentMapDelegate>",W,N,V_delegate
com.apple.ids.IDSDGroupStatusNotificationController
GroupStatusNotificationController
Cannot get participantsForGroupID, no groupID!
GroupStatusNotification-oversize
participantsForGroupID %@ are %@
yyyy-MM-dd HH:mm:ssz
en_US
messageDict
notify Leave To Group
ids-multiway-ftmessage-send-timeout
Server Bag provided us with a send timeout of %f 
Sending group status notification fanout message { GUID: %@, command: %@, commandContext: %@, waitForMadridAcks: %@, completionBlock: %@ }
Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }
Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Sent messageID %@ to the destination %@ command %@ (account %@, fromID %@, message %@)
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
processIncomingParticipantUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Couldn't pass the membership change event to clients. There is no session for group %@.
processIncomingParticipantDataUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
device:
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
sessionController
T@"IDSDSessionController",R,N,V_sessionController
realTimeEncryptionController
T@"IDSRealTimeEncryptionController",R,N,V_realTimeEncryptionController
broadcaster
T@"IDSDGroupStatusNotificationControllerBroadcaster",R,N,V_broadcaster
groups
T@"NSMutableSet",R,N,V_groups
events
T@"NSMutableDictionary",R,N,V_events
groupMemberPushTokens
T@"NSMutableDictionary",R,N,V_groupMemberPushTokens
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Broadcasting receivedGroupSessionParticipantDataUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast
No auth token
auth token
No profile ID
profile-id
profileInfo
x-vc-profile-id
x-vc-auth-token
Profile response: %@
profileID
T@"NSString",C,N,V_profileID
authToken
T@"NSString",C,N,V_authToken
pushPrivateKey
T^{__SecKey=},N,V_pushKey
pushPublicKey
T^{__SecKey=},N,V_pushPublicKey
pushCertificate
T@"NSData",C,N,V_pushCert
T@"NSData",C,N,V_pushToken
T@"IDSPublicKeyStorage",&,N,V_publicKeyStorage
T@"IDSRegistrationKeyManager",&,N,V_registrationKeyManager
T@"IDSRateLimiter",&,N,V_rateLimiter
OTRController
T@"IDSOTRController",&,N,V_OTRController
TB,N,V_avoidMainQueue
com.apple.idstool
plain
encrypted
decrypted
encryptedAgain
decryptedAgain
v28@?0B8@"NSArray"12@"NSError"20
IDSToolTrigger
@16@?0@"IDSEndpoint"8
v32@?0@"IDSQueryKeyTransparencyContext"8@"NSArray"16@"NSError"24
v24@?0@"NSArray"8@"NSError"16
v24@?0@"NSData"8@"NSError"16
Stored Users:
   DS Realm:
      %@
         %@
   Phone Realm:
   Transient Phone Realm:
12345678-7654-DADA-DADA-DADADADADADA
idstest
localdelivery
devicePrekeys.publicPrekey.timestamp
T@"IDSXPCConnection",R,N,V_connection
(null)
Push Token
Session Token
Refresh Date
Expire Date
Legacy Message Protection Version
Legacy Message Protection Identity
NGM Message Protection Version
NGM Message Protection Prekey
KT Loggable Data
Traffic
*** Clearing traffic ***
global-%u
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
outgoing-messages
outgoing-fallback-messages
-fallback
peer%@-message-budget-global-daily-%u
     Server daily global%@ budget is: %@   Current count is: %@
     **** we are over budget
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
peer%@-message-budget-daily-%@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
peer%@-message-budget-default-daily-%u
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     No budget specified
outgoing-server-messages
server-message-budget-daily-%@
     Server daily budget is: %@   Current count is: %@
query-requests
query-ui-budget-daily-%@
queries
query-budget-daily-%@
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
incoming-messages
incoming-local-messages
com.apple.private.ac
iMessage
Temporary Phone Alert iMessage
FaceTime
Temporary Phone Alert FaceTime
%@ and %@
Multiple service format
WatchPairing
Finishing up switching
Calling completion block to finish switching
PreferredAccount
FetchRemote
TinkerDeviceInfo
AccountSyncSyncedServices
@16@?0@"NSString"8
d16@?0q8
v16@?0@?<v@?B>8
com.apple.identityservice.accountsync-%@
v20@?0B8@"NSString"12
-[IDSAccountSync noteShouldSynchronizePreferredAccount]
@16@?0@"IDSDAccount"8
identityservicesd
@16@?0@"NSDictionary"8
B16@?0@8
v16@?0@8
B24@?0@"NSString"8@16
syncCredential
T@"IDSRemoteCredential",&,N,V_syncCredential
currentInFlightSyncAttempts
T@"NSMutableDictionary",&,N,V_currentInFlightSyncAttempts
pairingManager
T@"IDSPairingManager",&,N,V_pairingManager
pushHandler
T@"IDSPushHandler",&,N,V_pushHandler
userDefaults
T@"IMUserDefaults",&,N,V_userDefaults
<%@: %p encryptionType: %@, dataLength: %lu>
T@"NSData",R,N,V_data
Tq,R,N,V_encryptionType
payloadMetadata
T@"NSData",R,N,V_payloadMetadata
T@"IDSTemporaryPhoneUser",R,V_user
expirationPhase
Tq,R,V_expirationPhase
expirationInterval
Td,R
T@"<IDSTemporaryPhoneUserExpirationManagerDelegate>",W,N,V_delegate
usersToTimersLock
T{os_unfair_lock_s=I},N,V_usersToTimersLock
usersToTimers
T@"NSMutableDictionary",&,N,V_usersToTimers
IDSKeychainKeyElectionStoreErrorDomain
clusterData
group-pai-%@-%@
v20@?0B8@"NSError"12
T@"IDSKeychainWrapper",R,N,V_keychainWrapper
IDSClientDataErrorDomain
clientDatasByServiceType
T@"NSDictionary",&,N,V_clientDatasByServiceType
transparencyLoggableDatasByServiceType
T@"NSDictionary",&,N,V_transparencyLoggableDatasByServiceType
EC Key Loading Failure (iden:%@, pre:%@, reg:%@, unreg:%@)
 (regKeychain %@:%ld)
 (regDeserial %@:%ld)
 (unregKeychain %@:%ld)
 (unregDeserial %@:%ld)
 (generate %@:%ld)
 (rolling %@:%ld)
 (toRegister %@:%ld)
pMpr
pMpo
pTtl
WebTunnel
Web Tunnel Message Completed With Respone Headers %@
T@"NSArray",&,N,V_tokens
activityTopic
T@"NSString",&,N,V_activityTopic
metadataBlob
T@"NSData",&,N,V_metadataBlob
pushPriority
TC,N,V_pushPriority
activityPolicy
TC,N,V_activityPolicy
version
Ti,N,V_version
T@"NSString",&,N,V_messageID
Tq,N,V_ttl
responsePresenceTopic
T@"NSString",&,N,V_responsePresenceTopic
Ti,N,V_responseStatus
AKAccountManager
AuthKit
prod
com.apple.private.alloy.maps
FaceTime_temporary
iMessage_temporary
IDS_temporary
com.apple.private.alloy.electrictouch
@"NSArray"20@?0i8@"NSArray"12
B16@?0@"IDSDAccount"8
v16@?0@"IDSDAccount"8
LastRepairInterval
TotalRepairCount
InitialRepairInterval
systemAccountAdapter
T@"IDSSystemAccountAdapter",&,N,V_systemAccountAdapter
T@"<IMUserDefaults>",&,N,V_userDefaults
repairTimer
T@"NSTimer",&,N,V_repairTimer
phoneRepairTimer
T@"NSTimer",&,N,V_phoneRepairTimer
lastBagRepairInterval
Td,N,V_lastBagRepairInterval
waitingForMigration
TB,N,V_waitingForMigration
shouldSupressRepairLogic
TB,N,V_shouldSupressRepairLogic
phone-registration-retry-interval-seconds
phone-registration-retry-max-interval-seconds
service_identifier
hasServiceIdentifier
T@"NSString",&,N,V_serviceIdentifier
hasSignature
T@"NSData",&,N,V_signature
BTLE
IDSBTLELink
setHasSpaceAvailable %@
didReceiveData length %luB
BTLELink
Received data too big (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
%c BTLE      (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
linkID
T@"NSString",R,V_linkID
innerDictionary
auth-token
id-validate-credentials
origin
authenticationDataSig
T@"NSData",C,V_authenticationDataSig
authenticationDataAuthToken
T@"NSString",C,V_authenticationDataAuthToken
authenticationDataUserID
T@"NSString",C,V_authenticationDataUserID
responseMessage
T@"NSString",C,V_responseMessage
T@"NSNumber",C,V_responseStatus
responseOrigin
T@"NSNumber",C,V_responseOrigin
v16@?0@"CUTAsyncReducerState"8
IDSRapportDeliveryController.m
Any single bonjour message send shouldn't fail the whole send operation
rapportClient
T@"<IDSRapportDeliveryControllerRapportClient>",&,N,V_rapportClient
T@"<IDSRapportDeliveryControllerDelegate>",W,N,V_delegate
targetSessionToken
T@"NSData",C,V_targetSessionToken
targetPeerID
T@"NSString",C,V_targetPeerID
targetToken
T@"NSData",C,V_targetToken
encryptedData
T@"NSData",C,V_encryptedData
hello (controlChannelVersion: [%@], productName: [%@], productVersion: [%@], productBuildVersion: [%@], model: [%@], protocol: %@ minCompatibilityVersion: %@ maxCompatibilityVersion: %@ deviceUniqueID: %@ instanceID: %@, supportIPsecLink:%@, isTinker: %@)
%@: control message: hello cannot decode controlChannelVersion
IDSNetworking
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
UTun
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
T@"NSString",C,V_controlChannelVersion
productName
T@"NSString",C,V_productName
productVersion
T@"NSString",C,V_productVersion
productBuildVersion
T@"NSString",C,V_productBuildVersion
model
T@"NSString",C,V_model
T@"NSNumber",C,V_pairingProtocolVersion
minCompatibilityVersion
T@"NSNumber",C,V_minCompatibilityVersion
maxCompatibilityVersion
T@"NSNumber",C,V_maxCompatibilityVersion
T@"NSNumber",C,V_capabilityFlags
T@"NSNumber",C,V_serviceMinCompatibilityVersion
T@"NSUUID",C,V_instanceID
T@"NSUUID",C,V_deviceUniqueID
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSTapToRadarLastRequestTime
[%@] Tap-to-Radar: %@ (server error code: %@)
Internal IDS error detected 
Internal IDS Error Detected
An internal IDS error has been detected
IDSPopupPromptLastRequestTime
%@-%ld
v24@?0@"ENGroup"8@"NSError"16
v48@?0@"IDSGroupPutMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
v16@?0@"NSArray"8
v48@?0@"IDSGroupGetMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
Unepxcted account key class. Expected IDSAccountIdentity
Unexpected cypher class. Expected IDSConversationGroupCypher
Unepxcted device key class. Expected IDSDeviceIdentity
groupServer
T@"IDSGroupServer",&,N,V_groupServer
forwarding-sig
groupID
<%@ %p key: %@, groupID: %@, data.length: %@, signature.length: %@>
publicKeyData
T@"NSData",&,N,V_publicKeyData
T@"NSData",&,N,V_data
T@"ENGroupID",&,N,V_groupID
forwardingTicket
T@"NSData",&,N,V_forwardingTicket
IDSCloudKitKeyTransparencyStoreErrorDomain
com.apple.private.ids.kt
IDSKeyTransparencyDataZone
IDSKeyTransparencyDeviceRecord
IDSKTDevice
IDSKTMetadata
IDSKTState
<%@: %p deviceData: %@, deviceMetadata: %@>
deviceData
T@"NSData",R,N,V_deviceData
deviceMetadata
T@"NSData",R,N,V_deviceMetadata
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v24@?0@"NSDictionary"8@"NSError"16
Unable to fetch CloudKit account info
v24@?0B8B12@"NSError"16
v16@?0@?<v@?>8
Timed out upserting key transparency device record
v24@?0@"CKAccountInfo"8@"NSError"16
Device-to-device encryption is not available
Failed to fetch device-to-device encryption availability status
No push token provided for trusted device record
Unable to create CloudKit record for provided device record
Key transparency device record delete is not implemented
Timed out nuking key transparency device records
Timed out fetching key transparency device records
v16@?0@"CKRecord"8
@16@?0@"CKRecord"8
v24@?0@"CKQueryCursor"8@"NSError"16
CloudKit
container
T@"CKContainer",R,N,V_container
serverBag
T@"IDSServerBag",R,N,V_serverBag
cachedRecordZone
T@"CKRecordZone",&,N,V_cachedRecordZone
lastSuccessfulUpsertDeviceRecord
T@"IDSCloudKitKeyTransparencyDeviceRecord",&,N,V_lastSuccessfulUpsertDeviceRecord
currentDeviceRecordsPromise
T@"CUTUnsafePromise",&,N,V_currentDeviceRecordsPromise
ck-kt-account-timeout
ck-kt-upsert-timeout
ck-kt-time-interval-for-requests
ck-kt-upsert-nondiscretionary
ck-kt-nuke-timeout
ck-kt-nuke-nondiscretionary
ck-kt-fetch-timeout
ck-kt-cache-enabled
ck-kt-cache-ttl
ck-kt-fetch-nondiscretionary
CKCurrentUserDefaultName
CKContainer
CKRecordID
CKRecordZoneID
CKRecord
CKRecordZone
CKFetchRecordZonesOperation
CKModifyRecordZonesOperation
CKModifyRecordsOperation
CKQuery
CKQueryOperation
paired-devices
schema-version
reg-update-limit
reg-update-time-limit
System is shutting down, not creating daemon
identityservicesd launched (%@) user: %d
Oct  7 2020
01:58:37
    (build time %s %s)
IDSDaemon internal queue
com.apple.homeKit-cloud-relay
Got id query completed with updates %@ fromURI %@ service %@ success %@ error %@
v44@?0@"NSDictionary"8@"NSString"16@"NSString"24B32@"NSError"36
v40@?0@"NSString"8@"NSString"16@"NSString"24@"IDSEndpoint"32
Adding identity to last resort cache for token %@
Error adding identity to last resort cache { token: %@, error: %@ }
idsdaemon-peeridmanager-clientdatablock
Opening up the grant MIG port
Opening up the NSXPC Interface
Now accepting query grants, setup complete
Found default to clear IDS state on launch
Error cleaning last resort cache { error: %@ }
@"NSString"8@?0
Sysdiagnose-Oversized
Conference Prefs %@
IDS Prefs %@
IDSD Prefs %@
IDS-Pref-List
Resetting preferences to 0 for all services
dummyService
/Library/IdentityServices/delete/
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
======================================================================
===== Listener Information ===========================================
     Listener ID: %@ (%d:%@)
   Remote Object: %@
    Local Object: %@
    Entitlements: %@
        Commands: %@
    Capabilities: %@
      Bundle IDs: %@
===================================
agentRequested
TimingLogs
IDSAgent took %f seconds to launch
serviceInfo
enabledAccountsInfo
dependentDevices
linkedDevices
activeDeviceUniqueID
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
services
commands
capabilities
bundleID
processName
notificationServices
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
com.apple.healthd
Exception generating setup information for listener: %@
context
v16@?0Q8
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Exception performing validated listener block: %@
Tried to remove nil listener object
Removing listener ID: %@
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
callservicesd
assistantd
com.apple.private.alloy.siri.proxy
companion_proxy
com.apple.private.alloy.companionproxy
Starting push handling with services %@   topics: %@
com.apple.idsdaemon.apsqueue
Updating push handling with services %@  topics: %@
Updating local push handling with topics: %@
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
com.apple.private.alloy.accountssync
com.apple.private.alloy.health.sync.classc
com.apple.private.alloy.fitnessfriends.icloud
com.apple.private.alloy.fitnessfriends.imessage
v32@?0@"IDSIncomingMessageBroadcast"8Q16^B24
Broadcast: outgoing generic notification %lld
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
B16@?0q8
Broadcast: done working on outgoing notification id %lld
v16@?0@"NSObject<OS_xpc_object>"8
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
IDSClientWake
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
idstool
accountsd
Allowing wildcard access
IDS access warning: %@ for service: %@ entitlement: %@ client: %@:%@:%d entitlements: %@
IDS access warning: %@ for service: %@ entitlement: %@ account: %@ entitlements: %@
############### Service not found
############### Unknown entitlement type
############### No entitlements found
SyncConnection
v24@?0@"NSDictionary"8@"IMLocalObject"16
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
-[IDSDaemon registerForNotificationsOnServices:messageContext:]_block_invoke
%s: received client request to change notification services from %@ to %@ 
socket
socket-type
session-socket
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
raw-socket
Incorrect objet type passed in as file descriptor
completionHandlerID
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
device-socket
metrics
error
closesocket [%@]
v40@?0Q8Q16Q24Q32
syncMessagesStats
defaultMessagesStats
urgentMessagesStats
urgentCloudMessagesStats
sendingMessageStats
queuedIncomingMessages
linkStats
Broadcasting delivery stats to client
B16@?0@"IDSServiceProperties"8
v36@?0@8@"NSString"16@"NSString"24B32
queryUpdateNotifier
T@"IDSRegistrationHashProcessor",R,N,V_queryUpdateNotifier
replayStateCommitter
T@"IDSCertifiedDeliveryReplayCommitter",R,N,V_replayStateCommitter
registrationConductor
T@"IDSRegistrationConductor",R,N,V_registrationConductor
transparentEndpointViewer
T@"IDSTransparentEndpointViewer",R,N,V_transparentEndpointViewer
Accepting Incoming Grant Requests
IDSDaemonMIGInterface auth port died: %@
v24@?0@"NSObject<OS_xpc_object>"8@"NSObject<OS_xpc_object>"16
Incoming peer auth grant request
com.apple.identityservicesd.connection_queue
IDSDaemonMIGInterface: Could not create server with name: %@
_IDSDaemonRunningNotifyToken
T@"<IDSDaemonMIGInterfaceDelegate>",W,V_delegate
IDSDaemonMIGInterface
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
setup-request
received message from peer(%d): %s
portName
setupInfo
response
granted
Incoming file descriptor request
received unknown from peer(%d): %s
ids-query-qr-allocate-cloudmessaging
ids-query-qr-allocate-facetime
ids-query-qr-allocate-groupfacetime
ids-query-qr-allocate-homekit
ids-query-qr-allocate-terminus
ids-query-qr-allocate-default
com.apple.private.alloy.ids.cloudmessaging
com.apple.private.alloy.terminus
anonymizedSenderID
T@"NSString",C,V_anonymizedSenderID
wantsDeliveryStatus
T@"NSNumber",C,V_wantsDeliveryStatus
wantsCertifiedDelivery
TB,V_wantsCertifiedDelivery
T@"NSData",C,V_payloadMetadata
T@"NSNumber",C,V_dataLength
T@"NSNumber",C,V_command
completionBlock
T@?,C,V_completionBlock
ackBlock
T@?,C,V_ackBlock
T@"<IDSDGroupContextNotifyingObserverDelegate>",&,N,V_delegate
IDSPromise.m
Completed IDSPromise fullfilled again
Completed IDSPromise failed again
Timestamp
LinkPreferencesManager
updateService: %{public}@, withPreferences: %{public}@.
PacketsPerSecond
InputBytesPerSecond
OutputBytesPerSecond
Intent
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
forceBTClassic
push_token
trusted_services
hasPushToken
T@"NSData",&,N,V_pushToken
trustedServices
T@"NSMutableArray",&,N,V_trustedServices
backingQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_backingQueue
specific
Tr*,N,V_specific
_IDSEncryptionQueueSync
_MessageEncryptionContextSync
_IDSEncryptionQueueDefault
_MessageEncryptionContextDefault
_IDSEncryptionQueueUrgent
_MessageEncryptionContextUrgent
syncQueue
T@"IDSEncryptionQueue",&,N,V_syncQueue
defaultQueue
T@"IDSEncryptionQueue",&,N,V_defaultQueue
urgentQueue
T@"IDSEncryptionQueue",&,N,V_urgentQueue
B16@?0^@8
usePairingKey
TB,N,V_usePairingKey
messageHashStore
T@"IDSMessageHashStore",&,N,V_messageHashStore
token
T@"NSData",&,N,V_token
activitySubActivity
T@"NSString",&,N,V_activitySubActivity
activityStatus
TB,N,V_activityStatus
activityTimestamp
Tq,N,V_activityTimestamp
persistentEnrollmentHandler
T@"IDSPushHandler",&,N,V_persistentEnrollmentHandler
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
listening
TB,N,V_listening
shouldListen
TB,N,V_shouldListen
topicsToListenOn
T@"NSSet",&,N,V_topicsToListenOn
T@"<IDSActivityPushListenerDelegate>",W,N,V_delegate
@"IDSPromise"16@?0@"NSArray"8
IDSEngramKeyStoreErrorDomain
iCloud.com.apple.Engram.Development
kIDSEngramKeyStoreFullDeviceIdentity
Engram key election failed
v40@?0@"IDSMPFullAccountIdentityCluster"8@"IDSMPFullServiceIdentityAdmin"16@"IDSMPFullServiceIdentitySigning"24@"NSError"32
Device is not currently in Keychain Sync Circle. Ensure your device has iCloud Keychain Sync enabled and device is not under first unlock
Engram is disabled on this device
Engram is disabled on this device. Update UserDefaults as described in IMUserDefaults
No registered account identity. Please re-register
Cluster missing full admin identity with type A
Cluster missing public admin identity with type A
Unable to extract device identity from serialized data
Account key rolling not implemented
seal
T@"CUTPromiseSeal",&,N,V_seal
ckContainer
T@"IDSCloudKitContainer",R,N,V_ckContainer
listeners
T@"NSHashTable",&,N,V_listeners
deviceKey
T@"NSData",R,N,V_deviceKey
com.apple.private.alloy.connectivity.monitor
monitorTimer
T@"NSTimer",&,N,V_monitorTimer
deviceMonitor
T@"IDSNRDeviceMonitor",&,N,V_deviceMonitor
cbuuidString
T@"NSString",&,N,V_cbuuidString
pairedDeviceCBUUIDString
T@"NSString",&,N,V_pairedDeviceCBUUIDString
TB,N,V_isConnected
timeConnected
Td,N,V_timeConnected
timeDisconnected
Td,N,V_timeDisconnected
lastConnection
T@"NSDate",&,N,V_lastConnection
lastDisconnection
T@"NSDate",&,N,V_lastDisconnection
LocalSetup
-[IDSDXPCReunionSync reunionSyncStartedForServices:withCompletion:]
Reunion: %s services: %@
-[IDSDXPCReunionSync reunionSyncCompletedForServices:withCompletion:]
clientProcessName
T@"NSString",&,N,V_clientProcessName
utunDeliveryController
T@"IDSUTunDeliveryController",&,N,V_utunDeliveryController
duetInterface
T@"IDSDuetInterface",&,N,V_duetInterface
%p <Control channel: uniqueID[%@] pendingReceive[%d] pendingSend[%d] outgoingMessages[%d] outgoingPriorityMessages[%d] encrypting[%u (pl:%u pr:%u)>
control channel %@
none
disabled
default paired PK
default paired none
remote UNENCRYPTED
remote PK
v44@?0@"NSData"8B16@"NSData"20@"NSError"28@"IDSDecryptionMetadata"36
cloud paired PK
v20@?0i8@"NSObject<OS_nw_error>"12
v44@?0@"NSData"8B16@"NSData"20@"NSError"28@"IDSEncryptionMetadata"36
control message: OTRNegotiation cannot decode token
identityPair
T@"IDSUTunControlChannelIdentityPair",&,N,V_identityPair
remoteDeviceEncryptionInfo
T@"NSDictionary",C,N,V_remoteDeviceEncryptionInfo
disableEncryption
TB,N,V_disableEncryption
isDefaultPairedDeviceStartingToEncrypt
isReadyForEncrypting
TB,N,V_isReadyForEncrypting
isDefaultPairedDevicePairedLocally
TB,N,V_isDefaultPairedDevicePairedLocally
isDefaultPairedDevicePairedRemotely
TB,N,V_isDefaultPairedDevicePairedRemotely
didReceiveReestablishmentRequest
TB,N,V_didReceiveReestablishmentRequest
reestablishmentRequestReceiveTime
Td,N,V_reestablishmentRequestReceiveTime
checksumEnabled
TB,N,V_checksumEnabled
connected
avoidMainQueueOverrideToNO
TB,N,V_avoidMainQueueOverrideToNO
connecting
TB,N,V_connecting
<%@:%p local: %@ remote: %@>
localFullIdentity
T@"IDSMPFullLegacyIdentity",R,N,V_localFullIdentity
remotePublicIdentity
T@"IDSMPPublicLegacyIdentity",R,N,V_remotePublicIdentity
id-provision-temporary
vc-profile-id
vc-auth-token
sim-mcc
sim-mnc
x-push-token
temporary-credential
T@"NSString",C,V_profileID
T@"NSString",C,V_authToken
countryCode
T@"NSString",C,V_countryCode
networkCode
T@"NSString",C,V_networkCode
responseCertificateExpiration
T@"NSDate",C,V_responseCertificateExpiration
NotifySMS
PhoneNumber
AppleID
HomeNumber
Unrecognized
UnknownError
NoError
BadInvitationContext
AliasInUse
AccountHasNoVettedAliases
AliasNotAvailable
AliasLegacyOrInactive
AccountNotAuthorized
UnconfirmedAlias
ServerRegistrationUnsupported
InvalidLogin
PasswordRequestFailed
LoginFailed
AccountUpdateNeeded
NewPasswordNeeded
PermanentlyBlocked
TemporarilyBlocked
NoDeviceID
NoPushToken
RegistrationCancelled
NotSupported
SMSChargeDeniedByUser
DeliveredTooManySMS
TooManySMSDeliveryFailures
GarbageSMSSignature
GarbagePhoneNumber
ServerNotFound
ServerNotAvailable
UnrecognizedServerError
ServerAuthenticationFailed
MissingAuthenticationCredentials
BadPushToken
NoResultCodeFromServer
RateLimitError
AbsintheServerError
UnsupportedManagedAppleID
UnsupportedManagedAuditorID
UserDisabledSMSAuthentication
UserDisabledSMSRegistration
DeniedByServer
ServerRejectedAuthenticationCredentials
IrreparableServerRejection
NoLegacyPublicKey
PasswordRequestDismissed
NoURIsInRegisterResponse
NoURIsInRegisterRequest
AbsintheDataConstructionFailed
AbsintheCertificateFetchFailed
UnspecifiedMessageDeliveryError
Messenger
Invitation
com.apple.private.alloy
ds-id
IDSTTLCache fetch cached object
v32@?0@"NSString"8@"IDSTTLCacheItem"16^B24
backingStore
T@"NSMutableDictionary",&,N,V_backingStore
evictionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_evictionTimer
ttlInSeconds
Td,N,V_ttlInSeconds
multiQueue
T@"IMMultiQueue",&,N,V_multiQueue
T@"<IDSTTLCacheDelegate>",W,N,V_delegate
T@"NSString",&,N,V_key
T@,&,N,V_object
evictionDate
T@"NSDate",&,N,V_evictionDate
ids-groupMKMCache-number-of-broadcast-cache-mkm
ids-groupMKMCache-number-of-broadcast-cache-mkm-slow-cpu
<%@: %p URICount: %lu, MkMCount: %lu>
<%@: %p URIs: %@, MkMs: %@>
masterKeyMaterials
T@"NSArray",R,N,V_masterKeyMaterials
membershipURIs
T@"NSSet",R,N,V_membershipURIs
v24@?0@"IDSRealTimeEncryptionKeyMaterial"8^B16
<%@: %p identifier: %@, currentLocalMkM: %@, nextLocalMkM: %@, URIs: %@, MkMsCount: %lu>
<%@: %p identifier: %@, currentLocalMkM: %@, nextLocalMkM: %@, URIs: %@, MkMs: %@>
automaticResetBlock
T@?,C,N,V_automaticResetBlock
inFlightResetBlock
T@?,C,N,V_inFlightResetBlock
T@"NSSet",C,N,V_masterKeyMaterials
T@"NSSet",C,N,V_membershipURIs
masterKeyIdentifiersReceivedByClient
T@"NSSet",C,N,V_masterKeyIdentifiersReceivedByClient
currentLocalMasterKeyMaterial
T@,&,N,V_currentLocalMasterKeyMaterial
nextLocalMasterKeyMaterial
T@,&,N,V_nextLocalMasterKeyMaterial
automaticResetInterval
Td,N,V_automaticResetInterval
numberOfBroadcastCacheMKM
TI,R,N,V_numberOfBroadcastCacheMKM
vc-profile-validate-invitation-context
Profile validation response: %@
regionID
T@"NSString",C,V_regionID
basePhoneNumber
T@"NSString",C,V_basePhoneNumber
phoneUser
expiration
finished
Provisioned
notifiedSuccess
<%@:%p> uid: %@, pn: %@, expiration: %@, finished : %@
T@"IDSPhoneUser",&,N,V_phoneUser
T@"NSDate",&,N,V_expirationDate
hasBeenProvisioned
TB,N,V_hasBeenProvisioned
finishedRegistration
TB,N,V_finishedRegistration
hasNotifiedSuccess
TB,N,V_hasNotifiedSuccess
phoneNumber
T@"NSString",R,N
fromURI
toURI
<service:%@,from:%@,to:%@>
hasMatchingURIs
TB,N,V_hasMatchingURIs
T@"IDSURI",R,N,V_fromURI
T@"IDSURI",R,N,V_toURI
IDSValidationSessionErrorDomain
register
absinthe-v3-enabled
absinthe-baa-option-enabled
absinthe-baa-option-enabled-ios13
absinthe-baa-timeout
absinthe-baa-cert-ttl-minutes
<%@ %p isInitializedForSigning: %@, isInitializedForScoring: %@>
absinthe-message
headerDictionary
absinthe-signature
absinthe-serv-key
absinthe-udid
absinthe-serial-number
absinthe-imei
absinthe-meid
true
false
absinthe-v4
absinthe-baa
isInitializedForSigning
stateFlags
Tq,N,V_stateFlags
helloMessage
T@"NSData",C,N,V_helloMessage
UDID
T@"NSString",C,N,V_UDID
serialNumber
T@"NSString",C,N,V_serialNumber
IMEI
T@"NSString",C,N,V_IMEI
MEID
T@"NSString",C,N,V_MEID
scoringNonce
T@"NSData",C,N,V_scoringNonce
BAACert
T@"NSData",C,N,V_BAACert
intermediateRootCert
T@"NSData",C,N,V_intermediateRootCert
isUsingAbsintheV3
isUsingAbsintheV4
isUsingBAA
isInitializedForScoring
resultData
T@"NSData",R,N,V_resultData
serverKey
T@"NSData",R,N,V_serverKey
T@"NSError",R,N,V_error
usedLastResortCache
TB,R,N,V_usedLastResortCache
usedCachedData
TB,R,N,V_usedCachedData
performed-user-intent-migrate
deviceType
Tq,R,N
IDSDAccountController
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids_authkit
PrototypeMode
IDS-List
@"NSArray"8@?0
Checking %@
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
P:%@
Account matches!
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
com.apple.private.alloy.sms
Finished setting up local accounts
ImportedLegacyIMAccounts
AuthToken
ActiveAccounts
ImportedLegacyIDSAccounts2
prefDictionary
Persisting %@ accounts
ReRegisteredForDevices
ReRegisterForAliasRepair
DidCleanLegacyAccountPrefs
%@/Library/Preferences/%@.plist
MigratedToNewDisabledState
GDRRequestMadeForRelayRepair
RemovedServices
IDSDAcountController
-[IDSDAccountController loadStoredAccounts]
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
nsuuid
push-token
private-device-data
       found push token in: %@
com.apple.private.alloy.icloudpairing
com.apple.ids.deviceproperties
v32@?0@8@"NSDictionary"16^B24
AKAppleIDAuthenticationController
accounts
enabledAccounts
hasHardDeregistered
TB,R,N,V_hasHardDeregistered
T@"<IDSDAccountControllerDelegate>",&,N,V_delegate
com.apple.imservice.iMessage
com.apple.imservice.FaceTime
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
UDPGlobalLink
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
UDPGlobal
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
phone_traffic_class
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
%c Global    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
localPartyID
T@"NSString",&,N,V_localPartyID
remotePartyID
T@"NSString",&,N,V_remotePartyID
TQ,R,V_headerOverhead
<%@:%p> uid: %@ rpi: %@
userName
T@"NSString",R,N,V_userName
com.apple.private.alloy.itunes
Unknown
Resetting
Unsupported
Unauthorized
PoweredOff
PoweredOn
WPLinkManager
============= New WPLinkManager %@ starting =============
From LinkManager: created a new WPContinuity instance %@
client instance created
calling continuityDidUpdateStateToState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
UnexpectedType
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
Activity
TetheringTargetPresence
TetheringSourcePresence
EC (%@:%ld) and Legacy (%@:%ld)
Legacy (%@:%ld)
EC (%@:%ld)
Failed encrypting message %@
Request was missing IMEI or carrier nonce
Unable to set push token or push identity on carrier token request message
Unable to locate SIMs prior to fetching auth cert
B16@?0@"<IDSCTSIM>"8
The selected phone number account is not currently authenticated
Failed to request carrier token from IDS server {resultCode: %@, serverStatus: %@, serverErrorDetail: %@}
IDS phone number authentication SPI requires entitlement: %@
IDSPeerIDManagerFromIdentityUserInfoKey
IDSPeerIDManagerErrorDomain
MessageService
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
v32@?0@"NSString"8@"NSError"16^B24
v56@?0@"NSString"8@"NSDictionary"16@"NSDictionary"24@"NSString"32B40@"NSDictionary"44B52
Missing object %@ or key %@ when changing accountInfo
-[IDSDAccount authenticationChanged]
-[IDSDAccount setupAccountWithCompletionBlock:]
IDSDAccount
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
CBUUID matched, but uniqueID mismatched. Setting fallback device. { cbuuid: %@, uniqueID: %@ }
Did not find any device in dependentRegistrations that matches lockedPeerID. Service supports live delivery, so falling back to device that matches just cbuuid { cbuuid: %@, lockedPeerID: %@, service: %@ }
Did not find any device in dependentRegistrations that matches {cbuuid: %@, lockedPeerID: %@, count: %ld}
Returning token uri fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, deviceToken: %@, deviceFromID: %@}
Returning device fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, uniqueIDOverride: %@}
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
-[IDSDAccount _writeAccountDefaults:force:]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Registration: %@  Registered: %@  Registration Error: %@  Linked Accounts: %@]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Vetted Aliases: %@ Aliases: %@ Registration: %@  Registered: %@  Registration Error: %@  Last Registration Failure Error: %@  Last Registration Failure Date: %@  Last Registration Success Date: %@  User Unique ID: %@ Linked Accounts: %@]
<%@:%@:%@:%@:%@>
com.apple.private.alloy.bluetoothregistry
com.apple.private.alloy.bluetoothregistryclassc
activeAliases
T@"NSSet",&,N
loginID
T@"NSString",&,N
displayName
dsHandle
dsID
T@"IDSServiceProperties",R,N
accountType
Ti,R,N
isTemporary
T@"NSDate",&,N
registration
T@"IDSRegistration",R,N,V_registrationInfo
primaryRegistration
T@"IDSRegistration",R,N
registrationStatus
registrationErrorReason
registrationError
hasEverRegistered
wasDisabledAutomatically
TB,N,V_disabledAutomatically
isUsableForSending
isIssuingDependentCheck
TB,R,N,V_isIssuingDependentCheck
shouldAutoRegisterAllHandles
shouldRegisterUsingDSHandle
accountInfo
T@"NSDictionary",R,N,V_accountInfo
dependentRegistrations
dependentRegistrationsIncludingCurrentDevice
registeredDevices
defaultPairedDependentRegistration
lastGDRDate
T@"NSDate",R,N
lastRegistrationSuccessDate
lastRegistrationFailureDate
lastRegistrationFailureError
aliasStrings
uris
linkedAccounts
isBeingRemoved
TB,N,V_isBeingRemoved
isUserDisabled
pendingDependentCheck
TB,N,V_pendingDependentCheck
superAccount
T@"IDSDAccount",R,N
userUniqueIdentifier
shouldFilterInactiveAliases
accountSetupInfo
T@"NSDictionary",R,&,N
listener
T@"NSXPCListener",&,N,V_listener
daemonClients
T@"NSMutableArray",&,N,V_daemonClients
pairingCollaborator
T@"IDSDXPCPairing",&,N,V_pairingCollaborator
pairedDeviceManagerCollaborator
T@"IDSDXPCPairedDeviceManager",&,N,V_pairedDeviceManagerCollaborator
disable-home-number
registrationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_registrationQueue
restoreMonitor
T@"IDSRestoreMonitor",&,N,V_restoreMonitor
CTAdapter
T@"IDSCTAdapter",&,N,V_CTAdapter
SIMPhoneUserSynchronizer
T@"IDSSIMPhoneUserSynchronizer",&,N,V_SIMPhoneUserSynchronizer
systemAccountUserSynchronizer
T@"IDSSystemAccountUserSynchronizer",&,N,V_systemAccountUserSynchronizer
temporaryPhoneUserSynchronizer
T@"IDSTemporaryPhoneUserSynchronizer",&,N,V_temporaryPhoneUserSynchronizer
userAccountSynchronizer
T@"IDSUserAccountSynchronizer",&,N,V_userAccountSynchronizer
heartbeatCenter
T@"IDSHeartbeatCenter",&,N,V_heartbeatCenter
accountSync
T@"IDSAccountSync",&,N,V_accountSync
accountRepair
T@"IDSAccountRepair",&,N,V_accountRepair
deviceCertificationRepair
T@"IDSDeviceCertificationRepair",&,N,V_deviceCertificationRepair
SIMResponder
T@"IDSSIMResponder",&,N,V_SIMResponder
@16@?0@"IDSRegistration"8
Registration attempted exceeded for user identifier {%@} with current registration state {%ld} of type {%d}
PNR Registration failed for Identifier: %@ Failure: SMS quota exhausted
PNR Registration failed for Identifier: %@ Failure: SMS timeout threshold reached
suppressNonZeroRatedSMSNotifications
FaceTime and iMessage
SMS Registration alert title: FaceTime and iMessage
Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert title: iMessage
Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert title: FaceTime
Your carrier may charge for SMS messages used to activate FaceTime.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime.
iCloud
SMS Registration alert title: iCloud
Your carrier may charge for SMS messages used to activate iCloud.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iCloud.
OK Button Title
Cancel
Cancel Button Title
registrations
T@"NSMutableArray",R,N,V_registrations
handlers
T@"NSMutableArray",R,N,V_handlers
preflightStackStore
T@"<IDSPreflightStackStore>",R,N,V_preflightStackStore
T@"IDSUserStore",R,N
registrationReasonByUserID
T@"NSMutableDictionary",&,N,V_registrationReasonByUserID
stateMachineByUserID
T@"NSMutableDictionary",&,N,V_stateMachineByUserID
userConsentDeniedForCTPNR
T@"NSMutableSet",&,N,V_userConsentDeniedForCTPNR
smallWindowSMSTimeoutRateLimiter
T@"IDSRateLimiter",&,N,V_smallWindowSMSTimeoutRateLimiter
wideWindowSMSTimeoutRateLimiter
T@"IDSRateLimiter",&,N,V_wideWindowSMSTimeoutRateLimiter
registrationAttemptRateLimiter
T@"IDSRateLimiter",&,N,V_registrationAttemptRateLimiter
validators
route
retry-count
engram-id
required-update
sig-algorithm
forwarding-sig-algorithm
id-group-put-key
entries
T@"NSString",C,V_route
T@"NSString",C,V_hardwareVersion
T@"NSString",C,V_osVersion
T@"NSString",C,V_softwareVersion
T@"NSString",C,V_deviceName
engramID
T@"NSData",C,V_engramID
T@"NSNumber",C,V_version
T@"NSData",C,V_key
T@"NSData",C,V_data
requiredUpdate
T@"NSNumber",C,V_requiredUpdate
T@"NSData",C,V_signature
sigAlgorithm
T@"NSString",C,V_sigAlgorithm
forwardingSig
T@"NSData",C,V_forwardingSig
forwardingSigAlgorithm
T@"NSString",C,V_forwardingSigAlgorithm
responseEngramID
T@"NSData",C,V_responseEngramID
responseVersion
T@"NSNumber",C,V_responseVersion
responseEntries
T@"NSArray",C,V_responseEntries
active
TB,R,N,V_active
shouldPostNotifications
TB,N,V_shouldPostNotifications
__kIDSRestrictionsChangedNotification
-[IDSPairingManager _notifyDelegatesWithBlock:]
-[IDSPairingManager _notifyDelegatesDevicePairedToDevice:]
v16@?0@"<IDSPairingManagerDelegate>"8
-[IDSPairingManager _notifyDelegatesDeviceUnpairedFromDevice:]
-[IDSPairingManager _requestPairedDeviceInfo]
%@ -- %@
has-regenerated-secured-encryption-keys
-[IDSPairingManager _hasRegeneratedSecuredEncryptionKeys]
regenerated
UTunDelivery_Default_Sync
UTunDelivery_Default_Default
UTunDelivery_Default_Urgent
UTunDelivery_Default_UrgentCloud
-[IDSPairingManager localDevice]
-[IDSPairingManager gatherLocalDeviceInfoWithCompletionBlock:]
-[IDSPairingManager _updatePairedState:]
-[IDSPairingManager addLocalPairedDevice:BTOutOfBandKey:shouldPairDirectlyOverIPsec:pairingType:bluetoothMACAddress:]
-[IDSPairingManager removeLocalPairedDevice:]
-[IDSPairingManager disconnectActivePairedDevice]
-[IDSPairingManager activatePairedDeviceWithCBUUID:]
-[IDSPairingManager deactivatePairedDevices]
-[IDSPairingManager ensureCommunicationWithActivePairedDeviceIsPossible]
-[IDSPairingManager setPairedDeviceInfo:]
-[IDSPairingManager updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:]
+[IDSPairingManager devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:]
nrDeviceManager
T@"IDSNRDeviceManager",R,N,V_nrDeviceManager
pairedDeviceRepository
T@"IDSPairedDeviceRepository",R,N,V_pairedDeviceRepository
registeredPairedDeviceDidConnectBlockPairs
T@"NSMutableArray",R,N,V_registeredPairedDeviceDidConnectBlockPairs
shouldQuickSwitchAfterIPSecConnected
TB,N,V_shouldQuickSwitchAfterIPSecConnected
pairedDeviceUUIDString
pairedDeviceUniqueID
pairedDevicePairingProtocolVersion
TI,R,N
pairedDeviceMinCompatibilityVersion
pairedDeviceMaxCompatibilityVersion
pairedDeviceServiceMinCompatibilityVersion
TS,R,N
pairedDevice
allPairedDevices
pairedDevicePublicKey
pairedDevicePublicClassAKey
pairedDevicePublicClassCKey
pairedDevicePushToken
pairedDevicePrivateData
localDevice
isPaired
isCurrentDeviceTinkerConfiguredWatch
allPairedUniqueIDs
allTraditionallyPairedUniqueIDs
Success
Already Active
Unknown CBUUID
Keychain Failure
Not Supported
%@ (%d)
<unknown>
labelID
phoneBookNumber
defaultUser
<%@:%p> uid: %@ pn: %@, pbn: %@, def: %@
T@"NSString",&,N,V_phoneNumber
T@"NSString",&,N,V_phoneBookNumber
isDefaultUser
TB,N,V_isDefaultUser
T@"NSString",&,N,V_countryCode
T@"NSString",&,N,V_networkCode
T@"NSString",R,N,V_labelID
next-key
SHA256withECDSA
T@"<FTMessageDeliveryProtocol>",&,N,V_messageDelivery
T@"<IDSGroupServerPushHandler>",&,N,V_pushHandler
Decryption
encrypt
decrypt
******************************************************************
*******************  %@ Error ****************************
***  Priority: %ld
***     Token: %@
*** Device ID: %@
***      From: %@
***        To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data for token: %@
 => Current remote public key data for device: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
  Unknown encryption type error? This is non-sensical
AOVERCEncryption
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
numberOfSimultaneousOutgoingMessages
APSErrorDomain
IMTransferServicesController
IMTransferServices
appleID
T@"NSString",&,N,V_appleID
T@"NSString",&,N,V_deviceName
deviceModel
T@"NSString",&,N,V_deviceModel
aliases
T@"NSMutableSet",&,N,V_aliases
sessions
T@"NSMutableSet",&,N,V_sessions
serviceTypes
T@"NSMutableSet",&,N,V_serviceTypes
sessionToBlockMap
T@"NSDictionary",&,N,V_sessionToBlockMap
Yes Button Title
No Button Title
Apple ID alert title: Email Detected, arg1: phone number, arg2: service type
Apple ID alert body: Email link message, arg1: apple ID  arg2: device associated on
Apple ID alert body: Email link message, arg1: apple ID
Add %@ for %@?
Apple ID alert title: Phone Number Detected, arg1: phone number, arg2: service type
Apple ID alert body: Phone number link message, arg1: apple ID, arg2: device name added from
Apple ID alert body: Phone number link message, arg1: apple ID
ServerAlerts
hideUsageNotifications
Apple ID and phone number
Apple ID
phone number
iCloud and %@
Two service format, iCloud First
iMessage and %@
Two service format, iMessage First
Two service format, iMessage First 
iCloud, iMessage, and FaceTime
Three service format, fixed order
If you recently signed into Device you can ignore this notification. arg1:deviceName
Your %%@ %@ now being used for %%@ on a new %@.
Your accountType(s) are now being used for services(s) on a new DeviceType., arg1: Account Type (Apple ID, phone number, Combination)  arg2: service  name (iCloud, iMessage, Facetime, (any combination)) 
DisableAliasAvailablePopups
**** Suppressing popup for available alias %@
DisableUsedElsewherePopups
**** Suppressing popup for alias %@  is in use on device %@
activityTopics
activityUpdates
subscriptions
activityDescriptions
storedActivityTopics
hasActiveSubscription
v36@?0@"NSString"8@"NSString"16@"NSString"24B32
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
Registering for Registration Account Status Metric
com.apple.ids.registrationaccountstatusmetric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Not entitled to clear IDS state %@
Told to clear IDS state %@
-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]
Initial: %s services: %@
-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]
CloudPairing
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Ignoring, no change
iCloud Pairing Added
If this was unexpected, please file a radar (Transport) and attach output of 'idstool dump'. See 17180900 for reference
iCloud Pairing Removed
Sending continuity reset to IDS clients
System has left first unlock: processing stored incoming messages.
Attempt to use the Registration Control API's without the correct entitlement, Failing request
Setup
System has left data protection lock: Checking Migration Status
Faking data protection lock as first unlock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
gc-min-version
Forcing a bag fetch to refresh EN versioning
ratelimiter-clear-on-success
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
Bad signature for message: %@    blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
Message is destined for an accessory with uri %@
accessory:
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
ForceAttachmentMessage
Forcing attachment message default set
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
MessageOnQueue
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@ certified delivery: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
 Requested Certified Delivery: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
Sending %@ with top-level encryption type "%@" and dtls: %@
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
Attachments
    Wrote data to path: %@
Failed to write wrapped data
Failed to create temporary directory
v32@?0Q8Q16Q24
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
mmcs-owner
mmcs-url
mmcs-signature-hex
idsMessage
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Error cleaning up text attachment path: %@  error: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
Failed uploading attachment file transfer
v76@?0@"NSString"8B16@"NSError"20@"NSString"28@"NSString"36@"NSData"44@"NSString"52@"NSData"60q68
Preparing to send message: %@ to people: %@   (have tokens: %@). People to query %@
Found messagable people: %@
IDQuery
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Tokens are being ignored, failing message {msg: %@}
Sending IDSMessage: %@  topic: %@
v16@?0@"IDSBaseMessage"8
service-max-timeout-%@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
PeerDelivery
id-check-unknown
x-hardware-version
x-os-version
x-software-version
sender
abusive
delay
OSVersion
T@"NSString",C,V_OSVersion
T@"NSString",C,V_sender
attemptCount
T@"NSNumber",C,V_attemptCount
T@"NSString",C,V_geo
Tq,V_status
TB,V_abusive
Td,V_delay
MessageSuccess
TerminusConnected
TimeConnected
TimeDisconnected
PersonalCBUUID
PairedDeviceCBUUID
name
T@"NSString",R
T@"NSDictionary",R
rtcType
TS,R
properties
T@"IDSConnectivityMonitorMetricProperties",&,N,V_properties
success
TB,N,V_success
terminusConnected
TB,N,V_terminusConnected
terminusNearby
TB,N,V_terminusNearby
terminusRegistered
TB,N,V_terminusRegistered
personalCBUUIDString
T@"NSString",&,N,V_personalCBUUIDString
completionBlocks
T@"NSMutableSet",&,N,V_completionBlocks
Tq,N,V_priority
TI,N,V_dataProtectionClass
expectsPeerResponse
TB,N,V_expectsPeerResponse
wantsAppAck
TB,N,V_wantsAppAck
compressPayload
TB,N,V_compressPayload
compressed
TB,N,V_compressed
didWakeHint
TB,N,V_didWakeHint
nonWaking
TB,N,V_nonWaking
nonCloudWaking
TB,N,V_nonCloudWaking
requireBluetooth
TB,N,V_requireBluetooth
requireLocalWiFi
TB,N,V_requireLocalWiFi
queueOneIdentifier
T@"NSString",C,N,V_queueOneIdentifier
peerResponseIdentifier
T@"NSString",C,N,V_peerResponseIdentifier
payload
T@"NSData",C,N,V_payload
TI,N,V_messageID
timeEnqueued
Td,N,V_timeEnqueued
timeSent
Td,N,V_timeSent
fromID
T@"NSString",C,N,V_fromID
topic
T@"NSString",C,N,V_topic
awdTopic
T@"NSString",C,N,V_awdTopic
T@"NSString",C,N,V_messageUUID
domainHash
T@"NSNumber",&,N,V_domainHash
T@"NSNumber",&,N,V_command
toDeviceID
T@"NSString",&,N,V_toDeviceID
T@"NSString",&,N,V_toURI
T@?,C,N,V_completionBlock
progressBlock
T@?,C,N,V_progressBlock
fallbackBlock
T@?,C,N,V_fallbackBlock
didFallback
TB,N,V_didFallback
deniedToSend
TB,N,V_deniedToSend
shouldEnforceRemoteTimeout
TB,N,V_shouldEnforceRemoteTimeout
sentMessageDataSize
TQ,N,V_sentMessageDataSize
isDoneSending
TB,R,N,V_fullyAckd
protobuf
T@"IDSProtobuf",&,N,V_protobuf
resourcePath
T@"NSString",&,N,V_resourcePath
resourceMetadata
T@"NSDictionary",&,N,V_resourceMetadata
duetIdentifiersOverride
T@"NSArray",&,N,V_duetIdentifiersOverride
bypassDuet
TB,N,V_bypassDuet
manualQueueRemoval
TB,N,V_manualQueueRemoval
TQ,N,V_minCompatibilityVersion
messageType
Tq,N,V_messageType
messageState
Tq,R,N,V_messageState
underlyingSocketPairMessage
T@"IDSSocketPairMessage",&,N,V_underlyingSocketPairMessage
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Tq,N,V_state
reqCount
TS,N,V_reqCount
localCID
TS,N,V_localCID
remoteCID
TS,N,V_remoteCID
lastSentSeq
TI,N,V_lastSentSeq
lastSentAck
TI,N,V_lastSentAck
Sysdiagnose
Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ 
IDS-Connectivity-Status
v32@?0@8@"IDSUTunPeer"16^B24
UTunDelivery
Queried pairedDeviceUUIDString {pairedDeviceUUIDString: %@}
Could not query pairedDeviceUUIDString {isPaired: 0}
NRDeviceMonitor already running for {deviceIdentifier: %@}.
Received devices with unique ids -> cbuuids %@
v32@?0@"NSString"8@"NSString"16^B24
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
Delivery
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
bt-id
session-id
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
Devlivery
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
v32@?0@"NSString"8@"NSDictionary"16^B24
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
v24@?0@"NSString"8^B16
Got topic set update %@
IDSUTunDeliveryController
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add {deviceUniqueID: %{private}@, btuuid: %{private}@, deviceIDToPeer: %{private}@}
UTunDelivery-Default
DisableOTR
EnableOTR: %@.
v32@?0@"NSString"8@"IDSUTunPeer"16^B24
peer nearby state changed: %@    screenLit: %@   uniqueID: %@   map: %@
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
com.apple.IDS.LocalConnectedTime
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer connectivity changed but no default peer
default peer nearby changed: %@ -> %@
cloud connectivity changed for default peer: %@.
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerClassCConnectivityDidChange %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetPreferInfraWiFi failed due to nil device identifier.
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerSetLinkPreferences failed due to nil device identifier.
setBluetoothLinkPreferences: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@
defaultPeerSetWantsQuickRelayRequest: %@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Broadcasting found nearby IPsec device {uniqueID: %@}
%@ Did not find default peer device.
Set Enable OTR Timer for 60.0 seconds
OTREnableTimer
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
shouldUseIPsecLinkForDefaultPairedDevice
TB,N,V_shouldUseIPsecLinkForDefaultPairedDevice
idsNRDeviceBridge
T@"IDSNRDeviceBridge",&,N,V_idsNRDeviceBridge
nrDevicePreferencesHandler
T@"IDSNRDevicePreferencesHandler",&,N,V_nrDevicePreferencesHandler
connectivityMonitor
T@"IDSConnectivityMonitor",&,N,V_connectivityMonitor
notificationDelayInSeconds
Td,N,V_notificationDelayInSeconds
isLocalSetUpInProgress
TB,N,V_isLocalSetUpInProgress
T@"<IDSUTunDeliveryControllerDelegate>",W,N,V_delegate
isPresent
queuedIncomingMessageDictionary
allowedTrafficClasses
T@"NSSet",&,N,V_allowedTrafficClasses
enableOTR
TB,R,N,V_enableOTR
defaultPeerIsConnected
defaultPeerIsNearby
defaultPeerIsCloudConnected
isTerminusConnected
isTerminusConnectedOverBluetooth
isTerminusNearby
isTerminusRegistered
lastCloudConnectedTime
Td,N,V_lastCloudConnectedTime
+.%@
-.%@
com.apple.private.alloy.
&.%@
com.apple.
^.%@
com.apple.%@
NSXPC
Daemon XPC Interface Up
v24@?0@"ENGroupContext"8@"NSError"16
com.apple.identityservicesd.nsxpc.auth
Incoming Daemon XPC Interface with new connection %@
DaemonProxy
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
T@"NSXPCConnection",&,N,V_connection
observer
T@"IDSDGroupContextNotifyingObserver",&,N,V_observer
observerProxies
T@"NSMutableArray",&,N,V_observerProxies
T@"<IDSAPNSAckTrackerDelegate>",&,N,V_delegate
endpoints
keyTransparencyContext
<%@: %p endpoints.count: %lu, keyTransparencyContext: %@>
T@"NSArray",R,N,V_endpoints
T@"IDSQueryKeyTransparencyContext",R,N,V_keyTransparencyContext
SessionController
Building Message delivery
com.apple.invitation-service
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Found existing session matching uniqueID -- replacing with new instance { uniqueID: %@, oldInstanceID: %@, newInstanceID: %@ }
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Sender doesn't support alias deactivated decline, dropping
Couldn't create session for invite, bailing...
This invitation should be filtered { toID: %@, sessionUniqueID: %@ }
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Process incoming session %@ accept message
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Process incoming session %@ decline message
Enqueuing incoming session cancel block from %@ with key %@
Process incoming session %@ cancel message
Enqueuing incoming session message block from %@ with key %@
Process incoming session %@ session message
Enqueuing incoming session end block from %@ with key %@
Process incoming session %@ end message
Enqueuing incoming session reinitiate block from %@ with key %@
Process incoming session %@ reinitiate teardown message
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Storing the master key material %{private}@ for %@ token %@
Failed to decrypt a master key material in the broadcast group -- skipping the remaining key material
Received the prekey recovery request for group %@ destination %@
Received the MKM recovery request for group %@
Storing the public key %{private}@ for %@ token %@
Process incoming group session %@ session message
Couldn't find the session %@ to clean up!
Cleaning up session %@
Cleaning up session based on instanceID { instanceID: %@, correspondingUniqueID: %@ }
IDSDSessionController
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
v32@?0@"IDSDSession"8Q16^B24
IDSDaemonClientID
IDSSessionController
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No instance ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
%@ - No group UUID provided to lookup session, bailing...
Updating critical reliability, any sessions need critical state: %@
T@"FTMessageDelivery",R,V_messageDelivery
DMPerformMigrationIfNeeded
DataMigration
completedMigration
TB,N,V_completedMigration
currentPromise
T@"CUTPromise",&,N,V_currentPromise
ForceRegistration
ForceSMSRegistration
expiry-epoch-milli-sec
md-ids-gdr-day-limit
performedGDROverrides
last24PeriodGDRPerformed
forcedgdrcount
-[IDSDAccount(Registration) _rebuildRegistrationInfo:]
phone-number-registration
is-user-visible
-[IDSDAccount(Registration) _reregisterAndReProvision]
-[IDSDAccount(Registration) _removeAuthenticationCredentialsIncludingAuthToken:]
-[IDSDAccount(Registration) _reregisterAndReidentify:]
ForcePurgeRegistrationData
Phone Number
Couldn't get bag url
-[IDSDAccount(Registration) _authenticateAccount]
-[IDSDAccount(Registration) authenticateAccount]
-[IDSDAccount(Registration) _registerAccount]
-[IDSDAccount(Registration) registerAccount]
-[IDSDAccount(Registration) _unregisterAccount]
-[IDSDAccount(Registration) unregisterAccount]
-[IDSDAccount(Registration) passwordUpdated]
-[IDSDAccount(Registration) updateAuthorizationCredentials:token:]
-[IDSDAccount(Registration) handler:pushTokenChanged:]
-[IDSDAccount(Registration) handler:reloadBag:]
v28@?0B8@"NSArray"12@"NSString"20
handles
v36@?0@"IDSRegistration"8q16B24@"NSDictionary"28
-[IDSDAccount(Registration) handler:profile:deviceUpdated:service:]
-[IDSDAccount(Registration) handler:profileHandlesUpdated:status:]
-[IDSDAccount(Registration) registrationController:registrationWillStart:]
-[IDSDAccount(Registration) registrationController:registrationUpdated:]
-[IDSDAccount(Registration) registrationController:registrationSucceeded:]
-[IDSDAccount(Registration) registrationController:registrationFailed:error:info:]
Disabled
Too many SMS attempts, you can re-enable this in Preferences
-[IDSDAccount(Registration) registrationController:deregistrationWillStart:]
-[IDSDAccount(Registration) registrationController:deregistrationSucceeded:]
-[IDSDAccount(Registration) center:startedAuthenticating:]
-[IDSDAccount(Registration) center:succeededAuthentication:]
-[IDSDAccount(Registration) center:failedAuthentication:error:info:]
-[IDSDAccount(Registration) center:succeededCurrentEmailsRequest:emailInfo:]
-[IDSDAccount(Registration) center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:]
-[IDSDAccount(Registration) center:failedRegionValidation:error:info:]
-[IDSDAccount(Registration) _validateAliases:validateAlreadyValid:]
-[IDSDAccount(Registration) _validateAliases:]
-[IDSDAccount(Registration) validateAliases:]
-[IDSDAccount(Registration) _unvalidateAliases:]
-[IDSDAccount(Registration) unvalidateAliases:]
-[IDSDAccount(Registration) deactivateAndPurgeIdentify]
-[IDSDAccount(Registration) validateProfile]
max-selected-tracking-grace-period
ForcedGDR
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
isGreenTea
registrationSupported
supportsSMSIdentification
isInMultiUserMode
@"NSDictionary"16@?0@"IDSDAccount"8
T@"IDSDServiceController",R,N,V_serviceController
passwordManager
T@"<FTPasswordManager>",R,N,V_passwordManager
deviceSupport
T@"<IDSDSignInResponderDeviceSupport>",R,N,V_deviceSupport
registrationControl
T@"<IDSDRegistrationControl>",R,N,V_registrationControl
T@"IDSRegistrationController",R,N,V_registrationController
T@"IDSUserStore",R,N,V_userStore
iTunes
Invalid
ACAccountTypeIdentifierIdentityServices
IDSActiveStorageStateMachines
ServerStorage
We already have an inflight request for topic %@, checking if we have a backup
We already have a backup request for topic %@, throwing this request away
We already have an inflight request for this topic %@, adding it to the backup queue
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
%@-retry-timeout
%@-extend-retry-timeout
Topic %@, has timed out waiting for server response
Topic %@ has recently received a message from storage.  Starting a new extended timer for retry.
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
%@-force-passthrough-retry
The topic %@ is a pass-through-message service. Not retrying.
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
deliveryController
T@"IDSDeliveryController",&,N,V_deliveryController
idsServerBag
T@"IDSServerBag",&,N,V_idsServerBag
  iLen=%d KS=[%s]
 In=[%s]
 Out=[%s]
SRTP
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
packet with sequence number: %u->%u dropped by replay protection
Malloc Failed to allocate replayWindow!
Malloc Failed to allocate replayWindow->list!
IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u
packet too old. seq(%u->%u) = -%u
IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u
IDSStreamEncryption_SetbitReplayList for old packet returned NO. seq(%u->%u) = -%u
CCCrypt failed with status: %d
  counters: [%s]
@16@?0@"<IDSCTSIM>"8
lockdownManager
T@"IMLockdownManager",&,N,V_lockdownManager
userConfiguration
T@"FTUserConfiguration",&,N,V_userConfiguration
cachedIsSameSIM
T@"NSMutableDictionary",&,N,V_cachedIsSameSIM
personal-public-key-cache
personal-public-key-cache-v1
personal-public-key-cache-v2
personal-public-key-cache-v3
personal-public-key-cache-v4
kIDSPublicKeyStorageToken
====== Personal Key Cache:
   Device ID: %@    Identity: %@   PushToken: %@
identity
T@"IDSMPPublicDeviceIdentityContainer",&,N,V_identity
PublicKeyStore
Removing key {forURI: %@, fromURI:%@, pushToken: %@}
v40@?0@"NSString"8@"NSData"16@"NSString"24@"NSString"32
T{_opaque_pthread_mutex_t=q[56c]},N,V_lock
T@"IDSPublicKeyStorageCache",&,N,V_cache
com.apple.identityservices.userStore
prop
<%@: %p, user: %@, properties: %@>
T@"<IDSUser>",&,N,V_user
T@"IDSUserProperties",&,N,V_properties
@"NSDictionary"24@?0@"NSDictionary"8@"NSDictionary"16
<%@: %p, dataProviderByRealm: %@, persistentMap: %@>
@16@?0@"IDSUserDescription"8
v16@?0@"<IDSUserStoreListener>"8
persistentMap
T@"IDSPersistentMap",&,N,V_persistentMap
registrationKeychainManager
T@"IDSRegistrationKeychainManager",&,N,V_registrationKeychainManager
realmByListener
T@"NSMapTable",&,N,V_realmByListener
dataProviderByRealm
T@"NSDictionary",&,N,V_dataProviderByRealm
<%@: %p, userID: %@, responseCode: %lld, certLength: %llu>
T@"NSString",&,N,V_userID
responseCode
Tq,N,V_responseCode
T@"NSData",&,N,V_cert
id-authenticate-multiple-users
authentication-requests
request
auth-cert
authentication-responses
requests
T@"NSMutableArray",&,N,V_requests
authenticationResponses
T@"NSArray",&,N,V_authenticationResponses
activity-monitor-min-version
activityMonitorEntitlements
T@"NSArray",&,N,V_activityMonitorEntitlements
clientRemoteObjectByActivity
T@"NSMutableDictionary",&,N,V_clientRemoteObjectByActivity
stateManager
T@"IDSActivityMonitorStateManager",&,N,V_stateManager
-[IDSPairedDevice initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:]
-[IDSPairedDevice initWithPairedDevice:capabilityFlags:]
-[IDSPairedDevice initWithPairedDevice:deviceInfoPayload:]
-[IDSPairedDevice initWithPairedDevice:isActive:]
-[IDSPairedDevice initWithPairedDevice:supportIPsec:]
-[IDSPairedDevice initWithPairedDevice:pairingType:]
-[IDSPairedDevice initWithPairedDevice:iCloudURIs:pushToken:]
%@ uniqueID = %@, cbuuid = %@, isActive = %@, supportsIPSec = %d, pairingType = %ld
cbuuidUUID
T@"NSUUID",R,N
publicClassAKey
publicClassCKey
publicClassDKey
privateData
buildVersion
isActive
supportIPsec
pairingType
iCloudURIs
iCloudIdentities
localIdentities
hasAllPublicKeys
isPairing
push cert
id-register
validation-data
language
device-score
device-score-nonce
Registration response: %@
next-hbi
T@"NSString",C,V_language
privateDeviceData
T@"NSDictionary",C,V_privateDeviceData
T@"NSArray",C,V_services
validationData
T@"NSData",C,V_validationData
deviceScore
T@"NSData",C,V_deviceScore
deviceScoreNonce
T@"NSString",C,V_deviceScoreNonce
responseServices
T@"NSArray",C,V_responseServices
responseHBI
T@"NSNumber",C,V_responseHBI
com.apple.facetime
auth-certs
sms-signatures
temp-phone-creds
com.apple.identityservices.keychain-manager
%@V%d
KeychainManager
FTServices
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Not saving, got a nil dictionary representation
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
  => Adding %lu temp phone credentials
  => We don't have any temp phone credentials to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Loaded %d temp phone credentials
Reloading registration objects from keychain dictionary, %d entries
migrated-v0-dictionary
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Removing old V%d keychain blob after upgrade with service: %@   account: %@
  => Unable to remove keychain blob (error: %d)
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
  => Updating from V1 to V2
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
type
main-id
Unable to upgrade an empty keychain data from V1 to V2
phone-number-registration-main-id
Setting IDS auth cert: %p   for ID: %@
Returning SMS sig for ID: %@   signature: %@
Returning SMS IDs: %@
Setting SMS main ID: %@   signature: %@
Returning temp phone credential for ID: %@ cert: %@
Returning temp phone credential for ID: %@ tempCredential: %@
T@"NSArray",R,C,D,N
AllowiMessage
AllowsFaceTimeAudio
AllowsFaceTimeMultiway
supportedServicesToken
Ti,N,V_supportedServicesToken
Home
Personal
userAgent
T@"NSString",C
retryInAirplaneMode
logToRegistration
currentMessage
T@"IDSBaseMessage",R
queuedMessages
T@"NSArray",R
com.apple.invitation-registration
v16@?0@"IDSRegistrationCenter"8
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
IDS Authentication failure
IDS registration failure
Email query failure
users
kt-loggable-data
com.apple.registration
overrideRegistrationResponseCode
overrideRegistrationResponseAlert
registerCodeOverride
phoneUserCodeOverrideService
restoredFromBackup
client-data
phoneUserCodeOverride
emailUserCodeOverrideService
emailUserCodeOverride
kt-status
kt-account-id
kt-blob
Registration SUCCESS for %@ on %@
Bad signature, need to send SMS
B16@?0@"IDSRegistration"8
deregistration
deregister
Sending IDS %@
@16@?0@"IDSProtoKeyTransparencyTrustedService"8
&amp;amp;
&amp;quot;
&amp;#39;
&amp;gt;
&amp;lt;
com.apple.private.alloy.telephonyutilitiestemporary
com.apple.private.alloy.mediaidstest
com.apple.private.alloy.callhistorysynctemporary
com.apple.private.alloy.musictemporary
sub-services
userDictionary
SIM2
Sending IDS deregistration
hard deregister
overrideProvisionResponseCode
provisionCodeOverride
info
IDS Authentication failed: %d
v32@?0q8q16@"NSError"24
SIM1
B16@?0@"<IDSUser>"8
v16@?0@"IDSAuthenticateUsersMessage"8
v16@?0@"IDSProvisionTemporaryPhoneMessage"8
IDS Temporary Phone Provisioning failed: %d
Sending IDS Authentication request
UNKNOWN
Need to re-authenticate
Email query failed
Need to re-register
sendAuthenticateRegistrationTask
T@"CUTDeferredTaskQueue",R,N,V_sendAuthenticateRegistrationTask
sendRegistrationTask
T@"CUTDeferredTaskQueue",R,N,V_sendRegistrationTask
sendDeregistrationTask
T@"CUTDeferredTaskQueue",R,N,V_sendDeregistrationTask
cleanupAbsintheTask
T@"CUTDeferredTaskQueue",R,N,V_cleanupAbsintheTask
action
button
Contact Support...
http://www.apple.com/support/validation/?code=4739-4725-5203&lang=en-us
body
If this is a new Apple ID, you do not need to create another one. To use this Apple ID with iMessage, contact iMessage support with the code below.
Customer Code: 4739-4725-5203
Close
title
Your Apple ID "hello@icloud.com" can't be used to set up iMessage at this time.
suppressServerAlerts
ids-allow-empty-uri-registration
weight
x-id-service
x-required-for-message
x-result-expected
id-query
Missing self identity
self URI
Missing uris
Handle ID query response: %@
results
T@"NSArray",C,SsetURIs:,V_uris
T@"NSString",C,V_weight
responseIdentities
T@"NSDictionary",C,V_responseIdentities
requiredForMessaging
T@"NSString",C,V_requiredForMessaging
resultExpected
TB,V_resultExpected
LinkManager
added mapping device ID [%@] to destination [%@]
        %s
%7d %s
%3llu msgs %sB pending, %5llu msgs %sB processed
Total
%3llu msgs %sB pending, %5llu msgs %sB processed
None
%5lld pkts %5lld KB  %5llu pkts %5llu KB
%5lld pkts %5lld KB  %5llu pkts %5llu KB
============= New LinkManager %@ starting =============
com.apple.demo-settings
StoreDemoMode
FProgramNumber
ReportFileOpenTimeInterval
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
packetsDropped
total
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
=======================================================
closed FIFO file %s
                            Since last report (for %.1fs)
Cumulative total
  Combined              Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
                   Dropped %6llu pkts                       %6llu pkts
Streaming Usage Statistics:
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Connected
Disconnected
LinkReport
Sync priority messages queued:
Sync priority messages queued: %@
Default priority messages queued:
Default priority messages queued: %@
Urgent priority messages queued:
Urgent priority messages queued: %@
Urgent Cloud priority messages queued:
Urgent Cloud priority messages queued: %@
Messages being sent:
Messages being sent: %@
Incoming messages not claimed yet:
Incoming messages not claimed yet:
%3llu msgs
%3llu msgs
Total
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
ids-report.
%s%s
removing old fifo file %s
%s%s%u
IDSLinkBTKey
IDSLinkBTDatagramKey
IDSLinkBTLEKey
IDSLinkLocalUDPKey
IDSLinkGlobalUDPKey
IDSLinkGlobalKey
IDSLinkNoneKey
_suspendBTLink %@ -> %@
Not processing _connectivityChangedForDefaultDevice in the IPsecLink path.
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
DisableRangeExtension
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
(prefer) 
(reply) 
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
will bring up WiFi when losing BTLink
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
(reply)
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
down
don't 
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
NoLink
Link type changed from %lu to %lu, current link: %@
IDSLinkType
IDS Local Link
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
linkOptions
@"NSString"80@?0@"NSString"8I16@"NSString"20q28S36Q40S48I52@"NSData"56B64B68i72i76
v52@?0I8I12I16I20Q24@"NSString"32@"NSString"40B48
v24@?0@"NSString"8@"NSString"16
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
a BT/BTLE link
removing %@ from links for device %@
_hasGlobalLinkConnectingOrConnected: _cbuuidToLinks: %@
%@ is still connecting or connected.
com.apple.idslinkmanager.networkinterfacelistener
State:/Network/Interface/[^/]+/IPv[46]
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
LOCAL-SETUP-STARTED
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
LinkManager shouldStartBTLinkManager: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
_deviceIDToGlobalLinkUp
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
connectGlobalLinkForDevice: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@
Set alternateDelegate %@ for %@
No GlobalLink is found.
GlobalLink
disconnectGlobalLinkForDevice for  %@
_deviceIDToAllocRequests
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
-[IDSLinkManager setHasPendingAllocation:forIDSSession:]
%s - sessionID %@, hasPendingAllocation %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
there is no link for sendSKEData
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
WiFiAssist enabled: %@
currentCellularSignalStrength - sessionID %@.
startLinkProbing - sessionID %@, options: %@.
stopLinkProbing - sessionID %@, options: %@.
queryLinkProbingStatus - sessionID %@, options: %@.
flushLinkProbingStatus - sessionID %@, options: %@.
setRemoteDeviceVersion - sessionID %@, version: %u.
get session info for group %@, session %@, options %@
update session participants for group %@, session %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
Not processing didConnectOverCloud in the IPsecLink path.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@, reason: %d
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didWiFiNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didCellularNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
didGetLinkProbingStatus - alternateDelegate:%@, link status:%@.
receive session-info for group %@, session %@, success:%@.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
State:/Network/Interface/utun
State:/Network/Interface/pdp_ip
Addresses
_handleNetworkChanges %@ = %@
/IPv4
/IPv6
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
None
Magnet
InfraWifi
QuickRelayWiFi
QuickRelayWWAN
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
cellular SoMask changed: %u.
currentDefaultDeviceLinkType
TQ,R,N,V_currentDefaultDeviceLinkType
t:%@
kDefaultMultiQueueKey
ids-message
v16@?0@"RPCompanionLinkDevice"8
v24@?0@"NSDictionary"8@"NSDictionary"16
init
v32@?0@"RPCompanionLinkClient"8@"NSString"16@"NSError"24
v16@?0@"<IDSRapportClientDelegate>"8
guest-device:%@
v16@?0@"RPCompanionLinkClient"8
We failed to find a rapport destination for the provided deviceIdentifier
RPCompanionLinkClient
Rapport
companionLinkClient
T@"RPCompanionLinkClient",R,N,V_companionLinkClient
ttlCache
T@"IDSTTLCache",&,N,V_ttlCache
RPOptionAllowUnauthenticated
RPOptionSenderID
utun-push-fallback-connected-timeout-
utun-push-fallback-disconnected-timeout-
Initing UTunConnection %@ %p
NWFraming
shouldUseNWFramingOverIPsecString: %@
Deallocing UTunConnection %@ %p
<%@: %p, name: %@>
B32@?0@8Q16^B24
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed: %@ -> %@
com.apple.private.alloy.continuity
Removing continuity message %@
WPConnection failed
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
-[IDSUTunConnection _nonThreadSafeStopConnection]
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
new local link established
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
v32@?0@"IDSSocketPairMessage"8Q16^B24
%@ Failed to open UTun socket, waiting...
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
@"NSData"24@?0@"NSData"8@"NSString"16
@"NSData"16@?0@"IDSSocketPairMessage"8
 (non waking)
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
queue one identifier
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Client Canceled
All queues are empty
Clearing fallback stickiness due to: %@
Server Bag provided us with a fallback timeout of %f
DisableCloudFallback
   **** cloud fallback disabled ****
ids-local-cloud-fallback-delay
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
The destination device for this message did not connected before the timeout fired.
This message was a non-waking message and the destination device for this message did not wake before the timeout fired
This message was written into the connection, but did not receive an ack. Check Bluetooth conditions and that your process is not hung on the receiver.
This message requires class C connection, but the devices are not ClassC connected, because the remote device is locked.
timed out
%@ sending resource transfer cancel message %@
No in flight messages remaining
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
AllowEmptyTrafficClasses
Overriding previous decision on message for topic %@ due to feature flag that allows messages will empty traffic classes
v32@?0@"IDSLocalDeliveryMessage"8Q16^B24
remote does not support new service
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
v24@?0@"IDSSocketPairMessage"8^B16
v32@?0@"NSArray"8Q16^B24
DisableLocalDelivery
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection _isCloudEnabled:%@ (%@, messageCount:%d)
%@ is not available, waiting.
No messages waiting for acks
Message with guid %@ not allowed due to its traffic class
IDSUTunConnection-sending-%@
IDSUTunConnection-sending
%@ created sending power assertion %@
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT usage is not allowed, failing message
Celluar Useage Policy states that BT is required
dequeueMessages check for %@ %u
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
cannot read chunk of resource
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
Message %@ added to queue, total message count %d, sendingTopics count %d
com.apple.private.alloy.idstool.testservice
DuplicateTestFileMessages
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
with sequenceNumber %u
%@ Sending message[%lu] %@ %@.
-[IDSUTunConnection _addMessageSize:forTopic:direction:dataProtectionClass:isResource:]
%s: statsDictionary is nil for direction %d
IDSUTunConnection
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
com.apple.identityservices.IDSUTunConnection-dequeueMessages
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
v16@?0@"NSString"8
Enable
Disable
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
com.apple.private.alloy.utunconnection
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
Data protection class unavailable
v12@?0I8
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
ResourceTransferReceiverError
ResourceTransferErrorOverride
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}
v16@?0@"NSData"8
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
DLCCollectLogs
DiagnosticLogCollection
IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ informed that IDSNWSocketPairConnection has closed.
message received via local link
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
local link did receive bytes
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
T@"<IDSUTunConnectionDelegate>",W,N,V_delegate
maxQueueSize
TQ,N,V_maxQueueSize
isAlwaysConnected
TB,N,V_isAlwaysConnected
queueStatistics
isIdle
cumulativeIncomingStatistics
T@"NSDictionary",R,N,V_cumulativeIncomingStatistics
cumulativeOutgoingStatistics
T@"NSDictionary",R,N,V_cumulativeOutgoingStatistics
TB,N,V_enableOTR
isCloudEnabled
TB,R,N,V_isCloudEnabled
supportsLegacyOTRSessionToken
TB,N,V_supportsLegacyOTRSessionToken
supportedMessageTypes
T@"NSArray",&,N,V_supportedMessageTypes
Td,R,N,V_rtt
Tq,R,N,V_priority
cloudConnection
T@"IDSUTunConnection",&,N,V_cloudConnection
idsPriority
Tq,N,V_idsPriority
T@"NSString",&,N,V_name
T@"NSString",&,N,V_cbuuid
_otrTokenToArray: invalid OTR token %@
%@-%u-%1u-%@
%@-%u-%1u
IDSPhoneNumberValidationErrorDomain
isActivated
T@"NSString",R,N,V_phoneNumber
phoneToken
T@"NSString",R,N,V_phoneToken
<%@: %p state: %@, lastSendDate: %@, numberOfPreflights: %u, numberOfAttemptsWithoutSuccessfulSend: %u, numberOfSuccessfulSends: %u>
BYSetupAssistantDidCompleteSIMSetupNotification
SetupAssistant
overrideSMSTimeout
smsTimeout
com.apple.identityservices.sms-delivery-hbi
Registration attempt
Trying to send phone number validation request { preflights: %d, sends: %d, attemptsWithoutSend: %d }
Failed Sending Phone Number Validation
Failed sending registration Phone Number Validation request #%d, trying again
Failed Phone Number Validation
Failed sending registration Phone Number Validation request #%d, giving up
Phone Number Validation Sending
Succeeded sending registration Phone Number Validation request #%d
Registration SMS
Received registration SMS
Phone Number Validation Timeout
Timed out waiting for Phone Number Validation request #%d
TotalSMSAttempts
TotalPreflightAttempts
httpMessageDelivery
T@"<IDSPhoneNumberValidationStateMachineMessageDelivery>",&,N,V_httpMessageDelivery
T@"<IDSPhoneNumberValidationStateMachineLockdownManager>",&,N,V_lockdownManager
arbiter
T@"IDSPhoneNumberValidationModeArbiter",&,N,V_arbiter
preflighStackStore
T@"<IDSPreflightStackStore>",&,N,V_preflighStackStore
inFlightHeartbeatBlock
T@?,C,N,V_inFlightHeartbeatBlock
inFlightSMSTimeoutBlock
T@?,C,N,V_inFlightSMSTimeoutBlock
currentPreflightStack
T@"IDSPreflightStack",C,N
Tq,N,V_status
CTPNR
T@"IDSCTPNR",&,N,V_CTPNR
T@"NSMutableArray",&,N,V_handlers
T@"NSMutableArray",&,N,V_registrations
numberOfSuccessfulSends
TI,N,V_numberOfSuccessfulSends
numberOfAttemptsWithoutSuccessfulSend
TI,N,V_numberOfAttemptsWithoutSuccessfulSend
numberOfPreflights
TI,N,V_numberOfPreflights
isSMSWarningUp
TB,N,V_isSMSWarningUp
hasAcceptedSMSRequest
TB,N,V_hasAcceptedSMSRequest
commCenterDead
TB,N,V_commCenterDead
needsToCheckPhoneNumberState
TB,N,V_needsToCheckPhoneNumberState
didReceiveSIMSetupCompleteNotification
TB,N,V_didReceiveSIMSetupCompleteNotification
nextSendSMSDate
T@"NSDate",&,N,V_nextSendSMSDate
phoneNumberValidationStartDate
T@"NSDate",&,N,V_phoneNumberValidationStartDate
smsSendDate
T@"NSDate",&,N,V_smsSendDate
lastSendSMSTimer
T@"IMTimer",&,N,V_lastSendSMSTimer
reason
Tq,N,V_reason
Idle
Waiting to Begin
Waiting for Delivery Acknowledgement
Waiting for Response
gdr-max-auth-retries
gdr-auth-retry-interval-seconds
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
otr-timer-%@
Set OTR timer %p for %@
T@"NSString",R,N,V_token
isNegotiating
TB,N,V_isNegotiating
isReady
TB,N,V_isReady
isSuspended
TB,N,V_isSuspended
lastStartTime
Td,N,V_lastStartTime
negotiationCount
TI,N,V_negotiationCount
otrTestBlock
T@?,C,N,V_otrTestBlock
Unable to create session from session data
IDSOTR
No public key found for remote device
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
Topic
linkType
wasPrimary
timeTaken
totalProcessed
startTime
Td,N,V_startTime
endTime
Td,N,V_endTime
T@"NSString",&,N,V_topic
TB,N,V_wasPrimary
messageCount
Tq,N,V_messageCount
Tq,N,V_linkType
%@ - No account for service name %@ found to send a message, bailing...
IDSGroupSendAheadObserver
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
Group updated, sending ahead to members { topic : %@ }
service_signatures
serviceSignatures
T@"NSMutableArray",&,N,V_serviceSignatures
T@"NSDictionary",&,N,V_payload
Tq,N,V_command
__kIDSOTRKeyStorageClassStorageIsAvailableNotification
__kIDSOTRKeyStorageClassKey
OTRStore
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
v32@?0@"NSString"8@16^B24
ids-otr-key-storage
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
com.apple.identityservices.otr-save-store
com.apple.identityservices.otr-purge-cache
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
%@:state = %d, isFinished = %d, isBeingHandedOff = %d, callID = %d, state = %d, inviteNeedsDelivery = %d
callID
TI,N,V_callID
remoteNATIP
T@"NSData",&,N,V_remoteNATIP
localNATIP
T@"NSData",&,N,V_localNATIP
localSKEData
T@"NSData",&,N,V_localSKEData
remoteSKEData
T@"NSData",&,N,V_remoteSKEData
remoteICEData
T@"NSData",&,N,V_remoteICEData
localICEData
T@"NSData",&,N,V_localICEData
localCallInfoData
T@"NSData",&,N,V_localCallInfoData
remoteCallInfoData
T@"NSData",&,N,V_remoteCallInfoData
remoteNATType
T@"NSNumber",&,N,V_remoteNATType
localNATType
T@"NSNumber",&,N,V_localNATType
peerCN
T@"NSString",&,N,V_peerCN
localCN
T@"NSString",&,N,V_localCN
isFinished
isBeingHandedOff
TB,N,V_isBeingHandedOff
isReinitiate
TB,N,V_isReinitiate
inviteNeedsDelivery
TB,N,V_inviteNeedsDelivery
isAudioPaused
TB,R,N,V_isAudioPaused
isVideoPaused
TB,N,V_isVideoPaused
relayInitiate
T@"NSDictionary",&,N,V_relayInitiate
relayUpdate
T@"NSDictionary",&,N,V_relayUpdate
relayCancel
T@"NSDictionary",&,N,V_relayCancel
localConnectionType
TQ,N,V_localConnectionType
remoteConnectionType
TQ,N,V_remoteConnectionType
APSConnection
SecIdentityCopyCertificate
SecCertificateCopyCommonNames
IDSSessionConnectionInfo
array_ref = %@
firstCommonName = %@
com.apple.identityservices.idstatuscache
CacheVersion
IDStatus
NegativeTTL
LookupDate
ValidExpiry
IDSIDStatusQueryController
IDSDaemonQueries
Completed ID query {uri: %@, fromURI: %@, error: %@}
IDSIDQuery
v32@?0@"NSString"8@"NSNumber"16^B24
Purging tokens forURI %@ fromURI %@ fromService %@
com.apple.identityservices.id-status-cache
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Will add valid expiry
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@ addValidExpiry
Trying to cache Invalid for ourselves, ignoring...
q24@?0@"NSDate"8@"NSDate"16
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => Bogus ID query for: %@   ignoring this
 => From Service: %@
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
unknown
 => Forcing query for URI: %@
com.apple.private.alloy.biz
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over an hour, resetting query per hour count
New start query date %@
We have at least one valid result, returning cached results %@
Device does not have a cert, attempting to proxy the query
Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ 
Updating Cache  %@
Calling Completion Block  %@
We're at %d queries for this hour
We're at %d queries for this hour, can't do more
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
PeerCache
Current cache for service: %@  cache: %@
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Non-string key in cache (service) -- Removing
Non-dict value in cache (service) -- Removing
Corrupted entry in cache (missing dict). Removing entry
Corrupted entry in cache (status). Removing entry
Corrupted entry in cache (lookUpDate). Removing entry
Removing entry with unknown status {URI: %@, URIDict: %@}
Exception processing cache -- deleting {exception: %@}
Loaded cache: %d items
Loaded cache, but empty
Saving cache: %d items
dependencyProvider
T@"<IDSIDStatusDependencyProvider>",&,N,V_dependencyProvider
allowProxyQueries
TB,N,V_allowProxyQueries
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
client-query-allow-forced
client-query-respect-soft-expiry
device-queries-per-hour
GKSErrorDetailedError
AVConference
GKSErrorReturnCode
v24@?0@"IDSRegistrationPushHandler"8@"NSDictionary"16
bdurl
baurl
registered
md-peer-lookup-negative-cache-time-%@
md-peer-lookup-negative-cache-time
md-peer-lookup-unknown-cache-time-%@
md-peer-lookup-unknown-cache-time
publicLegacyIdentityData
T@"NSData",R,N,V_publicLegacyIdentityData
publicNGMIdentityData
T@"NSData",R,N,V_publicNGMIdentityData
publicNGMPrekeyData
T@"NSData",R,N,V_publicNGMPrekeyData
NGMVersion
T@"NSNumber",R,N,V_NGMVersion
clientConnection
T@"IDSXPCConnection",&,N,V_clientConnection
invalidationHandler
T@?,C,N,V_invalidationHandler
collaboratorProvider
T@"<IDSDXPCDaemonCollaboratorProvider>",&,N,V_collaboratorProvider
reunionSyncCollaborator
T@"<IDSXPCReunionSync>",&,N,V_reunionSyncCollaborator
Warning: [[request IDSSessionID] length]: %lu != sizeof(uuid_t): %lu
QRAllocation destroyed
Invalid session. Skip AWD report
access token of allocation for QR session %@ expired (%f > %@). Discard it.
_purgeAllocation: Invalidate allocation
allocation timeout timer cancelled
allocation timed out
Sending server message QR metrics allocation timeout report for session %@ requestID: %@
failed to send server message allocation timeout QR metrics report: error: %@  code: %ld
Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@
requestIDStr
T@"NSString",C,V_requestIDStr
sessionIDStr
T@"NSString",C,V_sessionIDStr
T@"IDSQuickRelayAllocateMessage",C,V_request
responses
T@"NSMutableSet",&,V_responses
pushTokenToQRSessionID
T@"NSMutableDictionary",&,V_pushTokenToQRSessionID
recipientPushToken
T@"NSData",C,V_recipientPushToken
duration
Td,N,V_duration
sharedSessionHasJoined
TB,N,V_sharedSessionHasJoined
connectReadyHandler
T@?,C,V_connectReadyHandler
streamInfo
T@"QRStreamInfo",&,V_streamInfo
isJoinAllocation
TB,N,V_isJoinAllocation
Dealloc IDSQuickRelayAllocator %@.
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
failed sending allocate request: %@ error: %@  code: %ld
_requestIDToPreferredLocalInterface
translate deviceID: %@
shared session allocation, previous connect status: %p
setTestOptions: IDSGroupSessionForceQRSession
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
_requestIDToSession
QuickRelayServerProvider
QuickRelayServerProvider switch has been deprecated
request allocation for a specific address %@
_setupAllocation: preferredRemoteInterface %@
QuickRelayServerAddress
%@=%@
QuickRelayServerAddress test option: %@
QuickRelayForceDegraded
QuickRelayServerAddress test options: IDSGroupSessionForceDegraded
self->_requestIDToAllocateTime
Stream information to cache, idsSessionID=%@, isJoinAllocation: %@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
No device found
No push token for device %@
setup allocation for %@ service to device %@
No response found for groupID: %@
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
message added to cache: %@
use duplicated response
ignore duplicated response
failed to find IDSDSession object for %@
no IDSDSession ID in %@
Should switch from %@ to %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response for %@: %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@
trying to change a read-only dictionary
look up peer with URI: %@, push token count: %u, tokens: %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
No recipient is found.
Missing recipientIDs
use QR session info from user defaults: %@.
sessionInfo
no push token for participantID %@
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
URI for participant ID %@ in group %@: %@
No URI for participant %@ in group %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
requestOptions
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
failed to compose a QR sessionInfo dict
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
Recieved allocation from DefaultPairedDeviceID {appID: %@}
Relay expiry time-stamp is NaN: %@
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined, ids: %@
useCurrentResponse=%@, sharedSessionHasJoined=%@
participant has joined with cached response
joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAllocation = %@
should connect to qr server: %@
Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
could not find original allocate request %@
set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@
No stream information
isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@
connecting with sessionInfo %@
recipient waits for session acceptance
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
failed to get combined-software-id due to invalid parameter.
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
Warning: invalid response relaySessionID length = %lu != sizeof(uuid_t) = %lu
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
 is missing required attributes %@ in sessionInfo %@
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
No ids session for ids session id %@
No ids session id for request id %@
No request id
missing response. Skip AWD report
ServerInternalError
BadRequest
MissingRequiredKey
ServerBusy
BadSessionToken
ExpiredSessionToken
Unknown status
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect, allocation: %p, %p, session should connectToQRServer: %@
failed to find response for groupID %@
there is no URI list yet. stopped converting URI to Participant ID - %@
v32@?0@"NSString"8@"NSMutableSet"16^B24
failed to find allocation for session %@
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
add accepted session %@ with token %@
_initiatorsAcceptedSessionsWithToken
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms, idsSessionID %@, isInitiator:%@
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
invalid
Add allocation For Session: %@, _sharedSessionHasJoined=%@, %@
_sessionToAllocations
Discard allocation For Session: %@, %@
invalid allocationList
_invalidateSession: %@
_removeAllAllocationsForSessionID: %@, %@
keepalive timer stopped for %@
couldn't find corresponding allocation for %@
invalid allocationList for %@
FixedQuickRelayServerAddress
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
FixedQuickRelaySessionID
Warning: [decodedUUIDData length]: %lu != sizeof(uuid_t): %lu
decoded base64 relay-session-id %@
FixedQuickRelaySessionToken
decoded base64 relay-session-token %@
FixedQuickRelaySessionKey
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
Cannot find allocation for session %@, all allocations: %@
keepalive timer started for %@
keepalive timer not found for %@
cleanup response count: %zu
clean up response for groupID %@
cleanup timer disabled
cleanup timer started
Error: data length: %lu != sizeof(uuid_t): %lu
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
backoffProvider
T@?,C,N,V_backoffProvider
attempts
Tq,N,V_attempts
scheduledBlock
T@?,C,N,V_scheduledBlock
PortMap
can't allocated used port
preflight-enabled
preflight-mechanism-delay
preflight-request-limit
sms-max-retries
sms-max-delivery-retries
overrideMaxSMSRetries
overrideMaxSMSDeliveryRetries
validationMode
isValidationModeLegacy
isValidationModeUsingPreflight
isValidationModeShortCircuitingPreflight
preflightShortCircuitMechanismOverride
T@"IDSCTPNRValidationMechanism",R,N
preflightTestDataOverride
minimumIntervalBetweenValidationAttempts
maxAllowableNumberOfPreflightRequests
maxAllowableNumberOfSuccessfullySentVerifications
maxAllowableNumberOfValidationAttemptsWhileNoneHaveSentSuccessfully
GKVoiceChatServiceErrorDomain
v32@?0@"<NSCopying>"8@16@?<v@?@>24
IDSAsyncMapperQueue
id-validation-cert
Initialize Cert Response: %@
responseCertificateData
T@"NSData",C,N,V_responseCertificateData
BTLinkManager
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
UseSkywalkChannelToBTServer
UseSkywayChannelToBTServer
IDSBTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
com.apple.ids.datagram
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
Client
Server
%@ registering for service %@ as %@
skywalk
nsstream
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
T@"NSString",R,V_pipePeripheralUUIDString
isPoweredOn
TB,R,N,V_isPoweredOn
idsNRPluginManager
T@"IDSNanoRegistryPluginManager",&,N,V_idsNRPluginManager
isCountingDown
nrDevicePreferences
T@"IDSNRDevicePreferences",&,N,V_nrDevicePreferences
servicesPreferringInfraWiFi
T@"NSMutableSet",&,N,V_servicesPreferringInfraWiFi
quickRelayRequestsCount
TI,N,V_quickRelayRequestsCount
id-report-spam
spam-messages
Report Spam response: %@
spamMessages
T@"NSArray",C,V_spamMessages
responseSpamMessages
T@"NSArray",C,V_responseSpamMessages
IDSEncryptionErrorType unknown/unhandled error type: %d
neg-token-fail-limit
neg-token-time-limit
v32@?0@"NSData"8@"NSError"16@"IDSDecryptionMetadata"24
v32@?0@"NSData"8@"NSError"16@"IDSEncryptionMetadata"24
failedTokenCache
T@"IDSRateLimiter",&,N,V_failedTokenCache
queueManager
T@"IDSEncryptionQueueManager",&,N,V_queueManager
Invalid OTR Encrypt parameters -- failing {inputDataLength: %llu, queue: %@, OTRToken: %@}
   OTR encryption failed with error: %@
Could not find OTR session for token: %@
   OTR decryption failed with error: %@
T@"IDSOTRController",R,N,V_OTRController
OTRToken
T@"NSString",R,N,V_OTRToken
com.apple.ids.connection.queue
IDSSessionConnection
Cleaning up: %@
connectionData
skeData
callInfoData
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
AVConferenceInviteDataConnectionBlob
AVConferenceInviteDataSKEBlob
AVConferenceInviteDataCallInfoBlob
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnection
IMAVInterface
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
T@"<_IDSSessionConnectionDelegate>",W,N,V_delegate
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
VCCapabilities
GKSRelayParameter_ClientData
GKSRelayParameter_SelfNatType
GKSRelayParameter_SelfBlob
GKSRelayParameter_PeerID
GKSRelayParameter_PeerNatType
GKSRelayParameter_PeerBlob
GKSRelayType
GKSRelayParameter_ConnectionID
GKSRelayParameter_TransactionID
GKSRelayParameter_Token
GKSRelayParameter_PeerRelayIP
GKSRelayParameter_PeerRelayPort
GKSRelayParameter_SelfRelayIP
GKSRelayParameter_SelfRelayPort
GKSRelayParameter_SelfRelayNatIP
GKSRelayParameter_SelfRelayNatPort
GKSRelayParameter_PeerRelayNatIP
GKSRelayParameter_PeerRelayNatPort
GKSRelayParameter_SelfExternalAddr
GKSRelayParameter_PeerExternalAddr
GKSDidStartParameter_ConnType
GKSDidStartParameter_Error
GKSDidStartParameter_CallID
GKSCDXServerAddress
GKSCommNATServerCohortAddress
GKSCommNATServerMain0Address
GKSCommNATServerMain1Address
GKSCommNATServerCohortName
GKSCommNATServerMain0Name
GKSCommNATServerMain1Name
GKSPreEmptiveRelayTimeout
GKSMaxRelayBitrate
GKSICETimeout
GKSNATCheckTimeout
GKSConnectionBlobMaxBytes
GKSNoRemotePacketsTimeout
GKSNetworkConditionsTimeout
Exception caught archiving connectionData, skeData Exception: %@
accessToken
T@"NSData",C,V_accessToken
pairing-token
id-get-admin-token
accessoryID
T@"NSString",C,V_accessoryID
pairingToken
T@"NSData",C,V_pairingToken
responseAccessoryID
T@"NSString",C,V_responseAccessoryID
responseAdminAcccessToken
T@"NSData",C,V_responseAdminAcccessToken
responseExpiry
T@"NSNumber",C,V_responseExpiry
successful
TB,N,V_successful
T@"NSError",&,N,V_error
RegisteredKeychainErrorDomain
RegisteredKeychainErrorCode
RegisteredDeserializationErrorDomain
RegisteredDeserializationErrorCode
UnregisteredKeychainErrorDomain
UnregisteredKeychainErrorCode
UnregisteredDeserializationErrorDomain
UnregisteredDeserializationErrorCode
GenerationErrorDomain
GenerationErrorCode
RollingErrorDomain
RollingErrorCode
IdentityToRegisterErrorDomain
IdentityToRegisterErrorCode
NGMMissingPrekey
NGMMissingIdentity
ShouldHaveUnregisteredIdentity
ShouldHaveRegisteredIdentity
HasRegisteredIdentity
HasUnregisteredIdentity
registeredKeychainError
T@"NSError",&,N,V_registeredKeychainError
unregisteredKeychainError
T@"NSError",&,N,V_unregisteredKeychainError
registeredDeserializationError
T@"NSError",&,N,V_registeredDeserializationError
unregisteredDeserializationError
T@"NSError",&,N,V_unregisteredDeserializationError
generationError
T@"NSError",&,N,V_generationError
rollingError
T@"NSError",&,N,V_rollingError
identityToRegisterError
T@"NSError",&,N,V_identityToRegisterError
shouldHaveRegisteredIdentity
T@"NSNumber",&,N,V_shouldHaveRegisteredIdentity
shouldHaveUnregisteredIdentity
T@"NSNumber",&,N,V_shouldHaveUnregisteredIdentity
hasRegisteredContainer
TB,N,V_hasRegisteredContainer
hasUnregisteredContainer
TB,N,V_hasUnregisteredContainer
missingIdentity
TB,R,N,V_missingIdentity
missingPrekey
TB,R,N,V_missingPrekey
errorContainer
T@"IDSNGMKeyLoadingErrorContainer",R,N,V_errorContainer
Responding to local device info query: %@
Responding to paired device info query: %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
We are the receiver, we can only DECLINE the invite, not CANCEL
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
v24@?0^v8Q16
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Failed to create identity from data in invitation accept, bailing...
Unauthenticated invitation accept missing public key, bailing...
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
remoteAssumeRemoteDeviceEncryption
TB,N,V_remoteAssumeRemoteDeviceEncryption
seqSendStart
TI,N,V_seqSendStart
SSRCSend
TI,N,V_SSRCSend
useStunMICheck
TB,N,V_useStunMICheck
preferences
T@"NSDictionary",&,N,V_preferences
quickRelaySessionToken
T@"NSData",&,N,V_quickRelaySessionToken
remoteBlob
T@"NSData",&,N,V_remoteBlob
seqRecvStart
TI,N,V_seqRecvStart
SSRCRecv
TI,N,V_SSRCRecv
DaemonGroupContext
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
v20@?0@"NSArray"8B16
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
v24@?0@"NSSet"8@"NSError"16
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
/Library/IdentityServices/
Core Data Load Failed
Core Data Load sucdeeded
Engram is disabled
messagesGroupContext
T@"ENGroupContext",&,N,V_messagesGroupContext
servicePushTopic
T@"NSString",&,N,V_servicePushTopic
serviceDuetIdentifiers
T@"NSArray",&,N,V_serviceDuetIdentifiers
serviceAdHocType
TI,N,V_serviceAdHocType
serviceIsDSBased
TB,N,V_serviceIsDSBased
serviceWantsReflectedSend
TB,N,V_serviceWantsReflectedSend
serviceAllowProxyDelivery
TB,N,V_serviceAllowProxyDelivery
serviceAllowLocalDelivery
TB,N,V_serviceAllowLocalDelivery
serviceAllowWiProxDelivery
TB,N,V_serviceAllowWiProxDelivery
serviceAllowLiveMessageDelivery
TB,N,V_serviceAllowLiveMessageDelivery
serviceUseiMessageCallerID
TB,N,V_serviceUseiMessageCallerID
serviceWantsTinkerDevices
TB,N,V_serviceWantsTinkerDevices
silentlyFailMessagesOnSwitch
TB,N,V_silentlyFailMessagesOnSwitch
shouldProtectTrafficUsingClassA
TB,N,V_shouldProtectTrafficUsingClassA
shouldAllowCloudDelivery
TB,N,V_shouldAllowCloudDelivery
shouldAllowLiveMessageDelivery
TB,N,V_shouldAllowLiveMessageDelivery
Ti,N,V_accountType
primaryRegistrationDSHandle
T@"NSString",&,N,V_primaryRegistrationDSHandle
primaryRegistrationURIs
T@"NSArray",&,N,V_primaryRegistrationURIs
isRegistrationActive
TB,N,V_isRegistrationActive
T@"NSArray",&,N,V_dependentRegistrations
defaultPairedDependentRegistrations
T@"NSDictionary",&,N,V_defaultPairedDependentRegistrations
appleIDPrimaryDependentRegistrations
T@"NSArray",&,N,V_appleIDPrimaryDependentRegistrations
T@"NSArray",&,N,V_aliasStrings
accountDescription
T@"NSString",&,N,V_accountDescription
accountDisplayName
T@"NSString",&,N,V_accountDisplayName
listenerID
T@,&,N,V_listenerID
entitlements
T@"NSDictionary",&,N,V_entitlements
shouldIncludeDefaultDevice
TB,N,V_shouldIncludeDefaultDevice
subService
T@"NSString",&,N,V_subService
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
token:
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
__localURI__
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
Device does not support live delivery, falling back to push {deviceID: %@, strippedURI: %@}
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Messaging
Sending via account that's type Local -- forcing local delivery.
self-token:
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
CompressPayload
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection
Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}
Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
device-id
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
Overwriting previous remote failure with local success
service-disable-%@
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
v16@?0@"NSNumber"8
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
decryption-key
file-size
attach-mmcs-dict
attach-meta
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Added query update hash {hash: %@, fromURI: %@, service: %@}
IDS doesn't support sending protobuf or data to rapport destinations
Registration is not active on account %@, ignoring...
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage { c = %@   fID = %@   fT = %@   g = %@   t = %@   tID = %@ } bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
Invalid encryption type -- failing {encryptionType: %@}
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
kt_loggable_data
T@"NSMutableArray",&,N,V_uris
hasKtLoggableData
ktLoggableData
T@"IDSProtoKeyTransparencyLoggableData",&,N,V_ktLoggableData
LocalDevice
encryptionClassAKey
encryptionClassCKey
encryptionClassDKey
hasAllEncryptionKeys
T@"NSString",R,&,N
fullDeviceIdentityEncrypter
T@"<IDSMPFullDeviceIdentityContainerEncrypter>",&,N,V_fullDeviceIdentityEncrypter
endpoint
T@"IDSEndpoint",&,N,V_endpoint
forceLegacyPK
TB,N,V_forceLegacyPK
IDSRealTimeEncryptionControllerErrorDomain
ids-rtencryption-mkm-expire-duration
ids-rtencryption-mkm-roll-duration
ids-rtencryption-prekey-expire-duration
ids-rtencryption-previous-prekey-expire-duration
ids-rtencryption-mkm-broadcast-enabled
ids-rtencryption-mkm-ack-timeout
ids-rtencryption-prekey-req-delay-duration
com.apple.ids.realtimeencryptioncontroller
forceKeyRecoveryLogic
v16@?0@"IDSGroupMasterKeyMaterialCache"8
v32@?0@"NSData"8@"NSDictionary"16^B24
B24@?0@8@"NSDictionary"16
v16@?0q8
ids-multiway-ftmessage-enforce-remote-timeout
v32@?0@"NSData"8@"IDSRealTimeEncryptionIdentity"16^B24
v32@?0@"NSData"8Q16^B24
v16@?0@"NSTimer"8
isTestRunning
TB,N,V_isTestRunning
accessory-ids
admin-id
id-get-consent-token
consent-tokens
accessoryIDs
T@"NSArray",C,V_accessoryIDs
adminID
T@"NSString",C,V_adminID
T@"NSString",C,V_expiry
responseConsentTokens
T@"NSArray",C,V_responseConsentTokens
T@"NSDictionary",C,V_message
T@"NSDictionary",C,V_protobuf
T@"NSString",C,V_fromID
T@"IDSDestination",C,V_destinations
accountGUID
T@"NSString",C,V_accountGUID
useDictAsTopLevel
TB,V_useDictAsTopLevel
dataToEncrypt
T@"NSData",C,V_dataToEncrypt
encryptPayload
TB,V_encryptPayload
TB,V_compressPayload
wantsResponse
TB,V_wantsResponse
T@"NSDate",&,V_expirationDate
TB,V_wantsDeliveryStatus
deliveryStatusContext
T@"NSDictionary",C,V_deliveryStatusContext
T@"NSData",C,V_messageUUID
Tq,V_priority
T@"NSString",C,V_guid
alternateGUID
T@"NSString",C,V_alternateGUID
T@"NSString",C,V_identifier
forcedLocal
TB,V_forcedLocal
T@"NSString",C,V_peerResponseIdentifier
TB,V_expectsPeerResponse
TB,V_wantsAppAck
TB,V_nonWaking
TB,V_nonCloudWaking
storedSize
T@"NSNumber",C,V_storedSize
TB,V_bypassDuet
T@"NSArray",C,V_duetIdentifiersOverride
T@"NSString",C,V_queueOneIdentifier
enforceRemoteTimeouts
TB,V_enforceRemoteTimeouts
mainAccountGuid
T@"NSString",C,V_mainAccountGuid
localDestinationDeviceUUID
T@"NSString",C,V_localDestinationDeviceUUID
enqueuedDate
T@"NSDate",C,V_enqueuedDate
T@"NSNumber",C,V_messageType
TB,V_alwaysSkipSelf
T@"NSNumber",C,V_pushPriority
liveMessageDelivery
TB,V_liveMessageDelivery
TB,V_requireBluetooth
TB,V_requireLocalWiFi
sent
TB,V_sent
wantsProgress
TB,V_wantsProgress
ignoreMaxRetryCount
TB,V_ignoreMaxRetryCount
originalTimestamp
T@"NSNumber",C,V_originalTimestamp
combinedMessages
T@"NSArray",R,V_combinedMessages
T@"NSString",C,V_topic
isLocal
TB,V_isLocal
SELECT ROWID, data_protection_class, guid, alternate_guid FROM outgoing_messages_to_delete;
data_protection_class
DELETE FROM outgoing_messages_to_delete WHERE ROWID <= ?;
@16@?0@"NSArray"8
    %@  %@
IDS-DB-List
StoreInMessageStore
StoreInDatabase
/Library/IdentityServices/files/
SendToClient
IncomingMessage
database
T@"IDSDatabase",R,&,N,V_database
messageStores
T@"NSArray",R,C
outgoing_messages_to_delete
Unexpected datatype. %@ should be of type %@, not %@
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientURI length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientURI length: %lu
%@:requestID = %@, IDSSessionID = %@ relaySessionID = %@
requestID
T@"NSData",C,V_requestID
senderURI
T@"NSString",C,V_senderURI
allocateType
T@"NSNumber",C,V_allocateType
IDSSessionID
T@"NSData",C,V_IDSSessionID
recipients
T@"NSArray",C,V_recipients
invitationRetryCount
T@"NSNumber",C,V_invitationRetryCount
groupMemberCount
T@"NSNumber",C,V_groupMemberCount
selfAllocationCount
T@"NSNumber",C,V_selfAllocationCount
activeRelayIP
T@"NSData",C,V_activeRelayIP
activeRelaySessionToken
T@"NSData",C,V_activeRelaySessionToken
existingRelayIP
T@"NSData",C,V_existingRelayIP
existingRelaySessionToken
T@"NSData",C,V_existingRelaySessionToken
existingRelaySignature
T@"NSData",C,V_existingRelaySignature
senderExternalIP
T@"NSData",C,V_senderExternalIP
appID
T@"NSString",C,V_appID
allocateProtocolVersion
T@"NSNumber",C,V_allocateProtocolVersion
T@"NSString",C,V_protocol
isSharedSession
T@"NSNumber",C,V_isSharedSession
T@"NSString",C,V_groupID
T@"NSNumber",C,V_qrReason
T@"NSNumber",C,V_qrError
previousAccessToken
T@"NSData",C,V_previousAccessToken
previousRelayIP
T@"NSData",C,V_previousRelayIP
provider
T@"NSNumber",C,V_provider
testOptions
T@"NSString",C,V_testOptions
infoAttribute
T@"NSNumber",C,V_infoAttribute
reportingDataBlob
T@"NSString",C,V_reportingDataBlob
pluginRequests
T@"NSArray",C,V_pluginRequests
relayIP
T@"NSData",C,V_relayIP
relayIPv6
T@"NSData",C,V_relayIPv6
relayPort
T@"NSNumber",C,V_relayPort
relaySessionToken
T@"NSData",C,V_relaySessionToken
relaySessionKey
T@"NSData",C,V_relaySessionKey
T@"NSData",C,V_relaySessionID
relayExpiryTimeStamp
T@"NSNumber",C,V_relayExpiryTimeStamp
inferredExternalIP
T@"NSData",C,V_inferredExternalIP
relaySoftwareVersion
T@"NSData",C,V_relaySoftwareVersion
pluginAllocations
T@"NSArray",C,V_pluginAllocations
errorCode
T@"NSNumber",C,V_errorCode
errorMessage
T@"NSString",C,V_errorMessage
interesting
T@"NSArray",&,N,V_interesting
requireAll
T@"NSArray",&,N,V_requireAll
lackAll
T@"NSArray",&,N,V_lackAll
We have exceeded the maximum queue size, dropping message %@
LocalDeliveryQueue
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
messages
statistics
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: allowing WiFi hotspot
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
availability
T@"IMNetworkAvailability",&,N,V_availability
SessionUseQRDirectly
inbox.appleid.apple.com
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
phone_enableQR
useBTDatagramPipe
QuickRelay is disabled for service: %@, session: %@.
QuickRelay is enabled for service: %@, session: %@.
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
Failed to create session because failed to create unauthenticated public identity even though key was present
pluginInfo
SessionInviteTimeout
Setting connection timeout to %f seconds
SessionConnectionTimeout
EndSessionTimeout
allocateOptions
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
encryptionStateStruct
T{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}},N,V_encryptionStateStruct
accountID
T@"NSString",&,N,V_accountID
clientType
Tq,N,V_clientType
clientUUID
T@"NSUUID",&,N,V_clientUUID
T@"_IDSSessionConnection",&,N,V_connection
connectionCountHint
TQ,N,V_connectionCountHint
connectionTimeout
Td,N,V_connectionTimeout
connectionTimer
T@"IMTimer",&,N,V_connectionTimer
connectionTimerCleared
TAB,N,V_connectionTimerCleared
T@"NSSet",&,N,V_destinations
disableRemoteDeviceEncryption
TB,N,V_disableRemoteDeviceEncryption
enableQuickRelay
TB,N,V_enableQuickRelay
enableSingleChannelDirectMode
TB,N,V_enableSingleChannelDirectMode
enableSKE
TB,N,V_enableSKE
encryptionInitialized
TB,N,V_encryptionInitialized
encryptionState
T^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}},R,N
endSessionTimeout
Td,N,V_endSessionTimeout
endSessionTimer
T@"IMTimer",&,N,V_endSessionTimer
endSessionTimerCleared
TAB,N,V_endSessionTimerCleared
forceInternetInvitation
TB,N,V_forceInternetInvitation
T@"NSString",&,N,V_fromID
T@"NSString",&,N,V_groupID
inviteSentTime
Td,N,V_inviteSentTime
isScreenSharingSession
TB,N,V_isScreenSharingSession
TI,N,V_invitationRetryCount
inviteTimeout
Td,N,V_inviteTimeout
inviteTimer
T@"IMTimer",&,N,V_inviteTimer
inviteTimerCleared
TAB,N,V_inviteTimerCleared
lastPacketTime
Td,N,V_lastPacketTime
localBlob
T@"NSData",&,N,V_localBlob
packetLossTimer
T@"IMTimer",&,N,V_packetLossTimer
T@"NSString",&,N,V_participantID
peerProtocolVersion
TI,N,V_peerProtocolVersion
pushTopic
remoteUseCloudPairedControlChannel
T@"NSNumber",&,N,V_remoteUseCloudPairedControlChannel
serviceName
T@"NSString",&,N,V_serviceName
seqSend
TI,N,V_seqSend
sharedSession
TB,N,V_sharedSession
startConnectingDate
T@"NSDate",&,N,V_startConnectingDate
TI,N,V_state
Tq,N,V_transportType
T@"NSString",&,N,V_uniqueID
TB,N,V_useBTDatagramPipe
useSecureQRControlMessage
TB,N,V_useSecureQRControlMessage
useQRDirectly
TB,N,V_useQRDirectly
T@"NSArray",&,N,V_pluginRequests
localUnauthenticatedFullIdentity
T@"IDSMPFullLegacyIdentity",&,N,V_localUnauthenticatedFullIdentity
remoteUnauthenticatedPublicIdentity
T@"IDSMPPublicLegacyIdentity",&,N,V_remoteUnauthenticatedPublicIdentity
T@"<IDSDSession>",W,N,V_delegate
q24@?0@"IDSDAccount"8@"IDSDAccount"16
IDSDaemonMIGQueryInterface
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - on a call and wifi isn't usable, enqueuing query to avoid mRAB
%@ - too many enqueued queries, dropping this one
%@ - we're not on a call or wifi is usable, processing query immediately (On call: %@   Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
T@"<IDSDaemonMIGQueryInterfaceDelegate>",W,V_delegate
service-cache-request
cached-id-status-query
id-status-query
set-id-status
remote-device-status-query
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
transactionID
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
*** Incoming cached ID status query for (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
is-springboard
force
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
client-query-max-per-uri
client-query-max-time-range
Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}
vc-disable-springboard-queries
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
email:myself
__HandleRemoteDeviceQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
Failed to load persistent cache data from keychainWrapper {error: %{public}@, identifier: %{public}@, keychainWrapper: %{public}@}
Failed to save persistent cache data to keychainWrapper {error: %{public}@, identifier: %{public}@, data: %{private}@, keychainWrapper: %{public}@}
Tried to purge before available -- returning {self: %@}
isAvailable
T@"NSString",&,N,V_identifier
T@"IMSystemMonitor",R,N,V_systemMonitor
/Library/IdentityServices/Persistence/
%@-aesKey
Failed To load key -- returning nil {error: %@, keyIdentifier: %@}
CCCrypt failed -- purging && returning nil {cryptResult: %d}
Failed To remove file {error: %@, path: %@}
Failed To Generate IV {ivResult: %d}
Failed to get a stored key, generating a new key {error: %@, result: %@}
Failed To Generate key {keyResult: %d}
Failed to save key -- returning {keySaveError: %@}
Failed to purge stored key {removeError: %@}
directory
T@"NSString",&,N,V_directory
Tq,N,V_dataProtectionClass
persister-migration-%@
<%@: %p; origin = %@; destination = %@>
originPersister
T@"<IDSPersistentMapPersister>",&,N,V_originPersister
destinationPersister
T@"<IDSPersistentMapPersister>",&,N,V_destinationPersister
migrated
TB,N,V_migrated
migrationDefaultKey
T@"NSString",&,N,V_migrationDefaultKey
{ URIs: %@, fromID: %@, service: %@, fromIdentity: %@, alwaysSkipSelf: %@, disallowQueryRefresh: %@, sendOnePerToken: %@, registrationProperties: %@, maxSize: %lu, wantsDeliveryStatus: %@, wantsCertifiedDelivery: %@, messageToSend: %@ }
T@"NSArray",&,N,V_uris
T@"NSString",&,N,V_service
T@"NSData",&,N,V_fromIdentity
disallowQueryRefresh
TB,N,V_disallowQueryRefresh
sendOnePerToken
TB,N,V_sendOnePerToken
registrationProperties
T@"IDSRegistrationProperties",&,N,V_registrationProperties
T@"NSData",&,N,V_dataToEncrypt
TQ,N,V_encryptionType
forceAttachmentMessage
TB,N,V_forceAttachmentMessage
forceOnePerFanout
TB,N,V_forceOnePerFanout
TQ,N,V_maxSize
messageToSend
T@"IDSPeerMessage",&,N,V_messageToSend
TB,N,V_wantsDeliveryStatus
TB,N,V_wantsCertifiedDelivery
willSendBlock
T@?,C,N,V_willSendBlock
T@"NSString",&,N,V_guid
T@"NSArray",&,N,V_endpoints
endpointsToEncryptedData
T@"NSDictionary",&,N,V_endpointsToEncryptedData
aggregatableMessages
T@"NSArray",&,N,V_aggregatableMessages
usedMMCS
TB,N,V_usedMMCS
aggregateMessages
T@"NSArray",&,N,V_aggregateMessages
Done with IDSIncomingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
IDSIncomingMessageRecordAddMessageRecordDedup %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE message_identifier = ? 
Done with IDSIncomingMessageRecordAddMessageRecordDedup, lets update Spotlight with this message record.
IDSIncomingMessageRecord
IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@
Setting IDSIncomingMessage property %d of %d
SELECT topic, count(ROWID) FROM incoming_message GROUP BY topic
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE is_local = ? ORDER BY ROWID DESC LIMIT ?
IDSIncomingMessageRecordDeleteMessageForGUID %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;
IDSIncomingMessageRecordDeleteMessagesOlderThanThreshold %lld
DELETE FROM incoming_message WHERE date < ? LIMIT ?; 
void IDSIncomingMessageRecordBulkCopy(IDSIncomingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, int64_t *, BOOL *, IDSDatabase *__strong)
from_id
is_local
message_identifier
incoming_message
<IDSIncomingMessageRecord %p [%p]>{}
_IDSIncomingMessageRecordCreate()
com.apple.private.imcore.spi.database-access
@16@?0@"IDSTemporaryPhoneUser"8
@16@?0@"IDSPhoneSubscription"8
ctAdapter
T@"IDSCTAdapter",&,N,V_ctAdapter
onlyAllowReads
TB,N,V_onlyAllowReads
personal-session-token-cache
personal-session-token-cache-v1
personal-session-token-cache-v2
personal-session-token-cache-v3
personal-session-token-cache-v4
queryCompletionBlock
T@?,R,N,V_queryCompletionBlock
session-tokens
push-tokens
dates-expire
dates-refresh
anonymized-sender-ids
session-token
session-token-expires-seconds
session-token-refresh-seconds
anonymized-sender-id
biz-trusted
kt-mismatch-account-flag
peer-id-manager-cleanup-interval
vc-disaster-sender-self-tokens
ForceSelfTokens
***** Forcing self tokens mode *****
Failed to remove peerIDCache v0 {error: %{public}@}
Failed to remove peerIDCache v1 {error: %{public}@}
Failed to remove peerIDCache v2 {error: %{public}@}
Failed to remove peerIDCache v3 {error: %{public}@}
PeerIDManager
Migrated Peer ID persistent map {oldVersionNumber: %ld}
Query cache:
Key: <%{public}@,from:%{private}@,to:%{private}@>
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
IDS-list
PeerLookup
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
_disasterModeTokens
identities
sender-correlation-identifier
Found identity:
             device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
              kt-loggable-data: %@
      kt-mismatch-account-flag: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
IDSIDRefreshExpiry
IDSIDHardExpiry
                    Overwriting soft TTL with: %ld seconds
                    Overwriting hard TTL with: %ld seconds
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
B16@?0@"IDSEndpoint"8
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
** At least one session token expired for: %@, need to get new ones
B16@?0@"IDSPeerIDKey"8
v64@?0@"NSString"8@"NSArray"16@"NSArray"24@"NSDictionary"32@"NSString"40B48@"NSDictionary"52B60
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
endpointQueryListeners
T@"NSMutableDictionary",&,N,V_endpointQueryListeners
clientDataUpdateBlocks
T@"NSMutableDictionary",&,N,V_clientDataUpdateBlocks
purgeClientDataBlocks
T@"NSMutableDictionary",&,N,V_purgeClientDataBlocks
disasterModeTokens
T@"NSMutableDictionary",&,N,V_disasterModeTokens
queryHandler
T@"<IDSPeerIDQueryHandler>",&,N,V_queryHandler
peerMap
T@"IDSPersistentMap",&,N,V_peerMap
T@"<IDSPeerIDPushHandler>",&,N,V_pushHandler
keyTransparencyVerifier
T@"IDSKeyTransparencyVerifier",&,N,V_keyTransparencyVerifier
account
suspendWait
connectionContext
%@/%@/%@
UTunController
%@ returning serviceConnectorServiceForAccountString=%@._account=%@;_service=%@;_name=%@
IDSGenericConnectionID[%@,%@,%@] @%p (%lu)
T@"NSString",R,C,N,V_account
T@"NSString",R,C,N,V_service
T@"NSString",R,C,N,V_name
local[%@] remote[%@]
%u:::%u
localAddress
T@"IDSSockAddrWrapper",R,&,N,V_localAddress
remoteAddress
T@"IDSSockAddrWrapper",R,&,N,V_remoteAddress
-[IDSGenericConnection initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:]
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1692.6/IDSAgent/IDSUTunController.m
0 == SecRandomCopyBytes(kSecRandomDefault, keyMaterialLength, _localKeyMaterial)
TCP info (%u) tcpi_snd_nxt:%08x tcpi_rcv_nxt:%08x (connection: in:%08x out:%08x)
<IDSGenericConnection: id[%@] ports[%@] localGUID[%@] remoteGUID[%@] clientID[%@] proto[%d] sd[%d,%d,%d] error[%@] comp_state[%d] localContext[%d,%p] remoteContext[%d,%p] ( %s%s%s%s%s%s%s%s%s%s%s) (CT:%0.6lf) tcp[%@], readHandler: %p>
opened 
handler-called 
control-sent 
control-received 
reset-sent 
reset-received 
sent-pkt 
received-pkt 
received-data 
canceled 
encryption-enabled 
( %s%s%s%s%s%s)
IDSUTunController
problem: %@ is going to use the main queue.
%@ called nw_service_connector_cancel_active_connection
%@ cannot cancel service connector for connection._serviceConnector=%@;_defaultPairedDeviceEndpoint=%@;serviceConnectionServiceString=%@
Invalidating IDSGenericConnection %@
Cleanup: %@
IDSUTun
collectAllUTunSocketStall
%p %@ Stall detected [%@].
IDSGenericConnection
IDS detected the single UTun socket stall. Please file a bug "Transport|all", and attach a sysdiagnose and the contents of /Library/Logs/CrashReporter from both devices.
2020-01-01
UTun Socket Stall
UTun Socket stall
%p %@ Stall detected [%@] - only netdiagnose
%p %@ Stall detected [%@] - netdiagnose & simulate crash
%p %@ Stall warning [%@]
%p Created the stall detector %@
didInvalidate
TB,N,V_didInvalidate
localConnectionGUID
T@"NSString",R,&,N,V_localConnectionGUID
remoteConnectionGUID
T@"NSString",C,N,V_remoteConnectionGUID
T@"NSString",C,N,V_clientID
T@"IDSGenericConnectionID",&,N,V_connectionID
addressPair
T@"IDSSockAddrWrapperPair",C,N,V_addressPair
Ti,R,N,V_protocol
Ti,N,V_sd
sdCopy
Ti,N,V_sdCopy
sdOriginal
Ti,N,V_sdOriginal
sdNumberNoClose
Ti,N,V_sdNumberNoClose
connectError
T@"NSError",&,N,V_connectError
completionQueue
T@"NSObject<OS_dispatch_queue>",N
openSocketCompletionHandler
T@?,C,N,V_openSocketCompletionHandler
firstIncomingSYNSequenceNumber
TI,N,V_firstIncomingSYNSequenceNumber
expectedNextIncomingSequenceNumber
TI,N,V_expectedNextIncomingSequenceNumber
expectedNextOutgoingSequenceNumber
TI,N,V_expectedNextOutgoingSequenceNumber
Ti,N,V_stateFlags
creationTime
Td,R,N,V_creationTime
socketTrafficClass
Tq,N,V_socketTrafficClass
hasMoreData
TB,N,V_hasMoreData
lastSuccessfulSentTime
Td,N,V_lastSuccessfulSentTime
compressionInfo
T@"IDSHCInfo",&,N,V_compressionInfo
compressionState
Tq,N,V_compressionState
suspended
TB,N,V_suspended
uint32Key
TI,N,V_uint32Key
TB,N,V_isCloudEnabled
isControlChannel
TB,N,V_isControlChannel
isRealTime
TB,N,V_isRealTime
shouldStopBTDatagramLink
TB,N,V_shouldStopBTDatagramLink
encryptionEnabled
TB,N,V_encryptionEnabled
keyMaterialLength
Ti,N,V_keyMaterialLength
localKeyMaterial
T*,N,V_localKeyMaterial
TS,N,V_seqSendStart
TS,N,V_seqRecvStart
TS,N,V_seqSend
srtpProtocolVersion
Ti,N,V_srtpProtocolVersion
checksumFailed
TB,N,V_checksumFailed
connectionSetupStartTime
Td,N,V_connectionSetupStartTime
firstPacketReceiveTime
Td,N,V_firstPacketReceiveTime
connectionInitTime
Td,N,V_connectionInitTime
firstDataPacketReceiveTime
Td,N,V_firstDataPacketReceiveTime
idsDeviceConnectionUUID
T@"NSString",C,N,V_idsDeviceConnectionUUID
serviceConnection
T@"NSObject<OS_nw_connection>",&,N,V_serviceConnection
defaultPairedDeviceEndpoint
T@"NSObject<OS_nw_endpoint>",&,N,V_defaultPairedDeviceEndpoint
outgoingStallDetectorName
T@"NSString",C,N,V_outgoingStallDetectorName
T@"IDSConnectionContext",&,N,V_connectionContext
shouldSetWhiteListUUIDForStreamingSocket
TB,N,V_shouldSetWhiteListUUIDForStreamingSocket
initWithReadHandler: readHandler: %p, self: %p
T@?,R,N,V_readHandler
T@"IDSGenericConnection",&,N,V_connection
deviceConnectionInfo
T@"IDSDeviceConnectionInfo",&,N,V_deviceConnectionInfo
 o              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
timestamp
Td,R,N,V_timestamp
 i              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
 k              [%013.06lf] %18s%18s%18s%18.09f%18ld
com.apple.ids.utuntiminglogger
                [  timestamp  ]        total-time   processing-time  compression-only            kernel             bytes 
customTest
networkingLogDumpFlags
Test
Custom Test 5
2017-01-01
CustomTest6
Custom Test 6
Message to pop up for testing
kUTunConnectionDefaultUrgentOutgoingDetectorName
TestTrigger
ControlChannelAvoidMainQueue
v40@?0@"NSString"8@"<NSObject>"16^B24^B32
kUTunConnectionControlChannelOutgoingDetectorName
UTunDelivery-Default-Urgent
UTunDelivery-Default-Default
kUTunConnectionDefaultDefaultOutgoingDetectorName
 ...
UTun-oversized
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
Cloud
61314
61315
UTunController dup() failed
connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
This connection %@ has already been invalidated. Calling _closeSockets.
%@: Connection (%@) was invalidated.
connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@
%@: nw_connection %@ in bad state %s
%@: nw_connection %@ canceled
no error
connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
%@: socket failed (errno=%d)
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!
openSocket was never called, closing connection
failed to create udp connection for %@
IPsecLink
v28@?0B8@12^B20
%p: control channel got message %@ device conn info:%@
v32@?0@"NSData"8B16B20B24B28
ids multiplex ipsec queue
enableSkywalkStat
kern.skywalk.ring_stat_enable
v24@?0@"NSObject<OS_nw_connection>"8^{__CFError=}16
disableControlChannelLoopFix
ids-control-channel
legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]
resetting all connections
Decryption failure: %u
device %@: socket() failed: errno=%d: %s
UTunController socket() failed
device %@: can't bind to [%@ @ scopeid=%d]: errno=%d: %s
device %@: can't connect to %@: errno=%d: %s
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
stale connection
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
remote close
%@: reset control channel didReceiveReestablishmentRequest NO
com.apple.private.alloy.fignero
com.apple.private.alloy.willow.proxy
UTunSocketProtocolOverride
completionHandlerQueue
completionHandler
replace existing connection
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
%@: openSocketWithOptions unable to allocate new port - cannot continue
closeSocketWithOptions called
%@: openSocketWithOptions called for default paired device but no connectionInfo - cannot continue
%@: openSocketWithOptions unable to create new device - cannot continue
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
Cleaning up all connections for service
-[IDSUTunController onTransportThread_PerServiceDataTransferredForDevice:services:]
%s: reporting service stats %@
-[IDSUTunController perServiceDataTransferredForDevice:services:]
-[IDSUTunController perServiceDataSentForDevice:services:]
-[IDSUTunController perServiceDataReceivedForDevice:services:]
<null>
[throughput] Now cannot send to device %@
linkManager
T@"IDSLinkManager",R,N,V_linkManager
forRefresh
vc-disaster-sender-max-retries
vc-disaster-receiver-retry-interval
id-query-bad-signature-retry-enabled
id-query-bad-signature-retry-interval
id-query-bad-signature-retry-number
DebiliatedMode
***** Forcing debiliated mode *****
com.apple.madrid-lookup
Bag loaded notification! Is in backoff mode changed to %@
iMessage Debilitated Mode
iMessage server has %@ debilitated mode.
entered
left
No block supplied, but is this the first query: %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
URIs
FromIdentity
FromURI
FromService
ForSending
ForMessaging
ResultExpected
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found invalid from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}
com.apple.ids.query
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
forceHTTPQueries
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
The Query Service Is %@
IDSPeerIDLookup
overrideQueryResponseCode
queryCodeOverride
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Chat
Query time was: %f  (URIs: %@)
uriToError
not 
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
negative-cache-ttl-seconds
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
dualInterfaceidQueryMessageDelivery
T@"FTMessageDelivery_DualMode",&,N,V_dualInterfaceidQueryMessageDelivery
queryQueue
T@"NSMutableArray",&,N,V_queryQueue
completionBlocksToURIsMap
T@"NSMutableDictionary",&,N,V_completionBlocksToURIsMap
extraCompletionBlocks
T@"NSMutableDictionary",&,N,V_extraCompletionBlocks
isInServerBackoffMode
TB,N,V_isInServerBackoffMode
networkChangeNotifier
T@"<IDSPeerIDNetworkChangeNotifier>",&,N,V_networkChangeNotifier
T@"<IDSPeerIDQueryHandlerDelegate>",W,N,V_delegate
dataSource
T@"<IDSPeerIDQueryHandlerDataSource>",&,N,V_dataSource
%@,%@
We have suffered %ld network failures. Forcing the server bag to reload.
smsSignature
T@"NSString",R,N,V_smsSignature
MMCSUploadErrorKey
Failed to write wrapped data { error: %@, randomFileName: %@, data: %@ }
Failed uploading attachment file transfer (failed post-upload encryption)
Failed uploading attachment file transfer (failed upload)
Failed uploading attachment file transfer (could not generate file)
sync_topics_allowed_to_send_immediately
nonurgent_internet_send_interval
nonurgent_internet_send_interval_max_fuzz
*** Over budget, failing sendMessage on service: %@
com.apple.private.alloy.bulletinboard
com.apple.private.alloy.keychainsync
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
adhoc type 2
not local type
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }
Default paired watch is Tinker, but sending service is not Tinker aware. If you need to send locally to a Tinker watch, please contact IDS Engineering to have your service reconfigured
Sending message {defaultDestination: %@, messageType: %@, serviceIdentifier: %@}
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
com.apple.ids.trafficclass.nanoregistry.check
com.apple.ids.trafficclass.nanoregistry.configure
com.apple.ids.trafficclass.nanoregistry.update
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
IDSService
Consumed sandbox extension [%@] handle [%llu] for file [%@]
No sandbox extension for received resource [%@]
Consumed sandbox extension [%@] handle [%llu] for original file [not %@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
message %@ on service %@
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
v24@?0@"NSString"8B16B20
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
max-ids-database-size
max-ids-database-client-enqueued
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
pendingMessageTimeout
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
com.apple.ids.dbvacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}
Received data %@ to be cached and sent opportunistically on service %@
Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}
Cancel opportunistic send {identifier: %@, serviceName: %@}
%li Drop point detected.
Sender's IDSDaemon will drop message.
SendToDaemon
Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }
(Messaging1) No account found for ID: %@
Client is attempting to send a message under first data protection lock, failing message
Sending Internet IDS Messages before first unlock is no longer supported. Please contact the IDS & Privacy teams to discuss further
Result of can send message with account was no
Destination device is not active for this account
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}
sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
v32@?0@"NSString"8d16@"NSError"24
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
non-urgent
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
md-low-priority-send-window-constraints
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
start-time
end-time
probability
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
OutgoingMessage
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
v16@?0@"IDSDOutgoingMessage"8
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
ec-%@-%ld legacy-%@-%ld
ec-%@-%ld
legacy-%@-%ld
mailto:support@apple.com
mailto:info@apple.com
mailto:alert@apple.com
.apple.com
disable-message-checkpointing
MessageCheckpointing
At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@
topLevelPayload
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
Decrypting message %@ of encryption type "%@"
NGMDebug
EC message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message %@ in %f seconds
** Had decryption error: %d { guid: %@, error: %@ }
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
IDS-receive-%@
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d
-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:]
%s: could not find IDSServiceProperties for topic %@
IDSDeviceDidWakeHintTopic
IDSDeviceDidWakeHintGUID
IDS Local Message Received
Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }
The Account Was %@
pair
The message that will be broadcast is %@
Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
IDSIncomingLocalMessageService
IDSIncomingLocalMessageDeviceID
IDSIncomingLocalMessageBTUUID
IDSIncomingLocalMessageCommand
IDSIncomingLocalMessagePayload
IDSIncomingLocalMessageContext
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
AoverC
Class A key not avaialble for message %@ on topic %@
-[IDSDaemon(Messaging) _processStoredIncomingLocalMessages]
-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:]
%s: GUIDs count %lu
q24@?0@"IDSDIncomingMessage"8@"IDSDIncomingMessage"16
Processing %lu stored incoming remote messages {shouldRepeat %@}
 => Deferring message, service wants messages after first unlock only
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Revision lock forced failure
Destination device has unpaired
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
 => Empty message for message ID: %@
 => No error!?
 => OTR un-supported error for messageID: %@
 => Remote encryption credentials are invalid failure for messageID: %@
 => Remote identity encryption failure for messageID: %@
 => Remote Identity decryption failure for messageID: %@
 => Pair decryption failure for messageID: %@
 => Silient Pair decryption failure for messageID: %@
 => Pair encryption failure for messageID: %@
 => Remote attachment download failure for messageID: %@
IDSLogLevelLow
Noted decryption failure for engram group {group: %@, noteError: %@}
 => Engram stale decryption failure for messageID: %@
Broadcasting Group Share Message brodcast block
 => Engram fetch group decryption failure for messageID: %@
Received unknown/unhandled error type: %d
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@
Found no service for topic! %@
Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@
Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}
Told to filter message %@ from %@
CrossAccountWhitelistBlocking
Dropping message %@ from %@ because it is not on the cross-account whitelist and is coming from %@
We would drop message %@ from %@ because it is not on the cross-account whitelist and is coming from %@ but feature flag is off
Message specifies an expiration date %@ %@
Message %@ for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Sent certified delivery receipt for filtered message { success: %ld, context: %@ }
Filtering alias { accountUniqueID: %@, toIdentifier: %@, activeAliases: %@ }
Filtering but wants app ack
Filtering non-invitation message, stopping { command: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
DISPLAYNGMTEXT
ADDITIONALNGMTEXT
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting GroupShare Message top
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Shouldn't broadcast for this command %@ for received message %@ with guid %@
v28@?0@"NSError"8@"NSDictionary"16B24
No Message Error, Processing Imediatly
v32@?0@"NSDictionary"8@"NSError"16@"IDSCertifiedDeliveryContext"24
  => Adding a delay of %f seconds to iCloud Pairing Messages
CloudPairingDelay
  => Processing immediately
Under first data protection lock. Sending message to storage. { guid: %@ }
Processing message for stored guid %@
Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}
No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
AES128
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
com.apple.identityservices.deliver
SocketPairMessage
Issued sandbox extension [%s] for file [%@]
Failed to issue sandbox extension for file [%@]
Storage timer fired, guids we need to process: %@
We're under first data protection lock. Holding messages and not sending to clients.
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Encryption failed with error %@
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
-[IDSDaemon(Messaging) _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]
%s: invalid topic for saving incoming message, ignoring!
-[IDSDaemon(Messaging) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:]
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
v40@?0@"IDSDeliveryContext"8@"NSNumber"16@"NSNumber"24B32B36
Cannot ack message locally without proper priority value (%d)
Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
continuity
Local
The delivery path for message with guid %@ is %@, service: %@
Cloud Fallback
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Not Proxying this message %@ payload is currently a typing indicator
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
incoming-message-cleanup-threshold
BlockList
filtering message for handle: %@ = %@
InitialContextQueue
ProfileValidationQueue
AuthenticationQueue
Region Validation failed
Authentication failure
FaceTimeLocalizable
Default context query failed
Region validation failed
v84@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64B72B76B80
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
<%@:%p> cert: %@
dataRepresentation
phoneAuthenticationCertificate
T@"IDSAuthenticationCertificate",R,N,V_phoneAuthenticationCertificate
IDSPipelineParameter
IDSPipelineComponent.m
Subclasses must implement runIndividuallyWithInput
@"IDSPromise"16@?0@"<IDSPipelineParameter>"8
nextComponent
T@"<IDSPipelineComponent>",&,N,V_nextComponent
PairedDevice
apple
-[IDSPairedDeviceKeychainPersister _saveToKeychainWithDictionary:]
-[IDSPairedDeviceKeychainPersister _removeFromKeychain]
IDSDaemonPriorityQueueSync
IDSDaemonPriorityQueueDefault
IDSDaemonPriorityQueueUrgent
id-get-service-user-id
service-user-id
serviceUserIDDict
responseServiceUserIDs
T@"NSArray",C,V_responseServiceUserIDs
com.apple.identityservices.serviceDisablement
@"IDSDAccount"16@?0@"IDSServiceProperties"8
@16@?0@"<IDSUser>"8
@"IMPair"16@?0@"<IDSCTSIM>"8
@"IMPair"16@?0@"IDSPhoneUser"8
migrationTracker
T@"IDSDataMigrationTracker",&,N,V_migrationTracker
accountBuilder
T@?,C,N,V_accountBuilder
cachedDisabledByService
T@"NSMutableDictionary",&,N
migrationPromise
T@"CUTPromise",&,N,V_migrationPromise
midSynchronize
TB,N,V_midSynchronize
registration-date
next-registration-date
needs-renewal
invitation-version
ids-version
identity-version
cdma
identity-rsa-pair-signature
environment
temporary-phone-email
region-base-phone-number
region-server-context
dependant-registrations
self-handle
dependant-registrations-ttl
dependant-registrations-response-code
dependant-registrations-auth-retries
kt-uris
ids-user-id
ids-registration-cert
ids-authentication-cert
user-unique-identifier
service-identifier
bindings
dict
updated
removed
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [User Unique ID: %@]
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [Registration Date: %@] [Heartbeat Date: %@] [User Unique ID: %@]
T@"<FTPasswordManager>",&,N,V_passwordManager
_candidateEmails
T@"NSMutableArray",&,N,V_candidateEmails
temporaryPhoneEmail
T@"NSString",&,N,V_temporaryPhoneEmail
T@"NSDictionary",R,D,N
migrationContext
T@"NSDictionary",&,N,V_migrationContext
Tq,N,V_registrationStatus
registrationType
Ti,N,V_registrationType
serviceType
T@"NSString",&,N,V_serviceType
retries
Ti,N,V_retries
absintheRetries
Ti,N,V_absintheRetries
needsMigration
TB,N,V_needsMigration
needsProvisioning
TB,N,V_needsProvisioning
needsRenewal
TB,N,V_needsRenewal
runningSimpleAuthentication
TB,N,V_runningSimpleAuthentication
isDisabled
TB,N,V_isDisabled
mainID
T@"NSString",C,N,V_mainID
T@"NSString",R,N,V_guid
registrationDate
T@"NSDate",C,N,V_registrationDate
nextRegistrationDate
T@"NSDate",C,N,V_nextRegistrationDate
T@"NSString",C,N
email
confirmedEmails
vettedEmails
T@"NSArray",&,N,V_vettedEmails
T@"NSString",&,N,SsetDSHandle:,V_dsHandle
candidateEmails
T@"NSString",C,N,V_environment
keyPairSignature
T@"NSString",C,N,V_keyPairSignature
isCDMA
T@"NSNumber",C,N,V_isC2K
IDSVersion
T@"NSNumber",C,N,V_IDSVersion
applicationVersion
T@"NSNumber",C,N,V_applicationVersion
identityVersion
T@"NSNumber",C,N,V_identityVersion
authenticationToken
T@"NSString",C,N,V_regionID
regionBasePhoneNumber
T@"NSString",C,N,V_regionBasePhoneNumber
regionServerContext
T@"NSDictionary",C,N,V_regionServerContext
T@"NSArray",C,N,V_dependentRegistrations
dependentRegistrationsTTL
T@"NSDate",C,N,V_dependentRegistrationsTTL
dependentRegistrationResponseCode
T@"NSNumber",C,N,V_dependentRegistrationResponseCode
dependentRegistrationAuthRetries
T@"NSNumber",C,N,V_dependentRegistrationAuthRetries
idsUserID
T@"NSString",C,N,V_idsUserID
T@"NSArray",C,N,V_uris
keyTransparencyEnrolledURIs
T@"NSArray",C,N,V_keyTransparencyEnrolledURIs
authenticationCert
T@"NSData",C,N
registrationCert
T@"NSData",C,N,V_registrationCert
TB,N,V_shouldAutoRegisterAllHandles
TB,N,V_shouldRegisterUsingDSHandle
emailsToRegister
hasSentinel
canRegister
canSendRegistration
adHocServiceNames
T@"NSArray",&,N,V_adHocServiceNames
T@"NSString",&,N,V_userUniqueIdentifier
IDSDeviceConnectionAWDMetrics
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
_kIDSDServiceControllerServicesChangedNotification
_kIDSDServiceControllerServicesRemovedNotification
SubServicesMap
Version
com.apple.ids.subservices
com.apple.private.alloy.keysharing
com.apple.private.alloy.harmony.pushprovisioning
allServices
T@"NSArray",R,W,N
allTinkerServices
allServicesStrings
allAdHocServices
T@"NSSet",R,N,V_allAdHocServices
allPrimaryServices
iTunesService
iCloudService
B8@?0
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceDeactivation]
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceActivationWithCBUUID:]
HASH:%@
id-group-get-key
IDSTapToRadarPushPayload.m
pushPayload
T@"NSString",R,N,V_errorCode
serverErrorDetail
T@"NSString",R,N,V_serverErrorDetail
promptMessage
T@"NSString",R,N,V_promptMessage
promptTitle
T@"NSString",R,N,V_promptTitle
radarTitle
T@"NSString",R,N,V_radarTitle
radarDescription
T@"NSString",R,N,V_radarDescription
radarComponentName
T@"NSString",R,N,V_radarComponentName
radarComponentVersion
T@"NSString",R,N,V_radarComponentVersion
radarComponentId
T@"NSNumber",R,N,V_radarComponentId
radarClassification
T@"NSString",R,N,V_radarClassification
radarReproducibility
T@"NSString",R,N,V_radarReproducibility
radarKeywords
T@"NSArray",R,N,V_radarKeywords
IDSAccountSigningKeyErrorDomain
IDSAccountSigningKey.m
`-loadOrGenerateSigningKeyWithError:` cannot be called after `-purgeFromKeychain:`
appTag
T@"NSString",&,N,V_appTag
label
T@"NSString",&,N,V_label
adapter
T@"<IDSAccountSigningKeyKeychainAdapter>",&,N,V_adapter
keyRef
T^{__SecKey=},R,N,V_keyRef
kSOSCCInCircle
kSOSCCNotInCircle
kSOSCCRequestPending
kSOSCCCircleAbsent
kSOSCCError
id-report-unknown
message-id
sender-uri
time-of-message
message-is-blackholed
Report Unknown Sender response: %@
unknownSenderURI
T@"NSString",C,V_unknownSenderURI
isBlackholed
TB,V_isBlackholed
messageServerTimestamp
Ti,V_messageServerTimestamp
IDSGroupServerKeyElectionStoreErrorDomain
accountBlob
T@"NSData",&,N,V_accountBlob
parentPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_parentPg
newPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_newPg
parentVersion
T@"NSNumber",&,N,V_parentVersion
ENID
T@"NSData",&,N,V_ENID
IDSMessageStore-%@
IDSDMessageStore
Saving database.
Destroying database.
Closed database.
^{__CFString=}8@?0
filename
T@"NSString",C,N,V_filename
v16@?0@"CSDBThreadedRecordStore"8
ids.db
ids-%@.db
Enabling WAL journal mode.
PRAGMA journal_mode = wal;
Enabling Foreign Key support.
PRAGMA foreign_keys = ON;
The current IDS database is v%d.  The current schema version is v%d
This DB can be migrated.
Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.
REINDEX
Reindexing the DB worked.
Reindexing the DB failed with SQLite result: %d
Database vacuum success
IDSDMessageStore vacuum failed!
IDSDMessageStore final integrity check failed!
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Unable to drop legacy table
Successfully dropped legacy table
DROP TABLE outgoing_message
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
DROP TABLE incoming_message
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding indexes on message guid
Unable to add outgoing_message guid index
Successfully added outgoing_message guid index
CREATE INDEX outgoing_message_guid_idx ON outgoing_message(guid);
Unable to add incoming_message guid index
Successfully added incoming_message guid index
CREATE INDEX incoming_message_guid_idx ON incoming_message(guid);
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
CREATE INDEX IF NOT EXISTS outgoing_message_guid_idx ON outgoing_message(guid);
CREATE INDEX IF NOT EXISTS incoming_message_guid_idx ON incoming_message(guid);
Add enforce_remote_timeout column to outgoing_message
INTEGER DEFAULT 0
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Unable to add outgoing_message similar message query index
Successfully added outgoing_message similar message query index
CREATE INDEX outgoing_message_similarity_idx ON outgoing_message(account_guid, priority, is_sent);
Add main_account_guid column to outgoing_message
TEXT
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
UPDATE outgoing_message SET expiration_date = %lld WHERE expiration_date = 0;
Unable to set expiration date on messages
Successfully added expiration date on messages
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Add ignoreMaxRetryCount column to outgoing_message
Add wantsCertifiedDelivery column to outgoing_message
Add originalTimestamp column to outgoing_message
Adding message_identifier column to incoming_message
Unable to add incoming_message message_identifier index
Successfully added incoming_message message_identifier index
CREATE INDEX incoming_message_message_identifier_idx ON incoming_message(message_identifier);
Dropping old bypass_duet messages
Unable to drop bypass_duet messages
Successfully dropped bypass_duet messages
DELETE FROM outgoing_message where bypass_duet = 1;
Add push_priority column to outgoing_message
Downgrading to a build with a different IDS database version is unsupported :(
vacuum
IDS DB migration took %f seconds.
%@ SQLiteResult: %d SQLite Message: %s
No migration block to execute!
Cannot perform _IDSDatabaseAddColumnOfTypeToTable(%@, %@, %@)
SELECT %@ FROM %@
The %@ column already exists on %@, skipping this step.
IDS DB migration failed to add column %@ to the %@ table.
Added %@ column to the %@ table.
ALTER TABLE %@ ADD COLUMN %@ %@;
IDSRTEncryptionController
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
T@"NSString",C,N,V_groupID
T@"NSString",C,N,V_sessionID
T@"NSString",C,N,V_participantID
T@"NSDate",C,N,V_expirationDate
isPublicKeyDistributed
TB,N,V_isPublicKeyDistributed
isExpired
fullIdentity
T^{__SecKey=},N,V_fullIdentity
publicIdentity
T^{__SecKey=},N,V_publicIdentity
publicIdentityData
T@"NSData",C,N,V_publicIdentityData
We were unable to update the cache. Possibly because the device doesn't exist. Look at the logs to know for sure. {uuid: %@}
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)
q24@?0@"NSUUID"8@"NSUUID"16
PairDirectlyOverIPsec
(Daemon) Told to add a paired device %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device. {activeCBUUID: %{private}@, cbuuidString: %{private}@}
idsDaemon
T@"IDSDaemon",&,N,V_idsDaemon
quickSwitchHelper
T@"IDSQuickSwitchHelper",&,N,V_quickSwitchHelper
utunController
T@"IDSUTunController",&,N,V_utunController
com.apple.ids.key-transparency.verification
@16@?0@"IDSProtoKeyTransparencyTrustedDevice"8
@16@?0@"IDSCloudKitKeyTransparencyDeviceRecord"8
DeviceData
DeviceMetadata
id-initialize-validation
session-info-request
absinthe-hello
Initialize Validation Response: %@
session-info
absinthe-response
sessionInfoRequest
T@"NSData",C,N,V_sessionInfoRequest
responseSessionInfo
T@"NSData",C,N,V_responseSessionInfo
responseTTL
T@"NSNumber",C,N,V_responseTTL
absintheUDID
T@"NSString",C,N,V_absintheUDID
absintheHello
T@"NSData",C,N,V_absintheHello
responseAbsintheServKey
T@"NSData",C,N,V_responseAbsintheServKey
responseAbsintheResponse
T@"NSData",C,N,V_responseAbsintheResponse
responseDeviceScoreNonce
T@"NSString",C,N,V_responseDeviceScoreNonce
@"IMTimer"24@?0@8:16
com.apple.identityservicesd-backup-check
timerBlock
T@?,C,N,V_timerBlock
restoreTimer
T@"IMTimer",&,N,V_restoreTimer
actionByTarget
T@"NSMapTable",&,N,V_actionByTarget
id-get-handles
Handle query response: %@
responseHandles
T@"NSArray",C,V_responseHandles
selfHandle
T@"NSDictionary",C,V_selfHandle
SimpleUInt32ToObjectTable_SetObjectForKey
SimpleUInt32ToObjectTable_ObjectForKey_NoRetain
SimpleUInt32ToObjectTable_RemoveObjectForKey
SimpleNSStringToObjectTable_SetObjectForKey
SimpleNSStringToObjectTable_ObjectForKey_NoRetain
SimpleNSStringToObjectTable_RemoveObjectForKey
IDSPhoneUserRegistryErrorDomain
<%@: %p phoneUser: %@ authenticationCertificate: %@>
T@"<IDSUser>",R,N,V_phoneUser
This device is not currently authenticated for a phone user
This device does not support phone number authentication
server
T@"IDSServer",R,N,V_server
phoneNumberValidator
T@"IDSPhoneNumberValidationStateMachine",R,N,V_phoneNumberValidator
T@"<IDSPhoneUserRegistryDeviceSupport>",R,N,V_deviceSupport
forSending
TB,R,N,V_forSending
TB,R,N,V_forRefresh
forMessaging
TB,R,N,V_forMessaging
TB,R,N,V_resultExpected
unregistered-message-protection-key
message-protection-key
previous-message-protection-key
container-unregistered-message-protection-key
container-message-protection-key
container-previous-message-protection-key
message-protection-class-a-key
message-protection-class-c-key
message-protection-class-d-key
NGMVersionOverride
+[IDSRegistrationKeyManagerIdentityDataSource storageItemNameForLegacyIdentityIdentifier:]
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1692.6/IDSAgent/IDSRegistrationKeyManagerIdentityDataSource.m
+[IDSRegistrationKeyManagerIdentityDataSource legacyStorageItemNameForContainerIdentityIdentifier:]
+[IDSRegistrationKeyManagerIdentityDataSource containerStorageItemNameForContainerIdentityIdentfier:]
IDSRegistrationKeyManagerIdentityDataSource.m
IDSNWSocketPairConnectionProtocol
i16@?0@"NSObject<OS_nw_framer>"8
Q16@?0@"NSObject<OS_nw_framer>"8
Q28@?0*8Q16B24
IDSNWSocketPairConnection
IDSNWSocketPairConnectionProtocol returning -- no header.
IDSNWSocketPairConnectionProtocol read message_length:%u (0x%x), type:%u (0x%x)
IDSNWSocketPairConnectionProtocol returning partial data.
v36@?0@"NSObject<OS_nw_framer>"8@"NSObject<OS_nw_protocol_metadata>"16Q24B32
%@ Succesful nw_connection_create_with_connected_socket_and_parameters
%@ _nwConnection is nil.
%@ Connection: nw_path_t is NULL, dissabling cross-layer logging.
%@ Connection from listener is ready.
%@ Listening connection closed.
%@ Listening connection state: %d
%@ Ending session
%@ Read %u bytes
%@ nw_connection_receive_message Error %@, isFinal %@
Scheduling next _receiveFromNWConnection for %@
v36@?0@"NSObject<OS_dispatch_data>"8@"NSObject<OS_nw_content_context>"16B24@"NSObject<OS_nw_error>"28
%@ nw_connection_receive_message of type %u
Sending message to uppper layers. 
%@ Sending message to uppper layers.
%@ Wrote %u bytes.
%@ Error %@! Could not write data to nw_connection.
v16@?0@"NSObject<OS_nw_error>"8
priorityQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_priorityQueue
T@"<IDSSocketPairConnectionDelegate>",W,N,V_delegate
nwConnection
T@"NSObject<OS_nw_connection>",&,N,V_nwConnection
currentOutgoingFragmentedMessageID
TI,N,V_currentOutgoingFragmentedMessageID
TI,N,V_fragmentationSize
loggingSequenceIncoming
TC,N,V_loggingSequenceIncoming
loggingSequenceOutgoing
TC,N,V_loggingSequenceOutgoing
incomingDataFragments
T@"NSMutableDictionary",&,N,V_incomingDataFragments
encryptionBlock
T@?,C,N,V_encryptionBlock
decryptionBlock
T@?,C,N,V_decryptionBlock
shouldUseCrossLayerLogging
TB,N,V_shouldUseCrossLayerLogging
reg-hash-time-since-gdr
Registered device missing public key! -- aborting hash {device: %@}
Local device missing public key! -- aborting hash
Received unsupported query update hash {version: %d, hash: %@}
Query update hash does not match, we should clear {remoteHash: %@, localHash: %@}
Query update hashes match -- doing nothing {version: %d, remoteHash: %@, localHash: %@}
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {remoteURI: %@, service: %@, localURI: %@, guid: %@}
negativeRegistrationUpdateCache
T@"IDSRateLimiter",&,N,V_negativeRegistrationUpdateCache
T@"<IDSRegistrationHashProcessorDelegate>",W,N,V_delegate
q24@?0@"NSData"8@"NSData"16
start-count
DevicePolicy
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
iMessageSpam
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
v36@?0q8B16d20@"NSError"28
T@"<IDSDeviceCertificationRepairDelegate>",W,N,V_delegate
<%@:%p user: %@, credential: %@>
T@"IDSTemporaryPhoneUser",&,N,V_user
credential
T@"IDSTemporaryPhoneUserCredential",&,N,V_credential
<%@:%p user: %@>
alertType
Tq,R,N,V_alertType
v16@?0@"<IDSTemporaryPhoneUserTransaction>"8
expirationManager
T@"IDSTemporaryPhoneUserExpirationManager",&,N,V_expirationManager
transactionQueue
T@"IDSTransactionQueue",&,N,V_transactionQueue
carrier-nonce
imei
id-get-esat
esim-auth-token
carrierNonce
T@"NSString",C,N,V_carrierNonce
responseCarrierToken
T@"NSString",C,N,V_responseCarrierToken
T@"NSString",C,N,V_responseMessage
BTLink
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
hostState
releasing pipe %@
ReportDataCorruption
/bin/cp /dev/uart.log /tmp/uart-%.06f.log
IDSBTLink
Downstream
Upstream
Start collecting logs due to %@ Magnet corruption
Downstream data corruption
Upstream data corruption
DontSubmitDataCorruptionToAggd
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
com.apple.IDS.MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
-[IDSBTLink flushBuffer:]
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1692.6/IDSAgent/IDSBTLink.m
direction == IDSLinkDirectionTransmit || direction == IDSLinkDirectionReceive
nil peer
asleep
awake
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
com.apple.IDS.MagnetDataCorruptionRecoveryTimeInMs
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
ready but already suspended
Ready to write into pipe %@
Link manager send2 errno %d
%c Magnet    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
T@"NSString",R,C,V_linkID
T@"<IDSMadridAckTrackerDelegate>",&,N,V_delegate
IDSKeyTransparencyVerifierErrorDomain
kt-enabled
kt-xpc-activity-enabled
kt-xpc-activity-interval
kt-xpc-activity-max-verifications
kt-analytics-enabled
kt-sf-analytics-enabled
kt-rtc-analytics-enabled
kt-self-verify-rate
kt-cloud-kit-enabled
kt-account-key-enabled
<%@: %p eligibleServiceIdentifiers.count: %lu, serviceSignatures.count: %lu>
eligibleServiceIdentifiers
T@"NSArray",R,N,V_eligibleServiceIdentifiers
signatures
T@"IDSProtoKeyTransparencyTrustedServiceSignatures",R,N,V_signatures
<%@: %p serviceIdentifier: %@, accountIdentifier: %@, URI: %@>
accountIdentifier
T@"NSString",R,N,V_accountIdentifier
T@"IDSURI",R,N,V_URI
<%@: %p transparencyStatus: %@, transparencyBlob.length: %lu>
transparencyStatus
T@"NSNumber",R,N,V_transparencyStatus
transparencyBlob
T@"NSData",R,N,V_transparencyBlob
<%@: %p pushToken: %@, loggableData.length: %lu>
loggableData
T@"NSData",R,N,V_loggableData
Failed to determine eligibility for the key transparency trust circle
Key transparency is not enabled
Key transparency trust circle is not enabled
The local device is not eligible for the key transparency trust circle
Provided services are not eligible for the key transparency trust circle
B16@?0@"IDSProtoKeyTransparencyTrustedService"8
The local device is not eligible for key transparency due to account status
Failed to nuke key transparency state
@16@?0@"KTLoggableData"8
v40@?0@"NSString"8Q16@"KTTransparentData"24@"NSError"32
Invalid index provided (unrecognized service identifier)
Local URI is not key transparency enrolled
No ticket provided
Failed to update synced datas for key transparency ticket
v24@?0@"NSUUID"8@"NSError"16
v24@?0Q8@"NSError"16
Transparency verification resulted in a failure
Transparency results are currently pending
Received unknown verification result
Key transparency CloudKit circle is not enabled
Key transparency account key circle is not enabled
Failed to enroll KT trusted device
Failed to generate signature using account key
Account key could not be established
Account key signature verification failed
No account key signatures found to verify
succeeded
failed
B16@?0@"IDSKeyTransparencyEntry"8
B16@?0@"IDSProtoKeyTransparencyTrustedDevice"8
B16@?0@"KTAccount"8
@16@?0@"KTDevice"8
B16@?0@"KTClientDataRecord"8
im://
IDSKeyTransparencyVerifier
Key Transparency
KTVerifier
T@"KTVerifier",R,N,V_KTVerifier
keyManager
T@"IDSRegistrationKeyManager",R,N,V_keyManager
registrationDataSource
T@"<IDSKeyTransparencyRegistrationDataSource>",R,N,V_registrationDataSource
internalMetricLogger
T@"<CUTMetricLogger>",R,N,V_internalMetricLogger
productionMetricLogger
T@"<CUTMetricLogger>",R,N,V_productionMetricLogger
keyTransparencyStore
T@"IDSCloudKitKeyTransparencyStore",R,N,V_keyTransparencyStore
T@"IDSKeyTransparencyPolicy",R,N,V_policy
Failed
Pending
id-get-dependent-registrations
Get Dependent Registrations response: %@
responseRegistrations
T@"NSArray",C,V_responseRegistrations
NetworkAvailabilityCheckOverrideValue
FixedInterface
FixedInterfaceDestination
DisablePisco
EnableAbsintheV4Option
DisableBAACertOption
EnableDeviceScoring
EnableDebugPiscoLogging
AlwaysPairAsTinker
ForcefulECC
ForcefulLegacy
DisableKeyTransparency
DisableKeyTransparencyCloudKitCircle
DisableKeyTransparencyAccountKeyCircle
EnableKeyTransparencyAggressiveVerificationSchedule
EnableKeyTransparencyUI
ForceFlushOnDeliveryReceipt
EveryUnlockAsFirstUnlock
ForceOnePerFanout
DropMadridMessages
BypassHomeNumberCarrierCheck
HomeNumberSecondsUntilExpiration
sessionNetworkAvailabilityCheckOverrideBehavior
fixedInterface
fixedInterfaceDestination
isPiscoDisabled
isAbsintheV4Enabled
isBAACertDisabled
isDeviceScoringEnabled
isDebugPiscoLoggingEnabled
isAlwaysPairAsTinker
isForcefulLegacyEnabled
isForcefulECCEnabled
isKeyTransparencyDisabled
isKeyTransparencyCloudKitCircleDisabled
isKeyTransparencyAccountKeyCircleDisabled
isKeyTransparencyAggressiveVerificationScheduleEnabled
isKeyTransparencyUIEnabled
forceFlushOnDeliveryReceipt
isFakingEveryUnlockAsFirstUnlock
isForcingAttachmentMessage
isForcingOnePerFanout
isDroppingMadridMessages
bypassHomeNumberCarrierCheck
homeNumberSecondsUntilExpiration
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
T@"IDSPeerIDManager",W,N,V_peerIDManager
IDStatusQueryController
T@"IDSIDStatusQueryController",&,N,V_IDStatusQueryController
sigs
T@"FTMessageDelivery",R,N,V_messageDelivery
setupNewSession configuration: %@
cleanup session %@ local object %@
Could not find session with uniqueID %@ to clean up, ignoring...
cleanup session instance %@ local object %@
Could not find session with instanceID %@ to clean up, ignoring...
sendInvitation %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
reconnectSessionWithUniqueID %@
%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, triggered locally %@
%@ - Could not find session with uniqueID %@ to update members, ignoring...
updateParticipantData %@, for Group %@, context %@
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
SecMWCreateSessionSeed
MessageProtection
IDSRTEncryptionKeyMaterial
SecMWCreateSessionSeed for MKM (error %@)
SecMWCreateSessionSalt
_SecMWCreateSessionSalt for MKS (error %@)
<%@: %p MKI: %@, createdAt: %@>
<%@: %p MKI: %@, groupID: %@, createdAt: %@, MKS: %@, MKM: %@>
T@"NSUUID",R,N,V_MKI
T@"NSData",R,N,V_MKS
T@"NSData",R,N,V_MKM
createdAt
T@"NSDate",R,N,V_createdAt
isSentToClient
TB,N,V_isSentToClient
isGeneratedLocally
TB,N,V_isGeneratedLocally
T@"NSString",R,N,V_groupID
setting up the realtime encryption controller for the unique ID: %@
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
sending the master key material recovery request for the unique ID: %@ to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
Error unarchiving -- dropping {unarchiveError: %@}
Failed to load keychain. Can't sync cache with keychain. {error: %@}
Failed to serialize cache -- Not saving opportunistic cache {error: %@, cache: %@}
Dropped opportunistic cache {err: %@}
Did not find any date to schedule a heart beat, triggering get dependent request
%@ - Using random device heartbeat override value of %d seconds
%@ - Using device heartbeat override value of %d seconds
Expiration dates per user: 
%@ => %@
Next heartbeat date: %@ (in %.0f seconds)
We did not find any heartbeat to schedule
_scheduleDependentRegistrations for %.0f - %@
_scheduleRescueHeartBeat for %.0f
_updateDependentRegistrations fired
Resetting expiry for %@
Not setup yet, ignoring expiry update...
%@ - UserID is empty (%@), ignoring expiry update...
%@ -  updateExpiry failed sanity check. Returning current date + %f seconds expiry was %f
Setting new expiry %@ (seconds %f) for user %@
Not setup yet, ignoring accounts change...
Accounts changed, updating expiry map
Missing userID for account %@, ignoring...
Did not find existing expiry for user %@
Not setup yet, ignoring _fetchExpiryTimeIfNecessary
There is one or more valid accounts but none of them has an expiry date, refreshing the entire list!
Did not delete the heart beat date from the keychain, error: %d
SIM Is not ready for registration, ignoring this.
  => Is CDMA: %@
  => Tracking %d registration(s)
  => Re-HTTP registering registration: %@
  => Registration matches, not re-registering: %@
  => No registrations active
  => Device is not entitled for this, ignoring tech change
After SIM insertion, user denied SMS registration found, changing error {accounts: %@, service: %@
SIM Inserted. Checking to see if we need to re-register due to SIM swap.
  => Re-sending HTTP registration for SMS registration: %@
Registration state changed but we can't register; not enabling phone number accounts
Registration state changed but we've tried this too many times; not enabling phone number accounts
After registration state changed, enabling account: %@ on service: %@
Not enabling account after registration state changed {isUserDisabled: %@, shouldDisableService: %@, registrationError: %ld, account: %@}
Registration state changed processed {withinTimeRange: %@, _registrationStateChangedDate: %@, _registrationStateChangedCounter: %lld}
SIM Removed. Checking to see if we need to re-register due to SIM removal.
  => Sending HTTP *deregistration* for SMS registration: %@
Dealloc'ing IDSNRDeviceBridge {pointer: %p}
NRDeviceMonitor created {deviceIdentifier: %@, pointer: %p}
Could not create NRDeviceMonitor object. {pointer: %p}
isConnected didChange {isConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isNearby didChange {isNearby: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isCloudConnected didChange {isCloudConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isAwake didChange {isAwake: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
linkType didChange {linkType: %{public}@, isRegistered: %{public}@ deviceIdentifier: %{private}@}
isClassCConnected didChange {isClassCConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
Initializing endpoint subscription {self: %@}
Received endpoints for initial subscription state {self: %@, endpoints: %@}
Endpoints subscription source did discover relevant endpoints {self: %@, localURI: %@@, endpointMap: %@}
Adding identity to last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Checking last resort DB for identity { token: %@, uri: %@, service: %@ }
Found identity in last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Cleaning last resort DB with date range %@ to %@
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
Unexpected streamID %lu found when asked to translate %@
Previous Remote Instance IDs (next:%d) {%@}
Get Service User ID's Completed with response %@
Get Admin Access Tokens Completed with response %@
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
%p %s Sending IDS message, no CoreDuet on platform
No active subscriptions, disabling presence on the server.
Activity unregister for activity topic %@ finished.  Success? %d
The first subscription succeeded, enabling presence on the server.
Activity register for activity topic %@ finished.  Success? %d
Looking up for listeners for update: %@
Alerting listener %@ about update %@
Assign localCID(%04x) from CID set
Clear localCID(%04x) from CID set
Attempt to clear reserved CID 0, skip.
Link is connected, perform a block for %@
Cancelling block by ID needs to pass in ID and success var.
Cancel block by ID succeeded: %@ for %@
Link is connected, cancel a block for %@
ElectAccountIdentity
!setState serviceTypeName=%@
RollAccountKey
CurrentCluster missing GroupIdentifier {currentCluster: %{public}@}
Failed to get fullClusterFromKeychain {accountGroupkey: %{public}@, error: %{public}@}
Failed to update groupID {accountIdentityCluster: %{public}@, groupID: %{public}@, error: %{public}@}
Create account keys
Create Account Key
!setState currentIdentity=%@
!setState serviceTypeNames=%@
!setState oldCluster=%@
Rolling full identity
Creating new full identity
!setState newAccountIdentity=%@
Failed to create new account identity -- Fail {error: %{public}@}
Failed to create adming identity -- Fail {adminServiceIdentity: %{public}@}
Failed to create signingServiceIdenitty -- Fail {signingServiceIdentity: %{public}@}
Created service identities {fullServiceAdminIdentities: %{public}@, fullServiceSigningIdentities: %{public}@}
Rolling old cluster
Creating new cluster
!setState newCluster=%@
!setState existingIdentityGroupName=%@
!setState accountIdentityGroupName=%@
Failed to create publicClusterBlob -- Fail {error: %{public}@}
!setState newGroupID=%@
Failed to fetch item from CloudKit -- Fail {fetchError: %{public}@}
Fetched CloudKit account -- Continue {fetchedCloudKitItem: %{private}@}
Unexpected existingGroupID class -- Fail {fetchedCloudKitItem: %{private}@}
recordName mismatch -- Fail {recordName: %{public}@, existingIdentityGroupName: %{public}@}
Failed to store cluster in keychain -- Fail {storeError: %{public}@, newCluster: %{public}@}
Stored cluster in Keychain
Failed to store in group server {groupServerItem: %{public}@, groupServerError: %{public}@
Stored cluster in GroupServer {groupServerItem: %{public}@}
!setState groupServerGroupID=%@
Failed to save identityItem to CloudKit -- Fail {cloudKitItem: %{public}@, cloudKitSetError: %{public}@}
Updating newCluster groupID {newCluster: %{public}@, groupID: %{public}@}
Stored Cluster in CloudKit -- Done {cluster: %{public}@}
Cleaning up after failed election {cluster %{public}@}
Failed to clean up failed election {cluster: %{public}@, error: %{error}@}
We need a keychain migration -- not saving anything
Failed to save identity {error: %{public}@, identityIdentifier: %ld}
Failed to save identity -- Removing reference from keychain
Removed keychain data for class %{public}@ message protection identity {error: %{public}@}
Failed removing keychain data for class %{public}@ message protection identity {error: %{public}@}
Saving key manager state {self: %@}
Failure to persist identity containers. Clearing in memory keys to force a reload.
Failure to persist identity containers, but clear is rate limited.
Persisting message protection identity container {identityIdentifier: %ld, identityContainer: %{private}@, deleteIfNull: %{public}@}
Persisted identity {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to save identity, possibly corrupted -- removing reference from keychain {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Removed identity reference from keychain {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to remove corrupt identity reference from keychain {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Removing identity from keychain because deleteIfNull == YES, {identityIdentifier: %ld, identityContainer: %{private}@}
Purged identity and removed it from keychain {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to purge identity or remove keychain reference {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Persisting build of identity generation {itemName: %@, buildOfIdentityGeneration: %@}
Failed setting keychain data for build of identity generation {error: %{public}@}
Failed removing keychain data for build of identity generation {error: %{public}@}
Unable to deserialize build of identity generation {itemName: %{public}@, serializedBuildOfIdentityGeneration: %{public}@}
Unable to load message protection identity from keychain {error: %{public}@}
Skipping load class A message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class A message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class A message protection identity {error: %{public}@}
Skipping load class C message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class C message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class C message protection identity {error: %{public}@}
Skipping load class D message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class D message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class D message protection identity {error: %{public}@}
Registration key manager beginning locked load of identities
Loaded registration key pair {publicKey: %@, privateKey: %@, signature: %@, isMigratedSignature: %@, upgradePending: %@}
Unable to load registration key pair; we're under lock, and this requires migration -- we need to migrate
Unable to load a registration key pair {signature: %@, publicKey: %@, privateKey: %@}
We are under first data protection lock, we can not load our identity now
Successfully loaded message protection identity from keychain {_config.registeredIdentityContainer: %{private}@, buildOfGeneration: %@}
Unable to load message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}
We're under lock, and this requires migration -- we need to migrate
Successfully created account signing key reference {_config.accountSigningKeyReference: %{private}p}
Unable to create account signing key reference {error: %{public}@}
Successfully loaded unregistered message protection identity from keychain {_config.unregisteredIdentity: %{private}@, buildOfGeneration: %@}
Unable to load unregistered message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}
Successfully loaded previous message protection identity from keychain {previousMessageProtectionKey: %{private}@}
Unable to load previous message protection identity from keychain {error: %{public}@, previousIdentityDeserializationFailed: %{public}@}
We have no registered or unregistered identity loaded -- generating a new message protection identity {registeredIdentityContainer: %@, unregisteredIdentityContainer: %@, identityDataSource.ngmVersion: %@}
We appear to have already generated a unregistered identity. It seems like it failed on deserialization: %@.
We appear to have already generated a unregistered identity. It seems like it failed reading from keychain: %@.
We appear to have already generated an unregistered identity, but we have no deserialization error or keychain error!
We have no registered identity loaded, but we found an unregistered identity -- no need to generate
We need to regenerate the registered identity
We appear to have already generated a registered identity. It seems like it failed on deserialization: %@.
We appear to have already generated a registered identity. It seems like it failed reading from keychain: %@.
We appear to have already generated an registered identity, but we have no deserialization error or keychain error!
No need to regenerate message protection identity {identity: %@, unregisteredIdentity: %@}
We're under first lock, and this requires migration -- not doing anything here
 ********  DEFAULT SET TO FORCE IDENTITY REFRESH  *******************
 ****************  IDENTITY SERIALIZATION UPDATED  ******************
 ************************  IDENTITY REBUILT  ************************
 *****************  NEEDS ENCRYPTION IDENTITY ROLL  *****************
 ********************************************************************
!!WILL FORCE AN EC KEY ROLL ON NEXT REGISTER!!
!!NO LONGER FORCING EC KEY ROLL!!
Failed generating CSR due to insufficient context {userID: %@, privateKey: %p, publicKey: %@}
Nil full container {config: %{private}@}
Nil previous full container {config: %{private}@}
Failed to get NGM public data from ticket to register -- cancelling roll {ticket: %@, ngmPublicDeviceIdentity: %@, NGMIdentityToRegister: %@, NGMPrekeyToRegister: %@}
Failed to get ticket from identity -- aborting roll {error: %{public}@, fullDeviceIdentity: %@}
!!FORCING A ROLL!!
Failed to get NGM public data to register -- returning nil for EC {ngmPublicDeviceIdentity: %@, NGMIdentityToRegister: %@, NGMPrekeyToRegister: %@}
Failed to get legacy public data to register -- returning nil {error: %{public}@, legacyPublicIdentity: %@}
Failed to get public container from full container -- returning nil publicIdentity to register {error: %{public}@, unregisteredIdentityContainer: %{private}@, registeredIdentityContainer: %{private}@}
Nil full container -- returning nil publicIdentity to register {config: %{private}@}
Returning publicIdentity to register {publicIdentityContainer: %{private}@, unregisteredContainer: %{private}@, registeredContainer: %{private}@}
Immediately returning existing message protection identity {identity: %@}
Created new message protection identity {error: %@, protectionClass: %ld, identity: %@}
Failed to create a new message protection identity! {error: %@, protectionClass: %ld}
No protection identity provided -- not returning public message protection data
Returning serialized public message protection identity {publicIdentity: %@, data: %@}
Failed to serialized public message protection identity {appendError: %@, publicIdentity: %@}
Failed to create public identity from full identity {error: %@, fullIdentity: %@}
No message protection identity present -- not returning message protection identity {error: %{public}@, dataProtectionClass: %d
Generating unregistered identity
generatedIdentityContainer isEqual to registeredIdentityContainer -- no changes {generatedIdentityContainer: %@, registeredIdentityContainer: %@}
generatedIdentityContainer isEqual unregisteredIdentityContainer -- no changes {generatedIdentityContainer: %@, unregisteredIdentityContainer: %@}
generatedIdentityContainer is different from the registered and unregistered container -- has changes -- Updating unregistered container {generatedIdentityContainer: %@}
Generated a new unregistered identity {build: %@}
Failed to generate a new unregistered identity!
Called _generateUnregisteredIdentityWithExistingLegacyIdentity but we have a valid unregisteredIdentity -- no changed {unregisteredIdentityContainer: %@}
Found internet message protection identity in class C -- no need to move it
Moving internet messsage protection identity from class D to class C
Result of moving internet messsage protection identity from D to C is %@
Delaying notification of identity regeneration {delay: %f seconds}
Posting notification of identity regeneration
Skipping notification of identity regeneration; we've already done it
Registration key manager noting registration of keys { legacyData: %@, ngmIdentityData: %@, ngmPrekeyData: %@ }
Failed to get expectedLegacyPublicIdentityData -- Not updating registered data {error: %{public}@, publicUnregisteredIdentityContainer: %{private}@}
Failed to get expectedNGMPublicIdentityData/expectedNGMPublicPrekeyData -- Not updating registered data {error: %{public}@, unappliedRollingTicket: %@, publicUnregisteredIdentityContainer: %{private}@, expectedNGMPublicIdentityData: %{private}@, expectedNGMPublicPrekeyData: %{private}@}
Failed to get publicUnregisteredIdentityContainer -- Not updating registered data {error: %{public}@, unregisteredIdentityContainer: %{private}@}
Completed registration of previously unregistered identity {previousIdentity: %@, identity: %@, buildOfIdentityGeneration: %@}
Completed registration of public identity, but we were unable to apply the rolling ticket {ngmFullDeviceIdentity: %@, unappliedRollingTicket: %@, rollError: %@}
Completed registration of public identity, but it's not the identity we expected {legacyDataMatches: %@, ngmIdentityDataMatches: %@, ngmPrekeyDataMatches: %@}
Saving public legacy message protection data {identifier: %@, data: %@}
Failed to save legacy public message protection data {error: %{public}@, publicData: %{private}@}
Failed to get legacy registered public data {error: %{public}@, publicContainerToRegister: %{private}@}
Saving public ngm message protection identity data {identifier: %@, data: %@}
Failed to save ngm public message protection identity data {error: %{public}@, publicData: %{private}@}
Saving public ngm message protection prekey data {identifier: %@, data: %@}
Failed to save ngm public message protection prekey data {error: %{public}@, publicData: %{private}@}
Failed to get ngm registered public data {error: %{public}@, publicContainerToRegister: %{private}@}
Saving public ngm version data {identifier: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}
Failed to public ngm version data {error: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}
Failed to get ngm version from publicContainerToRegister {publicContainerToRegister: %{private}@}
Clearing flag about needing a re-register; it looks to be successful
Removing current message protection identity and key pair
Failed to remove serialized message protection identity from keychain {error: %{public}@}
Failed to remove serialized unregistered message protection identity from keychain {error: %{public}@}
Failed to remove serialized previous message protection identity from keychain {error: %{public}@}
Purging previous message protection identity from memory and keychain
Removed previous identity from memory and keychain {previousIdentity: %{private}@}
Failed to remove previous identity from memory and keychain {error: %{public}@, previousIdentity: %{private}@}
No previous identity to purge -- ignoring request {previousIdentity: %@, identity: %@}
Skipping loadPairingIdentities becuase shouldGeneratePairingIdentities == NO
We saved our keys, resuming OTR session negotiation
Failed remove class A identity -- continuing with otther identities {error: %{public}@, identity: %{private}@}
Failed remove class C identity -- continuing with otther identities {error: %{public}@, identity: %{private}@}
Missing publicLegacyData -- returning NO {error: %{public}@, publicContainer: %{private}@}
Registered legacy data is empty -- returning YES {error: %{public}@, config: %{private}@}
Registered legacy data doesn't match current data -- returning YES {registeredLegacyData: %{private}@, publicLegacyData: %{private}@}
Missing publicNGMIdentityData or publicNGMPrekeyData -- Not checking ngm data {error: %{public}@, publicContainer: %{private}@, publicNGMIdentityData: %{private}@, publicNGMPrekeyData: %{private}@}
Missing ngmVersionData -- not checking ngm data {error: %{public}@, publicContainer: %{private}@}
Registered ngm data is empty -- returning YES { error: %{public}@, config: %{private}@}
Registered ngm identity data doesn't match current data -- returning YES {registeredNGMIdentityData: %{private}@, publicNGMIdentityData: %{private}@}
Registered ngm prekey data doesn't match current data -- returning YES {registeredNGMPrekeyData: %{private}@, publicNGMPrekeyData: %{private}@}
Registered ngm data version is empty -- returning YES {error: %{public}@, config: %{private}@}
Registered ngmVersionData doesn't match current data -- returning YES {registeredNGMVersionData: %{public}@, publicNGMVersionData: %{public}@}
Failed to get identity data protection class {expectedProtectionClass: %ld, error: %{public}@, identity: %{private}@}
Failed to migrate identity data protection class {error: %{public}@, identity: %{private}@, protectionClass: %ld}
Requesting roll of encryption portion of registered identity
Roll of encryption portion of registered identity requested, but we've already generated an unregistered identity -- ignoring request
returning NO from _shouldRegenerateRegisteredIdentity becuase allowRegenerateRegisteredIdentity == NO
Scheduling timer for purge of previous identity {delay: %f}
Already scheduled timer for purge of previous identity
Purge previous identity timer fired!
Scheduling timer for regneration of registered identity {delay: %f}
Regenerate identity timer fired!
We no longer need to re-generate our identity -- continuing without re-generation
Queried _purgePreviousIdentityDelay {purgeDateNumber: %{public}@, delay: %f}
Queried _identityRegenrationDelay {regenerationIntervalNumber: %{public}@, delay: %f}
Error retrieving contacts {error: %@}
GUID %@ Constructed %lu fanouts
GUID %@ Fanout %@ (%@) contains:
Invalid encryption parameters (using) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %@}
Using full identity: %@
   Public/Private encryption failed with error: %@
Invalid encryption parameters (used) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
NGM encryption failed {error: %@}
Invalid decryption parameters -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
   Public/Private decryption failed with error: %@
Using previous full identity: %@
Failed to setup RTCReporting to report EC metric { error: %@ }
Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}
Finished capturing AutoBugCapture diagnostics for decryption failure { context: %@, legacySuccess: %@, ECSuccess: %@, error: %@ }
%@ instance created with a dead file descriptor!
Created with {socket:%d}
Dealloc'ing IDSSocketPairConnection without ending the session
%@ endSession at %@!
%p: reset the stall detector
Error %d received on {socket:%d}
Remote side closed the connection, cleaning up {socket:%d}
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Remote side closed the connection, cleaning up
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending {socket:%d}
Failed to queue outgoing data - possible message fragmentation issue
Sent %ld bytes. Remaining outgoingData %lu {socket:%d}
{socket:%d} timeout, ignoring ...
got send error %d, cleaning up {socket:%d} ...
%@ removing {socket:%d} from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
Done checking for system signed in account { identifier: %@, systemAccount: %@ }
Asked to send opportunistic data {identifier: %@, service: %@, uniqueID: %@, options: %@, dataLength: %llu}
Asked to cancel opportunistic data {identifier: %@, service: %@}
Passed dice roll {destination: %@, data: %@}
Message for opportunistic data got response {identifier: %@, guid: %@, responseCode: %lu, error: %@, lastCall: %@}
Sent opportunistic message {identifier: %@, guid: %@, service: %@, accountUUID: %@, destination: %@}
Failed to find account for opportunistic send {identifier: %@, accountUniqueID: %@}
Fetched Opportunistic Send Percentage from Bag {opportunisticSendPercentage: %d}
Could not create APS Connection for session
Sending MESSAGE to %@, %@ <%@>
%@ - No account with unique ID %@ found to send a message, bailing...
My token -> %@
No destinations to send message to, ignoring...
sendMessage - using fromID %@ given aliases %@  destinations: %@
Message %@ got response code %lu error %@ lastCall %@
This Phone Continuity session supports the local message. Trying the local...
Received MESSAGE %@ from %@, %@
Received END %@ from %@, %@
Sending REINITIATE (subcommand %@) %@ to %@, %@
Bundle {isAdvertising:%@}
Bundle has no principal class
Failed to initialize bundle
Plugin class is nil
Protocol is nil
Plugin initialized successfully
Plugin does not respond to any useful messages
Plugin failed to initialize
Plugin class "%{public}s" does not conform to protocol
Replay committer told to hold block { key: %@, block: %p, dataLength: %ld }
Nil parameter given to replay commiter. Calling block now.
Error committing replay state { error: %@ }
Replay committer told to commit block { key: %@ }
Replay committer committing block { key: %@, block: %p }
Error committing replay state { key: %@, error: %@ }
Starting pending registrations...
Skipping this registration for heartbeat consideration, it is an SMS one - and the SIM is not present: %@
    => %@
   * NOT sent, forcing through the registration controller
   * Registration says it can't register, not registering: %@
   * sent
...Done
Server heartbeat hit
Skipping this registration for heartbeat consideration, it is an Apple ID one - and it apparently can't register: %@
*************** Heartbeat: We need to register now! {timeToNextRegister: %f} *********************
  => *NOT* adding pending registration: %@, we're currently registering
  => adding pending registration: %@
  => *NOT* adding pending registration: %@
Registrations pending heartbeat: %@
Updating registration heartbeat
Posting pending registration heartbeat update
Starting registration heartbeat with interval: %f
                    Time to next registration: %f
                  Setting heartbeat timer for: %f
Stopping registration heartbeat
We missed a heartbeat, we should fire
Updating heartbeats if necessary
Registration state changed, re-checking registrations
Bag reloaded, checking intervals
These differ, reseting timer!
Adding registration info to heartbeat: %@
Removing registration info from heartbeat: %@
Using random heartbeat override value of %d seconds
Using heartbeat override value of %d seconds
Non-sensical heartbeat value: %@ from server, using default: %f
Initing IDSUTunPeer %p %@
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@ uniqueID %@ shouldUseIPsecLink: %@
 Deallocing UTunPeer %p
Sending message with unexpected data protection class (%d) - using C
Priority is none for performBlock
Priority is %d - defaulting to Urgent
%@ ignoring btuuid update from %@ to %@
sendAckForMessageWithSequenceNumber: class %d priority %d
sendAckForMessageWithSequenceNumber: using connection %@
%s: self %p reporting stats for %@ %@
%s: self %p reporting stats for sockets %@
Enabling power logging for sockets {_shouldUseIPsecLink: %@}
%s: self %p Enabling power logging for transport stats
%s: self %p Will log the current transport stats and restart timers.
%@ logCurrentTransportStatsAndResetTimers shouldLog=%@, _shouldUseIPsecLink=%@
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
enable connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable connection %@.
disable cloud connection for peer %@:%p withReason %ld
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
UTUNPeer sendMessage
sendMessage: %@ priority: %@ messageType: %@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Enabling %@ Cloud Connections on this peer
_pendingCloudEnable: %@, _supportsCloudConnections: %@, _isPeerAlwaysConnected: %@
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
%@ forceOTRNegotiationForTopic is no-op when ipsec is used
Loading IDS keychain data with account %@
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
   OTR encryption failed with error: %d
   OTR decryption failed with error: %d
Retrieved opportunistic cache {cache: %@, connection: %@}
Connection not entitled to retrieve opportunistic cache -- failing {connection: %@}
RegisterDuringBuddy feature flag set to YES.  Allowing registration.
Checked whether system setup dependencies are complete { haveDependenciesCompleted: %@, accountType: %@, hasSetupCompleted: %@, isPhoneNumberAuthenticationDuringSetupAllowed: %@, isAppleIDRegistrationDuringSetupAllowed: %@ }
 SIM State says cannot register
 SIM is not inserted, cannot register
 => Checking %@
 => hit!
Registration controller starting up (%@)
*** Lockdown state is expired, not allowing registration
Returning device support registration supported: %@
System does not support SMS identification
System does not support Apple ID identification
We don't support this unknown registration type { registrationType: %d }
System does not support FaceTime
System does not support Calling
System does not support Multiway
System does not support iMessage
System does not support IDS
We don't support this unknown registration service type { serviceType: %@ }
We can't register this: %@
Registration controller register
Registration request: %@  (Environment: %@)
Cannot register, unsupported
Cannot register, invalid push token: %@
Unsupported registration on this system: %@
Cannot register, phone number registration or authentication are disabled { controlStatus: %lld }
Request to register sms identified info: %@
We can try to migrate this guy: %@
Request to register apple ID based info: %@
Sending authentication for registration for new auth token and auth cert: %@
Sending IDS authentication for registration with existing auth token: %@
Sending IDS authentication for registration with existing auth token/cert: %@
Ensuring validation checks for: %@
Request to register Home Number for info: %@
Attempting to register unknown registration type (%d): %@
This registration is missing region information, despite being already authenticated, let's fix that: %@
  => We found a good one we can pull from, let's fix ourselves using that: %@
We were told that we're done authentication here, but we have no token... bailing register
...trying to IDS Auth or Register: %@
...we didn't authenticate, and we can't ids authentcate or register. not good!
Request to unregister: %@  (Environment: %@)
Removing registration info from keychain
Failing Home Number registration because no authentication cert on registration: %@
Ignoring registration updated, registration is disabled: %@
Ignoring registration starting, registration is disabled: %@
Registration controller notify registration failure
Ignoring registration failure, registration is disabled: %@
Registration controller notify registration success
Ignoring registration success, registration is disabled: %@
Ignoring succeeded registration, registration is disabled: %@
Finished capturing AutoBugCapture diagnostics for registration failure { context: %@, sessionID: %@, error: %@ }
** Empty vetted emails, we should make sure to query them
Failed HTTP registration with info: %@       error: %d
Ignoring need for new identification, registration is disabled: %@
Ignoring failed identification, registration is disabled: %@
SMS agent requested new identification
Ignoring succeeded IDS Authentication, registration is disabled: %@
Failed IDS Authentication with info: %@ error: %d info: %@
Ignoring failed IDS Authentication, registration is disabled: %@
IDS Authentication failed - Login failed
  This was an SMS reg
This was an apple ID reg
Let's re-auth, retry %d
Too many retries, failing
Failed, retry %d
 => Added confirmed emails: %@
Home Number provision request had expired auth token, renewing {  retries: %d, registration: %@ }
We still have no vetted email response for: %@   waiting....
We still have no default profile response for: %@   waiting....
We already have a region ID, skipping query
We were told that we're done authentication here, but we have no token... not doing anything
This was just a simple auth, we're done here
Ignoring succeeded current emails request, registration is disabled: %@
 * Empty vetted emails, sending off handles gathering
 **** missing auth cert, can't send vetted email request
Empty region ID, querying initial region
Non empty region ID: %@
Not reprovisioning temporary phone because we already have an auth cert for %@
Registration Controller - sending IDS authentication: %@
Ignoring succeeded initial region query, registration is disabled: %@
Registration Controller - succeeded authentication: %@
Ignoring succeeded authentication, registration is disabled: %@
Registration Controller - succeeded region validation - registration info: %@   regionID: %@  phoneNumber: %@  extraContext: %@  verified: %@
Ignoring succeeded region validation, registration is disabled: %@
Ignoring failed authentication, registration is disabled: %@
System not setup, ignoring auth failure and not proceeding
Authentication failed. Notifying, and unregistering %@
Ignoring succeeded link handles confirmation, registration is disabled: %@
Adding registration to list of tracked registrations: %@
  => Adding registration: %@
Removing registration from list of tracked registrations: %@
Adding registration to list of active registrations: %@
Removing registration from list of active registrations: %@
Device name changed from %@ to %@
Device name was updated from %@ to %@  (Registration: %@)
  => Deferring registration for device name change, we're locked
  => Sending registration for device name change
First unlock, checking deferred registrations: %d
  => Sending deferred registration: %@
Attempting to post Home Number notification before alert { displayingAddNumberPrompt: %@, bypassOngoingPNR: %@, ongoingPNR: %@, phoneUser: %@, tempUser: %@ }
Displaying should add phone number alert
User didn't hit default button on disable phone number alert
User hit no to disable phone number alert -- ignoring
Missing MainID, Not sending IDS Authentication/Register for: %@
Missing ProfileID, Not sending IDS Authentication/Register for: %@
Missing regionID, Not sending IDS Authentication/Register for: %@
Missing regionBasePhoneNumber, Not sending IDS Authentication/Register for: %@
Sending IDS Authentication for: %@
Sending IDS Registration for: %@
Not sending IDS Registration or Authentication for: %@
removing token %@ from %@
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
Triggered auto bug capture for rate limiting {session : %@, error: %@}
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
Error retrieving data from last resort cache: { error: %@ }
Flushing peer tokens, in hopes this resolves in the next error
Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}
Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Tried to PK to default paired device!! -- failing
Tried to encrypt to nil device ID -- failing
Missing identity to encrypt with {deviceID: %@}
Missing identity to decrypt with {deviceID: %@}
Missing device encryption keys -- querying {deviceID: %@}
Device encryption query completed {success: %@, deviceID: %@}
Error committing replay state for device ID decryption { error: %@ }
Missing device decryption keys -- querying {deviceID: %@}
Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}
*** options : %@
There was an error creating the managers for IDSDSession.  Aborting...
IDSDSession::init { self: %p, uniqueID: %@, instanceID: %@ }
[!] This session will be suppressing client notifications { self.sharedState.uniqueID: %@ }
com.apple.private.alloy.phonecontinuity: set connectionCountHint to: %@
use QR directly for %@.
 self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu
Created session (%@) %@ with destinations %@
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
IDSDSession::dealloc { self: %p, uniqueID: %@, instanceID: %@ }
Destroyed session %@
didReceiveReport, broadcaster: %p for session: %@
No valid RTC reports to report
%s: session %@ connection %p
reportFirstMKMReceived: get allocbind RTC report, time of allocbind response: %f, set the duration to %d ms
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
IDSClientChannel has excessively cached too many packets. Invalidating IDSClientChannel...
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
writeToClientChannel: there is no real packet or metadata.
Added cachedData - total %lu cached client data to send
greater than threshold:  [clientChannel excessiveCachingCount]: %d
writeToClientChannel: current data cached time: %f
invalid client channel: currentTime: %f, _channelDataCachedTime: %f, dataCachedDuration: %f, clientChannelTimedout: %f
%p: writeHandler: IDSDSession %p
_checkAndSendCachedDataForClient: clear cached data time
Have %lu cached client data to send
_checkAndSendCachedDataForClient: there is no real packet or metadata
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
<%@> read returned 0 bytes errno %d
ClientChannel read error %@
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
socket %d connected to IDSClientChannel %p
ClientChannel read error %@, self.sharedState.state %d
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
got the process PID %d
kClientChannelMetadataType_ProcessIDKey should be %d byte, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
Couldn't create NSUUID for kClientChannelMetadataType_TimeDeltaBetweenFirstPacketAndMKIKey.
kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u
 kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey
Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey
Unknown metadata type: %u
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
%@: _sendingOfflineActiveParticipantInfoRequest for groupID %@ relayGroupID %@ relaySessionID %@
connectQRServer failed due to invalid parameter.
User already left group %@; don't connect
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
Notifying delegate for %@ about plugin allocation: %@
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
Sending server message QR metrics report for session %@ end reason %d
Finished sending server message QR metrics report for session %@ delivery error %@
Failed sending server message QR metrics report for session %@, delivery error %@
Connect to QR server succeeded for %@.
Completed send of join notification fanout message { groupID: %@, success: %@ }
Cannot fan out the join notification to the group, no groupID!
Not in join state, group = %@, state = %d
Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }
Starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, timeoutBlock: %@ destinations: %@ }
Not starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, destinations: %@ }
Canceling timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
Triggering early execution of timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
IPsecLink is enabled. UTun bypass: %@ service: %@, session: %@.
UTun bypass: %@ service: %@, session: %@.
openSocketToDevice deviceID %@, self.sharedState.useQRDirectly %@, _isFaceTime %@
open socket for session, byPassUtun: %d
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
sessionStartWithSocketDescriptor socketDescriptor %d, bypassUtun: %@
set initial link type %d for session %@.
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
%s IDSSessionID is nil!
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
Cleanup session: %@
REPORT RTC: %@
Releasing the client channel %p
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
disconnectGlobalLink failed with error %@
Reconnect initiated By TU
Sending END to %@, %@ <%@>
Ending session with data
Ending session
notifyLeaveToGroup and sessionDidLeaveGroup for group session %@
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantID = %@
Resetting preferences for service %{public}@
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
Made options to open socket %@
Looking for device unique ID in: %@
  => Push token: %@
    => Found unique ID: %@
  => No unique ID found
Looking for device token in: %@
  => No token found
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Enabling audio ? %@
Muting ? %@
Setting preferences %@
%@ session did start %@ with error %@
%@ session did stop with error %@
Session: %@ received error: %@
Invalid error type posted to session: %@   error: %@    class: %@
Ignoring error, we're already dead anyway!
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> add the new QR event for the RTC report: %@
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectUnderlyingLink:%d linkUUID:%@ localAttributes:%@ remoteAttributes:%@
%s incorrect attribute length: %d
<%@> need a client channel to send the event kClientChannelMetadataType_LinkConnected
destinationsContainFromID: %@ is not in the destinations %@
Ignored updateMembers since destinations have not been changed.
Updated destinations for group %@ to %@ (triggeredLocally %@)
Resetting keys for group %@ and sending membership change event.
setGroupStreamInfo: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@, sessionInfo:%@, streamInfo.subscribedStreams:%@
Client data blob size is greater than push size limitation which is %ld and groupID: %@
Participant query in process or defaults are not set for hardcoded QR session info, self.sharedState.groupID: %@, self.sharedState.destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
Received the new MKM %lld milleseconds after the membership change event for group %@
participant-id to push token mapping changed for sessionID: %@, participants: %@, plugins: %@
Sending the session info request to update the active participant list...
Allocation failure for session %@, status = %d, code = %d
Couldn't get the URI from the QRAllocate response. We'll get the URI from push tokens...
Failed to get URI from QR allocate response
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate, enableQuickRelay: %d, useQRDirectly: %d
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
 invalid port %d
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
NLDEBUG: SWIZZLE CALLED!
Quit - notifying about shutdown
Quit - shutting down daemon
Quit - goodbye!
*** Clearing ID status cache ***
*** Reloading Logging Settings ***
Unhandled signal: %d
Failed to set user dir suffix: %{darwin.errno}d
IDSAgent exception caught on main thread: %@
Finished acks for GUID %@ success: %@ error: %@
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
Finished sending GUID %@ success: %@ error: %@
We're not loaded; ignoring save to disk for cache %@
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@ => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Error during Decoding %@
Sent missing message metric to server { success: %ld, guid: %@, service: %@, reason: %ld, additionalInfo: %@ }
Cannot get participantsForGroupID, no groupID!
participantsForGroupID %@ are %@
notify Leave To Group
Server Bag provided us with a send timeout of %f 
Sending group status notification fanout message { GUID: %@, command: %@, commandContext: %@, waitForMadridAcks: %@, completionBlock: %@ }
Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }
Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Sent messageID %@ to the destination %@ command %@ (account %@, fromID %@, message %@)
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
Dropping group session participant update due to groupID mismatch { type: %lu, groupID: %@, groupUUID: %@ }
processIncomingParticipantUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Dropping group session participant update due to membership mismatch { type: %lu, fromID: %@, destinations: %@ }
Couldn't pass the membership change event to clients. There is no session for group %@.
processIncomingParticipantDataUpdateMessage: Dropping due to groupID mismatch { type: %lu, groupID: %@, groupUUID: %@ }
processIncomingParticipantDataUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Dropping group session participant data update due to membership mismatch { type: %lu, fromID: %@, destinations: %@ }
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Broadcasting receivedGroupSessionParticipantDataUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast
Failed type check! {key: %@, class: %@}
plain: %@, encrypted: %@, decrypted: %@
plain: %@, encryptedAgain: %@, decryptedAgain: %@
Received nearby change to %@ for device with uniqueID %@
Received connected change to %@ for device with uniqueID %@
Received cloud connected change to %@ for device with uniqueID %@
*** Clearing traffic ***
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
     Server daily global%@ budget is: %@   Current count is: %@
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     Server daily budget is: %@   Current count is: %@
     **** we are over budget
     No budget specified
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
isQuickSwitching set to %@
We're already switched to (cbuuid %@), ignoring request to switch...
Forcing QuickSwitch {activeCBUUID: %{private}@, cbuuid: %{private}@}
Initiating QuickSwitch to (cbuuid %@)
Finishing up switching
QuickSwitch initiated with error: %@
QuickSwitch time %f
Resetting communication before QuickSwitch {shouldDeactivatePairedDevices: %{public}@}
Removing the keychain and in-memory data used for OTR communication.
Resetting all OTR sessions to allow communication with the new active paired device.
Calling completion block to finish switching
beginning watch<>phone account synchronization
No readable saved syncing services -- returning
Loaded syncing services {serviceInstances : %@}
Should continue syncing preferred account
Should continue fetching remote account
Should continue syncing tinker device info
Stopping all pending account sync actions { pending: %@ }
Sent account sync message (message ID: %@) (success: %@)
Note should sync all services
Not syncing preferred account because device %@ is not paired
Not syncing preferred account because device %@ is tinker paired
Note should sync preferred account, Syncing iMessage account now
%s: invalid iMessage account %@
Syncing preferred account for iMessage {guid: %@, uniqueID: %@}
Note should sync preferred account, Syncing FaceTime account now
%s: invalid FaceTime account %@
Syncing preferred account for FaceTime {guid: %@, uniqueID: %@}
Not fetching remote account info because device %@ is not paired
Not fetching remote account info because device %@ is tinker paired
Fetching remote account info {servicesToSync: %@}
Received remote account information {accountInfoMapKey: %@}
Not syncing tinker info because device %@ is not paired
Not syncing tinker info because device %@ is not tinker paired
Not syncing services because device %@ is not paired
Not syncing services because device %@ is tinker paired
Syncing account changes to paired device {serviceIdentifier : %@, guid: %@, accountInfo : %@}
Constructing RA response dictionary for services: %@
Skipping %@, paired device doesn't support syncing of that service
Adding additional phone numbers to sync {phoneNumbersToAdd: %@}
Setting callerID for Apple ID account to phone number {phoneNumber: %@}
Trying to sync only phone number account, but this is disallowed by the service. { service : %@, accountInfo : %@ }
Transmitting phone number
Syncing tinker device info to paired device { guid : %@, uris : %@, pushToken : %@ }
Don't have tinker device info to sync { token : %@, accounts_count : %ld }
Incoming account sync message {command: %@, message: %@}
Received message without command -- dropping
Received account sync incoming Tinker device info while current device is not Tinker paired
Received account sync incoming preferred account info while current device is not traditionally paired
Unrecognized command -- dropping
Synchronizing accounts {service: %@, accountInfo: %@}
No accounts, disabling all
This is an AppleID account on an iCloud based service, not disabling account %@
Disabling account %@
This is an AppleID account on an iCloud based service, not removing account %@
Removing account %@
No accounts in account info, ignoring...
Found valid phone number account %@
Retrieved phone number alias %@
Can't find eligible service, bailing { serviceName : %@, shouldNotSyncPhoneNumberAccounts: %@ }
Didn't find a local account, setting one up
Updating local account {localAccount: %@}
Account info for %@ is not registered, ignoring...
This is an iCloud based service, ignoring Apple ID account
Found valid apple ID account, cleaning up sentinel alias
Found valid Apple ID account, creating real account with remote info %@
  Creating a linked account: %@
Found existing account for service %@ and loginID %@
Incoming preferred account update {incomingDisplayName: %@, incomingAccountInfo: %@}
Service: %@ also wants to use the iMessage CallerID, attempting to update it
Service: %@ wants to use the FaceTime CallerID, attempting to update it
Incoming tinker device info { uris: %@, pushToken: %@ }
Setting expiration timer for temporary user %@ with phase %ld
Removing expiration timer for temporary user %@
Expiration timer fired for temporary user %@
Failed to get name for full account identity cluster {cluster: %{public}@}
Fetching cluster from keychain
!setState keychainClusterIdentifier=%@
Deserialized cluster
Failed to create fullClust from clusterData {clusterData: %{private}@, error: %{public}@}
Deserialized dictionary missing clusterData {deserialized: %{private}@, error: %{public}@}
Unexpected object type in deserialized dictionary {deserialized: %{private}@, error: %{public}@}
Failed to deserialize group keychain data {data: %{private}@, error: %{public}@}
Failed to get keychain data {identifier: %{public}@, error: %{public}@}
Storing cluster in Keychain {fullCluster: %{public}@}
Stored cluster in keychain {fullCluster: %{public}@}
Failed to store cluster in keychain {error: %{public}@}
Failed to serialize cluster data {fullCluster: %{public}@, dictionary: %{private}@, error: %{public}@}
Failed to create data from cluster {fullCluster: %{public}@, error: %{public}@}
Failed to store data in keychain -- Not in Circle {error: %{public}@, identifier: %{public}@}
Removing cluster from keychain
Failed to remove item from keychain {identifier: %{public}@, error: %{public}@}
Failed to create cluster from data {error: %{public}@, data: %{private}@}
Missing legacy identity data from -[<IDSClientDataRegistrationKeyManager> publicMessageProtectionIdentityDataToRegisterWithError:] -- {error: %{public}@, publicIdentityData: %{private}@}
Registering without an NGM key { hasIdentityData: %@, hasPrekeyData: %@, hasRegIdentity: %@, hasUnregIdentity: %@, keychainError: %@, serializationError: %@, generationError: %@, rollingError: %@, dataToRegisterError: %@ }
Finished capturing AutoBugCapture diagnostics for EC key loading failure { context: %@, keyLoadingError: %@, error: %@ }
Adding public key to client data: %@
Missing ngm public identity data from -[<IDSClientDataRegistrationKeyManager> publicMessageProtectionIdentityDataToRegisterWithError:] -- {error: %{public}@, publicNGMIdentityData: %{private}@, publicNGMPrekeyData: %{private}@, publicIdentityData: %{private}@ }
Not adding EC keys for serviceType: %@
Web Tunnel Message Completed With Respone Headers %@
Constructed registration account status metric { metric: %@ }
Checking if account is candidate for force repair {isUserDisabled: %@, isRegistered: %@, account: %@}
Waiting for migration, not firing timer
Under first lock, not firing timer
Repair timer fired: %@
Bypassing repair -> Safeview?
Bypassing repair -> hasHardDeregistered
Waiting on accounts to load, the account controller isn't ready yet
Notified of registration success for service: %@   registration: %@   account: %@
Kicking phone number accounts repair
Kicking Apple ID iCloud based accounts repair
Kicking Apple ID non-iCloud based accounts matching dsID: %@ repair
   => This was an SMS registration, let's see what we should repair
 => Failed account, let's see if we should kick it (Registration Error: %d)
 => Matching Apple ID account on this service is enabled: %@
 => Kicking SMS based account: %@
 => Kicking SMS based linked account: %@
 => Not kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based linked account: %@
 ** Tried to repair account: %@
 => Done repair attempt
   => This was an AppleID registration, let's see what we should repair
 => DSIDs match to %@, kicking for repair %@
 => Kicking Apple ID based account: %@
 => Kicking Apple ID based linked account: %@
Waiting for migration, not repairing accounts
Account repair timer fired
Cleaning up dead keychain items
Cleaning up keychain items for service: %@
 => Done
Checking disabled account {serviceIdentifier: %@, shouldRepair: %@, registrationError: %lld}
 => Enabled, account uniqueID: %@, service name: %@
 => Enabling disabled account, and registering - we're allowed to repair: %@, service name: %@
 => Disabled, skipping: %@, service name: %@
 *** Done
   Checking account for deletion: %@
   Account is primary, it should not be deleted
  => Account does not appear to be primary, disabling it, and deleting it  (%@ <> %@)
   Checking account registration status: %@
   Not attempting repair service/account pair {registrationError: %ld, account: %@}
   Account isn't enabled or registerd -- enabling {isEnabled: %@, unregistered: %@}
   Account appears to be in good form: %@
  => Account does not appear to be primary, we shouldn't be here...  {primaryUserName: %@, loginID: %@, hasActiveAppleIDBasedAccounts: %@}
   Not enabling account due to irreparable registration error {registrationError: %ld, account: %@}
   Account isn't enabled and/or registered -- enabling {isEnabled: %@, unregistered: %@}
  => We have no active SMS registrations, skipping
   Account isn't enabled, enabling local account
 => We have no active apple ID based accounts for service: %@
Creating new account based on existing account with service %@ login ID %@
 => No other signed in AppleID accounts, skipping
Created new iTunes account based on system account { service: %@, account: %@ }
   => Has SMS Account active: %@
Repairing iTunes based accounts if needed (Primary account: %@)
iTunes isn't signed in, no repair needed, signing out
iTunes is signed in -- ignoring request to sign out { systemAccount: %@ }
Repairing iCloud based accounts if needed (Primary account: %@)
iCloud isn't signed in, no repair needed, signing out
iCloud is signed in -- ignoring request to sign out { systemAccount: %@ }
Current repair interval: %f multiplier: %ld index: %ld max: %f
Not setting up repair (registrationSupported: %@) (supportsSMSIdentification: %@)
Loaded last repair date %@
We've missed the next repair date %@, repairing now...
Loaded initial repair date %@
Generated inital repair date %@
Next repair date %@
Resetting phone number repair counter
Phone repair timer hit
 => We sent too many SMS, not retrying, disabling account
 => Garbage SMS signature, disabling
 => This appeared to be a rate limit error, re-registering
 => This appeared to be a server or connectivity error, re-registering
 => We need a new signature (server authentication failed), re-registering
 => We were missing auth credentials, re-registering
 => Not retrying for error: %d, disabling account
 => Default error: %d   disabling
 => Unregistered account, let's see if we can register it
 => account has no vetted aliases, and it's never registered, let's ignore it
 => Unknown account status, let's disable it
 => Authenticated, kicking a register
 => %@
 => *** Other status: %d
setHasSpaceAvailable %@
didReceiveData length %luB
Received data too big (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
Bonjour request to send local message {guid: %{public}@, topic: %{public}@, deviceIDs.count: %{public}@ command: %{public}@}
Bonjour send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
Bonjour did send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour failed to send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour did finish sending message {guid: %{public}@, topic: %{public}@, sentDeviceIDs.count: %{private}@
Bonjour failed to send message to any recipient {guid: %{public}@, topic: %{public}@, deviceIDs: %{private}@}
Bonjour received message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
%@: control message: hello cannot decode controlChannelVersion
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSDRegistrationPushManager now tracking registered account {accountID: %@}
IDSDRegistrationPushManager stopped tracking registered account {accountID: %@}
IDSDRegistrationPushManager is now accepting incoming pushes
IDSDRegistrationPushManager is no longer accepting incoming pushes
Device received sysdiagnose request push {error code: %@, serverErrorDetail: %@, userFacingMessage: %@}
Ignoring sysdiagnose request push (not enough time has passed since last prompt) { now: %f, lastPromptTime: %f, delta: %f }
Device received request for prompt {title: %@, message: %@, default button: %@, default url: %@, alternate button: %@, alternate url: %@}
Ignoring request for prompt (not enough time has passed since last prompt) { now: %f, lastPromptTime: %f, delta: %f }
Registration push manager received registration push
Device received registration push {style: %@, userID: %@, service: %@}
System not setup -- ignoring registration push
Found matching candidate account for registration push {account: %@}
Unhandled action in registration push message {action: %ld}
Registration push manager re-identify
Re-identifying accounts in response to registration push
We can't re-identify a temporary account. Nuking Home Number user %@
Registration push manager re-provision
Re-provisioning accounts in response to registration push
We can't re-provision a temporary account. Nuking Home Number user %@
Registration push manager re-register
Re-registering accounts in response to registration push
Registration push manager repair registration
Repairing registration on accounts in response to registration push
Registration push manager validate credentials
Validating credentials in response to registration push
Received validate credentials response {userID: %@, status: %@, origin: %@, message: %@}
Validate credentials returned an error -- taking no action {status: %@}
Updating registration control state { registrationType: %lld, toState: %lld, err: %d }
Registration control state can't be loaded because the keychain is upgrading { err: %d }
Registration control state item was not present in the keychain
Registration control state can't be loaded because of a keychain error { err: %d }
Loaded registration control state { registrationType: %lld, state: %@, error: %@ }
Unexpected deviceIdentity class {identity: %{public}@}
Unable to get group.publicRepresentation {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Unable to create group signature {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Saved group to group server {groupID: %{private}@}
Saved group to group server { groupID: %{public}@ }
Failed to save group to groupServer {pg: %{private}@, publicGroupRepresentation: %{private}@, signature: %{private}@, forwardingTicket: %{private}@, groupServerError: %{private}@}
responseEngram %@ responseGroupID %@ error %@
Got groups {%@ %@ %@ %@}
Fetched Entry from GroupServer {entry: %{public}@}
Fetched Group from GroupServer {groupID: %{public}@}
Failed to set groupID on created group {entry: %{public}@, group: %{public}@, groupID: %{public}@, error: %{public}@}
Failed to create group from server reponse entry {entry: %{public}@, publicSigningIdentity: %{public}@, error: %{public}@}
Failed to create fetched group, could not create publicSigningIdentity {deviceIdentity: %{public}@, error: %{public}@
Unexpected sponsot accountIdentity {sponsorPublicAccountIdentity: %{public}@}
No sponsor pair {entry.publicKeyData: %{public}@, keyToSponsorPairMap.lenth: %{public}@}
got groups %{public}@
Groups returned from server don't contain expected group {groupID: %{public}@, entries: %{public}@, resultGroup.applicationData: %{private}@}
Failed to get group {groupID: %{public}@, error: %{public}@}
group->groupPublicData -- Start {group: %{private}@}
Failed group->groupPublicData -- unexpected accountIdeneity class {groupContext.accountIdentity: %{public}@, group: %{private}@}
Failed group->groupPublicData -- unexpected cypher {group.cypher: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create publicGroupData {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create signature {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create data from entry {error: %{public}@, group: %{private}@}
group->groupPublicData -- Success {publicDataRepresentation.length: %{public}@}
group->groupPublicData -- Success {publicDataRepresentation: %{private}@}
groupPublicData->Group -- Start {data: %{private}@}
Failed groupPublicData->Group {error: %{public}@, data: %{private}@}
Failed group->groupPublicData -- unexpected deviceIdentity class {groupContext.accountIdentity: %{public}@, data: %{private}@}
Failed group->groupPublicData -- couldn't get pair from groupData {error: %{public}@, entry: %{private}@}
Failed group->groupPublicData -- no participants {pair: %{private}@}
Failed group->groupPublicData -- Failed to create group {error: %{public}@, entry: %{public}@, pair: %{public}@, sponsor: %{public}@}
Failed group->groupPublicData -- Unexpected sponsor accountKeyClass {sponsor: %{public}@}
group->groupPublicData -- Success {group: %{private}@}
Cypher was not of the expected type, this is a programmer error {cypher : %{public}@}
Unexpected class for deviceParticipantPublicKey {publicKey: %{public}@, participant: %{private}@
Failed to create GroupServerEntry from publicDataRepresentation -- failed to deserialize {error: %{public}@, data: %{private}@}
Failed to create GroupServerEntry dataRepresentation -- Failed to serialize {error: %{public}@, dictionary: %{public}@}
Unable to convert CloudKit record to device record {cloudKitRecord: %@, deviceData: %@, deviceMetadata: %@}
Unable to convert device record to CloudKit record {pushToken: %@, deviceRecord: %@}
Cached record zone exists -- continuing without zone fetch {cachedRecordZone: %@}
Completed CloudKit zone fetch {zoneID: %@, recordZonesByID: %@, fetchError: %@}
CloudKit zone not found -- creating it
Completed CloudKit zone modification (save) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}
Failed to create CloudKit zone {modifyError: %@}
Successfully created CloudKit zone
Starting CloudKit operation to create KT zone {operation: %@}
Failed to query CloudKit for available zones {error: %@}
CloudKit zone exists -- no need to create it
Starting CloudKit zone fetch {operation: %@}
Determining account eligibility for device-to-device encryption
Account device-to-device encryption eligibility task final block called {timedOut: %@}
Starting device-to-device encryption eligibility task with timeout {timeoutInSeconds: %f}
Starting CloudKit container account info fetch
Completed CloudKit container account info fetch {supportsDeviceToDeviceEncryption: %@, deviceToDeviceEncryptionStatus: %ld, accountInfo: %@, accountInfoError: %@}
Upserting trusted device record {deviceRecord: %@}
Trusted device upsert task final block called {timedOut: %@}
Starting trusted device upsert task with timeout {timeoutInSeconds: %f}
Last known successful upsert device record is identical to the current request -- short-circuiting without performing upsert {pushToken: %@}
Verifying encryption prerequisites for trusted device record upsert
Device to device encryption is not currently available for this CloudKit container -- not upserting trusted device record
Device to device encryption is not currently able to be determined for this CloudKit container -- not upserting trusted device record
Zone creation failed -- not upserting trusted device record
No push token provided -- not upserting trusted device record
Failed to create CloudKit record from device record {deviceRecord: %@}
Completed CloudKit save record operation {savedRecords: %@, deletedRecordIDs: %@, operationError: %@}
Failed CloudKit save operation for trusted device {error: %@}
CloudKit save operation for trusted device succeeded
Starting CloudKit operation to modify (save) KT record {operation: %@}
Nuking key transparency device records
Key transparency device record nuke task final block called {timedOut: %@}
Starting key transparency device record nuke task with timeout {timeoutInSeconds: %f}
Deleting zone {zoneID: %@}
Completed CloudKit zone modification (delete) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}
Failed to delete CloudKit zone {modifyError: %@}
Successfully deleted CloudKit zone
Starting CloudKit operation to delete KT zone {operation: %@}
Fetching key transparency device records
Key transparency device record fetch task final block called {timedOut: %@}
Starting key transparency device record fetch task with timeout {timeoutInSeconds: %f}
Cache miss for key transparency device records -- starting fetch {promise: %@}
Updated cached promise for key transparency device records {promise: %@}
Setting timer to clean up cached promise for key transparency device records {promise: %@, cleanUpDelay: %f}
Clearing cached promise for key transparency device records {promise: %@}
Cache hit for key transparency device records {promise: %@}
Verifying encryption prerequisites for trusted device records fetch
Device to device encryption is not currently available for this CloudKit container -- not fetching trusted device record
Zone creation failed -- not fetching trusted device record
Fetched CloudKit record of trusted device {record: %@, device: %@, deviceMetadata: %@}
Completed CloudKit query for trusted devices {queryError: %@, cursor: %@ results: %@}
Found device data from CloudKit record {device: %@, deviceMetadata: %@}
Failed CloudKit query for KT loggable data {error: %@, query: %@}
Starting CloudKit operation to query KT records {query: %@, operation: %@}
Failed to weak link %@ from %@!
Unsupported schema version: %@
An unnecessary paired device keychain migration was attempted.
System is shutting down, not creating daemon
identityservicesd launched (%@) user: %d
identityservicesd launched: (%@) user: %d
    (build time %s %s)
Loading services
Done loading services
Bringing up capabilities
Bringing up restrictions
Got id query completed with updates %@ fromURI %@ service %@ success %@ error %@
Adding identity to last resort cache for token %@
Error adding identity to last resort cache { token: %@, error: %@ }
Opening up the grant MIG port
Opening up the NSXPC Interface
Now accepting query grants, setup complete
Found default to clear IDS state on launch
Error cleaning last resort cache { error: %@ }
Conference Prefs %@
IDS Prefs %@
IDSD Prefs %@
Resetting preferences to 0 for all services
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
IDSAgent took %f seconds to launch
Service info: %@
Enabled accounts info: %@
Dependent devices info: %@
Linked devices info: %@
Active device uniqueID: %@
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
Exception generating setup information for listener: %@
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Tried to remove nil listener object
Removing listener ID: %@
Removed Apple Care listener
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
Starting push handling with services %@   topics: %@
Updating push handling with services %@  topics: %@
Updating local push handling with topics: %@
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
All targets for broadcast %@
Broadcast Priority: %d Service: %@ 
Broadcast ID: %lld
Broadcast: outgoing generic notification %lld
Working on outgoing broadcast
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: done working on outgoing notification id %lld
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
Entitling portName %@ for all services %@
Granting access %d to listener: %@ pid: %d givenEntitlements: %@ parsedEntitlements: %@
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
%s: received client request to change notification services from %@ to %@ 
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
closesocket [%@]
Broadcasting delivery stats to client
broadcasting tinkerDeviceAdded on %@
broadcasting tinkerDeviceRemoved on %@
broadcasting tinkerDeviceUpdated on %@
IDSDaemonMIGInterface auth port died: %@
IDSDaemonMIGInterface: Could not create server with name: %@
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
Port name request for: %@ from pid: %d granted: %@
Incoming file descriptor request
updateService: %{public}@, withPreferences: %{public}@.
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
Received update message: %@
GUID %@ Uploading data as attachment for token: %@
GUID %@ Finished sending attachment. Cleaning up temporary file.
GUID %@ Message to send per destination:
accountIdentitiesClusterForRegistration -- start
Account identity cluster election failed {error: %{public}@}
Tried to get account identity cluster with device not in keychain sync circle {error: %{public}@}
Engram inactive -- not fetching {error: %{public}@}
Existing account identity cluster fetch failed {error: %{public}@}, seal: %{public}@
Tried to get account identity cluster with Engram disabled {error: %{public}@}
existingFullDeviceIdentity -- start
Failed existingFullDeviceIdentity -- missing cluster {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain item not found {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain error getting device identity {error: %{public}@}
Failed getExistingFullDeviceIdentity -- missing fullAdminIdentity {error: %{public}@, cluster: %{public}@}
Failed existingFullDeviceIdentity -- missing publicAdminIdentity {error: %{public}@, fullAdminIdentity: %{public}@}
Failed existingFullDeviceidentity -- failed to create deviceIdentity {error: %{public}@, publicAdminIdentity: %{public}@, data: %{private}@}
existingFullDeviceIdentity -- success {deviceIdentity: %{public}@}
Notifying Engram key store that identities did update {listeners: %@}
IDS is not connected, do not send monitoring message.
Connectivity monitor %@ got response %ld with error %@
Reunion: %s services: %@
ReunionSync has entitlemnt for non-empty service list {entitlement: com.apple.private.ids.prefer-infrawifi, services: %{public}@}
ReunionSync require entitlement for non-empty service list {entitlement: com.apple.private.ids.prefer-infrawifi, services: %{public}@}
control channel simulating decryption failure ############### - close socket / call receive handler
UTunController control channel for [%@] connected for {socket:%d} read (getsockopt=%d error=%d: %s)
control channel receiving control message on {socket:%d} ...
UTunController control channel for [%@] disconnected on {socket:%d} recv: errno=%d: %s
UTunController control channel for [%@] disconnected on {socket:%d} recv: connection closed
control channel failed to decrypt (%s) of control channel data: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
Dispatch receiveHandler
receiveHandler is being called, so ignore this one
control channel decrypted (%s) new message (%@, size=%lu  data: %@) (from %lu)
control channel corruption detection heuristic hit - resetting
UTunController control channel for [%{public}@] connected for write {socket:%d} (getsockopt=%d error=%d: %s)
control channel sending control message on {socket:%d} ... (have %lu)
UTunController control channel for [%@] disconnected on send {socket:%d}: errno=%d: %s
control channel sent 0 bytes on {socket:%d} - try again later (%d)
control channel sent %ld bytes on {socket:%d} (%lu left) (s:%d)
control channel finished sending bytes but no message to remove
control channel finished sending bytes no more message send pending
control channel cannot use nil connection
control channel connect ready for nw_connection (%p) %@ {socket:%d}, event error: %@, deviceUniqueID[%{private}@]
control channel connect ready but connection already canceled - exit without TPAddSocket
control channel fail;ure/invalid event but connection already canceled - exit without causing additional cleanup
control channel connection event %s for nw_connection (%p) %@ {socket:%d} event error: %@, deviceUniqueID[%{private}@]
control channel connection %@ canceled, _connection %@, _canceledConnection %@
gatherDataToInvestigate_59608320: connection: %@, _connection: %@
control channel _cancelConnectionAndResetDataConnections _connection %@, _canceledConnection %@
control channel _cancelConnectionAndResetDataConnections missing _connection!
Clearing %@
control channel suspending {socket:%d} (%d) awaiting default paired encryption negotiation
control channel encrypted (%s) new message (%p, size=%lu original size=%u  data: %@) (_sendingPriorityMessage: %d)
control channel failed to encrypt (%s) message [%@] error: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
Handle Fairplay authentication failure...
processOTRNegotiationMessage: totalLength: %u, less than 4
got control message: invalid OTR version number: %d.
control message: OTRNegotiation cannot decode token
processOTRNegotiationMessage: totalLength: %u, dataBytesLeft: %lu
control message: OTRNegotiation cannot decode negotiation data
got control message: OTRNegotiationData (%uB) for %@, count:%08x
IDS Provision Temporary Phone response: %@
Unparseable Home Number expiration: %@
%@ - %@
Could not split the profileId in order to send only the numerical part to AuthKit. profileId: %@
DSID NSNumber extracted from the profile id is null. profileId: %@
Caching object {key: %{private}@, object: %{private}@}
Evicting object {key: %{private}@
Delegate return NO to shouldEvict -- Bail {key: %{private}@}
Tried to evict object that is not in cache {key: %{private}@}
Eviction timer did start {interval: %.6f, leeway: %.6f
Stop eviction timer if empty
Not stopping eviction timer {backingStore.count: %ld}
Stopping eviction timer {backingStore.count: %ld}
Evicting items {currentDate: %{public}@}
Evicting item {key: %{private}@, evictionDate: %{public}@}
Not evicting item {key: %{private}@, evictionDate: %{public}@
Delegate returned NO shouldTTLCacheEvictExpiredItems -- Bail
Cache miss {key: %{private}@
Delegate replace cached object {key: %{private}@, previous: %{private}@, replacement: %{private}@}
Replacement object is nil {key: %{private}@}
Extending TTL for fetched object {key: %{private}@, oldEvictDate: %{public}@, newEvictDate: %{public}@
Got number of broadcast cache MKM bag value {key: %@, value: %u}
Couldn't get broadcast cache MKM bag value, using default value {key used: %@, value: %u}
Created group MkM cache { self: %@ }
Resetting group MkM cache { self: %@ }
Resetting remote MkM cache { self: %@ }
Noting received MkM collection in MkM cache { self: %@, collection: %@ }
Done noting received MkM collection in MkM cache { self: %@ }
Number of peer MkM to broadcast is over maximum permitted value -- introducing sampling { cachedCount: %lu, maximumCountToBroadcast: %u }
Adding next local MkM to collection to broadcast { nextLocalMkM: %@ self: %@ }
Adding remote MkM set to collection to broadcast { remoteMkMSet: %@, self: %@ }
Returning MkM collection to broadcast { destinationURI: %@, shouldIncludePeerKeys: %@, collection: %@, self: %@ }
Starting automatic cache reset timer if needed { self: %@, resetInterval: %f, inFlightResetBlock: %@ }
Automatic cache reset timer fired { sself: %@, resetBlock: %@ }
Initializing validation session { self: %@ }
Activating validation session { self: %@, validationData: %@, serverKey: %@, scoringNonce: %@ }
Signing data using validation session { self: %@ }
Scoring device within validation session { self: %@ }
Invalidating validation session { self: %@ }
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids/registration/account-controller/state
Current system account state { iCloudAccount: %@, iTunesAccount: %@ }
Current IDS device state { deviceName: %@, model: %@, productName: %@, productVersion: %@, build: %@, pushToken: %@, pushIdentity: %@, idsUniqueID: %@, prototypeMode: %@, environment: %@ }
Current IDS system monitor state { isSetup: %@, isUnderDataProtectionLock: %@, isUnderFirstDataProtectionLock: %@, systemIsShuttingDown: %@ }
Current IDS message protection state { publicMessageProtectionData: %@ }
Current IDS server bag state { serverBag: %@, isLoaded: %@, isLoading: %@, isServerAvailable: %@, environment: %@ }
Current IDS service capability state { regionInfo: %@, iMessageSupported: %@, faceTimeAudioSupported: %@, faceTimeMultiwaySupported: %@ }
Current IDS phone number validation state { stateMachines: %@ }
Current IDS user store state { userStore: %@ }
Current IDS phone profile state { isPNRSupported: %@, SIMs: %@, selectedTelephonyLabelID: %@ }
Current IDS accounts list:
Current IDS account info dictionaries:
  * Device Name: %@    Service: %@     Hardware: %@    Token: %@   Unique ID: %@   Linked URIs: %@   Device Data: %@   Sub-services: %@   Identities: %@   Client data: %@   public key: %@ HSA trusted: %@
Hard deregister requested
Hard deregister complete, shutting down daemon
Triggering final deregister
Account with unique ID %@ already removed, ignoring...
Tried to remove a nil account, ignoring...
Tried to remove ad hoc account directly, ignoring... { uniqueID: %@ }
Tried to add a nil account, ignoring...
Account with unique ID %@ already added, ignoring...
Adding account %@
Delaying broadcast for unprovisioned temporary account %@
Broadcaster for account added
Tried to add a nil primary account, ignoring...
Tried to add ad hoc account directly, ignoring... { uniqueID: %@ }
Primary account with unique ID %@ already added, ignoring...
  ** Found existing matching account, removing: %@
Removing linked account: %@
Client requested add account with unique ID %@ (Environment: %@)
Client requested remove account with unique ID %@ (Environment: %@)
Force removing account {account: %@}
Tried to disable a primary account with no unique ID, ignoring...
Tried to disable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to disable ad hoc account directly, ignoring... { uniqueID: %@ }
Account with unique ID %@ is already disabled, ignoring...
Tried to disable an account with no unique ID, ignoring...
Tried to disable an account we don't know about, ignoring...
Disable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
Clearing service's cache {serviceIdentifier: %@}
Tried to enable a primary account with no unique ID, ignoring...
Tried to enable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to enable ad hoc account directly, ignoring.. { uniqueID: %@ }
Tried to enable a restricted account, ignoring.. { account: %@ }
Account with unique ID %@ is already enabled, ignoring...
Tried to enable an account with no unique ID, ignoring...
Tried to enable an account we don't know about, ignoring...
Tried to enable an account with unsupported type -- ignoring and disabling... { serviceType: %@, accountType: %d }
Enable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
 Will disable similar account with accountID: %@
   Forcing account to disable: %@
Client requested enable account with unique ID %@ (Environment: %@)
Client requested disable account with unique ID %@ (Environment: %@)
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
Checking %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
Account matches!
Unknown myID type -- type must be a valid domain { myID: %@ }
  => Found **extra** account %@, deleting...
  => Found **mismatched** account %@ ID %@, deleting...
  => Found existing account %@
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
 => Creating a local account for service %@
Setting up local accounts
Finished setting up local accounts
Refreshing local accounts
Cleaning up local account %@
Cleaning up account for local service %@
Using %@ to trigger a re-register
One of the local accounts was registered in the cloud, triggering a re-register to update
Starting local setup
Stopping local setup
 * Tried to setup ad hoc account directly %@, ignoring...
 * No adhoc services for %@, ignoring...
 * Setting up adhoc accounts for %@
  => Found **extra** adhoc account %@, deleting...
  => Found **mismatched** adhoc account %@ primary ID %@, deleting...
  => Found existing adhoc account %@
  => Created ad hoc account %@
  => Updating primary account info for %@
  * Enabling account: %@
  * Disabling account: %@
  => Triggering a re-register for primary account
 current service names %@ new service names %@
Setting up ad hoc accounts
 => Done setting up ad hoc accounts
Setting up linked accounts, if necessary
 Service: %@  has linked services: %@
 We already have linked accounts, let's just double check the activation
 * They're not the same, let's fix that
 * Enabling account: %@
 * Disabling account: %@
  ... and enabling it
 => Done setting up linked accounts
Not importing legacy accounts, we've already done this
Importing from domain %@ => %@
Skipping service import: %@, we already have accounts: %@
Legacy Keys: %@
Legacy Preferences: %@
  => Nothing interesting in the accounts, moving along
Importing accounts...
Importing account: %@
Login ID: %@, new login: %@
Exception migrating legacy accounts { service: %@, exception: %@ }
Migrating legacy account found no enabled accounts { legacyDomain : %@ }
Persisting %@ accounts
Deleting legacy account prefs {path: %@, success: %@, error: %@}
SU cleanup
Scheduling a re-register in %d seconds
Re-register timer hit
We still need to re-register, triggering it now...
We picked %@ to re-register
We've already re-registered, ignoring...
We found a phone number alias on the iMessage account, triggering GDR request for %@
We found a phone number alias on the FaceTime account, triggering GDR request for %@
All services to remove: %@
Setting up local
Not setting up local
Dropped aliases { count: %@ }
Donor accounts { count: %@ }
Adding %@ to %@
Loaded services { count: %@ }
We already have an existing account with for this uniqueID -- not loading { uniqueID: %@, existingAccountInfo: %@, newAccountInfo: %@ }
Failed to create account { uniqueID: %@, service: %@, accountInfo: %@ }
Tried to load account on a device that does not support this service/account type -- dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Tried to load a phone number account for a service that does not support phone number accounts -- dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Loaded accounts { count: %@ }
Enabling accounts { accounts: %@ }
Performed one time user intent migration on upgrade
Bad preference domain { service: %@ }
Defaults dictionary loaded { domain: %@, accounts: %@, enabledAccounts: %@ }
Failed to create account { service: %@, uniqueID: %@, dicitonary: %@ }
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
  ** Found active SMS based account: %@
Re-registered succesfully, setting force re-register version to %d
       found push token in: %@
No public key found {deviceID: %@}
No uniqueID provided, can't save uuid %@
New properties after set %@
Finished broadcasting nsuuid %@ to all services
Device Properties - Current UniqueIDs: %@
Device Properties - New Unique IDs: %@
Device Properties - Old Unique IDs: %@
Saving device properties settings: %@   (domain: %@)
Loading device properties
 => Loaded device properties %@
 => No device properties loaded
Updating AuthKit for DSID: %@, AKAppleIDServiceType: %ld and inUse: %@
Couldn't find device certificate (service: %@)  (uri: %@)
Couldn't find account (service %@)  (uri: %@)
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
============= New WPLinkManager %@ starting =============
From LinkManager: created a new WPContinuity instance %@
client instance created
calling continuityDidUpdateStateToState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
GUID %@ Destination %@ Falling back to legacy encryption { encryptionType: %@, error: %@ }
Finished capturing AutoBugCapture diagnostics for encryption failure { context: %@, ECError: %@, legacyError: %@ }
GUID %@ Destination %@ Failed encryption type %@ with error %@
GUID %@ Encryption information:
Missing phone number authentication entitlement -- failing authenticate phone request {client: %@}
Authenticating phone {uuid: %@, client: %@}
Missing phone number authentication entitlement -- failing phone authentication signature request {client: %@}
Generating phone authentication signature over data {uuid: %@, client: %@, data: %@, length: %lu}
Generated phone authentication signature {phoneUserAuthCerts: %@, publicKey: %@, nonce: %@, signature: %@}
Failed to generate phone authentication signature {error: %@}
Requesting carrier token {uuid: %@, client: %@, subscriptionSource: %@, IMEI: %@, carrierNonce: %@}
Missing phone number authentication entitlement -- failing phone carrier token request {client: %@}
Failed to fetch SIMs {SIMFetchError: %@}
Determined phone number identifier to use for carrier token request {matchingSIM: %@, availableSIMs:%@, phoneUser: %@, phoneAuthenticationCertificate: %@}
Adding phone number account to the carrier token request {phoneUser: %@, phoneAuthenticationCertificate: %@}
Adding Apple ID account to the carrier token request {registration: %@}
Carrier token response received {resultCode: %@, serverStatus: %@, serverErrorDetail: %@, carrierToken: %@}
Missing phone number authentication entitlement -- failing phone user subscription source request {client: %@}
Setting phone user subscription source {uuid: %@, client: %@, subscriptionSource: %@}
Fetching phone user subscription source {uuid: %@, client: %@}
Failed to fetch selected phone number registration subscription { error: %@ }
  Found bad vetted alias, it was my phone number: %@ => %@
  Found unvalidated/failed alias: %@
  Found bad alias: %@ => %@
  Found bad alias, it was my phone number: %@ => %@
Account is missing sentinel alias, repairing...
Indicating that we need to re-register for alias repair
  Cleaning up account!!! -- with changes: %@
No active aliases, setting default value { aliasStrings: %@ }
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
Query failed; re-registering {error code: %d}
Query failed; refreshing credentials {error code: %d}
Setting registration error to %d (%@) from reason %d
IDSDAccount initWithDictionary %@ service %@ uniqueID %@
Tried to create an account with an empty uniqueID (%@)
Tried to create an account with an empty service (%@)
Tried to create an account with unknown account type %d
IDSDAccount initWithLoginID %@ service %@ uniqueID %@ accountType %d
Tried to create an ad hoc account (loginID %@   service %@) with no primary account
Tried to create a primary account using an ad hoc service %@
Dealloc IDSAccount: %@
Missing object %@ or key %@ when changing accountInfo
Display name changed for account: %@    %@ => %@
Requested display name: %@ is not part of valid account aliases: %@, ignoring!
Request to clear Display Name on Account, Removing Display name %@
Account with uniqueID %@ was disabled by user
Setting loginID on account { oldLoginID: %@, newLoginID: %@, self: %@ }
IDSDAccount status %d, calling handler: %@
Can configure account with aliases: %@
* No aliases to configure, nothing to do here
Storing setup handler %p  %@
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
CBUUID matched, but uniqueID mismatched. Setting fallback device. { cbuuid: %@, uniqueID: %@ }
Did not find any device in dependentRegistrations that matches lockedPeerID. Service supports live delivery, so falling back to device that matches just cbuuid { cbuuid: %@, lockedPeerID: %@, service: %@ }
Did not find any device in dependentRegistrations that matches {cbuuid: %@, lockedPeerID: %@, count: %ld}
Returning token uri fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, deviceToken: %@, deviceFromID: %@}
Returning device fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, uniqueIDOverride: %@}
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
Activating alias { alias: %@, filteredAliases: %@ }
Deactivating alias { alias: %@, filteredAliases: %@ }
Found duplicate device %@, replaced with newer device %@
Duplicated device %@, ignoring...
Broadcasting registration status info changes
Broadcasting aliases changes
Broadcasting vetted aliases changes
Broadcasting profile changes
Broadcasting loginAs changes
Broadcasting displayName changes
Broadcasting account info changes %@
%s returning because duringInit %d isBeingRemoved %d
%@ - write account defaults: %@  (has changes: %@)
%@ - update account with defaults: %@
Current   aliases: %@
Aliases to remove: %@
Aliases to    add: %@
Calling out to linked account: %@
Broadcaster for localDeviceAdded %@ on account %@
Broadcaster for localDeviceRemoved %@ on account %@
Broadcaster for didUpdatePairedDevice %@ on account %@
Notifying %@ delegate of protocol changes to device
Created IDSDXPCDaemonServer {serviceName: %{public}@}
Incoming XPC connection {newConnection: %{public}@}
Home Number enabled
Home Number disabled
Alerting for finished Home Number registration that has not notified user %@
First unlock, kick accounts check
Device is properly setup
Push handler returned push token: %@
Starting Phone Number Validation request for %@   with token: %@
Missing SIM -- not sending PNR {self: %@, uniqueIdentifier: %@}
User previously denied PNR consent -- not sending PNR {self: %@, PNRuniqueIdentifier: %@}
Adding new validations state machine {self: %@, uniqueIdentifier: %@}
Registration has no corresponding user -- not sending PNR {uniqueIdentifier: %@, registration: %@}
Removing self as a phone number validation requestor {self: %@, uniqueIdentifier: %@}
Noting registration attempt for user identifier {%@} with current registration state {%ld} of type {%d}
Finished capturing AutoBugCapture diagnostics for high registration attempt rate { context: %@, sessionID: %@, error: %@ }
Updating registration info: %@
No registration info present, we must have been cancelled
Not reflecting back succeeded identification, registration is disabled: %@
Suppressing non-zero-rated SMS notification due to presence of internal deafult -- allowing SMS
User notification allowed Phone Number Validation delivery, sending
User notification denied Phone Number Validation delivery, not sending
IDSRestrictions - Active: %@
IDSRestrictions - %@ Disabled: %@
Waiting on account activate, the account controller isn't ready yet
 Updating account activation if needed
IDSRestrictions - Disabling account: %@
IDSRestrictions - Re-activating a disabled account: %@
IDSRestrictions -  Manged prefs changed
Notifying all IDS accounts device paired to: %@
Notifying all IDS accounts device unpaired from: %@
%s Set the pending-reset flag back to NO.
%s Could not set the pending-reset flag back to NO.
Able to determine the has-regenerated-secured-encryption-key status. Has regenerated? %@
Unable to determine the has-regenerated-secured-encryption-key status. keychainError: %d
Updated the has-regenerated-secured-encryption-keys flag to: %@  success? %@  keychainError: %d
Removed the has-regenerated-secured-encryption-keys flag from the keychain.
Failed to remove the has-regenerated-secured-encryption-keys flag from the keychain. error = %d
Suspending OTR sessions for protection classes A and C...
Regenerating encryption keys for protection classes A and C...
Suspending OTR session with token: %@
Purged encryption keys for all paired devices. Success: %@
We have all the encryption keys, sending device info back
We're missing their keys but we sent our keys, requesting...
We're missing some keys (A: %p) (C: %p) (D: %p) (locked: %@) (firstLocked: %@)
Missing class A key, waiting for keychain save...
Missing class C key, waiting for keychain save...
Pairing: Missing class D key
%s Updating notify token state to: isPaired %llu
Update notifier state for paired devices
All devices count: %@
Activating a paired device with CBUUID: %@
WARNING: Local pairing is not supported by this platform. Why was %s called?
Result of activating a paired device with CBUUID %@ is %@
Disabling NetworkRelay for all paired devices.
Disabling NetworkRelay device {pairedDeviceUUID: %{private}@, nrIdentifier: %{private}@}
Failed to create IDSNRDeviceIdentifier from pairedDeviceUUID - failed to deactivate device {pairedDeviceUUID: %{private}@}
Update registration status with NetworkRelay for active device and disable non-active devices: %@
Paired device does not support IPsec {cbuuidUUID: %{private}@}
Failed to create IDSNRDeviceIdentifier {cbuuidUUID: %{private}@}
Skipping registerDevice with NetworkRelay as !wasInitiallySetupUsingIDSPairing
Disabling NetworkRelay device {cbuuidUUID: %{private}@, nrIdentifier: %{private}@}
Cannot ensure communication is possible because there is no active paired device.
Requesting information about the new active paired device.
Requesting information about the new active paired device was unnecessary. Communication is possible.
Missing cbuuid for paired device -- skipping {pairedDevice: %{private}@}
Queried shouldUseIPsecLinkForDefaultPairedDevice {shouldUseIPsec: %@, activePairedDevice: %@}
Registering didConnectToPairedDevice block {pair: %@}
Calling didConnectToPairedDeviceBlocks {cbuuid: %@, error: %@, pairs: %@}
Clearing didConnectToPairedDeviceBlocks {cbuuid: %@, pairs: %@}
Received paired device info: %@
%s: received invalid paired device info: %@
%s: invoked when IDSPairingManager did not know about a paired device.
Calling -[NRDeviceManager registerDevice:properties:queue:completionBlock:] {nrDeviceIdentifier: %{private}@, properties: %{private}@, cbuuid: %{private}@}
NRDeviceManager register returned an error -- ignorning it and enabling device {error: %{public}@, cbuuid: %{private}@}
Did register device with NRDeviceManager {nrDeviceIdentifier: %{private}@, cbuuid: %{private}@}
Starting UTunPeer and NRDevice bridge for device with cbuuid: %{private}@}
Failed to create nrDeviceIdentifier -- not registering {cbuuidUUID: %{private}@}
%s setting version %u
Trying to update non-tinker paired device with pushToken %@, uris %@.
Refreshing Paired Device Encryption Keys
Purged all paired device encryption keys. Requesting paired device info...
Requested paired device info. Refresh Complete!
Unable to purge the paired device secured encryption keys.
%s reading version: %u, min/max: %u/%u
PairingManager found nearbyIPsec device
Replacing uniqueID with pairedDeviceUniqueID {uniqueID: %{private}@, pairedDeviceUUIDString: %{private}@}
SupportIPSec status updated.  Should now QuickSwitch to using IPSec.
Finished resetting communication -- Done {uniqueID: %{private}@}
ActivePairedDevice alread marked with supportIPsec -- Done
Device found IPsec nearby but is not active paired device -- Ignoring {pairedDeviceUniqueID: %{private}@, uniqueID: %{private}@}
called _nrDeviceIdentifierWithCBUUID with nil cbuuid
newDeviceIdentifierWithBluetoothUUID return nil {cbuuid: %{private}@}
*******************  %@ Error ****************************
***  Priority: %ld
***     Token: %@
*** Device ID: %@
***      From: %@
***        To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data for token: %@
 => Current remote public key data for device: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
  Unknown encryption type error? This is non-sensical
******************************************************************
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
** This is for my phone, ignoring
 => User hit yes, adding and validating
 => User hit no, ignoring
Storing activity topics: %@
Looking for an active subscription.  Stored activity topics: %@
Activity topic %@ found subscriptions %@
Subscription is in the past, continuing...
Failed to unarchive description: %@
Failed to archive description: %@
Failed to unarchive updates: %@
Returning stored updates: %@
Failed to archive updates: %@
Failed to unarchive subscriptions: %@
Failed to archive subscriptions: %@
Successfully updated password for account (%@:%@): %@
Successfully updated auth token for account (%@:%@): %@
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
IDSDaemon: SetupAccountWithLoginID %@ serviceName %@ accountType %d accountConfig %@ transactionID %@ localObject %@
Process is not entitled for registration, not setting up account, bailing...
No loginID %@, not setting up account, bailing...
No serviceName %@, not setting up account, bailing...
No service registered for: %@, bailing...
Tried to setup ad hoc account directly, ignoring...
Tried to add account with unknown account type %d, bailing...
  ** Setting auth token for loginID: %@
  ** Setting password for loginID: %@
Creating new account with service name %@ login ID %@
Transaction ID %@  messageContext %@
Notifying listener %@ that account %@  is setup
Registration error %@
Linked account Transaction ID %@  messageContext %@
Notifying listener %@ that linked account %@  is setup
Linked registration error %@
IDSDaemon: AddAccountWithLoginID %@ serviceName %@ uniqueID %@ accountType %d accountInfo %@ localObject %@
Tried to add account with no serviceName %@, bailing...
No service registered for: %@, denying
Unique ID matches but not service name for account %@
Creating new account with service %@ uniqueID %@ login ID %@ accountType %d
Not creating new account, we have existing: %@
IDSDaemon _removeAccount %@ localObject %@
No uniqueID provided, bailing
_removeAndDeregisterAccount %@ localObject %@
Disabling and removing linked account: %@
updateAccount %@ localObject %@
Found blacklisted key in updateAccount call! {process: %@, key: %@}
enableAccount %@ localObject %@
Enabling linked account: %@
disableAccount %@ localObject %@
Disabling linked account: %@
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
authenticateAccount uniqueID %@ localObject %@
passwordUpdatedForAccount %@ localObject %@
updateAuthorizationCredentials %@ token %@ account %@ localObject %@
validateProfileForAccount %@ localObject %@
addAliases %@ toAccount %@ localObject %@
removeAliases %@ toAccount %@ localObject %@
validateAliases %@ forAccount %@ localObject %@
unvalidateAliases %@ forAccount %@ localObject %@
activateAlias %@ onAccount %@ localObject %@
deactivateAlias %@ onAccount %@ localObject %@
registerAccount %@ localObject %@
unregisterAccount %@ localObject %@
forceRemoveAccount %@ localObject %@
_reregisterAndReidentify %@ account %@ localObject %@
deactivateAndPurgeIdentifyForAccount %@ localObject %@
hard deregister localObject %@
Trigger final deregister localObject %@
Kicking get dependent for account %@ localObject %@
Trigger accounts repair { localObject: %@ }
Registering for Registration Account Status Metric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Not entitled to clear IDS state %@
Told to clear IDS state %@
Initial: %s services: %@
iCloudSignInWithUserName %@ localObject %@
iCloudUpdateForUserName %@ localObject %@
iCloudModifyForUserName %@ localObject %@
iCloudSignOut %@
iTunesSignInWithUserName %@ localObject %@
iTunesSignOut %@
iCloud sign in hack with userName %@ and password %@ localObject %@
iCloud sign out hack with localObject %@
setPasswordForProfileID localObject %@ {username: %@, password: %p
Finished setting password {success: %@}
Updating sub services %@ for service %@ deviceUniqueID %@
Save paired device info: %@
Setting NSUUID %@ on device with uniqueID %@  current pariedID: %@  service %@ localObject %@
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Noting it was before first unlock
 => Ignoring, no change
   => Device properties: %@
Sending continuity reset to IDS clients
Received request to regenerate registered identity
Missing key rolling entitlement -- returning early
System did leave first unlock, checking pending if we cloud paired before unlock
   we did! let's update accounts
in a few seconds
   => posting deferred device update
Broadcasting no devices for account %@ even though we have some
System has left first unlock: processing stored incoming messages.
Attempt to use the Registration Control API's without the correct entitlement, Failing request
System has left data protection lock: Checking Migration Status
Faking data protection lock as first unlock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
Forcing a bag fetch to refresh EN versioning
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
Bad signature for message: %@    blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
Message is destined for an accessory with uri %@
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
START %@
MessageOnQueue
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@ certified delivery: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
 Requested Certified Delivery: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
Sending %@ with top-level encryption type "%@" and dtls: %@
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
    Wrote data to path: %@
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
IDSDeliveryController sendMessage
Preparing to send message: %@ to people: %@   (have tokens: %@). People to query %@
Found messagable people: %@
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
IDQuery
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Tokens are being ignored, failing message {msg: %@}
Sending IDSMessage: %@  topic: %@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
PeerDelivery
Sending guid %@ through delivery pipeline with input %@
All sends complete
GUID %@ Failed with error: %@
GUID %@ Upload failure metric sent with response: %ld error: %ld lastCall: %@
Pipeline done with all fanouts %@
Submitting metric { sendTime: %.4f, endpointCount: %ld, pipeline: %@, mmcs: %@ responseCode: %ld }
Starting Up
Told all registrations succeeded, calling completion blocks
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ 
Queried pairedDeviceUUIDString {pairedDeviceUUIDString: %@}
Could not query pairedDeviceUUIDString {isPaired: 0}
NRDeviceMonitor already running for {deviceIdentifier: %@}.
Received devices with unique ids -> cbuuids %@
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
UTUN sendData
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
Got topic set update %@
Warning: -[IDSUTunDeliveryController setAllowedTrafficClasses:] called but missing nrDevicePreferencesHandler; allowedTrafficClasses %@
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add {deviceUniqueID: %{private}@, btuuid: %{private}@, deviceIDToPeer: %{private}@}
EnableOTR: %@.
peer nearby state changed: %@    screenLit: %@   uniqueID: %@   map: %@
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer connectivity changed but no default peer
legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@ but using IPsec link - drop callback
default peer nearby changed: %@ -> %@
legacyUTunBTLinkManagerDefaultPeerNearbyChanged: %@ but using IPsec link - drop callback
cloud connectivity changed for default peer: %@.
legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@ but using IPsec link - drop callback
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerClassCConnectivityDidChange %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetPreferInfraWiFi failed due to nil device identifier.
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerSetLinkPreferences failed due to nil device identifier.
setBluetoothLinkPreferences: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@
defaultPeerSetWantsQuickRelayRequest: %@
[IDSUTunDeliveryController defaultPeerSetWantsQuickRelayRequest:] called but missing nrDevicePreferencesHandler
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
peerCloudConnectivityChanged: %@ but using IPsec link - drop callback
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Broadcasting found nearby IPsec device {uniqueID: %@}
%@ Did not find default peer device.
Set Enable OTR Timer for 60.0 seconds
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
Too many services in entitlements! {value: %@, index: %llx}
Daemon XPC Interface Up
Incoming Daemon XPC Interface with new connection %@
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
GUID %@ Received APNS ack for Fanout %@
GUID %@ APNS ack received for destination %@
Building Message delivery
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Found existing session matching uniqueID -- replacing with new instance { uniqueID: %@, oldInstanceID: %@, newInstanceID: %@ }
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Sender doesn't support alias deactivated decline, dropping
Enqueuing incoming session invitation block from %@ with key %@
Couldn't create session for invite, bailing...
This invitation should be filtered { toID: %@, sessionUniqueID: %@ }
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Enqueuing incoming session cancel block from %@ with key %@
Enqueuing incoming session message block from %@ with key %@
Enqueuing incoming session end block from %@ with key %@
Enqueuing incoming session reinitiate block from %@ with key %@
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Storing the master key material %{private}@ for %@ token %@
Failed to decrypt a master key material in the broadcast group -- skipping the remaining key material
Received the prekey recovery request for group %@ destination %@
Received the MKM recovery request for group %@
Storing the public key %{private}@ for %@ token %@
Couldn't find the session %@ to clean up!
Cleaning up session %@
Cleaning up session based on instanceID { instanceID: %@, correspondingUniqueID: %@ }
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No instance ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
%@ - No group UUID provided to lookup session, bailing...
Updating critical reliability, any sessions need critical state: %@
Empty phone number after registering
Clearing out current aliases
Adding alias: %@
Setting alias as validated
Account already has phone number added, not adding
Updating preferred account to Home Number {service: %@, oldID: %@, newID: %@}
Ad hoc account %@, can't call %s, ignoring...
Local account %@, can't call %s, ignoring...
Under first lock and keychain upgrade pending, not loading registration for this account
We have no registration info, needs to be created
Our registration types don't match, needs rebuild  (%d vs %d)
Registration type is not supported: %d
Emails are different, we need to rebuild  (%@ vs %@)
Push tokens are different, we need to rebuild  (%@ vs %@)
Didn't find a registration in the keychain for %@ %@
Found pre-existing regionID %@
Found pre-existing base phone number %@
Found pre-existing region context %@
Found pre-existing confirmedEmails emails %@
Setting profileID %@ onto registration
Setting idsUserID (for auth cert), isCDMA, and keyPairSignature on registration using existing registration with the same profileID { keychainRegistration: %@ }
Rebuilding aliases for: %@
 => ignoring failed validation email: %@
Existing region profile: %@
We have a profile, and it's validated!
No region ID, we'll use our profile's
Setting idsUserID (for auth cert), mainID, isCDMA, and keyPairSignature on phone number registration {mainID: %@, isC2K: %@, keyPairSignature: %@}
Created new registration info: %@
Using cached registration info: %@
  We have no URIs registered, and we're not DS based, forcing unregistered
  We have no registration cert, forcing unregistered
Setting profileID %@ onto account
Current aliases: %@   for: %@
 => adding candidate email: %@
Adding ad hoc service names %@ to %@
Device Controller says I should maybe try to re-register now: %@
This indeed necessitated a re-register, kicking it off: %@
***** Notified that our previous identity was rebuilt from scratch -- purging identity and re-registering { account: %@ }
***** Notified that a new identity was generated -- re-registering { account: %@ }
***** Notified that our identity needs to roll encryption identity -- rolling and re-registering { account: %@ }
***** Keychain migration completed
Account %@ is disabled, ignoring...
****** Forcing Registration, needs migration ******
****** NOT Forcing Registration, we were active, but unregistered, however there's nothing to register: %@ ******
****** Forcing Registration, we were active, but unregistered: %@ ******
Updating vetted aliases to: %@     current: %@   ID: %@
     Added: %@
   Removed: %@
   Registration requires keychain migration, not proceeding
Safely migrating key pair signature over: %@
Registration protocols are empty, this is probably a new install, we'll force a register
Registration identity protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration identity protocol versions different, we'll force a server registration   (%@ -> %@)
Registration identity versions different, we'll force a server registration   (%@ -> %@)
Registration application protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration application protocol versions are different, we'll force a server registration   (%@ -> %@)
Registration key pair signatures are different (%@ -> %@), clearing cert - forcing redentification
Message Protection Public Data Needs Update, we'll force a re-register
****** Someone set default for SMS re-register ******
****** Someone set default for HTTP re-register ******
****** Forcing FaceTime Registration ******
Calling account setup handler %p
We were registered but we have no aliases %@ or dsHandle %@
We were registered, but we're missing our private/public identity keys... will reregister: %@
Setting account: %@ to failed registration
Setting account: %@ to unregistered
Setting account: %@ to authenticated  (Reg status: %d)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for restore)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for push token)
Setting account: %@ to authenticating  (Reg status: %d)
Setting account: %@ to registering  (Reg status: %d)
Setting account: %@ to registered
  Stop Registration Agent for: %@
Registration is not active on account %@, ignoring...
 => Forwarding to Primary: %@
 => Re-registering and re-provisioning: %@
  ** Removing authentication credentials **
Device is still under first data protection lock, changing request to a deferred re-identification
Daemon reregister/reidentify account
  ** Re-identifying from beginning **
  ** Re-registering **
Device is still under first data protection lock, deferring request
Migration is complete, checking to see if we should re-register now
System started backup: %@
System restore state changed: %@
We had a pending GDR, kicking it off now: %@
Daemon activate account registration
****** Purged keychain data ******
*** Activating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
Registration info is not supported on this device, disabling: %@
   ** Failed enabling registration, disabling... **
Using server: %@:%@
Couldn't get bag url
Priming Server bag
...done
Daemon deactivate account registration
*** Deactivating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
*** simply marking account as unregistered: %@
*** removing registration from keychain: %@
 => Authenticate (Environment: %@) %@
Starting auth for: %@
Asked to authenticate, but haven't received push token yet, waiting... (Mine: %@  APSD: %@)
Client requested re-authenticate (Environment: %@)
Retrying registration, to check for backup state
Migrating Apple ID based registration info: %@
Rebuilding aliases for: %@ (%@)
Daemon register account
Re-register called (Environment: %@) %@
Asked to register, but haven't completed upgrade/restore, current state: %@
We were missing candidate alias: %@, adding it
Asked to register, but haven't received push token yet, waiting... (Mine: %@  APSD: %@  Env: %@)
Client requested re-register: %@ (Environment: %@)
Daemon unregister account
 => Deregister: %@ (Environment: %@)
Client requested de-register (Environment: %@)
Client password updated
Clearing signature, and re-registering
Client updating auth ID: %@  token: %@
... Saving
Informed of push token change to: %@, reregistering (from: %@)
Informed of push token change to: %@, but no need to reregister (from: %@)
Received reload bag push for: %@
 => Reloading iMessage bag
 => Reloading FaceTime bag
 => Reloading FaceTime Audio bag
 => Reloading FaceTime Multiway bag
Not adding registered phone alias to appleID account {uniqueID: %@, phoneAlias: %@}
My current handles: %@
My current vetted handles: %@
My current vetted emails: %@
Asserted Emails: %@
My new aliases: %@
Newly added: %@
 => All handle based account, not showing available notification
 => DS handle based account, not showing available notification
 => Not adding, new handles does not contain this alias
 => Not adding, this is my phone number
** Adding notification for %@  on device %@  on apple ID: %@ for service: %@
Alias was recently selected, just adding {alias: %@}
** Not showing notification, service is not configured to show them
** No new handles!
 => We should auto configure all handles
    Vetted: %@
   Current: %@
      Checking: %@
         => Not in alias strings: %@
         => Not in auto register: %@
         => Already in auto register set
      => Already in alias set
** Auto registering handles: %@
No handles to auto register
 => Ignoring, we're not authenticated for: %@
 => Not updating handles, this is not an apple ID based account for: %@
Not issuing handle gathering, we're in progress now
 => Kicking off handle gathering for: %@
  (currentAliases: %@)
  (currentVettedAliases: %@)
  * Sending handle update request for: %@
Handles query completed with result: %@   account: %@
 *** This was successful, but handles were empty? Ignoring...
 *** Handles query failed, status: %d
Received device updated push for profile: %@   token: %@   service: %@  for: %@
Ignoring update - we have recent registration events
System not setup, ignoring devices updated push for: %@
Device is still under first data protection lock, ignoring for: %@
  Empty user ID, ignoring for: %@
  Unknown profile ID ID, not proceeding for: %@
 => Ignoring a device update from myself for: %@
 => Ignoring, we're not registered for: %@
 => Kicking off device and handles gathering for: %@
Received handles updated push for profile: %@   status: %@   for: %@
System not setup, ignoring handles update push for: %@
  Not an appleID registration, not proceeding for : %@
Received flush cache push for uris: %@
Should retry (resultCode %ld) (retries %d) (%@)
Should reregister then retry (resultCode %ld) (%@)
Should not retry (resultCode %ld) (retries %d) (%@)
iCloud pairing account is usable, updating device properties
iCloud pairing account is not usable, not updating device properties (registered: %@, primaryRegistration: %@, isEnabled: %@)
Device is still under first data protection lock, deferring request for: %@
Not issuing dependancy check, we're not through buddy yet for: %@
Not issuing dependancy check, we're in progress now for: %@
Issued dependent registration check for account: %@   service: %@
Device query completed with   Account ID: %@   service: %@
  => seconds: %f
 *** This is our first dependent handles check, we're just storing them
 *** Devices query failed, retrying in %f
 *** Not notifying for device name: %@  service: %@, we already know about this one!   hardware: %@
 *** Not notifying for device name: %@  service: %@, don't have any valid handles!   hardware: %@
 Queued notification for device name: %@   service: %@  handle: %@ hardware: %@
  Found similar account: %@
We don't have an enabled account for service %@ with %@ as an alias, ignoring...
 Adding notification for device name: %@   service: %@  handle: %@
Flushing cache for: %@
Not registered. Waiting to send the 130 { registrationStatus: %ld, retry: %@, registeredURIs: %@, service: %@ }
Updating active URIs: %@   service: %@
   Sending to active sessions for URI: %@   sessions: %@
   No active sessions from: %@
Succeeded SMS identification with info: %@    number: %@  token: %@
Updating caller ID to phone number: %@
Starting registration for: %@
Updating registration for: %@
Succeeded registering: %@  (newly registered: %@)
Saved: %@
vettedAliases: %@
Checking to see if I should confirm aliases for: %@
Aliases that are unvalidated: %@
Forcing a handles query request post-register to pull the current state
Registration failed for %@   (Error: %d)
Failed, %@ => Disabling service
Server denied registration
Removing keychain info
We've been rate limited, disabling
Absinthe failed, just disabling
Too many SMSs, deactivating me
 => Will retry SMS Registration: %@
 => Resetting status to waiting for auth response: %@
 => Will retry Authentication: %@
 => Not retrying, max retries hit
 => Nuking Home Number user {error: %ld, registration: %@}
 => User has disabled SMS Authentication, disabling the account
 => User has disabled SMS Registration, disabling the account
Broadcasting registration failed for account %@
Needs deletion: %@ (%@)
Deleting account ID: %@
Deregistration succeeded for %@ - %@
Ignoring re-identification request, registration is disabled: %@
Registration controller requested new SMS registration -- starting from scratch
Registration controller requested new SMS registration -- noting that we should re-query handles
Started authenticating for info: %@
Succeeded authentication for info: %@
Updating profileID: %@
Authentication failed for info %@    with error code: %d
Auth failed but we're registered, ignoring...
Removing profileID
Succeeded Validated Email Query info: %@    Emails: %@  (Session: %@)
Succeeded region validation with region ID: %@  phoneNumber: %@  context: %@  verified: %@
Resulting registration info: %@
Failed region validation for registration info: %@      error: %@   info: %@
 => Remove aliases: %@   for: %@
Request to remove aliases: %@
Empty aliases, ignoring
Removing candidate email: %@
Email was candidate, just removing: %@
Removing confirmed email: %@
Alias is registered, needs re-register for: %@
Alias wasn't registered, moving along: %@
Email was unconfirmed, just removing: %@
Client request to remove aliases: %@
 => Add aliases: %@
Empty alias, ignoring
Request to add aliases: %@
 => Found my phone numbers: %@
 => Current aliases: %@
 => Vetted aliases: %@
 => Adding alias: %@  (and as candidate)
Client request to add aliases: %@  account: %@
Request to validate aliases: %@
%@ is already validated %@
Request to validate aliases: %@, but device is not authenticated
%@ needs to be validated
%@ should be registered
Alias all already validated, registered, returning
We're under first lock, not registering aliases: %@
We've recently queried the vetted handles on the account, we'll use the local vetting status (%@)
Client request to validate: %@  account: %@
Request to unlink aliases: %@
Request to unvalidate aliases: %@, but device is not authenticated
Updating vetted handles to remove: %@
 => Final: %@
Client request to unvalidate: %@  account: %@
***** Request to deactivate and purge my identity
 => Unregistering
 => Purging my message protection identity
Client request to refresh valid aliases
Request to refresh valid aliases, but device is not authenticated
Client request to validate profile info: %@   account: %@
Broadcasting refresh registration for account %@
Grace period is still valid -- returing state {service: %@, loginID: %@, alias: %@, now: %@, then: %@}
Updating user intent state {service: %@, loginID: %@, alias: %@, from: %@, to: %@}
Stopping user intent tracking {service: %@, loginID: %@, alias: %@}
Returning _allUserIntentInfo {service: %@, loginID: %@, current: %@}
Server bag overrided grace period outside acceptable range -- ignoring {gracePeriod: %f}
Server bag overrided default max selected grace period {gracePeriod: %f}
System did leave first unlock, checking pending items
   We had a pending handle request, kicking off
   We had a dependent reg request, kicking off
   We had a pending re-identify request, kicking off
   We had a pending re-register request, kicking off
Using Max GDR in 24 hour period override value of %d 
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
Checking if loginID update is needed for existing account on service { oldUsername: %@, newUsername: %@, serviceIdentifier: %@ }
Updating loginID on existing account { oldUsername: %@, newUsername: %@, serviceIdentifier: %@, account: %@ }
IDS responding to sign-in { domain: %@, username: %@, token: %@, hasPassword: %@, accountStatus: %@, handles: %@ }
Device has hard deregistered -- ignoring sign-in
No username provided -- ignoring sign-in
Saving status to the account { accountStatus: %@ }
Created new account for sign-in { service: %@, account: %@ }
Updated existing account with account info { service: %@, account: %@ }
Created new linked account for sign-in { service: %@, account: %@ }
Updated existing linked account with account info { service: %@, account: %@ }
IDS responding to sign-out { domain: %@ }
Device has hard deregistered -- ignoring sign-out
Removing account for sign-out { account: %@ }
Skipping removal of non-Apple ID account for sign-out { account: %@ }
IDS responding to updated account info { username: %@, accountInfo: %@ }
 Device has hard deregistered -- ignoring update
Update called but for account other than the primary iCloud -- ignoring update
Update called but for the primary iCloud -- committing update to relevant accounts
Updating matching account (and linked accounts) with account info { account: %@ }
IDS responding to account modification { username: %@ }
Checking IdentityServices accounts to know if we should attempt a repair { foundAccount: %@ }
Auth token found on account -- attempting to kick iCloud repair logic
We already have an inflight request for topic %@, checking if we have a backup
We already have a backup request for topic %@, throwing this request away
We already have an inflight request for this topic %@, adding it to the backup queue
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
Topic %@, has timed out waiting for server response
Topic %@ has recently received a message from storage.  Starting a new extended timer for retry.
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
The topic %@ is a pass-through-message service. Not retrying.
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
packet with sequence number: %u->%u dropped by replay protection
Malloc Failed to allocate replayWindow!
Malloc Failed to allocate replayWindow->list!
IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u
packet too old. seq(%u->%u) = -%u
IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u
IDSStreamEncryption_SetbitReplayList for old packet returned NO. seq(%u->%u) = -%u
CCCrypt failed with status: %d
Initial state check for Phone numbers
Determined if device is in dual phone identity mode { isDualIdentity: %@, multipleInsertedSims: %@, isDeviceInDualPhoneIdentityMode: %@ }
Cannot force remove phone users. { user: %@ }
This device does not support identification -- returning no users
Recognized phone number change without labelID change {labelID: %@, currentUser: %@, newUser: %@}
Recognized SIM property change {currentUser.defaultUser: %@, newUser.defaultUser: %@, currentUser.mcc: %@, newUser.mcc: %@, currentUser.mnc: %@, newUser.mnc: %@}
Finished synchronizing Sims to users {currentUsers: %@, updatedUsers: %@, dualMode: %@, inManualSelectionMode %@, selectedLabelIDs: %@, sims: %@}
Received selectedSubscriptionLabelDidChange
Received SIMInformationDidChange
****** Device isn't in a state that can register right now, bailing
****** Device is not configured yet, bailing
****** Under first lock and keychain upgrade pending, bailing
** Found no tracked Phone Number registration
** Found Tracked Phone Number users: %@
** Dispatching request to re-register via SMS
IDSSIMPhoneUserSynchronizer received an update to the paired tinker device
IDSSimPhoneUserSynchronizer does not support non-tinker devices. isTinkerConfiguredWatch: %d pairingType: %ld
====== Personal Key Cache:
   Device ID: %@    Identity: %@   PushToken: %@
Removing key {forURI: %@, fromURI:%@, pushToken: %@}
Clearing public and personal keys
Migrating user store to new format {oldMap: %@, newMap: %@}
UserStore reloading {realm: %@}
Provider created change set {current: %@, updated: %@, provider: %@}
Updating user {user: %@}
Broadcasting update user {user: %@}
User is not present -- not updating {user: %@}
Silently updating user {user: %@}
Adding user {user: %@}
Broadcasting new user {user: %@}
Removing user {user: %@}
We do not support DS users here at this time! {user: %@}
Tried to set a mismatching credential for user! {credential: %@, user: %@}
Updating user properties {user: %@, props: %@}
Broadcasting update user props {user: %@}
User is not present -- not updating props {user: %@}
Missing activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@}
Invalid activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@, activityMonitorEntitlementValue: %@}
Found a non-string activity monitor entitlement value -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@, activityMonitorEntitlementValue: %@}
Created XPCActivityMonitor {self: %p, activityMonitorEntitlementValue: %@, connection: %@}
Not entitled for activity monitor activity! {self: %p, activity: %@, _activityMonitorEntitlements: %@}
Posting update {self: %p, activity: %@, update: %@}
Adding activity monitor client {self: %p, activity: %@}
Error creating proxy for activity monitor client {self: %p, activity: %@}
Removing activity monitor client {self: %p, activity: %@}
Checking if listening for activity monitor activity {self: %p, activity: %@, isListening: %@}
Setting should listen for activity monitor activity {self: %p, activity: %@, shouldListen: %@}
Activity monitor is currently disabled by the server.
Subscribing for activity monitor session {self: %p, activity: %@, info: %@}
Unsubscribing for activity monitor session {self: %p, activity: %@, subActivity: %@}
Server provided a minimum value for activity monitor which was %ld
%s received nil pairedDevice
Paired device public key A %@
Paired device public key C %@
Paired device public key D %@
Reloading keychain information: %@
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Dictionary has %lu key-value pairs
    => Not saving, got a nil dictionary representation
Final keychain data array count: %lu
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
  => Adding %lu temp phone credentials
  => We don't have any temp phone credentials to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Loaded %d temp phone credentials
Reloading registration objects from keychain dictionary, %d entries
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Removing old V%d keychain blob after upgrade with service: %@   account: %@
  => Unable to remove keychain blob (error: %d)
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
  => Updating from V1 to V2
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
Unable to upgrade an empty keychain data from V1 to V2
Setting IDS auth cert: %p   for ID: %@
Returning SMS sig for ID: %@   signature: %@
Returning SMS IDs: %@
Setting SMS main ID: %@   signature: %@
Returning temp phone credential for ID: %@ cert: %@
Returning temp phone credential for ID: %@ tempCredential: %@
Posting iMessage allowed value from IDSDaemonCapabilities { allowiMessage: %@, allowFaceTimeAudio: %@, allowFaceTimeMultiway: %@, supportedServicesFlags: %llu }
IDSDaemonCapabilities received bundle info did change callback -- updating capabilities
Processed getDependent queue
IDS registration center notified that Engram key store did update identities; notifying listeners
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
*** Sending message: %@
 *** Too many registrations this last while, we need to come back to try later  (%d of %d)
Kicking dequeue of pending requests
 ** Not sending, we have current authentications in flight, %@
 Sending pending authentication: %@
 No pending authentication
 ** Not sending, we have current registrations in flight, %@
 Sending pending registration: %@
 Removing pending registration, can't register: %@
 No pending registration
 Sending pending deregistration...
We have current authentications or registrations -- canceling pending Absinthe cleanup operations
We have no current authentications or registrations -- enqueueing Absinthe cleanup operation
*** Lockdown state is expired, not doing absinthe validation
ids/authenticate/fail
!setGroupState(%llu) main-id=%@
!setGroupState(%llu) service-id=%@
!setGroupState(%llu) successful=%@
!addGroup(%llu) authenticate
ids/authenticate/success
ids/registration/fail
!addGroup(%llu) register
ids/registration/success
IDS registration success
All IDS registrations success
Not reflecting back email query failure, registration is disabled: %@
Not reflecting back email query success, registration is disabled: %@
Registration identities updated; notifying listeners
 => Has registration in queue: %@
Registration center process registration message
Final Active registrations: %@  (For: %@)
Message class: %@  delivered with error: %@  code: %d result: %@   ID: %@
Overriding response code registration message! {overrideResultCode: %ld}
Overriding response alert on specified services! {phoneOverrideService: %@, emailOverrideService: %@}
  Message delivery failed with code: %d
  Message delivery failed with result code: %d  error: %@
Received registration response for: %@   HBI: %@  services: %@
Processing registration response for service { service: %@, status: %@, serverErrorDetail: %{public}@ }
Processing registration response for user { user: %@, service: %@, status: %@, serverErrorDetail: %{public}@ }
No value in response, we're using HBI: %f
Success, next registration date is: %@
Success, Using fallback registration date
*** Matched registration user ID: %@ for user ID: %@
 Marking as C2K: %@
 Result status: %@
 Success!
 *** Server rejected registration { candidateRegistration: %@ }
 *** Server rejected registration permanently { candidateRegistration: %@ }
 *** Need new credentials { candidateRegistration: %@ }
 *** Unhandled status code: %@
 => We have a cert, treating as success
 => We have no cert, treating as failure
Received per-URI status dictionary in register response { service: %@, binding: %@ }
Invalid status returned for a URI in register response -- dropping { service: %@, URI: %@, status: %@ }
KT data returned in register response { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }
Per-URI KT account identifier is missing from the IDS response, which may cause KT verification failures -- using URI hash instead { URIKeyTransparencyAccountID: %@ }
Registration not disabled, saving. { candidateRegistration : %@ }
Registration disabled, not saving. { candidateRegistration : %@ }
Extracted IDs from bindings
Setting number: %@  on registration: %@
Number is empty, not adjusting
 => Adding self handle
 => Adding sentinel, registration doesn't have a self-handle yet
 => Adding sentinel binding
 => Registration is allowed to continue with empty identities
 => ***** No registered identities, failing registration: %@ ******
Success, registered URIs are: %@
KT enrolled URIs are: %@
 Notifying for success of: %@
Registration SUCCESS for %@ on %@
***** Notifying, empty URI response: %@ *****
 ***** Notifying for failure (code: %@:%d) of: %@
 *** We have %d unhandled registrations leftover from this: %@
 All registrations were handled, we're good to go
 *** Absinthe Error from Server ***
 Retries so far: %d  trying again
 Maximum absinthe retries reached, failing registration %@
Server rejected registration permanently; failing all candidate registrations
Server rejected registration; failing all candidate registrations
Bad signature, will refresh credentials for all registrations
Failed constructing validation data
Registration attempt failed with no status code
Registration attempt failed with status code: %d   error: %@   result: %@
Communicating with registration server failed
Registration center send registration message
This is a deregister, and we have no pending deregistration, bailing
Waiting for setup/first unlock to complete before sending registration message -- deferring registration
Push handler returned push token: %@, deferring (%@)
*** We have current (de)registrations, deferring (%@)
*** Lockdown state is expired, not sending %@
*** We have an ongoing authentication, deferring register
Constructing client data objects
Done constructing client data objects {serviceTypes: %@}
Enrolling device to KT trusted device circle {pushToken: %@, services: %@}
Unable to enroll device to KT trusted device circle {enrollmentError: %@}
Succeeded enrolling device to KT trusted device circle {enrollmentResult: %@}
   *** Removing registration (from active) from queued/current, it is not possible to register: %@
   *** Removing registration (from queued) from queued/current, it is not possible to register: %@
   => Skipping, we have no auth user ID or cert: %@
environment: %@    token: %@
     already existing phone: %@         already existing appleID: %@
********* Not adding user dictionary, we already had another phone based registration: %@  (registrations: %@)
Trying to register account without corresponding SIM -- failing {userUniqueIdentifier: %@}
********* Not adding user dictionary, we already had another apple ID based registration: %@  (registrations: %@)
   Adding user dictionary: %@  for service: %@
   ** Not adding user dictionary, already had one: %@  (%@)
   => Adding auth user ID: %@    cert: %@
   Failing registration for user dictionary: %@,  service: %@
   Skipping user dictionary: %@, no URIs   for service: %@
   Services: %@ for register: %@
****** Received registration response: %@
Registering service %@: %@
Queued %@ for validation (%@)
Sending %@   (ID: %@ Environment: %@)
Not sending %@ we didn't have any authenticated registrations
Registration failed getting client data -- error %@ registration %@
Sending deregistration now...
*** Lockdown state is expired, not sending de-registration
Deferring deregistration for %@
Registration center send hard deregister
Sending hard deregistration now...
Message class: %@  delivered with error: %@  code: %d result: %@
Overriding response code for registration with: %d   remove %@: %@    to stop this
 *** Unauthenticated, need new auth token { auth info: %@ } ***
 *** Unauthenticated, need new auth token { message: %@ }
 *** Server rejected authentication request ***
IDS authenticating registration info: %@
    Push handler returned push token: %@
      Service: %@
        Realm: %@
  Environment: %@
      User ID: %@
     AuthInfo: %@
Setting auth cert for user ID: %@
Found existing registrations to authenticate: %@
     Authing user with cert {rpi: %@, user: %@, cert: %@}
     Authing user with sig {tag: %@, rpi: %@, user: %@, sigData: %@}
     User lacking cert or credential: %@
Setting auth certs {userID: %@, responseCode: %lld, matchingUser: %@}
Credential for temporary registration is not temporary realm {registration: %@, credential: %@}
Home Number response parsed { success: %lu, cert %@, expiration %@ }
Registration center send authenticate registration
*** We have current IDS Authentications, deferring (%@)
*** Lockdown state is expired, not sending IDS Authentication
Sending IDS Authentication request: %@   (Environment: %@)
Not sending nil IDS Authentication request: %@
Sending report spam message
Sent report spam message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Sending report iMessage unknown sender message
Sent report iMessage unknown sender message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Registration center process handles message
  Received handles query response with result: %d   handles: %@   selfHandle: %@   (actual: %@)   (error: %@)
  Updating %@ with getHandles info
Failing registration, empty get handles response { queuedRegistration : %@ }
Requesting new authentication for registration: %@
Requesting re-registration for registration: %@
Registration center query handles
  => Ignoring query, we have no registration, %@
Added registration %p to getHandles
Adding completion block %p to getHandles queue
Processed getHandles queue
Sending email query for: %@
Requesting validated emails for: %@
  => Ignoring query, we have no auth cert
Sending authenticate registration now...
Registration center authenticate registration
Not sending IDS authentication, we have no main ID for registration: %@
Not sending IDS authentication, we have no profile ID for registration: %@
Not sending IDS authentication, we have no auth token for registration: %@
*** Cannot authenticate, missing SMS signature
Not IDS authenticating, we have no authentication token for: %@
Adding IDS authentication to the queue: %@
 => Really adding
 => Removing old registration info object: %@
 => Simply adding registration info object: %@
Sending registrations now...
Registration center send registration
Not registering, we have no cert for: %@
Not registering, not able to register: %@
Sending registration for %@
Updating registration to the queue (replacing existing): %@
Adding registration to the queue: %@
Registration center send deregistration
Adding deregistration to the queue: %@
Cancelling current registration
Removing current registration: %@
Cancelling queued registration: %@
Removing current registration
Removing current authentication
Cancelling queued authentications
Cancelling queued registration
Token changed, _dequeuePendingRequestsIfNecessary
  * Forcing a reset on the registration count, enough time has passed   %d -> 0
Noting another registration in the last %d minutes, we're now at %d registrations  (Max: %d)
Restarting number of registrations at %d (Max: %d)
Suppressing registration server alert due to presence of internal default
added mapping device ID [%@] to destination [%@]
============= New LinkManager %@ starting =============
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
closed FIFO file %s
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Sync priority messages queued: %@
Default priority messages queued: %@
Urgent priority messages queued: %@
Urgent Cloud priority messages queued: %@
Messages being sent: %@
Incoming messages not claimed yet:
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
removing old fifo file %s
_suspendBTLink %@ -> %@
Not processing _connectivityChangedForDefaultDevice in the IPsecLink path.
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
will bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
Link type changed from %lu to %lu, current link: %@
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
removing %@ from links for device %@
_hasGlobalLinkConnectingOrConnected: _cbuuidToLinks: %@
%@ is still connecting or connected.
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
LinkManager shouldStartBTLinkManager: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
connectGlobalLinkForDevice: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@
Set alternateDelegate %@ for %@
disconnectGlobalLinkForDevice for  %@
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
%s - sessionID %@, hasPendingAllocation %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
WiFiAssist enabled: %@
currentCellularSignalStrength - sessionID %@.
startLinkProbing - sessionID %@, options: %@.
stopLinkProbing - sessionID %@, options: %@.
queryLinkProbingStatus - sessionID %@, options: %@.
flushLinkProbingStatus - sessionID %@, options: %@.
setRemoteDeviceVersion - sessionID %@, version: %u.
get session info for group %@, session %@, options %@
update session participants for group %@, session %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
Not processing didConnectOverCloud in the IPsecLink path.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@, reason: %d
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didWiFiNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didCellularNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
didGetLinkProbingStatus - alternateDelegate:%@, link status:%@.
receive session-info for group %@, session %@, success:%@.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
_handleNetworkChanges %@ = %@
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
cellular SoMask changed: %u.
Registering for events {eventID: %@, options: %@}
Incoming Rapport message
Rapport connection invalidated
Rapport connection interrupted
Failed to activate companionLinkClient, {Error:%@}
Activated companionLinkClient {self: %@}
Updated local device {device: %@, publicIdentifier: %@}
Start companionLinkClient setup
Dealloc'ing IDSRapportClient
outgoing IDS Message {deviceIentifier: %@, event: %@}
Failed to find companionLinkClient {error: %{public}@, deviceIdentifier: %{private}@}
Found companionLinkClient {deviceIdentifier: %{private}@, client: %{private}@}
Finished sending message {deviceIdentifier: %@, error: %@}
Discovered device %@
Lost device %@
incoming IDS Message {event: %@, options: %@}
Dropping event because it's missing senderID {options: %{private}@, event: %{private}@}
Dropping event because _RPOptionSenderID is undefined {options: %{private}@, event: %{private}@}
Initing UTunConnection %@ %p
shouldUseNWFramingOverIPsecString: %@
Deallocing UTunConnection %@ %p
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed: %@ -> %@
Removing continuity message %@
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
%@ Failed to open UTun socket, waiting...
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
UTUNConnection sendMessage
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Clearing fallback stickiness due to: %@
Server Bag provided us with a fallback timeout of %f
   **** cloud fallback disabled ****
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
%@ sending resource transfer cancel message %@
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
Overriding previous decision on message for topic %@ due to feature flag that allows messages will empty traffic classes
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
%@ _dequeueMessage - %@ messageCount %lu
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection _isCloudEnabled:%@ (%@, messageCount:%d)
%@ is not available, waiting.
Message with guid %@ not allowed due to its traffic class
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT usage is not allowed, failing message
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
%@ created sending power assertion %@
Message %@ added to queue, total message count %d, sendingTopics count %d
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
%@ Sending message[%lu] %@ %@.
%s: statsDictionary is nil for direction %d
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
Received UUID list adding message UUID %@, purging old UUIDs %@
Received UUID list adding message UUID %@
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
Duplicate file transfer setup detected {duplicateUUID: %@}
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ informed that IDSNWSocketPairConnection has closed.
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
_otrTokenToArray: invalid OTR token %@
Registration is not supported on this device
Scheduling heartbeat in %f seconds
Given a nil CTPNR! { self: %@, CTPNR: %@ }
Phone Number Validation registration agent has sent %d SMSs
Lockdown state: %@
1. Setting SMS status to: IDSSMSIdentificationStatusIdle
Phone Number Validation agent dealloc
Determined whether user subscription selection is still pending { isDualSIM: %@, hasSelectedPhoneNumber: %@, didReceiveSIMSetupCompleteNotification: %@ }
SMS registration center notify failure
2. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center notify success
3. Setting SMS status to: IDSSMSIdentificationStatusIdle
Device is currently locked down, we're not able to proceed (State: %@)
SIM is not ready to proceed with registration
 SIM State says cannot register, registration State
Lockdown changed
     ==> We're activated, let's go, waiting...
Registering %@ for lockdown changes
Device ID Changed
     ==> We're in a good SIM State, checking heartbeat, waiting...
Received PNRReadyStateNotification { state: %@
CT phone number registration request sent { success: %@, timeout: %@, pushTokenHexEncoding: %@ }
Successfully sent registration request
Failed to send registration request
CT phone number registration response received { data: %@ }
Handling incoming phone number registration response { phoneNumber: %@, signature: %@ }
Received failed status in phone number registration response { status: %@ }
Checking to see if we restored from backup: %@
     ==> Restored from backup, and we need to re-register here, waiting...
     ==> System backup complete, waiting...
     ==> System restore state changed, waiting...
     ==> SIM setup did complete -- kicking heartbeat
     ==> Keychain migration complete, waiting...
Phone Number Validation Request Delivery clear timer fired
We're idle, bailing
Overriding Phone Number Validation Request timeout for registration with: %f   remove %@: %@    to stop this
Attempting to send SMS verification { mechanism: %@ }
Still waiting on timeout to clear for next Phone Number Validation request to be delivered, waiting
4. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
     ==> We have no push token, bailing, waiting...
6. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
We're currently iterating over Preflight mechanisms -- continuing { currentPreflightStack: %@ }
Sending Preflight message
Setting test data on preflight message { testData: %@ }
Setting IMSI and PLMN on preflight message { IMSI: %@, PLMN: %@ }
Received preflight response { error: %@, resultCode: %ld, resultDictionary: %@ }
Sending phone number verification { mechanisms: %@ }
Failed preflight -- failing phone number validation
Preflight unsuccessful -- cancelling scheduled heartbeat
_tryToSendSMSIdentification   state: %d
7. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Checking if user has disabled SMS Registration
Phone Number Validation has been disabled by the user
Required user selection has not yet been set and system setup is in progress -- deferring SMS identification
     ==> We're not in the right state to being Phone Number Validation request identification, waiting...
     ==> Device can't register now, waiting...
     ==> SIM is not ready to register, waiting...
Need to request user permission for SMS, but system setup is in progress -- deferring SMS identification
Should notify about Phone Number Validation requests for this carrier
Obtained permission to send SMS from requestor -- kicking identification
Did not obtain permission to send SMS from requestor -- failing registration
Phone Number Validation Request Notification request is up
     ==> Can't send Phone Number Validation requests right now, need to wait for timeout, waiting...
Already completed max number of Preflights; deactivating service { maxPreflights: %d }
Haven't completed max number of Preflights yet { preflights: %d, maxPreflights: %d }
Already sent max number of SMS; deactivating service { maxSMSSends: %d }
Haven't sent max number of SMS yet { sends: %d, maxSMSSends: %d }
8. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
Preflight disabled; sending legacy phone number verification
Preflight short-circuiting; sending phone number verification with overrides
Beginning preflight
No requestors are present for delegation of SMS permission
SMS registration handle SMS delivery failed
Registration request failed delivery { preflights: %d, sends: %d, attemptsWithoutSend: %d }
No requestors -- we must have been cancelled
Retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d }
9. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Not retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d, shouldBypassRetry: %@ }
Max retries consumed -- failing phone number validation
10. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center handle SMS successfully delivered
Registration request successfully delivered
11. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationResponse
Using telephony-provided timeout { telephonyTimeout: %@ }
Setting timeout for Phone Number Validation Request { timeoutInSeconds: %f, minimumReasonableTimeout: %f, defaultTimeout: %f, telephonyTimeout: %@ }
SMS registration center handle incoming SMS
Received registration request response SMS
Phone number: %@     Class: %@
Signature: %@        Class: %@
Discarding registration request response, because we are not in the correct state to accept it
Invalid number provided: %@   Class: %@
Invalid signature provided: %@   Class: %@
12. Setting SMS status to: IDSSMSIdentificationStatusIdle
Resetting Phone Number Validation Attempt counter from %d to 0
Resetting Phone Number Preflight attempts to 0 { _numberOfPreflights : %d }
SMS registration center timed out waiting for SMS
Timed out waiting for Phone Number Validation response
Sending another
Adding phone number valiation requestor { requestor: %@, requestors: %@ }
Removing phone number valiation requestor { requestor: %@, requestors: %@ }
13. Setting SMS status to: IDSSMSIdentificationStatusIdle
Heartbeat
    State: Idle
    State: Waiting to begin Phone Number Validation request identity verification
    State: Waiting for Phone Number Validation request identity delivery
    State: Waiting for Phone Number Validation request identity response
    State: Unknown: %d
     ==> We're idle, ending this heartbeat madness now
     ==> Waiting for identity response, waiting...
     ==> Registration is not supported, skipping heartbeat
     ==> Waiting to begin SMS, starting now
Not getting dependent registrations, we don't have a registration
Not getting dependent registrations, we're not authenticated for: %@
*** Lockdown state is expired, not sending dependent registration check
Adding registration %p to getDependent queue
Adding completion block %p to getDependent queue
Requesting dependent device info for registration: %@
  Received get dependent registration response with result: %d  error: %@
 response for message: %@
   response idsUserID: %@
  * Device Name: %@   Service: %@   Hardware: %@   Token: %@   Linked URIs: %@   Identities: %@   Device Data: %@   Sub-services: %@   HSA trusted: %@
No GUID for registration %@, when processing getDependentRegistration response
Sending get dependent registration request: %@  (Environment: %@)
We have an outstanding getDependentRegistrations request for userID: %@
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
Set OTR timer %p for %@
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
%@ - No account for service name %@ found to send a message, bailing...
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
Group updated, sending ahead to members { topic : %@ }
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
Saving OTR session class %@ store (Success: %@)
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
array_ref = %@
firstCommonName = %@
Completed ID query {uri: %@, fromURI: %@, error: %@}
Purging tokens forURI %@ fromURI %@ fromService %@
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Will add valid expiry
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@ addValidExpiry
Trying to cache Invalid for ourselves, ignoring...
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => From Service: %@
 => Bogus ID query for: %@   ignoring this
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Forcing query for URI: %@
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over an hour, resetting query per hour count
New start query date %@
We have at least one valid result, returning cached results %@
Device does not have a cert, attempting to proxy the query
Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ 
Updating Cache  %@
Calling Completion Block  %@
We're at %d queries for this hour
We're at %d queries for this hour, can't do more
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Non-string key in cache (service) -- Removing
Non-dict value in cache (service) -- Removing
Corrupted entry in cache (missing dict). Removing entry
Corrupted entry in cache (status). Removing entry
Corrupted entry in cache (lookUpDate). Removing entry
Removing entry with unknown status {URI: %@, URIDict: %@}
Exception processing cache -- deleting {exception: %@}
Loaded cache: %d items
Loaded cache, but empty
Saving cache: %d items
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
DB version up to date
Updated DB to version 100
Handling request sysdiagnose push {userInfo: %@}
Exception caught in IDSRegistrationPushHandler {exception: %@, handler: %@, selector: %@}
Caught exception handling request sysdiagnose push {exception: %@}
Caught exception handling server triggered prompt push {exception: %@}
Handling register push {userInfo: %@}
Caught exception handling register push {exception: %@}
Handling reload bag push {userInfo: %@}
Caught exception handling reload bag push {exception: %@}
Handling handles updated push {userInfo: %@}
Caught exception handling handles updated push {exception: %@}
Handling devices updated push {userInfo: %@}
Caught exception handling devices updated push {exception: %@}
Handling flush cache push {userInfo: %@}
Told by server to flush entire query cache
Caught exception handling flush cache push {exception: %@}
IDSRegistrationPushHandler - Accepting incoming pushes
IDSRegistrationPushHandler - No longer accepting incoming pushes
Activating {xpcDaemon: %{public}@}
clientConnection missing pairing entitlement -- returning nil pairing collaborator {xpcDaemon: %{public}@}
clientConneciton has pairing entitlement -- returning pairing collaborator {xpcDaemon: %{public}@, collaborator: %{public}@}
Get pairingDeviceManager collaborator {xpcDaemon: %{public}@, collaborator: %{public}@
clientConnection missing local pairing entitlement -- returning nil reunion sync collaborator {xpcDaemon: %{public}@}
clientConnection has local pairing entitlement -- continue {xpcDaemon: %{public}@}
clientConnection missing test tool entitlement -- returning nil internal testing collaborator {xpcDaemon: %{public}@}
Warning: [[request IDSSessionID] length]: %lu != sizeof(uuid_t): %lu
QRAllocation destroyed
Invalid session. Skip AWD report
access token of allocation for QR session %@ expired (%f > %@). Discard it.
_purgeAllocation: Invalidate allocation
allocation timeout timer cancelled
allocation timed out
Sending server message QR metrics allocation timeout report for session %@ requestID: %@
failed to send server message allocation timeout QR metrics report: error: %@  code: %ld
Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@
Dealloc IDSQuickRelayAllocator %@.
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
_sendAllocateRequest: called
failed sending allocate request: %@ error: %@  code: %ld
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler: called {sessionID: %@}
translate deviceID: %@
shared session allocation, previous connect status: %p
setTestOptions: IDSGroupSessionForceQRSession
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
QuickRelayServerProvider switch has been deprecated
request allocation for a specific address %@
_setupAllocation: preferredRemoteInterface %@
QuickRelayServerAddress test option: %@
QuickRelayServerAddress test options: IDSGroupSessionForceDegraded
Send allocate request, recipient count: %u, request: %@, time: %.6f.
Stream information to cache, idsSessionID=%@, isJoinAllocation: %@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
setupNewAllocationToDevice:options:connectReadyHandler: called {deviceID: %@}
setup allocation for %@ service to device %@
_getResponseFromQRGroupID: called {QRGroupID: %@}
No response found for groupID: %@
_setResponseForQRGroupID:groupID: called {groupID: %@}
getAllocateResponse:groupID called {groupID: %@}
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
_mergeParticipantID2PushTokenMapping:sourceResponse:sourceResponse:mappingChange: called
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
_notifyParticipantID2PushTokenMappingChange: called
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
use duplicated response
ignore duplicated response
failed to find IDSDSession object for %@
no IDSDSession ID in %@
Should switch from %@ to %@
message added to cache: %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
_getSelfAllocationFromCache: allocation is nil {sessinID: %@}
_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock: called { fromService: %@, shouldForceQuery: %@, fromURI: %@, fromIdentity: %p, recipientIDs: %@ }
_setupNewAllocation: called {sessionID: %@}
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response for %@: %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@
trying to change a read-only dictionary
look up peer with URI: %@, push token count: %u, tokens: %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
_startQRConnectionWithDefaults: called {sessionID: %@}
use QR session info from user defaults: %@.
no push token for participantID %@
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
URI for participant ID %@ in group %@: %@
No URI for participant %@ in group %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
Received allocate response for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ from cache: %@ with payload %@
QRserver ipv4: %@:%@, ipv6:%@
failed to compose a QR sessionInfo dict
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
Recieved allocation from DefaultPairedDeviceID {appID: %@}
Relay expiry time-stamp is NaN: %@
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined, ids: %@
useCurrentResponse=%@, sharedSessionHasJoined=%@
participant has joined with cached response
joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAllocation = %@
should connect to qr server: %@
Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
could not find original allocate request %@
set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@
No stream information
isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@
connecting with sessionInfo %@
recipient waits for session acceptance
_isDuplicateResponse:newResponse: called
_processSelfAllocations:allocation: called
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
_getCombinedSoftwareID: called
failed to get combined-software-id due to invalid parameter.
_createSessionInfoFromResponsePayload: called
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
Warning: invalid response relaySessionID length = %lu != sizeof(uuid_t) = %lu
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
_setSessionInfoRequiredKeys called
 is missing required attributes %@ in sessionInfo %@
_processAllocationStatusResult: called
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
No ids session for ids session id %@
No ids session id for request id %@
No request id
_sendAWDMetricsForAllocation:status:hasRecipientAccepted: called
missing response. Skip AWD report
_startQRConnectionForSession:isInitiatorsAcceptedSession: called {isInitiator: %@} sessionInfo %@
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect, allocation: %p, %p, session should connectToQRServer: %@
failed to find response for groupID %@
_storeMappingFromPushTokenToURIs:fromURI:service:cert:forGroup: called {groupID: %@}
_uriToParticipantID: called sessionInfo %@
there is no URI list yet. stopped converting URI to Participant ID - %@
getRelaySessionIDForIDSSessionID:pushToken: called {sessionID: %@, pushToken: %@}
failed to find allocation for session %@
getPushTokenForRelaySessionID:relaySessionID called {sessionID: %@, relaySessionID: %@}
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
setInitiatorsAcceptedToken:pushToken: called {pushToken: %@}
add accepted session %@ with token %@
getServerProviderForIDSSessionID: called {sessionID: %@}
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms, idsSessionID %@, isInitiator:%@
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
invalidateAllocation: called
Add allocation For Session: %@, _sharedSessionHasJoined=%@, %@
Discard allocation For Session: %@, %@
invalid allocationList
_invalidateSession: %@
_removeAllAllocationsForSessionID: %@, %@
keepalive timer stopped for %@
_findAllocationForSessionID:requestIDStr called {sessionID: %@, requestID: %@}
couldn't find corresponding allocation for %@
invalid allocationList for %@
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
Warning: [decodedUUIDData length]: %lu != sizeof(uuid_t): %lu
decoded base64 relay-session-id %@
decoded base64 relay-session-token %@
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
handler:didReceiveMessage:forTopic:fromID:messageContext: called
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
_getGroupID called
_uuidFromNSStringToNSData called
Cannot find allocation for session %@, all allocations: %@
startKeepAliveTimer:relaySessionID called - {sessionID: %@, relaySessionID %@}
keepalive timer started for %@
stopKeepAliveTimer:relaySessionID: called {sessionID: %@, relaySessionID %@}
keepalive timer not found for %@
cleanup response count: %zu
clean up response for groupID %@
cleanup timer disabled
cleanup timer started
Error: data length: %lu != sizeof(uuid_t): %lu
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
can't allocated used port
Phone number validation mode overridden by user defaults { modeFromDefaults: %ld }
Preflight disabled by server bag override -- falling back to legacy
*********** Override max SMS retries value to %ld
*********** Override max SMS delivery retries value to %ld
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
%@ registering for service %@ as %@
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
NRDevicePreferences created with NRDeviceIdentifier %@.
Failed to create NRDevicePreferences {deviceIdentifier: %{private}@, nrDeviceIdentifier: %{private}@}
Failed to create NRDeviceIdentifier {deviceIdentifier: %{private}@}
Creating IDSNRDevicePreferencesHandler with nil deviceIdentifier
Calling [NRDevicePreferences deviceSetupStarted:]
Calling [NRDevicePreferences deviceSetupCompleted:]
Called [NRDevicePreferences setQuickRelayRequest:] {wantsQuickRelay: %@}, {quickRelayRequestsCount: %lu}
Report Spam response: %@
IDSEncryptionErrorType unknown/unhandled error type: %d
Asking to convert an error of the wrong domain to an IDSEncryptionErrorType { error: %@ }
Invalid OTR Encrypt parameters -- failing {inputDataLength: %llu, queue: %@, OTRToken: %@}
   OTR encryption failed with error: %@
Could not find OTR session for token: %@
   OTR decryption failed with error: %@
Cleaning up: %@
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
Exception caught archiving connectionData, skeData Exception: %@
Processing local device info query...
Responding to local device info query: %@
Responding to paired device info query: %@
No legacy connection, bailing...
Trying to send invite to inactive device, ignoring %@...
Using local account, can only send invitation to active device, ignoring %@...
Send invitation with destinations %@ newDestinations %@ pairedDestinations %@ allOtherDestinations %@
Got connection data %@, isScreenSharingSession %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Creating connection data, isScreenSharingSession: %@
Failed to get connection data with error %@, isScreenSharingSession %@
Not ending this session as it's still being connected or already connected
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
Sending invitation to %@, %@ <%@>
Sent message {isScreenSharingSession: %@, isLegacyOverride: %@, destinations: %@}
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
We are the receiver, we can only DECLINE the invite, not CANCEL
Sending CANCEL %@, %@ <%@>
acceptInvitationWithData isWithDefaultDevice (%@) enableQuickRelay (%@), useQRDirectly (%@), isFaceTime(%@)
No remote blob, bailing...
Failed to get legacy connection data with error %@
At ACCEPT invitaion - from %@, session %@, expecting remote device encryption but remote does not specify
acceptInvitationWithData remoteBlob %@
Failed to get local connection data, bailing...
Sending unauthenticated public identity {publicIdentity: %{private}@}
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Sending accept to %@, %@ <%@>
Sending unauthenticated public identity {localUnauthenticatedFullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
Malloc error when creating key material, ending call...
Sending accept to %@, %@, <%@>
Sending decline to %@, %@ <%@>
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Ignoring incoming accept from %@, session is not waiting for an invite response anymore
Ignoring incoming accept from %@, session is not the initiator
No participantID, bailing...
No message version, bailing...
Setting peer protocol version to %d
receivedAcceptMessage: remoteKeyMaterialLength is not equal to remoteKeyMaterialLength, bailing...
Received accept from %@, session %@, fromToken %@.
Adding %@ to set to cancel
Canceling invitations to %@
Starting screen sharing connection with remote blob
Received accept from %@, session %@, expecting remote device encryption but remote does not specify
Starting connection with remote blob
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
Received decline %@ from %@, %@
Ignoring Decline from %@, %@, not in destinations: %@
Invite was declined { givenReason: %u }
Invite was declined with reason alias deactivated { fromID: %@, _inviteTokens: %@ }
Suppressing decline, other recipients
Invite was declined, notifying everyone I invited: %@
Received CANCEL %@ from %@, %@
Ignoring CANCEL from %@, %@, not in destinations: %@
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
Core Data Load Failed
Core Data Load sucdeeded
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
Device does not support live delivery, falling back to push {deviceID: %@, strippedURI: %@}
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Sending via account that's type Local -- forcing local delivery.
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
END %@
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
CompressPayload
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection
Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}
Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
Overwriting previous remote failure with local success
IDSAccount send remotely
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
!setState command=%@
!setState destinations=%@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Added query update hash {hash: %@, fromURI: %@, service: %@}
Send completed
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage { c = %@   fID = %@   fT = %@   g = %@   t = %@   tID = %@ } bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
Invalid encryption type -- failing {encryptionType: %@}
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
No unique ID found - generating new one %@
Loaded unique ID %@
Re-generated my uniqueID %@
Got kIDSRTEncryptionMKMExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionMKMRollDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMDefaultRollDuration value, using default value of %u
Got kIDSRTEncryptionExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionPreviousPrekeyExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionPreviousPrekeyExpireDurationBagKey value, using default value of %u
forceKeyRecoveryLogic default %@ - the first incoming MKM will get dropped and we'll start the key recovery logic for the test...
setAccount: Add the registraion listener for account: %@
setAccount: added the accountID %@ for group %@
setAccount: Remove the registraion listener for account: %@
removeAccountForGroup: removed the account for group %@
requestKeyMaterialForGroup %@ sessionID %@ shouldTrackDistribution %@ shouldIncludeCachedPeerKeyMaterial %@ toSepcificMembers %@
requestKeyMaterialForGroup: there is no group session for %@. keyMaterialCache %@
There are no other participants yet. waiting...
Initializing list of participants waiting for initial key materials { groupID: %@, destinations: %@, timeout: %f }
Failed to distribute initial key material distribution to some participants -- ending session { groupID: %@, sessionID: %@, remainingDestinations: %@ }
Not setting initial key material distribution timeout { destinations: %@, timeout: %f }
Removed entry from list of participants waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
Failed to send to participant waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
_sendRenewedPrekeysToGroups: %@
_dispatchRenewPrekeyTimer is called. We'll renew prekeys in %d
_dispatchRenewPrekeyTimer - Couldn't find the identity for this device. Couldn't renew the prekey.
_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest - recovered all _pendingMasterKeyMaterials!
_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest - current _pendingMasterKeyMaterials %@, _MKMRecoveryRetryCount %u
_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest - tried %d. Reset the retryCount
createRealTimeEncryptionFullIdentity for the token %@
createRealTimeEncryptionFullIdentity failed! Please check the account registration status.
createRealTimeEncryptionFullIdentity - found the existed one %@
createRealTimeEncryptionFullIdentity - the previous one %@ is expired
createRealTimeEncryptionFullIdentity - previous pre-key is now expired.
createRealTimeEncryptionFullIdentity - we'll generate the new pre-key %@
Created the full identity %{private}@ will be expired at %@
Created the full identity %{private}@, duration %f seconds, will be expired at %@
realTimeEncryptionPublicKeyData - trying to get my device identity
Need to create the full identity for this device first...
Identity is expired. Need to roll the fresh key.
Couldn't get the identity for this device
Returning public key data: %@
Current ACK'd number of prekey: %@ for group: %@
Report the prekey ACK'd (final count: %@) result for group: %@
setRealTimeEncryptionPublicKey: We'll drop this pre-key message for group %@ since %@ is not in this group!
setRealTimeEncryptionPublicKey: public key: %{private}@ serverDate: %@ pushToken: %@
setRealTimeEncryptionPublicKey: (TEST) done: %{private}@
setRealTimeEncryptionPublicKey: done: %{private}@ fromID %@ pushToken %@
setRealTimeEncryptionPublicKey: will re-send key materials due to detected rolled identity for push token %@
realTimeEncryptionPublicKeyDataForDevice: %@
realTimeEncryptionPublicKeyDataForGroup: couldn't find any identity for %@!
publicKeys: %@
sendPrekeyRequestToGroup: %@, (destination: %@)
Found expired MkM { expirationDate: %@, MkM: %@ }
Found expired local MkM { expirationDate: %@, MkM: %@ }
Found expired next MkM { expirationDate: %@, MkM: %@ }
MKMRoll timer %p fired, block %p.
mkm roll timer %p and block %p are already scheduled.
start mkmRoll timer %p, timeout %d sec, block %p 
stop _mKMRollTimer timer %p, block %p.
mkmExpiration timer %p fired, block %p.
mkmExpiration timer %p and block %p are already scheduled.
start mkmExpiration timer %p, timeout %d sec, block %p 
stop mkmExpiration timer %p, block %p.
createKeyMaterialForGroup: %@
Failed creating the master key material for the group %@
Created the master %{private}@, the salt %@ with the index %@ for the group %@
createKeyMaterialForGroup: _mkmExpireDuration: %d is less than _mkmRollDuration: %d, use _mkmExpireDuration to renew MKM
createKeyMaterialForGroup: couldn't pass the key material to the session %@
The MKI (%@) has been expired, but there is no other active participant (group session state %d) for the group %@
The MKI (%@) has been expired for the group %@
sendMKMRecoveryRequestToDevice: %@ fromID: %@ groupID: %@ sessionID: %@
sendMKMRecoveryRequestToDevice: %@ - failed to get publicIdentityData
sendMKMRecoveryRequestToDevice: %@ - failed to get the account for this group! (accountsID %@)
sendMKMRecoveryRequestToDevice: Sent the key recovery request to URI: (%@) (pushToken: %{private}@)(message dict: %{private}@)
sendMKMRecoveryRequestToGroup: %@ - failed to get publicIdentityData
sendMKMRecoveryRequestToGroup: %@ - failed to get the account for this group! (accountsID %@)
sendMKMRecoveryRequestToGroup: Sent the key recovery request to group: %@ (message dict: %{private}@)
processIncomingPrekeyRecoveryRequest: We'll drop this prekey recovery request for group %@ since %@ is not in this group!
processIncomingPrekeyRecoveryRequest for group %@, session %@, serverDate %@, pushToken: %@, fromID: %@, message %{private}@
processIncomingPrekeyRecoveryRequest - there is no group session for group %@, session %@. We won't send any MKM.
_storePendingKeyMaterialForMKMRecovery: _pendingMasterKeyMaterials already has the pending key material (MKI:%@) for %@
_storePendingKeyMaterialForMKMRecovery: moved the incoming the master key material (MKI:%@) to temporary storage until it gets the prekey for it.
setMasterKeyMaterial: %{private}@ forDevice: %@ fromID: %@ groupID: %@ sessionID: %@ fromSender: %@ publicKey: %@
setMasterKeyMaterial: We'll drop this MKM %{private}@ for group %@
setMasterKeyMaterial: This MKS data %@ is not %d bytes. skipping...
setMasterKeyMaterial: This MKI UUID data %@ is not %d bytes. skipping...
setMasterKeyMaterial: This MKI %@ is local key material. skipping...
setMasterKeyMaterial: There is no local full identity.
Early returning from setMasterKeyMaterial for cached MKM. {MKI: %@}
setMasterKeyMaterial: the simulator can't decrypt protectedMKMData %@
setMasterKeyMaterial: done: MKM: %{private}@ MKS: %@ MKI: %@
setMasterKeyMaterial: not delivering key material to client -- already delivered MKI: %@
requestPendingKeyMaterialsForSession: couldn't find the session %@
noteReceivedGroupMasterKeyMaterials: couldn't find the session %@
noteReceivedGroupMasterKeyMaterials: updated the cache %@ for the group %@
We never got the key material for the group %@
We don't have any key material for the group %@
sendPendingKeyMaterialsToGroup: %@, pendingMasterKeyMaterials: %@
sendPendingKeyMaterialsToGroup: %@ - didn't find any pending keys.
sendPendingKeyMaterialsToGroup: %@ - found the pending key %@
_protectedCachedKeyMaterialsForDestination: keyMaterialCollection is nil for %@ (%@)!
_protectedCachedKeyMaterialsForDestination: returning %@
There is no the key material yet for %@. This shouldn't happen... (keyMaterialCache: %@, mkmData: %@)
sendKeyMaterialsToGroup: %@, mkmData: %@, keyMaterialCache: %@, _participantsForGroup: %@, destinations: %@
Found _publicIdentity %@ for pushToken: %@ and publicKey: %@
sendKeyMaterialsToGroup: the test is going to use protectedMKMData %@, publicIdentity %@
Couldn't find the publicIdentity for pushToken: %@
sendKeyMaterialsToGroup: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsToGroup: aborting send of key material message to %@ for group %@ and session %@ since this destination is not in group membership: %@ (pending participants %@)
MkM message failed to send! { destination: %@, responseCode: %ld }
Sent MKI %@ to URI: (%@) (pushToken: %{private}@)(protectedMKM size: %lu)(MKM size: %lu)(message dict: %{private}@)
sendKeyMaterialsToLocal: currentLocalMKM %@ to the session %@
sendKeyMaterialsToLocal: currentLocalMKM %@ to the session %@, but already sent...
sendKeyMaterialsToLocal: couldn't pass the key material to the session %@
Server Bag provided us with should enforce remote timeout %@
reset the device prekey
Removed active participant { groupID: %@, activeParticipant: %@, participantsForGroup: %@ }
resetKeysForGroup: %@ keyMaterialCache: %@, shouldRemoveCurrentParticipants: %@
unsubscribeEndpointsForGroup: %@ updatedMembers: %@
reportTimeDifferenceBetweenFirstPacketAndMKI: timeDelta: %lld MKI: %@
sendMessage: account: %@ fromID: %@ - failed to get the account forGroup: %@
Sending group session encryption message { GUID: %@, command: %ld, timeout: %f }
Group session encryption message completion block fired { GUID: %@, command: %ld, responseCode: %lu, lastCall: %@, error: %@ }
sendMessage: Sent messageID %@ to the destination %@ command %@ (message: %@)
sendPublicKeyToGroup: failed to get groupID
sendPublicKeyToGroup: %@ - failed to get publicIdentityData
sendPublicKeyToGroup: %@ - failed to get sessionID
sendPublicKeyToGroup: %@, ACK'd: %@ (destination: %@)
sendPublicKeyToGroup: %@ (destination: %@)
sendKeyMaterialsToWaitingParticipantsForGroup - Sending the key material to %@ of the group %@ (pending participants %@)
sendKeyMaterialsToWaitingParticipantsForGroup - didn't send any key materials to %@ of the group %@ (pending participants %@)
rollNewKeysAfterResettingPrekeysForGroups: %@ reason: %ld
rollNewKeysAfterResettingPrekeysForGroup: Couldn't find the session for group %@! Coulnd't notifity the device change event
didReceiveEndpointsUpdate: %@ forGroup: %@ - invalidated the previous key rolling timer. Wait %f seconds more again to get more endpoint updates... (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - roll new keys for the group (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - nothing changed.(previous %@)
setMembers: %@ forGroup: %@
setMembers: endpointSubscription %p forGroup: %@
ACK'd prekey count is reset to 0 forGroup: %@
setMembers: endpointSubscription: %p initialResolvedEndpoints: %@ error: %@ _lastKnownGroupIDToPushTokens: %@
didUpdateMembers doesn't do anything since previous %@ and new %@ are same.
didUpdateMembers previous %@, new %@
didUpdateParticipants previous %@, new %@, diff %@
participantsDiff count = %lu, no need to be added to participantsNeedsKeyMaterial
participantsNeedsKeyMaterial: %@
didUpdateParticipants %@ is mine! don't need to add
didUpdateParticipants waiting praticipant %@ no longer exists! don't need to add
didUpdateParticipants - Sending the key material to %@ of the group %@ (pending participants %@)
didUpdateParticipants - didn't send any key materials to %@ of the group %@ (pending participants %@)
didUpdateParticipants - participants have been updated but we are not yet able to send key material to participants %@
didUpdateParticipants - after %f sec, now sending prekey request to group because we still have not delivered key material to participants %@
didUpdateParticipants - adding participant to destinations for prekey request %@
didUpdateRegisteredDevices: %@ for account: %@
Clearing postponed messages
Database state:
  Outgoing (account_guid, count)
%@  Incoming (topic, count)
Performing initial database housekeeping
Exception handling message %@, %@
Bad messageData for incoming message %@!
StoreInMessageStore
Storing incoming message
Ignoring storeMessage: %@ forTopic: %@ fromID: %@
Bad message data for incoming message %@!
Finished storing message
Hit exception %@ decoding outgoing IDS message!
Hit exception %@ decoding outgoing duet identifier overrides!
Performing MarkingLocalDestiations with accounts %@ and device %@
Marking all pending delete messages for account %@
Ignoring storeOutgoingMessageWithSendParameters: %@ destinations: %@ accountID: %@
Asked to bypass storage for message with GUID %@
StoreInDatabase
Bad destinationData for outgoing message %@! Error: %@
Hit exception %@ encoding outgoing IDS message!
Asked to send Message with guid: %@  database check for similiar messages that should be sent first says %@
We already have message with guid %@ alternate %@ in the database, dropping this redundant resend without calling completion.
deleteOutgoingMessageWithGUID:alternateGUID: {guid: %@, alternateGUID: %@}
IncomingMessage
Exception performing database block %@
Message store map %@
Unexpected datatype. %@ should be of type %@, not %@
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientURI length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientURI length: %lu
We have exceeded the maximum queue size, dropping message %@
File transfer for message %@ [%@] is already in local delivery queue. Dropping duplicate.
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
* No pending messages not on %@
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: allowing WiFi hotspot
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
Resolved IDSDSession fromID is not a valid selected alias on the account! This may cause messaging failures. { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }
Resolved IDSDSession fromID { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }
QuickRelay is disabled for service: %@, session: %@.
QuickRelay is enabled for service: %@, session: %@.
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
Failed to create session because failed to create unauthenticated public identity even though key was present
Setting invite timeout to %f seconds
Session invite timed out after %f seconds
Clearing invitation timeout timer
Clearing connection timeout timer
Setting connection timeout to %f seconds
Session connection timed out after %f seconds
Clearing session packet loss timer
Clearing end session timeout timer
Setting end session timeout to %f seconds
End session timed out after %f seconds
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - on a call and wifi isn't usable, enqueuing query to avoid mRAB
%@ - too many enqueued queries, dropping this one
%@ - we're not on a call or wifi is usable, processing query immediately (On call: %@   Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
received message from peer(%d): %s
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
*** Incoming cached ID status query for (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
__HandleRemoteDeviceQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
Failed to load persistent cache data from keychainWrapper {error: %{public}@, identifier: %{public}@, keychainWrapper: %{public}@}
Failed to save persistent cache data to keychainWrapper {error: %{public}@, identifier: %{public}@, data: %{private}@, keychainWrapper: %{public}@}
Tried to purge before available -- returning {self: %@}
Failed To load key -- returning nil {error: %@, keyIdentifier: %@}
CCCrypt failed -- purging && returning nil {cryptResult: %d}
Failed To remove file {error: %@, path: %@}
Failed To Generate IV {ivResult: %d}
Failed to get a stored key, generating a new key {error: %@, result: %@}
Failed To Generate key {keyResult: %d}
Failed to save key -- returning {keySaveError: %@}
Failed to purge stored key {removeError: %@}
GUID %@ Destination %@ lacks interesting property %@
GUID %@ Destination %@ lacks required property %@
GUID %@ Destination %@ has property %@ we do not want
GUID %@ Tokens for URI:
GUID %@ Skipped Destinations:
Couldn't pull message guid out of %@, using %@
IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@
Missing phone number authentication entitlement -- failing creation of IDSDXPCRegistration collaborator {connection: %@}
Allowing bypass entitlement to read from IDSXPCRegistration {connection: %@}
Unable to fetch sims -- returning nil {simFetchError: %@}
Client requested selected subscriptions {subscriptions: %@, selectedLabelIDs: %@, selectedSIMs: %@}
Client requested unselected temporary phone aliases, but not in state where home number is allowed {isiCloudSignedIn: %@, allowHomeNumber: %@}
Client requested unselected temporary phone aliases {descriptions: %@, users: %@}
Writes are disabled -- failing `selectSubscription:`
Writes are disabled -- failing `unselectSubscription:`
Writes are disabled -- failing `setSelectedSubscriptions:`
Writes are disabled -- failing `removeTemporaryPhoneAlias:`
Told to remove temporary URI { uri: %@ }
Writes are disabled -- failing `disableTemporaryPhoneAlias:`
Told to disable temporary URI { uri: %@ }
Writes are disabled -- failing `enableTemporaryPhoneAlias:`
Told to enable temporary URI { uri: %@ }
Failed to remove peerIDCache v0 {error: %{public}@}
Failed to remove peerIDCache v1 {error: %{public}@}
Failed to remove peerIDCache v2 {error: %{public}@}
Failed to remove peerIDCache v3 {error: %{public}@}
Migrated Peer ID persistent map {oldVersionNumber: %ld}
Query cache:
Key: <%{public}@,from:%{private}@,to:%{private}@>
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
Found KT status in query result { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }
Per-URI KT account identifier is missing from the IDS response, which may cause KT verification failures -- using URI hash instead { KTAccountID: %@ }
Found identity:
             device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
              kt-loggable-data: %@
      kt-mismatch-account-flag: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
                    Overwriting soft TTL with: %ld seconds
                    Overwriting hard TTL with: %ld seconds
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
** At least one session token expired for: %@, need to get new ones
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
Enqueueing cleanup if needed
Checking to cleanup expired entries if needed {now: %@, val: %@}
%@ returning serviceConnectorServiceForAccountString=%@._account=%@;_service=%@;_name=%@
problem: %@ is going to use the main queue.
%@ called nw_service_connector_cancel_active_connection
%@ cannot cancel service connector for connection._serviceConnector=%@;_defaultPairedDeviceEndpoint=%@;serviceConnectionServiceString=%@
Dealloc'ing IDSGenericConnection without it being invalidated
Invalidating IDSGenericConnection %@
genericConnection for %@ using BT datagram link - stop
%p %@ Stall warning [%@]
%p Created the stall detector %@
initWithReadHandler: readHandler: %p, self: %p
Timing events: (%0.9f to generate)
Custom Test 1 - simple control channel internal fail
Custom Test 2 - reset before control channel internal fail
Custom Test 3 - simulate the control channel connection reset loop
Custom Test 4 - dump logs with flags %08X
Custom Test 5 - simulate reaching file descriptor limit
Custom Test 5 - made new socket %d
Custom Test 6 - pop alert
Custom Test 7 - trigger utun socket stall detection
Custem Test 7 - Couldn't find the detector %@
Custom Test 8 - filling utun os_channel...
Custom Test 8 - filled utun os_channel after %d dummy writes
Custom Test 9 - Inject Corrupted BT packet.
Custom Test 10 - Control Message + main queue deadlock test (avoidMainQueue: %@
Custom Test 10 - skipping test for %@ on %@
Custom Test 10 - about to ask main queue to sync onto TransportThread for %@ on %@
Custom Test 10 - about to sync onto TransportThread for %@ on %@
Custom Test 10 - sync operation on TransportThread for %@ on %@
Custom Test 10 - sync onto TransportThread returned for %@ on %@
Custom Test 10 - telling control channel to encrypt and send message for %@ on %@
Custom Test 10 - asked main queue to sync onto TransportThread for %@ on %@
Custom Test 11 - simulate starting control channel again
Custom Test 12 - Kill all links
Custom Test - unsupported %ld
%@: created the stall detector for %@
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
ids-ipsec: service string %@ needs to have 3 components
ids-ipsec: startDataChannelWithDevice called with generic connection %@ for service %@ and endpoint %@ connection-cache %@
ids-ipsec: calling internalStartConnectionWithEndpoint with cloud option for service %@
Asked to set up a connection when we dont have a paired device!  Aborting...
error creating socket with [%@] [%@]
ids-ipsec: start_request returns error but data channel fine - assuming connected via available block. Error %@
startDataChannelWithDevice: finished with no error, but no socket and no connection
ids-ipsec: service connection (%p) %@ connected for service %@ but no generic connection - saving in cache
Extracted {socket:%d} from internal {socket:%d} of (%p) %@
Failed to extract internal socket of (%p) %@
connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
Enabled new connection, cancelling previous instance (%p) %@
This connection %@ has already been invalidated. Calling _closeSockets.
connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@
about to wait for connect ready for {socket:%d}
connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
getsockopt failed %d
Saved sdCopy {socket:%d} of {socket:%d} in %@
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
Skipping header compression for phone continuity
scheduled wait for connect ready for {socket:%d}
openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!
%@: close channel control message [%@] created for connection %@
ids-ipsec: found service connection %@ in cache for service %@
ids-ipsec: create udp connection %@ for service %@ endpoint %@ localPort %@ remotePort %@
setupIPsecLinkForDeviceConnectionInfo serviceConnector %@ cloudServiceConnector %@
setupNewDeviceConnectionInfoForCbuuid %@ deviceUniqueID %@ shouldUseIPsecLink %@
FairPlay authentication failed, obliterate device connection.
Device %@/%@ (CC:%@) is blacked out due to fairplay failures
Add a block for control channel reestablishment on link connects for %@
Failed to encrypt/decrypt control message with deviceUniqueID %@, try different peer for %@.
deviceUniqueID mismatch (%@!=%@), ignore decryption error.
Successfully decrypted control message, lock peer %@ for cbuuid %@.
%p: control channel got message %@ device conn info:%@
Add a block for initial control channel setup on link connects.
TransportThread initialization failed
sysctl for kern.skywalk.ring_stat_enable failed %d
ids-ipsec: cancelling active connection for %s on %@ with parameters %@
ids-ipsec: starting service connection for %s on %@ with parameters %@
nw_service_connector_start_request returned connection(%p) %@ error %@ for %s
nw_service_connector_start_request returned EEXIST - exit
nw_service_connector_start_request returned EINPROGRESS - exit
didConnectControlChannelForDeviceConnectionInfo called: connection %@ error %@
ids-ipsec: start_request returns error but control channel fine - assuming connected via available block. Error %@
startControlChannelWithDevice: error creating control channel with [%@] [%@]
UTunController control channel for [%@] creation failed: %@
For the fixedInterface case, obliterate the connection.
UTunController control channel for default paired device could not be started for %0.3lf seconds
UTunController calling startControlChannelWithDevice for [%@] after %d seconds
startControlChannelWithDevice: finished with [%@]
startControlChannelWithDevice called but already connecting/connected - force continue %@
startControlChannelWithDevice called but already connecting/connected - returning %@
startControlChannelWithDevice over ipsec path for %@
startControlChannelWithDevice called but pairedDeviceUUIDString is nil.
startControlChannelWithDevice over utun/bt path for %@
startControlChannelWithDevice - waiting for connect ready for %@
legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]
getsockopt failed %d / %s
socket error %d / %s
reset TCP for genericConnection %@ serviceConnection %@
reset TCP for genericConnection %@ using seq:%08x ack:%08x
%@: closing connection %@
closeSocket for %@ using BT datagram link - stop
%@: waiting for first openSocket
%@: encryption expects 0xe000 - packet is corrupt
%@: unable to find decryption context for ssrc:%08x data:[%@%s]
%@: connection %@ is already invalidated for ssrc:%08x - dropping this incoming packet
%@: dropping unknown proto[0x%01x] packet (encrypted) [%@]
%@: dropping unknown proto[0x%01x] packet [%@]
%@: failed to resolve connection for remoteCID 0x%04x
%@: found connection with mismatched (remoteCID 0x%04x != remoteCID 0x%04x)
%@: remoteContext is nil for remoteCID %d, decompression failed.
%@: IDSHC_DecompressSimple failed (%lu)
%@: checksum failed for connection %@
%@: Got TCP %dB (flags[%02X] [%s%s%s%s])) for %u <= %u (connection %@ (%p))
%@: dropping TCP (unencrypted) - expect to be encrypted
Control channel reestablishment request from [%@]
<= data[%@%s]
Control channel setDidReceiveReestablishment %@ after reestablishment request
%@: dropping TCP (unexpected - no first packet) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
Received the first data packet for %@
Got reset for connection %@
%@: dropping TCP (no connection) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
%@: dropping UDP (no connection) %dB for %u <= %u
%@: dropping UDP (unencrypted) %dB for %u <= %u
for device %@: binding to [%@ [%@] @ scopeid=%d] iRet=%d (errno=%d)
connecting to [%@ @ scope=%u] %d (%d)
%@: got control message: compression_req %@
%@: UTCMType_CompressionRequest has invalid header length (%lu)
%@: UTCMType_CompressionRequest cannot decode remoteConnectionGUID
%@: UTCMType_CompressionRequest cannot decode localConnectionGUID
%@: invalid message size for UTCMType_CompressionRequest (%u != %u)
%@: recv compression_req (#:%u remoteCID:%u seq:%u ack:%u)
%@: UTCMType_CompressionRequest cannot decode account
%@: UTCMType_CompressionRequest cannot decode service
%@: UTCMType_CompressionRequest cannot decode name
%@: UTCMType_CompressionRequest found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionRequest resolved connection ports[%@]
%@: sending control message: compression_resp %@
%@: got control message: compression_resp %@
%@: UTCMType_CompressionResponse has invalid header length (%lu)
%@: UTCMType_CompressionResponse cannot decode remoteConnectionGUID
%@: UTCMType_CompressionResponse cannot decode localConnectionGUID
%@: invalid message size for UTCMType_CompressionResponse (%u != %u)
%@: recv compression_resp (#:%u)
%@: UTCMType_CompressionResponse cannot decode account
%@: UTCMType_CompressionResponse cannot decode service
%@: UTCMType_CompressionResponse cannot decode name
%@: UTCMType_CompressionResponse found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionResponse resolved connection ports[%@]
%@: compression_req (%u) acknowledged!
startCompressionForConnection failed due to invalid parameters
startCompressionForConnection ports[%@]
%@: failed to get local CID
%@: resolved next available localCID 0x%04x
%@: sending control message: compression_req (%@)
%@: control message parsing..
%@: control message too small
%@: UTCMType_EncryptControlChannel missing data
%@: got control message: encrypt control channel flags %d ispairedlocally %d ispairedremotely %d (isencrypting: %d ispairedlocally %d ispairedremotely %d)
%@: UTCMType_SetupChannel insufficient header
%@: UTCMType_SetupChannel unexpected remoteGUID/account/service/name lengths (%u, %u, %u, %u)
%@: UTCMType_SetupChannel unexpected size (%u != %u)
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: send setup channel message ports[%u:::%u] guid[%s]
%@: SetupEncryptedChannel insufficient header
%@: SetupEncryptedChannel unexpected remoteGUID/account/service/name/key lengths (%u, %u, %u, %u, %u)
%@: SetupEncryptedChannel unexpected size (%u != %u)
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
control message in reply to cleaned up connection
control message not for current connection - assume local is current for now (message is old) and send CloseChannel for remote attempt
control message repeated for current connection - assume local is current and remote reconciled
%@: nonmatching key material length (local:%u remote:%u)
%@: found connection [%@] - remote wins
%@: send setup encrypted channel message ports[%u:::%u] guid[%s] ssrc:%08x startSeq:%04x
%@: UTCMType_CloseChannel insufficient header
%@: UTCMType_CloseChannel unexpected size (%u != %u)
%@: UTCMType_CloseChannel cannot decode remoteConnectionGUID
%@: UTCMType_CloseChannel cannot decode localConnectionGUID
%@: UTCMType_CloseChannel cannot decode account
%@: UTCMType_CloseChannel cannot decode service
%@: UTCMType_CloseChannel cannot decode name
%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
RemoteConnectionGUID doesn't match, but localConnectionGUID does! Why?
%@: control message: hello control channel version is nil
%@: got control message: %@
Control channel checksum failed while receiving Hello. Resetting connection %@
%@: reset control channel didReceiveReestablishmentRequest NO
%@: got invalid control message %d
Service is nil, please provide a valid service name.
%@: UTunSocketProtocolOverride [%@] instead of specified [%@]
%@: found connection [%@] for ID [%@]
%@: early return: bypass utun with readHandler %p for connection [%@]
%@: bypass utun with readHandler %p for connection [%@]
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
openSocket for %@ using BT datagram link - start
%@: cannot allocate new port for service %@ name %@
%@: closeSocketWithOptions called with options [%@] (connection %@)
%@: UTunController unable to create new device - cannot continue
prepareDefaultPairedConnectionInfoWithDeviceUniqueID failed due to invalid linkManager
setShouldStartBTForDefaultPairedDevice: %d
_prepareConnectionInfoWithCBUUID: deviceConnectionInfo already exists %@
localdevicecontroller is paired [%@]
checking localdevicecontroller not paired
%@: openSocketWithOptions called with options [%@]
%@: openSocketWithOptions called for default paired device but no connectionInfo - aborting
%@: openSocketWithOptions unable to create new device - cannot continue
Update deviceUniqueID for controlChannel %@
Device %@/%@ is blacked out due to fairplay failures
Canceled a previously scheduled openSocket for %@. Rescheduling openSocket with new options %@.
Add a block for data channel setup on link connects.
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
cleanupSocketsForClient: clientID is nil.
closeSocketWithOptions found deviceUniqueID mismatch (%@ != %@), ignore.
Canceled a previously scheduled openSocket for %@. Not scheduling closeSocket.
Add a block for data channel close on link connects.
Rescheduling suspend traffic check in %0.2lf seconds
Suspend traffic check: connections %lu =? suspended connections %lu
Scheduling a suspend traffic check in %0.2lf seconds
Extending suspend traffic check by %0.2lf seconds
%@: suspendSocketWithOptions called with options [%@] (connection %@)
%@: resumeSocketWithOptions called with options [%@] (connection %@)
removeDeviceConnectionInfoForDevice for %@
removeDeviceConnectionInfoForDevice found no match for %@
removeDeviceConnectionInfoForDevice for %@.
removeDeviceConnectionInfoForDevice found no match for %@.
IDSUTunController connectGlobalLinkForDevice preferredLocalInterface: %i
obliterateConnectionInfo called on a device that isnt the default paired device.  Ignoring...
obliterateConnectionInfo failed due to invalid linkManager
obliterateConnectionInfo: clear all connections for cbuuid %@
obliterateConnectionInfo: completionBlock
Clearing control channel
Couldn't find deviceConnection info
addPairedDevice failed due to invalid linkManager
addPairedDevice with cbuuid %@
connectPairedDevice failed due to invalid linkManager
connectPairedDevice with cbuuid %@
deletePairedDevice failed due to invalid linkManager
deletePairedDevice with cbuuid %@
copyLinkStatsDict failed due to invalid linkManager
%s: invalid arguments
%s: reporting service stats %@
getTransmittedPacketsForDevice: cannot find device %@
setPreferInfraWiFi failed due to invalid linkManager
setPreferInfraWiFi %@
setLinkPreferences failed due to invalid linkManager
Drop OTR negotiation message for %@, link is not connected.
Drop suspend OTR negotiation message for %@, link is not connected.
Cannot use invalid interface name [%s]
Cannot get interface state for %s on disconnect
Cannot set interface state to available for %s on disconnect
Set interface availability from %u to %u (0 is available) %s
Cannot open socket for ioctl for %s on disconnect
[throughput] Now cannot send to device %@
localdevicecontroller callback [%@]
ipsec path does not require control channel encryption
control channel already paired
Made reset[%@]
setsockopt on socket (%d) succeeded for traffic class (%d).
setsockopt on socket (%d) failed for traffic class (%d), (error=%d: %s).
sending control message: encrypt control channel (%d, %d) %@
Bag loaded notification! Is in backoff mode changed to %@
No block supplied, but is this the first query: %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found invalid from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
The Query Service Is %@
Overriding response code for query with: %d   remove %@: %@    to stop this
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Query time was: %f  (URIs: %@)
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
Query used old certificate, retrying
Retries exhausted, not retrying
Server has disabled bad query signature recovery
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
We have suffered %ld network failures. Forcing the server bag to reload.
Daemon sendMessage with parameters
*** Over budget, failing sendMessage on service: %@
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Send message with send parameters
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
At least one destination is mako {destinationURI: %@, guid: %{public}@, destinations: %@}
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }
Sending message {defaultDestination: %@, messageType: %@, serviceIdentifier: %@}
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
Consumed sandbox extension [%@] handle [%llu] for file [%@]
Consumed sandbox extension [%@] handle [%llu] for original file [not %@]
No sandbox extension for received resource [%@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}
Received data %@ to be cached and sent opportunistically on service %@
Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}
Cancel opportunistic send {identifier: %@, serviceName: %@}
%li Drop point detected.
Sender's IDSDaemon will drop message.
SendToDaemon
Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }
(Messaging1) No account found for ID: %@
Client is attempting to send a message under first data protection lock, failing message
Result of can send message with account was no
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}
sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
!setState traceIdentifier=%@
OutgoingMessage
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
Enqueueing block in multiqueue {key: %@, identifier: %@, queueState: %@}
Enqueueing block in multiqueue {key: %@, identifier: %@}
At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
Decrypting message %@ of encryption type "%@"
EC message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message %@ in %f seconds
** Had decryption error: %d { guid: %@, error: %@ }
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d
%s: could not find IDSServiceProperties for topic %@
Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }
The Account Was %@
The message that will be broadcast is %@
Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
Class A key not avaialble for message %@ on topic %@
Processing stored incoming remote messages
%s: GUIDs count %lu
Processing %lu stored incoming remote messages {shouldRepeat %@}
 => Deferring message, service wants messages after first unlock only
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
Noted decryption failure for engram group {group: %@, noteError: %@}
Broadcasting Group Share Message brodcast block
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
Checking if this message corresponds to a selected alias {strippedToIdentifier: %@, accountUniqueID: %@, aliasStrings: %@, aliases: %@}
Incoming remote message
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@
Found no service for topic! %@
Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@
Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}
Told to filter message %@ from %@
Dropping message %@ from %@ because it is not on the cross-account whitelist and is coming from %@
We would drop message %@ from %@ because it is not on the cross-account whitelist and is coming from %@ but feature flag is off
Message specifies an expiration date %@ %@
Message %@ for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Sent certified delivery receipt for filtered message { success: %ld, context: %@ }
Filtering alias { accountUniqueID: %@, toIdentifier: %@, activeAliases: %@ }
Filtering but wants app ack
Filtering non-invitation message, stopping { command: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Decryption
Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting GroupShare Message top
Received Sent Ahead Group {groupID: %{public}@}
Cached Sent Ahead Group {error: %{public}@, group: %{private}@}
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
SendToClient
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
Not broadcasting
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Not broadcasting command
Shouldn't broadcast for this command %@ for received message %@ with guid %@
No Message Error, Processing Imediatly
  => Adding a delay of %f seconds to iCloud Pairing Messages
  => Processing immediately
Under first data protection lock. Sending message to storage. { guid: %@ }
Processing message for stored guid %@
Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}
No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
Issued sandbox extension [%s] for file [%@]
Failed to issue sandbox extension for file [%@]
Storage timer fired, guids we need to process: %@
We're under first data protection lock. Holding messages and not sending to clients.
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Storing under first lock
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Encryption failed with error %@
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
%s: invalid topic for saving incoming message, ignoring!
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
Cannot ack message locally without proper priority value (%d)
Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
The delivery path for message with guid %@ is %@, service: %@
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Not Proxying this message %@ payload is currently a typing indicator
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
Changing Class-A to AOverC for service %@
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
Not reflecting back initial region query success, registration is disabled: %@
Not reflecting back region validation success, registration is disabled: %@
Notifying of region validation success for registration: %@    region: %@   phone number: %@   context: %@  verified: %@
Not reflecting back started authenticating, registration is disabled: %@
Apple ID registration center notify authentication failure
Not reflecting back authentication failure, registration is disabled: %@
Apple ID registration center notify authentication success
Not reflecting back authentication success, registration is disabled: %@
  Received default invitation context with result: %d  error: %@  result dictionary: %@
  Received region validation response with result: %d  error: %@
Apple ID registration center note successful token
Noting successful token: %p   for profile ID: %@   self handle: %@  wasFetched: %@  registration: %@
About to insert bogus profile ID: %@  ignoring
Empty registration info supplied for password fetch, bailing
Starting renew for %@
Received auth token response for reg: %@
 We have a token, great!
 ** user cancelled, bailing
 ** empty token, bailing
Starting token fetch for %@
Token fetcher finished for registration info: %@
 We have a token, just sending auth
 ** Username/DSID is empty, but we have a token: %@
 ** No token found, requesting it!
Apple ID registration center authentication request
No email present for registration: %@
Not adding this to the queue, we're already trying to authenticate: %@
Fetching password for: %@  (Environment: %@)
Sending region validation request: %@ number: %@ (%@)
Sending initial context request for: %@
Requesting initial context for: %@
Requesting region validation for: %@  number: %@, %@
Kicking off authentication request for: %@
Trying to create temporary user credential with nil argument. Returning nil. { cert: %@ }
Loaded paired device state from keychain but could not decode dictionary.
Paired device properties can't be loaded because the keychain is upgrading.
Didn't find device properties to load
Paired device properties can't be loaded because of a keychain error %d.
%s: Failed to save paired devices to keychain, err: %d
Removing the paired device repository's keychain entry.
%s: Failed to remove paired devices entry from keychain, err: %d
Did remove auth cert -- reidentifying {user: %@}
Mid synchronize -- ignoring
Marshaller is waiting on accounts to load, the account controller isn't ready yet
Waiting on migration -- deferring synchronize
Performing migration if needed
Migration completed, performing synchronize
Synchronizing users to accounts {users: %@}
Removing account for restricted service {uniqueIdentifier: %@, account: %@}
Removing unwanted account for service {account: %@}
Removing unwanted temporary phone account for service {account: %@, isHSA2: %@, allowHomeNumber: %@}
Removing unwanted account for service, user is disabled {account: %@, matchingUser: %@, userProperties: %@}
Migrating account to use users {uniqueIdentifier: %@, account: %@}
Removing account without matching user {uniqueIdentifier: %@, account: %@}
Detected account has mismatching user. Marking for removal {uniqueIdentifier: %@, user: %@, account: %@}
Removing extra account for user without matching user {uniqueIdentifier: %@, account: %@}
Current existing accounts {existingIdentifierByService: %@}
Current disabled accounts {disabledByService: %@}
Not creating account for temporary user {isHSA2: %@, allowHomeNumber: %@}
Creating missing accounts for user {uniqueIdentifier: %@, service: %@}
Disabling account {uniqueIdentifier: %@, account: %@}
Can't setup phone number accounts { registrationSupported: %@, supportsSMSIdentification: %@ }
  Read %@: %@  (Class: %@)
Migrating this SMS auth token: %@  mainID: %@
******** We're missing an SMS auth token, this will SMS migration register ******** 
Using existing user mainID: %@   token: %@
Loaded auth cert: %@    ID: %@
Migrating auth cert for IDS User ID: %@
Not migrating cert for user ID, we already have one: %@
keychainDictionary: nil %@
  ** Fixed Self ID to be: %@
  ** Fixed Profile ID to be: %@
Successfully fetched token for account (%@:%@:%@): %@  (Environment: %@)
Successfully %@ token for account (%@:%@): %@  (Environment: %@  New Token: %@)
Voided auth token for account (%@)
Successfully voided password for account (%@:%@): %@  (Environment: %@)
 ... finding emails to register for DS registration based account: %@:%@
 => Added self handle: %@ to URI set
 => **** Missing self handle, not adding ****: %@
 ... finding emails to register for auto register based account: %@:%@
 => Auto adding confirmed emails: %@ to URI set
 => Auto adding vetted emails: %@ to URI set
 => No confirmed emails...
 => Removing DS Handle
 ... finding emails to register for manual handle selection account: %@:%@
 => Added confirmed emails: %@ to URI set
 => Added candidate emails: %@ to URI set
   Device numbers: %@, error: %@
 => Found sentinel alias, stripping
Skipping device number: %@  for service: %@
 => Final emails to register: %@    for service: %@  account: %@
Updating user with correct phoneNumber {user: %@, updatedUser: %@, self: %p}
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
Loading services...
Skipping load of empty service dictionary
Not loading service, invalid dictionary %@ missing identifier
Not loading service %@
... Done!
Loaded service: %@, registering successfully
Skipping unload of service %@
Sub-services - Couldn't find service %@ to load subService %@ with
   %@
Did not find service with serviceName %@, can't update sub-services
Did not find a paired device uniqueID matching %@, can't update sub-services
Current sub-services for device %@: %@
New set of subservices are the same, ignoring update
Updated sub-services map %@
Told to remove %@ but another device still needs it
Posting notification with userInfo %@
Unloading   %@
Loaded sub-services:
Top level map %@
Loading sub-services...
Loaded preferences from disk: %@
Loaded sub services from disk: %@
Stale entries: %@
Cleaned up map: %@
Fixed empty map %@
Combined services %@
No super service provided when updating service list, ignoring update...
Loaded a paired device from storage with an empty/missing CBUUID: %@
Cannot retrieve a paired device with an empty CBUUID.
Cannot retrieve a paired device with CBUUID: %@
Adding a paired device to the repository with CBUUID: %@
Invalid attempt to add the same paired device into a repository. CBUUID: %@
Putting paired device %@
Cannot store a paired device with an empty CBUUID
Removing a paired device from the repository with CBUUID: %@
Cannot remove a paired device with an empty CBUUID.
Attempting to remove an unrecognized paired device, whose CBUUID is %@ {pairedDevices: %{private}@}
Activating paired device with CBUUID: %@
Deactivating paired devices
%s Deactivating paired device with CBUUID: %@
%s Cannot activate an unknown paired device. CBUUID: %@
Purging the secured encryption keys for all paired devices.
Updating a paired device in the repository with CBUUID: %@ with deviceInfoPayload: %@
Cannot apply a device info payload to a paired device with an empty CBUUID.
Could not update the paired device with payload. No device found with CBUUID: %@
Updating a paired device supportIPsec property {cbuuid: %{private}@, supportIPsec: %{public}@}
Cannot update the capability flags of a paired device with an empty CBUUID.
No paired device found with provided CBUUID -- failed to update supportIPsec {cbuuid: %{private}@}
Updated paired device support IPsec {supportIPsec.old: %@, supportIPsec.new: %@}
Updating a paired device with CBUUID: %@ to (deviceUniqueID: %@) (buildVersion: %@) (productVersion: %@) (productName: %@) (pairingProtocolVersion: %u) (minCompatibilityVersion: %u) (maxCompatibilityVersion: %u) (serviceMinCompatibilityVersion: %u)
Cannot update the private data of a paired device with an empty CBUUID.
Could not update the paired device's build version, product version, etc. No device found with CBUUID: %@
Updated paired device build version from: %@ to: %@
Updated paired device product version from: %@ to: %@
Updated paired device product name from: %@ to: %@
Updated paired device uniqueID from: %@ to: %@
Updated paired device pairing protocol from: %u to: %u
Updated paired device min compatibility version from: %u to: %u
Updated paired device max compatibility version from: %u to: %u
Updated paired device service min compatibility version from: %u to: %u
Updating a paired device pairingType property {cbuuid: %{private}@, pairingType: %{public}ld}
No paired device found with provided CBUUID -- failed to update isTinker {cbuuid: %{private}@}
Updated paired device support pairingType {pairingType.old: %ld, pairingType.new: %ld}
Updating a paired device uris, loginID and pushToken properties {cbuuid: %{private}@, uris: %{public}@, pushToken: %{public}@}
No paired device found with provided CBUUID -- failed to update uris and pushToken {cbuuid: %{private}@}
Updated paired device support uris and pushToken {uris.old: %@, uris.new: %@, pushToken.old: %@, pushToken.new: %@}
Loaded account signing key {application: %@, label: %@, key: %@}
Account signing key not found -- generating it {application: %@, label: %@}
Generated account signing key {application: %@, label: %@, key: %@}
Account signing key failed to load -- returning nil {application: %@, label: %@, loadError: %@}
Determined sync circle status { circleStatus: %@, error: %@ }
No backing key present -- not generating account key signature
Generated account key signature { error: %@, signature: %@, data: %@ }
No backing key present -- not verifying account key signature
Verified account key signature { success: %@, error: %@, signature: %@, data: %@ }
Report Unknown Sender response: %@
SharedMessage store %@
Saving database.
Destroying database.
Closed database.
Enabling WAL journal mode.
Enabling Foreign Key support.
Reindexing the DB worked.
Database vacuum success
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
Adding indexes on message guid
Add enforce_remote_timeout column to outgoing_message
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Add main_account_guid column to outgoing_message
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Add ignoreMaxRetryCount column to outgoing_message
Add wantsCertifiedDelivery column to outgoing_message
Add originalTimestamp column to outgoing_message
Adding message_identifier column to incoming_message
Dropping old bypass_duet messages
Add push_priority column to outgoing_message
The %@ column already exists on %@, skipping this step.
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
(Daemon) connectPairedDevice (cbuuid: %@)
(Daemon) setupCompletedForPairedDevice (cbuuid: %@)
(Daemon) getPairingDevices
(Daemon) getPairingDevices yielded CBUUIDs: %@
(Daemon) getPairedDevices
(Daemon) getPairedDevices yielded CBUUIDs: %@
(Daemon) deletePairedDeviceWithID (cbuuid: %@)
(Daemon) stopLocalPairingForDeviceWithID {cbuuid: %{private}@}
(Daemon) unpairDevice (cbuuid: %@)
(Daemon) forgetDevice (cbuuid: %@)
(Daemon) switchActivePairedDevice (cbuuid: %@)
(Daemon) switchToNoActivePairedDevice
(Daemon) redeliverMessagesForDevice (device ID: %@)
(Daemon) setAllowedTrafficClassifiersForDevice (device ID: %@)   (classifiers: %@)
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)
(Daemon) _addPairedDevice:BTOutOfBandKey:completion: (cbuuid: %{private}@, btOutOfBandKey.hash: %{private}@, shouldPairDirectlyOverIPsec: %{public}@, pairingType: %{public}ld, bluetoothMACAddress.hash: %{private}@)
(Daemon) _addPairedDevice: PairDirectlyOverIPsec: %@
(Daemon) Told to add a paired device %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device. {activeCBUUID: %{private}@, cbuuidString: %{private}@}
Registering for key transparency verification XPC activity
Received callback for key transparency verification XPC activity { activity: %@, state: %ld }
Setting criteria for key transparency verification XPC activity { activity: %@, interval: %lld, criteria: %@ }
Running key transparency verification XPC activity { activity: %@ }
Not running key transparency verification XPC activity (feature is disabled) { activity: %@ }
Not registering for key transparency verification XPC activity (feature is disabled)
Local device is not eligible for key transparency trust circle on any services -- not performing outstanding key transparency verification operations
Performing outstanding key transparency verification operations { serviceIdentifiers: %@ }
Reached maximum number of allowable verifications { counter: %lu }
Found candidate for follow-up key transparency verification -- performing update { ticket: %@, remoteURI: %@, localURI: %@, counter: %lu }
%s: table empty
UI32Table_Set: cannot allocate memory for %@
UI32Table_Set: table resize from %d to %d
UI32Table_Set: replacing object %@ with %@
UI32Table_Set: key %08X at %d (total elements: %d) store object %@
UI32Table_Remove: did not find %08X (from %d entries)
UI32Table_Remove: removing %@ @%d (from %d entries)
NSSTable_Set: cannot allocate memory for %@
NSSTable_Set: table resize from %d to %d
NSSTable_Set: replacing object %@ with %@
NSSTable_Set: key %8@ at %d (total elements: %d) store object %@
NSSTable_Remove: did not find %@ (from %d entries)
NSSTable_Remove: removing %@ @%d (from %d entries)
Fetched phone auth certificate from phone user registry {userAuthCerts: %@}
Failed to generate identity {error: %{public}@, identifier: %{public}@}
Generated identity {identifier: %{public}@, identity: %{private}@}
Attempted to save nil identity -- bail {identifier: %{public}@}
Failed to generate data from identity -- Removing refence from keychain {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Generated data from identity {identifier: %{public}@, identity: %{private}@, data: %{private}@}
Failed to save to keychain -- Failed to save identity {error: %{public}@, identifier: %{public}@, identity: %{private}@, data: %{private}@}
Purged identity {identifier: %{public}@, identity: %{private}@}
Failed to purge identity from keychain -- leaking identity but removing reference to it {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Removed identity reference from keychain {identifier: %{public}@, identity: %{private}@}
Failed to remove identity from keychain {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Generating identity {identifier: %ld, dataProtectionClass: %ld, existingLegacyIdentity: %{private}@}
Failed to generate ngmIdentity -- returning container with nil ngm identity {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to generate legacyIdentity -- returning nil container {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to generate fullDeviceContainer -- returning nil {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to identity to keychain {error: %{public}@, identifier: %ld, dataProtectionClas: %ld, storageIdentifier: %{public}@, dataToSave: %{private}@, container: %{private}@}
Failed to generate data from container -- not saving {error: %{public}@, identifier: %ld, dataProtectionClass: %ld, container: %{private}@}
Loaded identity container on first try -- done {identifier: %ld, firstTry: %{private}@}
Failed to load identity container on first try -- retrying {error: %{public}@, identifier: %ld}
Loaded identity container on second try -- done {identifier: %ld, secondTry: %{private}@}
Failed to load identity container on second try -- falling back to legacy {error: %{public}@, identifier: %ld}
Failed to migrate container with legacyIdentity {error: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Loaded legacy identity -- returning container with nil ngmIdentity {identifier: %ld, legacyIdentifier: %ld, container: %{private}@
Failed to create container with legacyIdentity -- returning nil {error: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Failed to remove legacy identity -- purging {removeError: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Failed to purge legacy full identity {legacyError: %@, legacyFullIdentity: %@}
Purged legacy full identity {legacyFullIdentity: %@}
Failed to erase ngm full device identity {ngmError: %@, ngmFullDeviceIdentity: %@}
Purged ngm full device identity {ngmFullDeviceIdentity: %@}
Failed to remove data {blobError: %@, containerIdentifier: %@}
Purged key blob from keychain {containerIdentifier: %@}
Loaded identity on first try {identifier: %{public}@}, serializationDidChange: %{public}@, firstTry: %{private}@}
Failed to load identity on first try -- retrying {error: %{public}@, identifier: %{public}@}
Loaded identity on second try {identifier: %{public}@, serializationDidChange: %{public}@, secondTry: %{private}@}
Failed to load identity on second try {error: %{public}@, identifier: %{public}@}
Failed to load identity from keychain {error: %{public}@, identifier: %{public}@}
Loaded identity data from keychain {identifier: %{public}@, data: %{private}@}
Failed to load identity from data {error: %{public}@, identifier: %{public}@, data: %{private}@}
Loaded identity from keychain data {identifier: %{public}@, identity: %{private}@}
Failed to load identity container from keychain {error: %{public}@, identifier: %{public}@}
Failed to load identity container from data {error: %{public}@, identifier: %{public}@, data: %{private}@}
Serialization did NOT change for identity {identity: %{private}@}
Serialization did change for identity {identity: %{private}@, reSerializedData: %{private}@, data: %{private}@}
Faild to get dataRepresentation to determine serializationChange -- Not updating {error: %{public}@, identity: %{private}@}
Failed to serialize ngmVersion {error: %{public}@, ngmVersion: %ld}
Failed to deserialize ngmVersion from data -- returning 0 {error: %{public}@, dataRepresentation: %{public}@}
IDSNWSocketPairConnectionProtocol returning -- no header.
IDSNWSocketPairConnectionProtocol read message_length:%u (0x%x), type:%u (0x%x)
IDSNWSocketPairConnectionProtocol returning partial data.
%@ Succesful nw_connection_create_with_connected_socket_and_parameters
%@ _nwConnection is nil.
%@ Connection: nw_path_t is NULL, dissabling cross-layer logging.
%@ Connection from listener is ready.
%@ Listening connection closed.
%@ Listening connection state: %d
Dealloc'ing IDSNWSocketPairConnection without ending the session
%@ Ending session
%@ Read %u bytes
%@ nw_connection_receive_message Error %@, isFinal %@
Scheduling next _receiveFromNWConnection for %@
%@ nw_connection_receive_message of type %u
31 {curProtocol: %hhu, prevProtocol: %hhu, curUUID: %{public}.16P, conUUID: %{public}.16P, curPktLen: %u, logSeqn: %hhu}
Sending message to uppper layers. 
%@ Sending message to uppper layers.
30 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, conUUID: %{public}.16P, curPktLen: %u, logSeqn: %hhu}
%@ Wrote %u bytes.
%@ Error %@! Could not write data to nw_connection.
State changed for device with no unique ID, ignoring...
Couldn't match default uniqueID to real uniqueID, ignoring...
We didn't find a notify token for %@, adding one...
Found existing notify token %d for name %@
Received device properties state change for device with uniqueID %@ - nearby %@  connected %@  cloud connected %@
Connectivity state changed (old: 0x%x) (new: 0x%x)
Registered device missing public key! -- aborting hash {device: %@}
Local device missing public key! -- aborting hash
Received unsupported query update hash {version: %d, hash: %@}
Query update hash does not match, we should clear {remoteHash: %@, localHash: %@}
Query update hashes match -- doing nothing {version: %d, remoteHash: %@, localHash: %@}
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {remoteURI: %@, service: %@, localURI: %@, guid: %@}
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
Cannot force remove appleID users. { user: %@ }
Waiting on migration -- deferring updateUsers
Migration completed, calling updateUsers
Finished synchronizing SystemAccounts to users {currentUsers: %@, updatedUsers: %@, iCloudAccount: %@, error: %@}
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
User removed. Prepending transaction %@
Executing temporary phone user transaction %@
Phone user added. Adding transaction %@
Phone user changed. Adding transaction %@
Not provisioning for Home Number because nil authenticationCertificate for user: %@
Not provisioning for Home Number because SIM is still present {user: %@, SIM: %@}
Not provisioning for Home Number because removed SIM is not the default phone SIM on the DSDS phone {user: %@}
Phone user removed. Adding transaction %@
User expired. Prepending transaction %@
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
releasing pipe %@
Start collecting logs due to %@ Magnet corruption
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
LMW %d/%d %c =%c (s:%d)
LMW errno %d =%c (s:%d)
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
LMR2 0/%d/%d/%u %c
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
LMR %d/%d/%u %c
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
ready but already suspended
Ready to write into pipe %@
LMW2 %d/%d %c =%c (s:%d)
Link manager send2 errno %d
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
GUID %@ Finished Fanout %@ with result code: %ld error: %@ result dictionary: %@ message body: %@
GUID %@ Received 255 for destination %@ { success: %@, code: %ld, error: %@ }
GUID %@ All 255s received
Returning dependent registration property for key { serviceIdentifier: %@, pushToken: %@, foundCandidate: %@, key: %@, value: %@ }
Found trusted key transparency signature { KTLoggableDataSignaturesString: %@ }
Found trusted key transparency signature services { serviceSignatures: %@ }
Returning KT signature for device { serviceIdentifier: %@, pushToken: %@, KTLoggableDataSignaturesString: %@, KTLoggableDataSignature: %@ }
Key transparency flags { serviceIdentifier: %@, pushToken: %@, keyTransparencyFlagsString: %@ }
Returning KT eligibility value { serviceIdentifier: %@, pushToken: %@, keyTransparencyFlagsString: %@, eligibility: %ld }
Returning key transparency eligible services { iCloudAccountDoesMatchiMessageAccount: %@, iCloudAccount: %@, iCloudAccountError: %@, iMessageLoginID: %@, iMessageDSID: %@, iMessageRegistrationStatus: %@ }
Returning key transparency enrolled URIs { serviceIdentifier: %@, enrolledURIs: %@ }
Returning iCloud sign-in status for key transparency { iCloudAccount: %@, iCloudAccountError: %@ }
Initialized IDSKeyTransparencyVerifier { KTVerifier: %@, application: %@, service: %@, keyTransparencyStore: %@, internalMetricLogger: %@, productionMetricLogger: %@ }
Done fetching local device trust circle eligible service identifiers { eligibleServices: %@, error: %@ }
Key transparency is disabled -- not requesting transparency ticket { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting transparency ticket
Local URI is not enrolled in key transparency -- not not requesting transparency ticket { serviceIdentifier: %@, localURI: %@ }
Key tranparency is disabled -- not enrolling trusted device
Key transparency trust circle is not enabled -- not enrolling trusted device
Local device is not eligible for key transparency trust circle on any services -- not enrolling trusted device
Local device is not eligible for key transparency trust circle on provided services -- not enrolling trusted device
Key tranparency is disabled -- not fetching trusted devices
Local device is not eligible for key transparency trust circle -- not fetching trusted devices
Key tranparency is disabled -- not performing trust circle verification for self-query { serviceIdentifier: %@ }
Key transparency trust circle is not enabled -- not performing trust circle verification for self-query { serviceIdentifier: %@, localURI: %@ }
Local device is not eligible for key transparency trust circle on this service -- not performing trust circle verification for self-query { serviceIdentifier: %@ }
Key transparency is disabled -- not requesting current peer verification results for query { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting current peer verification results for query
Key transparency is disabled -- not requesting current trust circle verification results for self-query { serviceIdentifier: %@ }
Local device is not eligible for key transparency trust circle -- not requesting current trust circle verification results for self-query
Key transparency is disabled -- not requesting current verification results for registration { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting current verification results for registration
Key transparency is disabled -- not forcing verification results { serviceIdentifier: %@ }
Nuking KT verification state
Done nuking KT verification state { error: %@ }
Performing KT verification of query { index: %@, state: %@, entries: %@ }
Calling in to perform KT peer-validation { KTURI: %@, serverKTDataPushTokens: %@
Finished requesting KT ticket for query { KTURI: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of query { serviceIdentifier: %@ }
Requesting KT verification results of query { index: %@, ticket: %@ }
Finished KT validate peer result { KTURI: %@, result: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not requesting KT verification of query { serviceIdentifier: %@ }
Performing trust circle verification of self-query { index: %@, localURI: %@, ticket: %@ }
Failed to fetch trusted devices for update { error: %@ }
Local URI is not enrolled in key transparency -- not performing trust circle verification for self-query { serviceIdentifier: %@, localURI: %@ }
No ticket provided -- not performing trust circle verification for self-query { serviceIdentifier: %@, localURI: %@ }
Calling in to note KT synced datas on existing UUID for self-validation { serverKTDataPushTokens: %@, syncedKTDataPushTokens: %@ }
Finished noting KT synced datas on existing UUID for self-validation { ticket: %@, error: %@ }
Requesting KT verification results of self-query using trust circle { index: %@, ticket: %@ }
Failed to fetch trusted devices for verification { error: %@ }
Calling in to note KT synced datas on existing UUID for self-validation and request KT self-validation results { KTURI: %@, syncedKTDataPushTokens: %@, syncedKTDataExpectedEligibilities: %@ }
Finished KT validate self result { KTURI: %@, result: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of trusted devices results { serviceIdentifier: %@ }
Forcing KT verification results of trusted devices results { index: %@, ticket: %@ }
Calling in to force KT validation { KTURI: %@ }
Finished KT force validate { KTURI: %@, result: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- forcing KT validation { serviceIdentifier: %@ }
Performing KT verification of registration { index: %@, state: %@, entry: %@ }
Calling in to perform KT enrollment verification { KTURI: %@, KTDataPushToken: %@
Finished requesting KT ticket for registration { KTURI: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of registration { serviceIdentifier: %@ }
Requesting KT verification results of registration { index: %@, ticket: %@ }
Finished KT validate enrollment result { KTURI: %@, result: %@, error: %@, ticket: %@ }
Enrolling KT trusted device { pushToken: %@, services: %@ }
Enrolling KT trusted device { trustedDevice: %@ }
Successfully enrolled trusted device via CloudKit { timeInterval: %f }
Unable to enroll trusted device via CloudKit { timeInterval: %f, error: %@ }
Successfully enrolled trusted device via account key signature { timeInterval: %f }
Unable to enroll trusted device via account key signature { timeInterval: %f, error: %@ }
Successfully enrolled trusted device { enrollmentResult: %@ }
Unable to enroll KT trusted device
Fetching KT trusted devices { index: %@, entries: %@ }
Fetched CloudKit trusted devices { timeInterval: %f, pushTokens: %@ }
Unable to fetch CloudKit trusted devices { timeInterval: %f, error: %@ }
Fetched account key trusted devices { timeInterval: %f, pushTokens: %@ }
Unable to fetch account key trusted devices { timeInterval: %f, error: %@ }
Enrolling trusted device via account key signature { trustedDevice.pushToken: %@ }
Unable to generate KT account signature { signingError: %@ }
Generated KT account signature { signatures: %@ }
KT account key is nil -- not generating KT account signature
Fetching trusted devices via account key signature given index and entries { index: %@, entries: %@ }
Signature validation on registered device succeeded -- adding as trusted device { pushToken: %@, serviceIdentifier: %@ }
Signature validation on registered device failed -- not adding as trusted device { pushToken: %@, serviceIdentifier: %@, verificationResult: %@, signingError: %@ }
Did not find signature for registered device -- not adding as trusted device { pushToken: %@ }
KT account key is nil -- not verifying KT account signature
Fetching all trusted devices via account key signature
Signature validation on registered device succeeded -- adding as trusted device { pushToken: %@, trustedService: %@ }
Registered device is missing a field -- not validating signature { pushToken: %@, KTLoggableDataSignature: %@, untrustedKTLoggableData: %@ }
Finished fetching account key trusted devices { trustedDevices: %@ }
Enrolling trusted device via CloudKit { trustedDevice.pushToken: %@ }
Unable to enroll trusted device to CloudKit { error: %@ }
CloudKit KT trusted device enrollment succeeded
Fetching trusted devices via CloudKit
Unable to fetch trusted devices via CloudKit { error: %@ }
Converted CloudKit device record data to protobuf { pushToken: %@, trustedServicesCount: %@ }
KT trusted device fetch succeeded { trustedDevicesCount: %@ }
Logging KT enrollment metric { metric: %@ }
Logging KT verification metric { metric: %@ }
Failed to determine KT URI prefix for service identifier! { serviceIdentifier: %@ }
Determined if self-query should be verified { shouldSelfVerify: %@, diceRoll: %@, percentage: %@, bagValue: %@ }
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
setupNewSession configuration: %@
cleanup session %@ local object %@
Could not find session with uniqueID %@ to clean up, ignoring...
cleanup session instance %@ local object %@
Could not find session with instanceID %@ to clean up, ignoring...
sendInvitation %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
reconnectSessionWithUniqueID %@
%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, triggered locally %@
%@ - Could not find session with uniqueID %@ to update members, ignoring...
updateParticipantData %@, for Group %@, context %@
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
SecMWCreateSessionSeed for MKM (error %@)
_SecMWCreateSessionSalt for MKS (error %@)
sharedInstance
accountWithUniqueID:
registration
pushToken
uris
firstObject
setAccount:fromID:forGroup:
createRealTimeEncryptionFullIdentityForDevice:completionBlock:
sessionWithUniqueID:
destinations
allObjects
uniqueID
setMembers:forGroup:sessionID:
sendPublicKeyToGroup:sessionID:
setShouldBoost:
service
pushTopic
broadcasterForTopic:entitlement:command:messageContext:
publicKeys
dictionary
sendXPCObject:
requestKeyMaterialForGroup:sessionID:toSpecificMembers:
sendMKMRecoveryRequestToGroup:
resetKeysForGroup:shouldRemoveCurrentParticipants:
setupRealtimeEncryptionController:forAccountWithID:messageContext:
sendRealTimeMediaPrekey:toGroup:messageContext:
requestPublicKeysForRealTimeEncryption:forAccountWithID:messageContext:
sendRealTimeEncryptionMasterKeyMaterial:toGroup:messageContext:
sendRealTimeEncryptionMKMRecoveryRequest:toGroup:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:messageContext:
resetRealTimeEncryptionKeys:forGroup:messageContext:
newDeviceIdentifierWithBluetoothUUID:
encodeWithCoder:
initWithCoder:
supportsSecureCoding
copyWithZone:
initWithUUID:
nrDeviceIdentifier
.cxx_destruct
_nrDeviceIdentifier
copySharedDeviceManager
registerDevice:properties:queue:completionBlock:
unregisterDevice:
enableDevice:
disableDevice:
init
pairingProtocolVersion
setPairingProtocolVersion:
_pairingProtocolVersion
outOfBandKey
setOutOfBandKey:
wasInitiallySetupUsingIDSPairing
setWasInitiallySetupUsingIDSPairing:
bluetoothMACAddress
setBluetoothMACAddress:
pairWithSPPLink
setPairWithSPPLink:
isAltAccountPairing
setIsAltAccountPairing:
_wasInitiallySetupUsingIDSPairing
_pairWithSPPLink
_isAltAccountPairing
_outOfBandKey
_bluetoothMACAddress
inputBytesPerSecond
setInputBytesPerSecond:
outputBytesPerSecond
setOutputBytesPerSecond:
packetsPerSecond
setPacketsPerSecond:
_inputBytesPerSecond
_outputBytesPerSecond
_packetsPerSecond
initWithDeviceIdentifier:
addPreferWiFiRequest
removePreferWiFiRequest
addQuickRelayRequest
removeQuickRelayRequest
removeAllQuickRelayRequests
cancel
deviceSetupStarted
deviceSetupCompleted
bluetoothLinkPreferences
setBluetoothLinkPreferences:
deviceIdentifier
hasPreferWiFiRequest
policyTrafficClassifiers
setPolicyTrafficClassifiers:
_hasPreferWiFiRequest
_bluetoothLinkPreferences
_deviceIdentifier
_policyTrafficClassifiers
initWithDeviceIdentifier:delegate:queue:
isRegistered
isEnabled
isNearby
isConnected
isAsleep
isClassCConnected
_isRegistered
_isEnabled
_isNearby
_isConnected
_isAsleep
_isClassCConnected
initWithDeviceIdentifier:portString:dataProtectionClass:
copyEndpoint
portString
dataProtectionClass
_dataProtectionClass
_portString
initWithKeychainWrapper:uriSuggester:
dataForIdentifier:error:
isItemNotFoundError:
setWithObjects:
unarchivedObjectOfClasses:fromData:error:
archivedDataWithRootObject:requiringSecureCoding:error:
saveData:forIdentifier:allowSync:dataProtectionClass:error:
removeDataForIdentifier:dataProtectionClass:error:
fetchOpportunisticCacheWithError:
countByEnumeratingWithState:objects:count:
objectForKeyedSubscript:
copy
setObject:forKeyedSubscript:
removeAllObjects
saveOpportunisticCache:withError:
mergeKeychainCacheIntoDictionary:
serviceName
identifier
data
isEqual:
options
setOptions:
removeObjectForKey:
dictionaryWithObjects:forKeys:count:
initWithDictionary:
limitDataInDictionary:forService:
count
selectServicesForKeychainCacheFromDictionary:
allKeys
mergeKeychainCacheDataIntoDictionary:forService:
isInvalid
expiryDate
compare:
objectAtIndexedSubscript:
syncCacheWithKeychain
addObject:
shouldSendToDestination:
destinationsMustBeInContacts
checkContactsForDestination:
accessCount
keychainCache
stringWithFormat:
copyCacheWithBlock:
clearKeychainWithError:
addData:withError:
removeDataWithIdentifier:serviceName:withError:
selectDataForDestination:
dataForService:identifier:
description
setKeychainCache:
setAccessCount:
keychainWrapper
setKeychainWrapper:
uriSuggester
setUriSuggester:
_keychainCache
_accessCount
_keychainWrapper
_uriSuggester
opportunistic
addListener:
accountsChanged
printInfo
_fetchExpiryDatesIfNecessary
_cleanupKeychain
_scheduleDependentRegistrations
deviceHeartbeat
_scheduleRescueHeartBeat
issueGetDependentRequest
warning
initWithTimeIntervalSinceNow:
allValues
doubleValue
initWithTimeIntervalSince1970:
removeListener:
invalidateTimer
dealloc
objectForKey:
dateWithTimeIntervalSince1970:
_getNextExpirationDate
timeIntervalSinceNow
invalidate
_updateDependentRegistrations
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
_heartBeat
updateExpiredDependent
_updateExpiry:forUser:
length
date
timeIntervalSince1970
numberWithDouble:
setObject:forKey:
accounts
_copyForEnumerating
isAdHocAccount
idsUserID
containsObject:
dependentRegistrationsTTL
dependentRegistrationResponseCode
integerValue
systemDidBecomeIdle
systemDidBecomeUnidle
screenSaverDidStart
screenSaverDidStop
screenLocked
screenUnlocked
systemWillSleep
systemDidWake
systemDidEnterMemoryPressure
systemDidLeaveMemoryPressure
systemWillShutdown
systemApplicationDidEnterBackground
systemApplicationWillEnterForeground
systemApplicationDidBecomeActive
systemApplicationWillResignActive
systemApplicationDidSuspend
systemApplicationDidResume
systemApplicationDidSuspendForEventsOnly
systemApplicationDidResumeForEventsOnly
notificationCenterWillAppear
notificationCenterDidDisappear
systemDidStartBackup
systemDidStopBackup
systemDidFinishMigration
systemRestoreStateDidChange
systemDidFastUserSwitchOut
systemDidFastUserSwitchIn
systemDidLogout
systemDidLock
systemDidUnlock
systemScreenDidPowerUp
systemScreenDidPowerDown
systemDidLeaveFirstDataProtectionLock
systemDidLeaveDataProtectionLock
systemDidEnterDataProtectionLock
setup
resetExpiryForUser:
_getDependentHeartbeatTimer
_usersToHeartbeatDatesMap
_isSetup
sharedInstanceForBagType:
numberWithUnsignedLongLong:
initWithObjectsAndKeys:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
sendPacketBuffer:toDeviceUniqueID:cbuuid:
sendPacketBufferArray:arraySize:toDeviceUniqueID:cbuuid:
generateLinkReport:isCurrentLink:
copyLinkStatsDict
cbuuid
setCbuuid:
deviceUniqueID
setDeviceUniqueID:
linkTypeString
state
headerOverhead
delegate
setDelegate:
alternateDelegate
setAlternateDelegate:
start
initWithPipe:withDeviceUniqueID:cbuuid:
_processIncomingPacket
_cbuuid
_deviceUniqueID
_state
_totalBytesSent
_totalPacketsSent
_totalBytesReceived
_totalPacketsReceived
_previousBytesSent
_previousPacketsSent
_previousBytesReceived
_previousPacketsReceived
_previousReportTime
_delegate
_alternateDelegate
isEqualToUserProperties:
disableRegistration
encodeBool:forKey:
decodeBoolForKey:
propsByupdatingDisableRegistration:
_disableRegistration
accountController
accountType
validSIMStateForRegistration
isExpired
faceTimeNonWiFiEntitled
isC2KEquipment
registrationController
trackedRegistrations
registrationType
isCDMA
intValue
sendRegistration:
isUserDisabled
restrictions
shouldDisableService:
registrationError
_updateRegistrationStatusWithError:info:
_enumeratePrimaryAccountsOfType:block:
_checkTechChange
enableAccountWithUniqueID:
sendDeregistration:
initWithAccountController:serviceController:restrictions:registrationController:
handleSIMInserted
handleRegistrationStateChanged:
handleSIMRemoved
setAccountController:
serviceController
setServiceController:
setRegistrationController:
setRestrictions:
registrationStateChangedDate
setRegistrationStateChangedDate:
registrationStateChangedCounter
setRegistrationStateChangedCounter:
_accountController
_serviceController
_registrationController
_restrictions
_registrationStateChangedDate
_registrationStateChangedCounter
initWithDeviceIdentifier:delegate:startMonitor:
_startNRDeviceMonitor:
nrMonitorQueue
setNrDeviceMonitor:
nrDeviceMonitor
nrDeviceBridge:defaultPeerConnectivityDidChange:
_notifyIDSNanoRegistryPluginManagerOnWatch:
nrDeviceBridge:defaultPeerNearbyDidChange:
nrDeviceBridge:defaultPeerCloudConnectivityDidChange:
nrDeviceBridge:deviceMagnetIndicationOfAwakeStateDidChange:
numberWithUnsignedChar:
latestLinkType
setLatestLinkType:
nrDeviceBridge:linkType:
_notifyWirelessRadioManagerAboutLinkChange:
nrDeviceBridge:defaultPeerClassCConnectivityDidChange:
deviceIsRegisteredDidChange:isRegistered:
deviceIsEnabledDidChange:isEnabled:
deviceIsNearbyDidChange:isNearby:
deviceIsConnectedDidChange:isConnected:
deviceIsCloudConnectedDidChange:isCloudConnected:
deviceIsAsleepDidChange:isAsleep:
deviceLinkTypeDidChange:linkType:
deviceIsClassCConnectedDidChange:isClassCConnected:
initWithDeviceIdentifier:delegate:
isDevicesIdentifierEqualTo:
setNrMonitorQueue:
setDeviceIdentifier:
_latestLinkType
_nrMonitorQueue
_nrDeviceMonitor
IPsecLink
stringGUID
removeEndpointQueryCompletionBlockForToken:
serviceIdentifier
localURI
subscribedURIs
queue
peerIDManager
_registerEndpointQueryCompletionBlock
mutableCopy
setEndpointMap:
resolvedEndpoints
endpointsForURIs:serviceIdentifier:localURI:completion:queue:
endpointMap
addObjectsFromArray:
_noteSourceDidDiscoverEndpointMap:forLocalURI:
peerIDManagerToken
addEndpointQueryCompletionBlock:forToken:queue:
_signalDidUpdateEndpoints
resolvedEndpointsDidUpdateHandler
initWithServiceIdentifier:localURI:subscribedURIs:queue:
initializeWithCompletion:
setResolvedEndpointsDidUpdateHandler:
_serviceIdentifier
_localURI
_subscribedURIs
_resolvedEndpointsDidUpdateHandler
_queue
_endpointMap
_peerIDManagerToken
query
stringWithUTF8String:
arrayWithObjects:count:
pathWithComponents:
initWithPath:
initWithPath:storeName:dataProtectionClass:
__imHexString
keyForToken:uri:service:
persistData:forKey:error:
dataForKey:error:
dataRepresentationWithError:
addIdentityData:forToken:uri:service:error:
identityDataForToken:uri:service:error:
identityWithDataRepresentation:error:
dateWithTimeIntervalSinceNow:
deleteEntriesBeforeDate:afterDate:error:
deleteDatabase
addIdentity:forToken:uri:service:error:
identityForToken:uri:service:error:
cleanupWithError:
deleteCache
_kvStore
protocolVersion
setProtocolVersion:
hardwareVersion
setHardwareVersion:
osVersion
setOsVersion:
softwareVersion
setSoftwareVersion:
deviceName
setDeviceName:
IMSI
setIMSI:
PLMN
setPLMN:
testData
setTestData:
pnrReason
setPnrReason:
responseStatus
setResponseStatus:
responseMechanisms
setResponseMechanisms:
additionalMessageHeaders
pushCertificate
_FTStringFromBaseData
messageBody
phoneNumberValidationRetryCount
_numberForKey:
isEqualToString:
initWithType:context:
requiredKeys
bagKey
requiresPushTokenKeys
handleResponseDictionary:
setPhoneNumberValidationRetryCount:
_protocolVersion
_phoneNumberValidationRetryCount
_hardwareVersion
_osVersion
_softwareVersion
_deviceName
_IMSI
_PLMN
_testData
_pnrReason
_responseStatus
_responseMechanisms
initWithKeyOptions:valueOptions:capacity:
_simulateCrashWithErrorString:
string
appendFormat:
_dumpServiceMap
processInfo
processName
initWithName:
setRemoteInstanceID:
associateServiceName:withStreamID:remoteInstanceID:remoteInstanceIDChanged:
translateStreamID:toServiceName:remoteInstanceID:remoteInstanceIDChanged:
translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:
dumpServiceMap
_name
_lock
_remoteInstanceID
_serviceNameToStreamIDMap
_streamIDToServiceNameMap
_nextStreamID
_previousRemoteInstanceIDs
_nextRemoteInstanceIDIndex
serviceWithIdentifier:
appleIDAccountOnService:
initWithDomain:code:userInfo:
cloudRelayRegisteredAccountWithError:
localObject
broadcasterForLocalObject:messageContext:
serviceUserIDs:error:
identityPrivateKey
setIdentityPrivateKey:
registrationCert
setIDCertificate:
setSubService:
dsHandle
setUserID:
sharedInstanceWithPortName:
setPushToken:
responseServiceUserIDs
setCompletionBlock:
sendMessage:
adminAccessTokens:error:
setServiceUserID:
setAccessoryID:
setPairingToken:
responseAccessoryID
responseAdminAcccessToken
responseExpiry
consentTokens:error:
setAdminID:
setAccessoryIDs:
responseConsentTokens
userAccessTokens:error:
setUserHandle:
setAccessoryRequests:
responseAccessTokens
homeKitGetServiceUserIDsWithMessageContext:
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:messageContext:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:messageContext:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:messageContext:
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:messageContext:
appendString:
enumerateObjectsUsingBlock:
initWithFormat:
_setupPairedSystemContext
_resourceAvailabilityChangedForIdentifiers:
setInitialSyncInProgress:forClientID:
initialSyncInProgress
setReunionSyncInProgress:forClientID:
reunionSyncInProgress
_newKeyForValues:priority:
_checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
clearAdmissionCheckCache
initialSyncClientIDs
setInitialSyncClientIDs:
reunionSyncClientIDs
setReunionSyncClientIDs:
_initialSyncClientIDs
_reunionSyncClientIDs
sharedDefaults
initWithUserDefaults:
APNSMessageDeliveryClass
initWithStateProvider:messageDelivery:peerIDManager:accountController:serviceController:queue:
initWithQueue:
storedActivityTopics
_updateListener
isActivityMonitorSupported
weakObjectsHashTable
removeObject:
stateProvider
setWithSet:
setStoredActivityTopics:
ackUpdatesForActivity:
storedUpdatesForActivity:
storeSubscription:forActivity:
removeSubscriptionForActivity:subActivity:
storedSubscriptionsForActivity:
storeUpdates:forActivity:
setActivity:
timeIntervalSinceReferenceDate
setTimeSubscribed:
tokens
_subscribeForInfo:withDescription:resolvedTokens:withCompletion:
URIs
accountsOnService:withType:
aliasStrings
_bestGuessURI
primaryRegistration
prefixedURI
__imArrayByApplyingBlock:
errorWithDomain:code:userInfo:
startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:completionBlock:
deviceUniqueIDs
setActivityTopic:
setVersion:
setMessageID:
setMetadataBlob:
setSubActivity:
storeActivityDescription:forActivity:
hasActiveSubscription
stopListeningOnActivity:
messageDelivery
setTokens:
activity
subActivity
appContext
setPushPriority:
setActivityPolicy:
expirationDate
setTtl:
startListeningOnActivity:
listeningOnActivities
__imSetByApplyingBlock:
pushListener
setTopicsToListenOn:
setShouldListen:
activityTopic
registeredDevices
token
isEqualToData:
copyCacheDictionaryRepresentation
endpoints
activityTimestamp
metadataBlob
activityStatus
initWithSubActivity:pushToken:serverTimestamp:clientContext:isDeviceOnline:
setURIs:
activityMonitorManager:receivedUpdate:forActivity:
pushListener:receivedUpdatePush:
initWithStateProvider:messageDelivery:peerIDManager:accountController:serviceController:pushListener:
addListener:forActivity:
removeListener:forActivity:
isListeningOnActivity:
currentSubscriptionsForActivity:
subscribeForInfo:onActivity:withCompletion:
unsubscribeForActivity:subActivity:withCompletion:
setListeningOnActivities:
listenersByActivity
setListenersByActivity:
setStateProvider:
setPushListener:
setMessageDelivery:
setPeerIDManager:
_listeningOnActivities
_listenersByActivity
_stateProvider
_pushListener
_messageDelivery
_peerIDManager
rangeOfString:
substringFromIndex:
objectAtIndex:
removeObjectAtIndex:
portMap
connectionsTableByLocalRemotePortKey
outgoingEncryptionTableBySSRC
incomingEncryptionTableBySSRC
selfInstanceID
instanceID
setInstanceID:
nextAvailableLocalCID
clearLocalCID:
addBlocksOnLinkConnect:
performBlocksOnLinkConnect
cancelBlockOnLinkConnectWithID:cancelSucceeded:
cancelBlocksOnLinkConnect
remoteSA
setRemoteSA:
connectionsByID
controlChannel
setControlChannel:
controlChannelCachedSYN
setControlChannelCachedSYN:
highPriorityConnectionSendingSet
setHighPriorityConnectionSendingSet:
suspendTraffic
setSuspendTraffic:
suspendTrafficCheckTime
setSuspendTrafficCheckTime:
linkLayerConnected
setLinkLayerConnected:
linkLayerDisconnectTime
setLinkLayerDisconnectTime:
vifName
setVifName:
localSA
setLocalSA:
utunSocket
setUtunSocket:
capabilityFlags
setCapabilityFlags:
serviceMinCompatibilityVersion
setServiceMinCompatibilityVersion:
shouldUseIPsecLink
setShouldUseIPsecLink:
serviceConnector
setServiceConnector:
cloudServiceConnector
setCloudServiceConnector:
controlChannelVersion
setControlChannelVersion:
serviceConnectionCache
_remoteSA
_connectionsByID
_controlChannel
_controlChannelCachedSYN
_controlChannelVersion
_highPriorityConnectionSendingSet
_localCIDSet
_suspendTraffic
_suspendTrafficCheckTime
_linkLayerConnected
_linkLayerDisconnectTime
_vifName
_localSA
_portMap
_connectionsTableByLocalRemotePortKey
_outgoingEncryptionTableBySSRC
_incomingEncryptionTableBySSRC
_blocksOnLinkConnect
_utunSocket
urgentPackets
regularPackets
_shouldUseIPsecLink
_serviceConnector
_serviceConnectionCache
_selfInstanceID
_instanceID
_capabilityFlags
_serviceMinCompatibilityVersion
_cloudServiceConnector
utunController
_getKeysForServiceTypeName:completion:
_rollAccountKeyWithFullCluster:completion:
_getCurrentAccountClusterWithCompletion:
groupID
adminServiceIdentityWithType:
signingServiceIdentityWithType:
fullServiceIdentitiesSigning
identityServiceTypeName
fullAccountIdentity
_createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:
cloudKitElectionStore
groupName
keychainElectionStore
fetchFullClusterWithIdentifier:error:
clusterByUpdatingGroupID:error:
fetchAccountIdentityItemWithCompletion:
initWithCapacity:
rolledAccountIdenityWithError:
_fullAccountIdentityWithError:
_fullServiceIdentityAdminWithAccountIdentity:type:error:
_fullServiceIdentitySigningWithAccountIdentity:type:error:
rolledClusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
_fullClusterWithAccountIdentityClusterWithAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
isParentOfCluster:
identifierForFullCluster:
publicAccountClusterWithError:
_cleanupFailedElectionWithFullAccountIdentityCluster:
publicKey
forwardingTicket
signData:withError:
generation
numberWithLong:
stableGroupID
dataRepresentation
setAccountBlob:
setSignature:
setGroupID:
setForwardingTicket:
setParentPg:
setNewPg:
setParentVersion:
setENID:
groupServerElectionStore
domain
code
setGroupName:
storeAccountIdentityItem:withCompletion:
storeItem:withCompletion:
storeFullCluster:completion:
removeFullClusterWithIdentifier:error:
fullAccountIdentityWithError:
fullServiceIdentityWithFullAccountIdentity:type:error:
clusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
initWithKeychainElectionStore:cloudKitElectionStore:groupServerElectionStore:
getKeysForServiceTypeName:completion:
rollAccountKeyWithCompletion:
_keychainElectionStore
_cloudKitElectionStore
_groupServerElectionStore
accountIdentity
initWithUser:phoneSignature:certificateSigningRequest:pushToken:
user
phoneSignature
certificateSigningRequest
_user
_phoneSignature
_certificateSigningRequest
_pushToken
initWithStatus:user:authenticationCertificate:
status
authenticationCertificate
_status
_authenticationCertificate
copyRegistrationKeyPairForIdentifier:publicKey:privateKey:keyPairSignature:isMigratedSignature:isUpgradePending:
_loadIfNeeded:
systemMonitor
isUnderFirstDataProtectionLock
lock
defaultCenter
__mainThreadPostNotificationName:object:
unlock
regeneratePairingIdentitiesIncludingClassD:
_migrateRegisteredIdentityFromClassDtoClassCIfNeeded
loadPairingIdentities:
identityDataSource
saveLegacyIdentity:withIdentifier:dataProtectionClass:error:
removeLegacyIdentity:withIdentifier:dataProtectionClass:error:
shortDescriptionForDataProtectionClass:
config
registeredIdentityContainer
_serializeAndPersistIdentityContainer:identityIdentifier:deleteIfNull:
unregisteredIdentityContainer
previousRegisteredIdentityContainer
buildOfIdentityGeneration
_serializeAndPersistBuildOfIdentityGeneration:itemName:
buildOfUnregisteredIdentityGeneration
numberWithInt:
setAppValue:forKey:
underLimitForItem:
setRegisteredIdentityContainer:
setUnregisteredIdentityContainer:
setPreviousRegisteredIdentityContainer:
saveIdentityContainer:withIdentifier:dataProtectionClass:error:
removeIdentityContainer:withIdentifier:dataProtectionClass:error:
dataUsingEncoding:
initWithData:encoding:
allowPairingIdentities
identityClassA
loadLegacyIdentityWithIdentifier:serializationDidChange:error:
setIdentityClassA:
_saveClassXIdentity:savedIdentity:protectionClass:savedUnsavedIdentity:
identityClassC
setIdentityClassC:
identityClassD
setIdentityClassD:
keyPairProvider
setPublicKey:
setPrivateKey:
setIsMigratedSignature:
privateKey
isMigratedSignature
_isUnderFirstDataProtectionLock
_addEarlyListener:
signature
noteItem:
appValueForKey:
setShouldHaveRegisteredIdentity:
setShouldHaveUnregisteredIdentity:
appBoolForKey:
loadIdentityContainerWithIdentifier:withLegacyFallback:serializationDidChange:deserializationDidFail:needsEncryptionIdentityRoll:nonLegacyError:error:
_loadAndDeserializeBuildOfIdentityGenerationForItemName:
setBuildOfIdentityGeneration:
isUpgradePendingError:
setRegisteredKeychainError:
setRegisteredDeserializationError:
signingKeyReferenceWithApplication:label:error:
setAccountSigningKeyReference:
accountSigningKeyReference
setBuildOfUnregisteredIdentityGeneration:
setUnregisteredKeychainError:
setUnregisteredDeserializationError:
_purgePreviousIdentityDelay
_schedulePurgeOfPreviousIdentityAfterDelay:
ngmFullDeviceIdentity
ngmVersion
numberWithUnsignedInt:
isEqualToNumber:
legacyFullIdentity
shouldHaveUnregisteredIdentity
unregisteredDeserializationError
registeredDeserializationError
unregisteredKeychainError
registeredKeychainError
shouldHaveRegisteredIdentity
_generateUnregisteredIdentityWithExistingLegacyIdentity:existingNGMIdentity:
_notifyUnregisteredIdentityRegenerated
_shouldRegenerateRegisteredIdentity
_identityRegenerationDelay
_scheduleRegenerationOfRegisteredIdentityAfterDelay:
_getPublicMessageProtectionDataForIdentity:
_save
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
setActive:
setWatchesDataProtectionLockState:
initWithLimit:timeLimit:
initWithKeychainWrapper:
initWithSystemMonitor:keychainWrapper:loadingRateLimiter:identityDataSource:allowPairingIdentities:allowRegenerateRegisteredIdentity:keyPairProvider:
_removeEarlyListener:
fullDeviceIdentityContainerUsableForKeyType:
setHasUnregisteredContainer:
setHasRegisteredContainer:
publicIdentityWithError:
shouldRollEncryptionIdentity
unappliedRollingTicket
keyRollingTicketWithError:
setUnappliedRollingTicket:
identityData
prekeyData
ngmPublicDeviceIdentity
setRollingError:
setAppBool:forKey:
legacyPublicIdentity
setIdentityToRegisterError:
initWithPublicLegacyIdentityData:publicNGMIdentityData:publicNGMPrekeyData:NGMVersion:
keyTransparencyVersionNumberForServiceType:
generateLegacyIdentityWithIdentifier:dataProtectionClass:error:
_loadClassAIdentityIfNeeded:
_loadClassCIdentityIfNeeded:
_loadClassDIdentityIfNeeded:
latestMessageProtectionFullIdentityForDataProtectionClass:
_generateIdentityWithExistingIdentity:identifier:dataProtectionClass:
generateIdentityContainerWithIdentifier:existingLegacyIdentity:existingNGMIdentity:dataProtectionClass:nonLegacyError:error:
setGenerationError:
productBuildVersion
noteKeyGenerationForMetric
_isSecurelyStoringIdentity:withExpectedProtectionClass:
_migrateIdentity:toProtectionClass:
_notifyRegenerateDelay
updateWithRegisteredTicket:error:
publicMessageProtectionDeviceIdentityContainerToRegister:
unsignedIntValue
dataRepresentationForNGMVersion:
isInteractionNotAllowedError:
unSavedidentityClassA
_ensureIdentity:savedIndentity:protectionClass:didSaveIdentity:
setUnSavedidentityClassA:
unSavedidentityClassC
setUnSavedidentityClassC:
unSavedidentityClassD
setUnSavedidentityClassD:
publicMessageProtectionDataToRegisterForClassA
publicMessageProtectionDataToRegisterForClassC
publicMessageProtectionDataToRegisterForClassD
pairedDevicePublicKey
pairedDevicePublicClassAKey
pairedDevicePublicClassCKey
resumeSessionNegotiation
isUnderDataProtectionLock
purgeFromKeychain:
requiresKeychainMigration
dataProtectionClassWithError:
idsKeychainWrapperDataProtectionClassFromIMDataProtectionClass:
imDataProtectionClassFromDataProtectionClass:
updateIdentityToDataProtectionClass:error:
allowRegenerateRegisteredIdentity
isInternalInstall
_purgePreviousIdentityTimerFired
_purgePreviousIdentityFromMemoryAndKeychain
_regenerateIdentityTimerFired
regenerateRegisteredIdentity
_randomizedIdentityRegenerationInterval
setupKeys
setForceRoll:
generateCSRForUserID:
fullDeviceIdentityContainer
previousFullDeviceIdentityContainer
publicMessageProtectionIdentityDataToRegisterWithError:
keyTransparencyVersionNumberToRegisterForServiceType:
publicMessageProtectionData
fullMessageProtectionIdentity
previousFullMessageProtectionIdentity
fullMessageProtectionIdentityForDataProtectionClass:
notePublicIdentityDidRegisterLegacyData:ngmIdentityData:ngmPrekeyData:
purgeMessageProtectionIdentity
identityPublicKey
keyPairSignature
needsPublicDataUpdated
isMigratedKeyPairSignature
isUsingSecureStorageForClassA
isUsingSecureStorageForClassC
migrateToSecureStorageForClassA
migrateToSecureStorageForClassC
errorContainerToReport
setSystemMonitor:
loadingRateLimiter
setLoadingRateLimiter:
setIdentityDataSource:
setAllowPairingIdentities:
setAllowRegenerateRegisteredIdentity:
setConfig:
forceRoll
setKeyPairProvider:
_forceRoll
_loaded
_identityLoaded
_detectedMigrationNeeded
_needsReRegister
_pendingIdentityRegeneration
_hasCheckedMigrationThisLaunch
_failedToGeneratedPublicDataForNGMIdentity
_recentKeyLoadingErrors
_config
_purgePreviousIdentityTimer
_regenerateIdentityTimer
_systemMonitor
_identityDataSource
_loadingRateLimiter
_keyPairProvider
_allowPairingIdentities
_allowRegenerateRegisteredIdentity
_registeredIdentityContainer
_previousRegisteredIdentityContainer
_unregisteredIdentityContainer
_unappliedRollingTicket
_buildOfIdentityGeneration
_buildOfUnregisteredIdentityGeneration
_identityClassA
_unSavedidentityClassA
_identityClassC
_unSavedidentityClassC
_identityClassD
_unSavedidentityClassD
_accountSigningKeyReference
_privateKey
_publicKey
_signature
_isMigratedSignature
_stripPotentialTokenURIWithToken:
_FZIDType
_stripFZIDPrefix
predicateForContactsMatchingEmailAddress:
phoneNumberWithStringValue:
predicateForContactsMatchingPhoneNumber:
predicateForURI:
unifiedContactsMatchingPredicate:keysToFetch:error:
destinationURIs
matchingContactsForURI:
longLongValue
guid
alternateGUID
ensureDatabaseIsInitialized
IDSDeviceConnectionForService:wasSuccessful:clientInitTime:clientOpenSocketCompletionTime:daemonOpenSocketTime:daemonOpenSocketCompletionTime:firstPacketReceiveTime:connectionInitTime:
aggregatableMessages
command
messageToSend
additionalDictionary
forceOnePerFanout
hasSpaceForAggregatableMessage:
fromIdentity
maxSize
createFanoutFromMessage:forService:fromIdentity:withMaxSize:chunkNumber:firstMessage:
setExpiration:onFanout:withMessage:
addMessage:toFanout:
individualPeerMessages
targetToken
targetPeerID
wantsCertifiedDelivery
setWantsCertifiedDelivery:
delivery_oversized
chunkNumber
setAggregateMessages:
initWithValue:
addAggregatableMessage:
encryptionType
setEncryptionType:
initWithPeerMessage:service:fromIdentity:maxSize:
numberWithInteger:
setChunkNumber:
setAdditionalDictionary:
timeout
setTimeout:
runIndividuallyWithInput:
delivery
_validateParametersWithFullIdentityToUse:fullIdentity:publicIdentity:inputData:identifier:forDecryption:
sealMessage:signedByFullIdentity:usingIdentitiesWithIdentifier:error:
sealMessage:signedByFullIdentity:usedIdentityWithIdentifier:error:
encryption
unsealMessage:signedByPublicIdentity:usingIdentityWithIdentifier:error:
failWithError:
promise
unsealMessage:signedByPublicIdentity:usingIdentityWithIdentifier:
error
value
fulfillWithValue:
registerResultBlock:
encryptData:withPublicDeviceIdentityContainer:usingIdentifier:error:
encryptData:withPublicDeviceIdentityContainer:usedIdentifier:error:
decryptData:withPublicDeviceIdentityContainer:error:usingIdentifier:isRetry:
decryptData:withPublicDeviceIdentityContainer:usingIdentifier:isRetry:
initWithRegistrationKeyManager:
registrationKeyManager
_registrationKeyManager
queryTimeInterval
errorToReportForECError:
errorToReportForLegacyError:
_metadataWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
RTCSessionPromiseWithBatchingInterval:
sendMessageWithCategory:type:payload:error:
numberWithBool:
initWithErrorContainer:missingIdentity:missingPrekey:
dictionaryRepresentation
addEntriesFromDictionary:
_strictlyUnarchivedObjectOfClasses:fromData:error:
isSupported
boolValue
_shouldIgnoreAutoBugCaptureForECFailure:
_shouldIgnoreAutoBugCaptureForLegacyFailure:
setWithObject:
triggerCaptureWithEvent:destinations:context:completion:
userInfo
messageMetadataWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
reportEncryptionSideMetricWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
reportMessageMetricWithMetadata:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:ECError:legacyError:fromDestination:
initWithBytes:length:
bytes
initWithBytesBuffer:bufferSize:metadata:metadataSize:
initWithPacketBuffer:metadata:metadataSize:
packetBuffer
metadata
metadataSize
_metadataData
_metadataSize
_packetBuffer
_metadata
initWithDestination:
connectWithTransportThread
connectWithProtocoHandler
writeDatagram:datagramSize:metaData:metadataSize:
writePacketBuffer:metaData:metadataSize:moreComing:
writeBuffer:bufferSize:metaData:metadataSize:moreComing:
osChannelInfoLog
uuid
setUUID:
readHandler
setReadHandler:
writeHandler
setWriteHandler:
hasMetadata
excessiveCachingReportCounter
setExcessiveCachingReportCounter:
excessiveCachingCount
setExcessiveCachingCount:
clientReady
setClientReady:
destination
transportType
closed
verboseFunctionalLogging
setVerboseFunctionalLogging:
verbosePerformanceLogging
setVerbosePerformanceLogging:
packetBufferHandler
setPacketBufferHandler:
cachedDataForClient
setCachedDataForClient:
_hasMetadata
_clientReady
_closed
_verboseFunctionalLogging
_verbosePerformanceLogging
_excessiveCachingReportCounter
_excessiveCachingCount
_uuid
_readHandler
_writeHandler
_destination
_transportType
_packetBufferHandler
_cachedDataForClient
registerClientChannelDestination:connectHandler:
unregisterClientChannelDestination:
_processBytesAvailable
_sendToConnectedSocket
hasEndedSession
callStackSymbols
_endSession
reset
shouldEncrypt
protectionClass
addIndex:
enumerateObjectsWithOptions:usingBlock:
removeObjectsAtIndexes:
connectionDidReachInFlightMessageLowWaterMark:
_callDelegateWithBlock:
encrypted
sequenceNumber
streamID
_processIncomingMessage:
messageWithData:
fragmentIndex
fragmentedMessageID
totalFragmentCount
arrayWithCapacity:
createOriginalMessageFromFragmentedMessages:
endSession
initWithData:
connection:didReceiveData:withIdentifier:
connection:didReceiveDataMessage:
priority
topicForStreamID:
_read:maxLength:
connectionDidReceiveBytes:
headerDataSize
appendBytes:length:
dataLengthFromHeaderData:
messageWithHeaderData:data:
setLength:
topic
underlyingData
initWithVersion:encrypted:shouldEncrypt:protectionClass:streamID:priority:sequenceNumber:data:
setTopic:
context
setContext:
connectionBecameEmpty:
_queueNextOutgoingData
IDSSocketPairConnectionTCPInfoLinkType:currentRTT:bandwidth:
produceBytes:
sendDataMessage:canFragment:
createMessageFragmentsFromOriginalMessage:withFragmentedMessageID:fragmentSize:
numberWithUnsignedInteger:
connectionDidClose:
setHasEndedSession:
sendDataMessage:
processStoredIncomingMessage:
setOTREncryptionBlock:decryptionBlock:
lastSocketActivityTime
inFlightMessages
initWithSocket:queue:delegate:priority:connectionID:linkType:
fragmentationSize
inFlightMessageCount
inFlightMessageCountLowWaterMark
isEmpty
setFragmentationSize:
setInFlightMessageCountLowWaterMark:
removePendingMessagesForProtectionClass:
setNotifyWhenConnectionReceivesBytes:
maxAllowedMessageSize
setMaxAllowedMessageSize:
connectionID
setConnectionID:
outgoingStallDetector
setOutgoingStallDetector:
_headerData
_currentMessageData
_delegateQueue
_currentOutgoingDataIndex
_outgoingData
_outgoingMessageArray
_currentOutgoingFragmentedMessageID
_inFlightMessageCountLowWaterMark
_incomingDataFragments
_connectionID
_fragmentationSize
_currentDataLength
_bytesReceived
_prevBPS
_connectedSocket
_writeSocketIsResumed
_lastDateCheck
_notifyWhenConnectionReceivesBytes
_priority
_encryptionBlock
_decryptionBlock
_maxAllowedMessageSize
_lastSocketActivityTime
_outgoingStallDetector
_linkType
_hasEndedSession
socketPairConnection
initWithUsername:DSID:
username
DSID
_username
_DSID
accountPropertyForKey:
_systemAccountWithIdentifier:DSIDKey:criteria:completion:
isActive
_systemAccountWithIdentifier:DSIDKey:criteria:error:
_systemAccountRepresentationOfACAccount:DSIDKey:
_ACAccountWithTypeIdentifier:matchingCriteria:completion:
_ACAccountWithTypeIdentifier:matchingCriteria:error:
accountsWithAccountType:
accountProperties
iCloudSystemAccountWithCompletion:
iTunesSystemAccountWithCompletion:
iCloudSystemAccountWithError:
iTunesSystemAccountWithError:
_firstAccountInStore:withType:matchingCriteria:
initWithCache:accountController:
initWithData:identifier:serviceName:accountUniqueID:options:
diceRoll
sendOpportunisticData:toDestination:
incrementSendCountForDestination:
accountUniqueID
setAccountUUID:
setMessage:
setCommand:
setPriority:
setFireAndForget:
setEncryptPayload:
setDestinations:
setAlwaysSkipSelf:
setMessageUUID:
idsResponseCode
responseError
lastCall
sendMessageWithSendParameters:willSendBlock:completionBlock:
normalizedURIStrings
didSendOpportunisticDataWithIdentifier:onAccount:toIDs:
enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:
markInvalid
addOpportunisticData:serviceName:accountUniqueID:identifier:options:completion:
removeOpportunisticDataForIdentifier:serviceName:completion:
sendOpportunisticDataIfNeededToDestination:completion:
opportunisticQueue
setOpportunisticQueue:
cache
setCache:
_opportunisticQueue
_cache
initWithEnvironmentName:namedDelegatePort:queue:
apsConnection
sharedState
participantID
sendMessage:toDestinations:withCommand:
sendMessage:toDestinations:withCommand:fromID:willSendBlock:completionBlock:
fromID
accountID
isDefaultPairedDeviceFromID:accountUniqueID:serviceName:
_sendSinglePathMessage:toDestinations:withCommand:forceLocalDelivery:messageGUID:fromID:willSendBlock:completionBlock:
_canSendMessageLocally:toDestinations:withCommand:
publicToken
anyObject
hasPrefix:
forceInternetInvitation
destinationWithStrings:
setFromID:
setIdentifier:
setLocalDelivery:
alwaysSkipSelf
setInterestingRegistrationProperties:
setSessionForceInternetInvitation:
inviteTimeout
setEnforceRemoteTimeouts:
setSessionID:
clientType
remoteUsePhoneContinuityLocalMessage
_FTDataFromBase64String
sessionMessageReceived:fromID:withData:
sessionEndReceived:fromID:withData:
endSessionWithReason:
initWithDictionary:sharedState:
sendSessionMessage:toDestinations:
sendMessage:withCommand:
sendMessage:toDestinations:withCommand:fromID:
receivedSessionMessage:fromID:
receivedEndMessage:fromID:
sendReinitiateMessageWithSubcommand:
setApsConnection:
setRemoteUsePhoneContinuityLocalMessage:
setSharedState:
keyMaterial
_alwaysSkipSelf
_apsConnection
_remoteUsePhoneContinuityLocalMessage
_sharedState
IDSDSession
packetsSent
setPacketsSent:
packetsReceived
setPacketsReceived:
bytesSent
setBytesSent:
bytesReceived
setBytesReceived:
_packetsSent
_packetsReceived
_bytesSent
subService
serviceUserID
userID
userHandle
accessoryRequests
setResponseAccessTokens:
_arrayForKey:
_serviceUserID
_userID
_userHandle
_accessoryRequests
_responseAccessTokens
_initializePlugin
pluginImplementsWatchDidStartAdvertising
plugin
watchDidStartAdvertising
pluginImplementsWatchDidStopAdvertising
watchDidStopAdvertising
_initializePluginWithClass:
principalClass
notifyWatchDidStartAdvertisingWithPeripheralManager:
notifyWatchToStartAdvertising
notifyWatchDidStopAdvertisingWithPeripheralManager:
notifyWatchToStopAdvertising
initializePluginWithClass:
executeSynchronouslyOnCallbackQueue:
callbackQueue
setCallbackQueue:
setPluginImplementsWatchDidStartAdvertising:
setPluginImplementsWatchDidStopAdvertising:
peripheralManagers
setPeripheralManagers:
setPlugin:
isAdvertising
setIsAdvertising:
_pluginImplementsWatchDidStartAdvertising
_pluginImplementsWatchDidStopAdvertising
_isAdvertising
_callbackQueue
_peripheralManagers
_plugin
first
initWithFirst:second:
second
decryptedDataForKey:
holdCommitBlock:andDecryptedData:forKey:
commitStateForKey:
backingCache
setBackingCache:
_backingCache
_registrationsPendingHeartbeat
canSendRegistration
registerInfo:
updateHeartbeat
_serverHeartBeat:
registrationDate
nextRegistrationDate
isRegistering:
_registration:needsRenewal:
_startRegistrationHeartbeat
__reallyUpdateRegistrationHeartbeat
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
_nextRegistrationHeartbeatTime
removeObserver:name:object:
_bagReloaded:
addObserver:selector:name:object:
_serverHeartBeatTimerHit:
_updateRegistrationHeartbeat
_stopRegistrationHeartbeat
checkHeartbeat
noteRegistrationStateChanged
registrationHBI
addRegistrationInfo:
removeRegistrationInfo:
_registrations
_registrationHeartbeatDate
_registrationHeartbeatTimer
_baseRegistrationHBI
_pendingHeartbeat
_listeningForRegStateChanges
responseBasePhoneNumber
setResponseBasePhoneNumber:
responseRegionID
setResponseRegionID:
responseExtraInfo
setResponseExtraInfo:
responseValidated
setResponseValidated:
anisetteHeadersTimeout
_responseValidated
_responseBasePhoneNumber
_responseRegionID
_responseExtraInfo
encodeDouble:forKey:
encodeObject:forKey:
decodeObjectOfClass:forKey:
decodeDoubleForKey:
timeSubscribed
_timeSubscribed
_activity
_subActivity
stringByAppendingString:
initWithIdentifier:socketPriority:btUUID:uniqueID:incomingServiceMap:outgoingServiceMap:isCloudEnabled:shouldUseIPsecLink:
setSupportsLegacyOTRSessionToken:
setMaxQueueSize:
setSupportedMessageTypes:
setIdsPriority:
setDataProtectionClass:
setName:
setCloudConnection:
prepareDefaultPairedConnectionInfoWithDeviceUniqueID:shouldUseIPsecLink:
performBlockWithPriority:priority:
cloudConnection
performBlockSYNCHRONOUSLYWithPriority:priority:
assertRunningOnMain
enableCloudConnection
sendAckForMessageWithSequenceNumber:
idsPriority
performBlock:priority:dataProtectionClass:
assertRunningWithPriority:
hasSpaceForMessagesWithDataProtectionClass:
unsignedLongLongValue
valueForKey:
unsignedLongValue
array
sendingMessageStatistics
_copyStatisticsDict:
_addStatsFromDict:toAggregate:
queueStatistics
_accumulateStats:intoMessages:andBytes:
cumulativeOutgoingStatistics
cumulativeIncomingStatistics
_copyPowerlogDictionaryWithOutgoingStats:incomingStats:
perServiceDataSentForDevice:services:
perServiceDataReceivedForDevice:services:
setWithArray:
_startPowerLogTimersForAllPriorities
weakRefWithObject:
object
_powerlogDictionaryForSockets
queueForPriority:
_powerlogDictionaryForPriority:
_shouldLogTransportStats
performBlockUrgentPriority:
performBlockDefaultPriority:
performBlockSyncPriority:
setEnabled:
performBlockForAllConnections:
flushAllMessagesForReason:
performBlockSynchronouslyForAllConnections:
setEnableOTR:
setIsMagnetIndicatingPeerIsAwake:
syncPriorityMessageStatistics
defaultPriorityMessageStatistics
urgentPriorityMessageStatistics
urgentCloudPriorityMessageStatistics
defaultCloudPriorityMessageStatistics
totalPacketsReceivedForDevice:services:
_powerLogServices:prefersInfraWifi:
setPreferInfraWiFi:
_checkServicesPreferringInfraWiFi:
initWithSet:
isEqualToSet:
setLinkPreferences:
setLocalSetupInProgress:
dropDisallowedMessages
trafficClassesChanged
clearStats
cancelMessageID:
kickProgressBlockForMessageID:
numberWithLongLong:
_connectionForPriority:messageType:dataProtectionClass:
requireBluetooth
messageUUID
completionBlock
toDeviceID
shouldBlackOutDeviceWithCbuuid:
initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:
performBlockMainQueue:
requireLocalWiFi
rapportClient
isDeviceDiscovered:
resumeConnectivity
_messageTypeSupportedForCloudConnection:
isCloudEnabled
peerConnectivityChanged:
_priorityForConnection:
_connectionTypeForConnection:
peer:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:priority:connectionType:
supportedMessageTypes
peerHasSpaceForUrgentMessages:dataProtectionClass:withTypes:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:withTypes:
performBlockForDirectConnections:
_startDisableTimerIfNecessary
_startCloudDisableTimerIfNecessary
setIsAlwaysConnected:
lockedContinuityPeerID:
_clearDisableTimer
_handleCBUUIDDidConnect:isDefaultPairedDevice:isAlwaysConnected:
_handleCBUUIDFailToConnect:withReason:
addContinuityPeer:btUUID:connectBlock:failureBlock:
setEnabled:withReason:
isIdle
peerNearbyStateChanged:forceNotify:
_disableTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setFireDate:
_allConnectionsAreIdle
_cloudDisableTimerFired:
_clearCloudDisableTimer
_allCloudConnectionsAreIdle
defaultPeerSetWantsQuickRelayRequest:
disconnectGlobalLinkForDevice:completionHandler:
forceOTRNegotiation:priority:completionBlock:
admissionPolicyChangedForTopic:allowed:
connection:connectivityChanged:
connection:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:
connectionHasSpaceForMessages:dataProtectionClass:
connectionIsEmpty:
connectionIsEmptyOfCloudMessages:
manager:cbuuidDidConnect:isAlwaysConnected:
manager:cbuuidDidDisconnect:
manager:cbuuidDidDiscover:
manager:cbuuidDidFailToConnect:withReason:
createConnectionWithIdentifier:priority:shouldUseIPsecLink:dataProtectionClass:
initWithIdentifier:btUUID:uniqueID:shouldUseIPsecLink:isNearby:isClassCConnected:
setSupportsCloudConnections:
setBtUUID:
sendAckForMessageWithSequenceNumber:priority:dataProtectionClass:connectionType:
hasSpaceForMessagesWithPriority:dataProtectionClass:messageType:
syncCloudPriorityMessageStatistics
_powerlogTransportStats
logCurrentTransportStatsAndResetTimers
enableConnection
disableConnectionForReason:shouldWait:
disableCloudConnectionForReason:
setPreferInfraWiFi:services:
unpairStart
sendMessage:priority:messageType:
setPendingCloudEnable:
setIsPeerAlwaysConnected:
forceOTRNegotiationForTopic:priority:completionBlock:
btUUID
setUniqueID:
isDefaultPairedDevice
setIsDefaultPairedDevice:
setIsNearby:
localSetupInProgress
isMagnetIndicatingPeerIsAwake
supportsCloudConnections
pendingCloudEnable
isPeerAlwaysConnected
continuityConnectCount
setContinuityConnectCount:
originalbtUUID
setOriginalbtUUID:
isCloudConnected
setIsCloudConnected:
setIsClassCConnected:
emptyStatesLock
setEmptyStatesLock:
_identifier
_btUUID
_uniqueID
_originalbtUUID
_directConnections
_urgentDirectConnections
_defaultDirectConnections
_syncDirectConnections
_connectedStates
_emptyStates
_urgentConnectionForAck
_defaultConnectionForAck
_syncConnectionForAck
_urgentCloudConnectionForAck
_defaultCloudConnectionForAck
_isCloudConnected
_isMagnetIndicatingPeerIsAwake
_localSetupInProgress
_isPeerAlwaysConnected
_isDefaultPairedDevice
_waitForDefaultPairedDevice
_supportsCloudConnections
_pendingCloudEnable
_servicesPreferringInfraWiFi
_totalDeliveredMessagesInfraWiFi
_totalPacketsReceivedInfraWiFi
_totalPacketsReceivedClientSockets
_dispatchCounterInfraWiFi
_hadInfraWiFiTraffic
_disableTimer
_cloudDisableTimer
_powerLogTimerUrgent
_powerLogTimerDefault
_powerLogTimerSync
_powerLogTimerSockets
_continuityConnectCount
_incomingServiceMap
_outgoingServiceMap
_emptyStatesLock
UTunPeer
lastObject
setWantsResponse:
realm
setRealm:
setCsr:
authenticationInfo
setAuthenticationInfo:
responseUserID
setResponseUserID:
responseCertificate
setResponseCertificate:
stringValue
dsAuthID
setResponseAlertInfo:
wantsBagKey
wantsHTTPHeaders
wantsCompressedBody
wantsBinaryPush
responseCommand
allowsServerProvidedLenientAnisetteTimeout
_realm
_csr
_authenticationInfo
_responseCertificate
_responseUserID
_isKeychainError:withOSStatus:
_keychainAccountFromBaseIdentifier:
saveData:forIdentifier:allowSync:allowBackup:dataProtectionClass:error:
cloudCircleStatusError:
descriptionForDataProtectionClass:
dataForIdentifier:
saveData:forIdentifier:dataProtectionClass:withCompletion:
isInCloudCircleWithError:
initWithSecOTRSessionRef:
signAndProtectMessage:withError:
verifyAndExposeMessage:withError:
backingOTRSessionRef
setBackingOTRSessionRef:
_backingOTRSessionRef
initWithEncryptedResult:dataLength:fileCleanupBlock:
encryptedResult
dataLength
fileCleanupBlock
_encryptedResult
_dataLength
_fileCleanupBlock
connection
hasEntitlement:
opportunisticCache
copyOpportunisticCacheWithBlock:
initWithQueue:connection:opportunisticCache:
setConnection:
setOpportunisticCache:
_connection
_opportunisticCache
isSetup
isBuddyShowing
_isPhoneNumberAuthenticationDuringBuddyAllowed
isCurrentDeviceTinkerConfiguredWatch
activePairedDeviceHasPairingType:
systemMonitorAdapter
systemSupportsPhoneNumberRegistration
isAnySIMUsable
phoneNumber
initWithUserStore:
registrationConductor
userStore
deviceInformationString
_updateNotifyState
registrationSupported
systemSupportsServiceType:registrationType:
supportsAppleIDIdentification
faceTimeSupported
callingSupported
multiwaySupported
iMessageSupported
identityServicesSupported
serviceType
deviceType
supportsIdentification
systemSupportsServiceType:accountType:isTemporary:
systemSupportsRegistrationInfo:
registerInfo:requireSilentAuth:
registrationSupportedForRegistration:
_notifyRegistrationFailure:error:info:
registrationStateForRegistrationType:error:
setRunningSimpleAuthentication:
authenticationToken
migrationContext
setAuthenticationToken:
mainID
authenticationCert
setRegistrationStatus:
registrationStatus
profileID
authenticateRegistration:requireSilentAuth:
_sendIDSAuthenticationForRegistration:
_sendIDSAuthenticationOrRegistrationIfNeeded:
_ensureProfileQueriesAreReadyForRegistratration:
_performCorrectServerRequestForTemporaryPhoneRegistration:sentAuthentication:sentIDSAction:
regionID
regionBasePhoneNumber
setRegionID:
setRegionBasePhoneNumber:
saveToKeychain
_notifyRegistrationStarting:
startTrackingActiveRegistration:
removeFromKeychain
setRegistrationCert:
stopTrackingActiveRegistration:
_notifyDeregistrationStarting:
cancelActionsForRegistrationInfo:
reportSpamWithMessages:selfURI:registration:
reportiMessageUnknownSender:messageID:isBlackholed:messageServerTimestamp:selfURI:registration:
userUniqueIdentifier
userWithUniqueIdentifier:
credentialForUser:
phoneAuthenticationCertificate
setAuthenticationCert:
homeNumberSecondsUntilExpiration
temporaryPhoneUserWithUpdatedExpirationDate:
updateUser:
needsRenewal
email
authenticateRegistration:forceNewToken:requireSilentAuth:
setNeedsRenewal:
registrationControllerNeedsNewRegistration:
isDisabled
registrationController:registrationUpdated:
registrationController:registrationWillStart:
registrationController:registrationFailed:error:info:
_submitRegistrationCompletedMetricWithRegistration:success:registrationError:
_captureDiagnosticsForFailedRegistration:registrationError:
registrationController:registrationSucceeded:
notePhoneNumberRegistrationReset
registrationController:allRegistrationsSucceeded:
registrationController:deregistrationWillStart:
_shouldSubmitRegistrationCompletedMetricForRegistration:
initWithRegistrationType:serviceIdentifier:wasSuccessful:registrationError:circleStatus:
logger
logMetric:
loggerWithCategory:
triggerCaptureWithEvent:context:completion:
vettedEmails
shouldRegisterUsingDSHandle
queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
finishedRegistration
_phoneUserWithCredentials
temporaryPhoneUserWithFinishedRegistration
persistUsersImmediately
displayingAddNumberPrompt
hasNotifiedSuccess
_notifyHomeNumberSuccessForUser:
_postHomeNumberNotificationBeforeAlertForIdentifier:forcefully:
_notifyRegistrationSuccess:
_notifyAllRegistrationSuccess:
_provisionedTemporaryUser
_alertForHomeNumberIfNeededForSIMIdentifier:withPhoneNumber:
_notifyNeedsNewRegistration
uniqueIdentifier
setRegistrationReason:forUserUniqueIdentifier:
retries
setRetries:
authenticateRegistration:forceNewToken:
setMainID:
confirmedEmails
setUris:
addCandidateEmail:
authenticateRegistration:forceRenewal:requireSilentAuth:
_notifyRegistrationUpdated:
runningSimpleAuthentication
setVettedEmails:
queryInitialInvitationContextForRegistration:
buildValidationCredentialsIfNeeded
authenticateRegistration:
unregisterInfo:
containsObjectIdenticalTo:
nonRetainingArray
removeObjectIdenticalTo:
caseInsensitiveCompare:
activeRegistrations
_pnrOngoing
validators
usersWithRealm:
hasBeenProvisioned
presentSuccessAlertForUser:
temporaryPhoneUserWithNotifiedSuccess
bundleForClass:
serviceString
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
setDisplayingAddNumberPrompt:
response
selectedPhoneNumberRegistrationSubscriptionLabels
initWithArray:
isDeviceInDualPhoneIdentityMode
isDeviceInManualPhoneSelectionMode
setIsDeviceInManualPhoneSelectionMode:
setSelectedPhoneNumberRegistrationSubscriptionLabels:
addUserNotification:listener:completionHandler:
initialize
canStartRegistrationForAccountType:
canCompleteRegistration
registeredPhoneNumbers
center:succeededIdentification:phoneNumber:token:
center:failedIdentification:error:
centerNeedsNewIdentification:
center:startedAuthenticating:
center:succeededAuthentication:
center:succeededInitialRegionQuery:
center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:
center:failedAuthentication:error:info:
center:failedRegionValidation:error:info:
center:succeededIDSAuthentication:
center:failedIDSAuthentication:error:info:
center:succeededRegistration:
center:failedRegistration:error:info:
center:allSucceededRegistrations:
center:succeededCurrentEmailsRequest:emailInfo:
center:failedCurrentEmailsRequest:error:info:
centerUpdatedRegistrationIdentities:
reportSpamWithMessages:toURI:registration:
reportiMessageUnknownSender:messageID:isBlackholed:messageServerTimestamp:toURI:registration:
center:succeededLinkHandlesConfirmation:emailAddress:
startTrackingRegistration:
stopTrackingRegistration:
activeRegistrationsMatchingUserID:
activeRegistrationsOfType:
activeRegistrationsToRegister
_systemConfigurationPrefsChanged
setUserStore:
_handlers
_activeRegistrations
_trackedRegistrations
_deferredRegisters
_screenSharingToken
_iMessageToken
_faceTimeToken
_callingToken
_displayingAddNumberPrompt
_userStore
lowercaseString
disallowQueryRefresh
endpointsForURIs:fromURI:service:fromIdentity:filterBehavior:allowRefresh:
setEndpoints:
initWithQueryCache:
setHighPriority:
highPriority
sourcePeerID
setSourcePeerID:
messageID
fireAndForget
wantsResponse
setExpirationDate:
setWantsMultipleResponses:
setMaxSize:
originalTimestamp
setOriginalTimestamp:
deliveryStatusContext
setDeliveryStatusContext:
setUserInfo:
serviceData
setServiceData:
clientInfo
setClientInfo:
setTargetService:
setFromIdentity:
ignoreMaxRetryCount
setIgnoreMaxRetryCount:
sizeOfKeysWithValues
wantsMultipleResponses
ackBlock
setHasReceivedAPSDAck:
responseToken
callAllIndividualCompletionBlocksWithDeliveryContext:
clearAllPendingResponseTokens
hasReceivedAPSDAck
callAllAckBlocks
responseCode
targetService
_processMessageResponseForMessage:withError:resultCode:toURI:fromURI:service:fromIdentity:
setResponseError:
responseTimeStamp
setIndividualPeerMessages:
targetSessionToken
sessionTokenForURI:pushToken:fromURI:service:expirationDate:refreshDate:fromIdentity:includeSelfDevice:
forgetPeerTokensForURI:fromURI:service:
dictionaryWithObjectsAndKeys:
uniqueIDString
pendingResponseTokens
setPendingResponseTokens:
currentSize
setCurrentSize:
isFinalMessage
setIsFinalMessage:
groupPayload
setGroupPayload:
groupIdentifer
setGroupIdentifer:
UTF8String
enumerateKeysAndObjectsUsingBlock:
numberWithUnsignedLong:
isEqualToIgnoringCase:
initWithHighPriority:
removeAllAggregatableMessages
noteResponseForToken:
expectingMoreResponses
logFailureInfo
_fireAndForget
_hasReceivedAPSDAck
_isFinalMessage
_sourcePeerID
_encryptionType
_messageID
_targetService
_expirationDate
_fromIdentity
_additionalDictionary
_individualPeerMessages
_pendingResponseTokens
_maxSize
_currentSize
_chunkNumber
_groupPayload
_groupIdentifer
setNgmPublicIdentity:
allocWithZone:
hasNgmPublicIdentity
setNgmVersion:
setHasNgmVersion:
hasNgmVersion
setKtVersion:
setHasKtVersion:
hasKtVersion
readFrom:
writeTo:
copyTo:
mergeFrom:
ngmPublicIdentity
ktVersion
_ktVersion
_ngmPublicIdentity
_ngmVersion
_has
decodeObjectForKey:
isInitiator
setIsInitiator:
joinType
setJoinType:
setParticipantID:
participantData
setParticipantData:
publishedStreams
setPublishedStreams:
subscribedStreams
setSubscribedStreams:
maxConcurrentStreams
setMaxConcurrentStreams:
generationCounter
setGenerationCounter:
urisToParticipantIDs
setUrisToParticipantIDs:
clientContextData
setClientContextData:
relaySessionID
setRelaySessionID:
_params
_isInitiator
_joinType
_participantID
_participantData
_publishedStreams
_subscribedStreams
_maxConcurrentStreams
_generationCounter
_urisToParticipantIDs
_clientContextData
_relaySessionID
remoteURI
endpointForPushToken:URI:service:fromURI:
_lookupEndpoint
publicDeviceIdentityContainer
publicIdentityCache
encryptData:usedIdentifier:error:
avoidMainQueue
initWithMPIdentityIdentifier:
cert
performAsyncBlock:
fullDeviceIdentityContainerEncrypter
_isReplayError:
identityContainerDeserializationError
initWithUsedLastResortCache:usedCachedData:
replayCommitter
rateLimiter
initWithSending:refresh:messaging:resultExpected:
_lookupIdentityWithLastResortFallback:
startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
encryptData:onQueue:withCompletion:
decryptData:usingIdentifier:onQueue:isRetry:replayKey:withCompletion:
initWithPeerIDManager:fullDeviceIdentityContainerEncrypter:rateLimiter:replayCommitter:publicIdentityCache:avoidMainQueue:
setupWithLocalURI:remoteURI:pushToken:service:cert:
forceLegacy
setForceLegacy:
_avoidMainQueue
_forceLegacy
_rateLimiter
_replayCommitter
_publicIdentityCache
_fullDeviceIdentityContainerEncrypter
_remoteURI
_service
_cert
deviceID
publicDeviceIdentityContainerForDeviceID:
_validateDecryptionParametersWithError:
_encryptData:usedIdentifier:error:
performSyncBlock:
publicKeyStorage
issueDependentIDQueriesWithCompletionBlock:
_decryptData:usingIdentifier:isRetry:error:
_decryptData:usingIdentifier:isRetry:
encryptData:usedIdentifier:onQueue:error:
decryptData:usingIdentifier:isRetry:onQueue:error:
initWithPublicKeyStorage:accountController:fullDeviceIdentityContainerEncrypter:rateLimiter:forceLegacy:
setDeviceID:
_publicKeyStorage
_deviceID
validationMechanisms
removeFirstObject
initWithIMSI:PLMN:validationMechanisms:
matchesIMSI:PLMN:
containsMechanisms
topMechanism
preflightStackByPoppingMechanism
_validationMechanisms
isScreenSharingSession
initWithAccount:destinations:options:availabilityCheck:
displayName
initWithDictionary:serviceName:isInitiator:uniqueID:accountID:destinations:
messenger
initWithDictionary:sharedState:messenger:
invitationManager
setIsScreenSharingSession:
setInviteTimeout:
setEndSessionTimeout:
setClientType:
setUseQRDirectly:
enableSingleChannelDirectMode
destinationIsDefaultPairedDevice:
enableQuickRelay
startUDPGlobalLinkForDevice:
setTransportType:
unsignedIntegerValue
setConnectionCountHint:
connectionCountHint
_loggingFlags
setInvitationTimer
setState:
updateCriticalReliabilityState
_setLinkProtocol:
setSharedSession:
openSocketToDevice:
registerClientChannel
registerMultiplexerTransport
pushTokenLookup:forGroup:fromID:account:completionBlock:
submitAWDMetricsForIDSSessionStarted
encryptionState
initWithString:
_resetPreferences:
_cleanupSessionConnection
_checkAndUnassertRealTimeMode
session:didReceiveReport:
useQRDirectly
_connectQRDirectlyToClientChannel:
_checkAndSendCachedDataForClient:
_checkAndRunClientChannelTests:
_connectSocketDescriptor:toClientChannel:
sharedSession
_invalidateClientChannel:
removeObjectsInRange:
writeToClientChannel:packetBuffer:metaData:metadataSize:
deviceConnectionInfo
onTransportThread_SendWithConnectionContext:packetBuffer:
useBTDatagramPipe
getLinkInformationForDevice:completionHandler:
onTransportThread_SetDefaultUnderlyingLink:linkID:
onTransportThread_SetPacketNotificationFilter:linkID:uniqueTag:isEnabled:
numberWithUnsignedShort:
onTransportThread_DropIPPackets:linkID:payloadArray:
numberWithChar:
onTransportThread_StopKeepAlive:linkIDs:
dataWithBytes:length:
onTransportThread_SendSKEData:skeData:completionHandler:
onTransportThread_UpdateProtocolQualityOfService:linkID:isGood:
onTransportThread_CurrentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
didReceiveCurrentCellularSignalRaw:signalStrength:signalGrade:
stringWithCString:encoding:
reliablyRequestKeyMaterialForGroup:sessionID:
requestKeyMaterialForGroup:sessionID:
onTransportThread_setRemoteDeviceVersion:version:
deserializeSessionInfoMetadata:
requestSessionInfoWithOptions:
initWithUUIDBytes:
reportTimeDifferenceBetweenFirstPacketAndMKI:forMKI:service:activeParticipants:
onTransportThread_setWiFiAssistState:isWiFiAssistEnabled:
onTransportThread_startLinkProbing:options:
onTransportThread_stopLinkProbing:options:
onTransportThread_queryLinkProbingStatus:options:
onTransportThread_flushLinkProbingStatus:options:
onTransportThread_SendToGlobalLinkWithSessionID:packetBufferArray:arraySize:
getAllocateResponse:groupID:
getQuickRelayAllocateOptions:
_certForFromURI:
_sendingOfflineActiveParticipantInfoRequest:
setupNewAllocation:sessionID:fromIdentity:fromURI:fromService:options:connectReadyHandler:
_getNewLinkOptionsForActiveParticipantInfoRequest
streamWithParticipantID:streamArray:anyParticipant:anyStream:
onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:
disallowCellularInterface
disallowWifiInterface
clientUUID
enableSKE
useSecureQRControlMessage
inviteSentTime
session:didReceivePluginAllocationInfo:
globalLinkErrorToSessionEndReason:
initWithUUIDString:
getUUIDBytes:
initWithPayload:command:
deliveryError
sendIDSMessage:service:topic:completionBlock:
_sendSessionEndWithData:
initWithGroupUUID:isInitiator:participantIdentifier:participantDestinationID:participantUpdateType:participantUpdateSubtype:fromServer:serverDate:participantData:clientContextData:members:participantIDs:relaySessionID:
participantIDs
_startJoinNotificationDeliveryTimeout
_noteJoinNotificationDidDeliverWithSuccess:
notifyJoinToGroup:members:params:fromAccount:fromID:sessionID:completionBlock:
sessionDidJoinGroup:participantUpdateDictionary:error:
connectGlobalLinkForDevice:sessionInfo:connectReadyHandler:withLocalInterfacePreference:
_serverSpecifiedJoinNotificationDeliveryTimeout
setUseBTDatagramPipe:
clearAllTimers
startQRSession
link:didReceivePacket:fromDeviceUniqueID:cbuuid:
initWithReadHandler:
_acceptedDeviceUniqueID
_acceptedDeviceToken
_socketOptionsForDevice:uniqueID:pushToken:connectionSuffix:
_setInitialLinkType:
checkAndCallSessionStart
openSocketWithOptions:queue:completionHandler:
_sessionStartWithSocketDescriptor:
isWithDefaultPairedDevice
shouldUseIPsecLinkForDefaultPairedDevice
_broadcastSessionStartWithSocket:
submitAWDMetricsForIDSSessionConnected
getServerProviderForIDSSessionID:
link:didReceiveReportEvent:
setAcceptedRelaySession:relaySessionID:options:
setHasPendingAllocation:forIDSSession:
checkNetworkAvailabilityForSession:completionBlock:
setLocalBlob:
checkLocalConnectivityForSession:withCompletionBlock:
socket
initWithSocket:queue:delegate:
_reportRTC
_cleanupSocketPairConnection
_notifyClientsSessionStopped
_closeSocketToDevice:
resetKeyMaterialLocalSentStatus:
unsubscribeEndpointsForGroup:
_cleanupQuickRelaySession
stopUDPGlobalLinkForDevice:
unregisterMultiplexerTransport:
localUnauthenticatedFullIdentity
setLocalUnauthenticatedFullIdentity:
setRemoteUnauthenticatedPublicIdentity:
stopGlobalLinkForDevice:
reinitiate
didSessionReinitiated
setEndSessionTimeoutTimer
stopConnection:
invalidateSession:isExpiryPurging:
notifyLeaveToGroup:members:params:fromAccount:fromID:sessionID:
sessionDidLeaveGroup:error:
removeAccountForGroup:
removeUTunPeerWithSessionID:reason:shouldWait:
unlockContinuityPeer:
groupSessionDidTerminate:
setShouldConnectToQRServer:
submitAWDMetricsForIDSSessionCompleted
dictionaryWithDictionary:
updateService:withPreferences:
defaultPeerSetLinkPreferences:
closeSocketWithOptions:
arrayWithArray:
remoteUseCloudPairedControlChannel
peerProtocolVersion
remoteUnauthenticatedPublicIdentity
initWithLocalFullIdentity:remotePublicIdentity:
disableRemoteDeviceEncryption
getFromService
getCallerCert
disableEncryption
deviceIDForPushToken:
groupSessionEnded:withReason:error:
sessionEnded:withReason:error:
availabilityTimerCancel
submitAWDMetricsForIDSSessionWithEndReason:
timeIntervalSinceDate:
startConnectingDate
setAudioEnabled:
getAudioEnabled
session:audioEnabled:
setMuted:
muted
session:muted:
setPreferences:
setForceInternetInvitation:
setClientUUID:
sessionStarted:
handleAVConferenceError:
setError:
encryptionInitialized
dataWithBytesNoCopy:length:freeWhenDone:
sendData:
seqSend
setSeqSend:
onTransportThread_getLinkType:
unsignedCharValue
unsignedShortValue
recvMembershipChangeEventWithReason:
didUpdateMembers:forGroup:sessionID:
updateMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:reason:completionBlock:
updateParticipantDataToMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:
getSessionInfoFromDefaults:groupID:
maxRemoteMessagingPayloadSize
_checkIfPushMessageSizeGreaterThanMaxLimit:maxLimit:
invalidateLatestResponse:qrReason:previousError:
setGroupStreamInfo:sessionInfo:
pluginRequests
connectQRServer:withPreferredLocalInterface:
cleanUpCachedMappings:
removeLocalActiveParticipantForGroup:
reportPrekeyAckStatus:
setBypassStorage:
link:didReceiveEncryptionInformation:
IDSRealTimeEncryptionServiceName:activeParticipants:membershipChangeMKMTimeDelta:
link:didReceiveMembershipChangedInformation:
allocationDone:sessionInfo:
UUIDString
onTransportThread_updateSessionParticipants:relayGroupID:relaySessionID:participants:
realTimeEncryptionPublicKeyData
didUpdateParticipants:forGroup:sessionID:
session:didReceiveActiveParticipants:success:
getURIFromParticipantID:participantID:
initWithGroupUUID:participantIdentifier:isKnown:participantURI:pushToken:
_updateActiveParticipants:
initWithIdentifier:
onTransportThread_SendToGlobalLinkWithSessionID:packetBuffer:
setPacketBufferReadHandler:
registerMultiplexerTransport:
supportsReinitiate
submitAWDMetricsForIDSSessionReinitiateRequested
addQREventForRTCReport:
submitAWDMetricsForIDSSessionReinitiateStarted
setEnableSKE:
_receivedReinitiateRequestMessage:fromID:
_receivedReinitiateTeardownMessage:fromID:
_receivedReinitiateTeardownAckMessage:fromID:
_receivedReinitiateBringupMessage:fromID:
_receivedReinitiateBringupAckMessage:fromID:
requestAllocationForRecipient:
getRelaySessionIDForIDSSessionID:pushToken:
submitAWDMetricsForIDSSessionReinitiateConnected
sendCancelInvitationToDestinations:remoteEndReason:data:
sendInvitationWithOptions:declineOnError:
sendInvitationWithData:declineOnError:
cancelInvitation
cancelInvitationWithData:
cancelInvitationWithRemoteEndedReasonOverride:
acceptInvitation
acceptInvitationWithData:
declineInvitation
declineInvitationWithData:
declineInvitationWithData:forceFromID:additionalMessageAttributes:
receivedAcceptMessage:fromID:
receivedDeclineMessage:fromID:
receivedCancelMessage:fromID:
setRemoteBlob:
setQuickRelaySessionToken:
setRemoteUseCloudPairedControlChannel:
setSSRCRecv:
setSeqRecvStart:
connection:didStart:error:
connectionDidStop:error:
connection:receivedData:
didReceiveDataMessage:
connectionDidClose
connectionBecameEmpty
connection:didReceiveData:
sendKeyMaterialMessage:toDestination:
recvKeyMaterial:
invitationDeclined
networkingIsAvailable:
sendCancelInvitationMessage
_selectDefaultMic
initWithAccount:destinations:options:
reportFirstMKMReceived:
setAcceptedRelaySession:
getAppID
runConnectivityCheckWithCompletionBlock:
startListeningOnClientSocket:isRawSocket:
cleanupSession
reconnectSession
endSessionWithData:
sessionDuration
connectDuration
link:didDisconnectForDeviceUniqueID:cbuuid:
link:didReceiveSKEData:
link:didConnectForDeviceUniqueID:cbuuid:
link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:
link:didWiFiNWPathFlagsChanged:
link:didCellularNWPathFlagsChanged:
link:didRATChange:
link:didCellularMTUChange:
link:didSoMaskChange:
link:didGetLinkProbingStatus:
link:didDisconnectUnderlyingLinkID:linkUUID:reason:
link:didDefaultUnderlyingLinkChangeSucceeded:currentDefaultLinkID:
link:didAddQREvent:
link:didReceiveDebugDataForClient:dataType:
link:didReceiveSessionInfo:relayGroupID:relaySessionID:success:
link:didReceiveSessionStats:relayGroupID:relaySessionID:success:
destinationsContainFromID:
updateMembers:withContext:triggeredLocally:
updateParticipantData:withContext:
joinWithOptions:
leaveGroupSession:
sendAllocationRequest:
onParticipantID2PushTokenMappingChange:
processAllocationErrorStatus:errorCode:
getActiveParticipants:pushTokenForParticipants:
receivedReinitiateMessage:fromID:
_setClientType:
_useBTDatagramPipe
clientID
setClientID:
groupSessionState
setInvitationManager:
setMessenger:
qrError
setQrError:
qrReason
setQrReason:
shouldConnectToQRServer
_assertedRealTimeMode
_availabilityCheck
_awdStartTimestamp
_awdUniqueId
_baseSocketPairConnection
_bypassUTun
_cachedClientData
_cachedNumberOfActiveParticipants
_clientChannel
_connectionClaimed
_connectionContext
_currentGenerationCounter
_disallowCellularInterface
_disallowWifiInterface
_endDate
_extraConnections
_extraConnectionCount
_groupSessionState
_groupStatusNotificationParams
_idsDataChannelClientPID
_initialLinkType
_inviteRecvTime
_joinGroupSessionPending
_joinNotificationDeliveryTimeoutBlock
_keyMaterial
_linkProtocol
_membershipChangeEventTime
_newKeyEventTime
_packetBufferArray
_preferredAddressFamily
_preferCellularForCallSetup
_qrError
_qrEventsForRTCReports
_qrReason
_reason
_relayPort
_sessionStartedCalled
_sessionInfoMetaData
_shouldAssertRealTimeMode
_shouldConnectToQRServer
_skeData
_socketDescriptor
_startDate
_supressClientNotifications
_multiplexerEnabled
_multiplexerTransport
_channelDataCachedTime
_clientID
_invitationManager
_messenger
characterAtIndex:
__imDataWithHexString:
setBroadcastID:
setBroadcastNeedsClientAck:
setBroadcastBlock:
setMessagePriority:
setMessageSenderID:
setMessageSequenceNumber:
initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:
broadcastID
broadcastBlock
broadcastNeedsClientAck
transient
setTransient:
broadcastPerformed
setBroadcastPerformed:
messagePriority
messageSenderID
messageSequenceNumber
_broadcastID
_broadcastBlock
_broadcastNeedsClientAck
_broadcastPerformed
_transient
_messageUUID
_messagePriority
_messageSenderID
_messageSequenceNumber
initWithType:
stunRequestToBuffer:outputLength:transactionID:reqCount:userName:usernameLen:sendTime:keyData:remainingLength:
transactionID
allowMessageData:withDelayedCommitBlock:
_checkMessageHashForData:identifier:isRetry:delayedCommitBlock:
then:
initWithDeviceIdentityContainerEncrypter:messageHashChecker:
messageHashChecker
_messageHashChecker
setStatus:
setHasStatus:
hasStatus
dhKey
installMethods
uninstallMethods
lastPrKey
name
logSoftFailureForEventNamed:withAttributes:
daemon
shutdown
logState
clearCacheAndPersistImmediately:
clearCache
_cleanUpOutgoingMessageDatabaseAndClearStatementCache
_cleanupIncomingMessageDatabase
opportunisticDeliveryController
reloadSettings
setWorkloop:
setQueue:
fileURLWithPathComponents:
setDaemonRootDirectory:
initWithConfiguration:
initWithServiceName:queue:
currentRunLoop
initWithGUID:
trackMessages:
trackMessages:forURIs:messageQueue:
successful
initWithResponseCode:error:lastCall:
setDisplayIDs:
setLastCourierAck:
setSuccessful:
setIdsResponseCode:
setLastCall:
finishedTrackingMadridAcksWithContext:
receivedErrorWithContext:
finishedTrackingAPNSAcks
receivedAPNSAckForMessage:
initWithGUID:service:messageDelivery:deliveryAcknowledgementBlock:sendCompletionBlock:completionActivity:
sendFanouts:forURIs:messageQueue:
ackStateMachine
_deliveryAcknowledgementBlock
_sendCompletionBlock
_uris
_guid
_completionActivity
_ackStateMachine
decodeIntegerForKey:
versionNumber
encodeInteger:forKey:
initWithVersionNumber:
_versionNumber
initWithStandardPolicy:
ditchMemoryPolicy
prioritizeMemoryPolicy
initWithPolicyBlock:
processedDictionaryForDisk:andMemory:
block
setBlock:
policy
setPolicy:
_block
_policy
initWithIdentifier:keychainWrapper:systemMonitor:
initWithIdentifier:dataProtectionClass:keychainWrapper:systemMonitor:
initWithOriginPersister:destinationPersister:
initWithIdentifier:versionNumber:decodableClasses:dataProtectionClass:mergePolicy:migrationBlock:
defaultPersisterForIdentifier:dataProtectionClass:
initWithIdentifier:versionNumber:decodableClasses:mergePolicy:writeCoalescingDelay:writeCoalescingLeeway:persister:migrationBlock:
setByAddingObjectsFromArray:
_performLockedBlock:
_performCacheReadingBlock:
_performCacheModifyingBlock:
loadAndCheckStatus
delayedSave
isAvailable
_decodeMapData:
_versionNumberForPersistedMap:
_mapByStrippingMetadataFromMap:
didFirstLoadPersistentMap:
_mapByAddingMetadataToMap:
_encodeMap:
saveData:
initWithIdentifier:versionNumber:decodableClasses:migrationBlock:
copyDictionaryRepresentation
persistImmediately
_timerIdentifierFromBaseIdentifier:
setLock:
serialPersistQueue
setSerialPersistQueue:
saveTimer
setSaveTimer:
writeCoalescingDelay
setWriteCoalescingDelay:
writeCoalescingLeeway
setWriteCoalescingLeeway:
migrationBlock
setMigrationBlock:
persister
setPersister:
decodableClasses
setDecodableClasses:
cachedMap
isLoaded
mergePolicyType
setMergePolicyType:
mergePolicy
setMergePolicy:
_isLoaded
_serialPersistQueue
_saveTimer
_writeCoalescingDelay
_writeCoalescingLeeway
_migrationBlock
_persister
_decodableClasses
_cachedMap
_mergePolicyType
_mergePolicy
shouldReportMetric
payload
reason
additionalInfo
sendMetric:
initWithSessionController:realTimeEncryptionController:broadcaster:
setDateFormat:
initWithLocaleIdentifier:
setLocale:
stringFromDate:
realTimeEncryptionController
_sendFanoutMessage:account:toGroupMembers:fromID:command:commandContext:toGroup:sessionID:reason:waitForMadridAcks:completionBlock:
_sendFanoutMessage:account:toGroupMembers:fromID:command:toGroup:sessionID:reason:
setCommandContext:
_multiwayFTMessageSendTimeout
lastCourierAck
_specificOriginatorFromID:senderToken:accountUniqueID:
sessionController
sessionWithGroupUUID:
removeActiveParticipant:forGroup:
broadcaster
broadcastGroupSessionParticipantUpdate:onTopic:toIdentifier:fromID:
broadcastGroupSessionParticipantDataUpdate:onTopic:toIdentifier:fromID:
sessionToken
pairedDeviceUniqueID
dependentRegistrationMatchingUUID:
_dataForKey:
_stringForKey:
participantsForGroupID:
_currentDateString
processIncomingParticipantUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingParticipantDataUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
getURIFromPushToken:forGroup:
groups
events
groupMemberPushTokens
_notifiers
_groups
_events
_groupMemberPushTokens
_account
_sessionController
_realTimeEncryptionController
_broadcaster
receivedGroupSessionParticipantUpdate:forTopic:toIdentifier:fromID:
receivedGroupSessionParticipantDataUpdate:forTopic:toIdentifier:fromID:
SessionController
authToken
setAuthToken:
setProfileID:
setPushCertificate:
pushPrivateKey
setPushPrivateKey:
pushPublicKey
setPushPublicKey:
arrayWithObject:
hasRequiredKeys:
_FTDataFromHexString
additionalMessageHeadersForOutgoingPush
_pushCert
_pushKey
_pushPublicKey
_authToken
_profileID
initWithPublicKeyStorage:peerIDManager:accountController:registrationKeyManager:rateLimiter:OTRController:avoidMainQueue:forceLegacy:
_createHashingDeviceIdentityEncrypter
replayStateCommitter
initWithEndpoint:fullDeviceIdentityContainerEncrypter:replayCommitter:forceLegacyPK:
initWithOTRController:OTRToken:
builderWithPublicKeyStorage:peerIDManager:accountController:registrationKeyManager:rateLimiter:OTRController:avoidMainQueue:forceLegacy:
encrypterWithLocalURI:remoteURI:pushToken:service:cert:
encrypterWithDeviceID:
encrypterWithEndpoint:
encrypterWithOTRToken:
setPublicKeyStorage:
setRegistrationKeyManager:
setRateLimiter:
OTRController
setOTRController:
setAvoidMainQueue:
_OTRController
identityWithAccess:usageIdentifier:error:
publicDeviceIdentityWithError:
sealMessage:signedByFullIdentity:error:
unsealMessage:signedByPublicIdentity:error:
identityWithIdentityData:prekeyData:error:
_registeredIdentityTimestamps
removeBlockForIdentifier:
addBlockForRegistrationCompletion:
accountsOnService:
registerAccount
incomingStorageRequestForTopic:primary:messageContext:
initWithTitle:message:
launchWithRequest:context:
initWithTitle:promptMessage:
launchPromptWithButton:defaultUrl:alternateButton:alternateUrl:
transparentEndpointViewer
internal_fetchEndpointCacheStateForServiceIdentifier:localURI:remoteURI:completion:
internal_fetchTransparentEndpointsForServiceIdentifier:localURI:remoteURI:verifyAgainstTrustCircle:completion:
performOutstandingKeyTransparencyVerificationWithCompletion:
internal_kickVerificationForServiceIdentifier:localURI:remoteURI:completion:
internal_fetchVerifierTrustedDevicesWithCompletion:
internal_fetchVerifierCloudKitTrustedDevicesWithCompletion:
internal_fetchVerifierAccountKeyTrustedDevicesWithCompletion:
internal_fetchVerifierAccountKeyPublicDataWithCompletion:
internal_fetchCloudKitTransparencyStateWithCompletion:
internal_nukeCloudKitTransparencyStateWithCompletion:
internal_nukeTransparencyState:
propertiesForUser:
setState:forProperty:deviceUniqueID:
valueForKeyPath:
oneToOneECCQuicktestEncryptionWithData:completion:
registeredIdentityTimestampsWithBlock:
triggerKeyRollWithCompletion:
setForceKeyRoll:withCompletion:
currentECVersionWithBlock:
setECVersion:withCompletion:
checkServerStorageForService:withCompletion:
tapToRadarWithTitle:message:context:completion:
popupPromptWithTitle:message:defaultButton:defaultUrl:alternateButton:alternatrUrl:completion:
autoBugCaptureWithCompletion:
fetchEndpointCacheStateForServiceIdentifier:localURI:remoteURI:completion:
fetchTransparentEndpointsForServiceIdentifier:localURI:remoteURI:verifyAgainstTrustCircle:completion:
kickVerificationForServiceIdentifier:localURI:remoteURI:completion:
fetchVerifierTrustedDevicesWithCompletion:
fetchVerifierCloudKitTrustedDevicesWithCompletion:
fetchVerifierAccountKeyTrustedDevicesWithCompletion:
fetchVerifierAccountKeyPublicDataWithCompletion:
fetchCloudKitTransparencyStateWithCompletion:
nukeCloudKitTransparencyStateWithCompletion:
nukeTransparencyStateWithCompletion:
removeConnectionWithConnectionName:completionHandler:
deviceChangedForDeviceID:isNearby:isConnected:isCloudConnected:completionHandler:
fetchStoredUserDescriptions:
assertTransportThreadRealTimeMode:completionHandler:
initWithQueue:connection:
utilities
refreshDate
expireDate
legacyVersion
serializedLegacyPublicIdentity
numberWithShort:
serializedNGMDevicePrekey
KTLoggableData
_setDailyTimer
_setHourlyTimer
_dailyTimer:
_hourlyTimer:
_noteActionType:forService:serviceType:requestor:
noteQueryForService:requestor:
noteQueryRequestForService:requestor:
noteIncomingMessageForService:
noteIncomingLocalMessageForService:
noteOutgoingMessageForService:serviceType:requestor:
noteOutgoingFallbackMessageForService:serviceType:requestor:
noteOutgoingServerMessageForService:serviceType:requestor:
_traffic
_hourlyTimer
_dailyTimer
serviceWithPushTopic:
enabledAccountsOnService:
attemptPresentationOfNearExpirationAlertForUser:
attemptPresentationOfExpirationAlertForUser:
retractLockscreenAlerts
clearNonExpirationFollowUps
watchPairing
pairedDeviceUUIDString
_setIsQuickSwitchingToAnotherDevice:
activatePairedDeviceWithCBUUID:
addUTunPeerWithDeviceUniqueID:btuuid:
prepareForQuickSwitch
addPairedDevice:
ensureCommunicationWithActivePairedDeviceIsPossible
updatecloudDeliveryStateOnDefaultPeer
resetAndResynchronizeEverything
_processStoredMessagesIncludingClassD:
broadcasterWithMessageContext:
didSwitchActivePairedDevice:
ensureLocalSetupInProgressConsistencyAfterQWS
_resetCommunicationStateBeforeQuickSwitchDeactivatePairedDevices:withCompletionBlock:
accountsOfAdHocType:
allowPendingMessagesForInactiveDevice
markAllMessageAsPendingDeleteForAccounts:withDestinationDevice:
markOutgoingMessagesAsUnsentForDestination:
deactivatePairedDevices
removeSessionKeyForAllTokenFromMainQueue
removeAllCachedSessionsFromMainQueue
resetAllSessions
removeUTunPeerWithDeviceUniqueID:btuuid:reason:shouldWait:
tearDownEncryptionForDeviceUniqueID:cbuuid:
obliterateConnectionInfoWithCompletionBlock:completionQueue:
isQuickSwitchingToAnotherDevice
initiateQuickSwitchToDeviceWithCBUUID:force:completionBlock:
resetCommunicationStateBeforeQuickSwitchWithCompletionBlock:
_isQuickSwitchingToAnotherDevice
_isQuickSwitchingMutex
setWantsRetries:
initWithPairingManager:serviceController:accountController:pushHandler:userDefaults:remoteCredential:
userDefaults
currentInFlightSyncAttempts
_stopAllPendingActions
accountSync
_noteShouldSynchronizeServices:
noteShouldSynchronizePreferredAccount
noteShouldFetchRemoteAccountInfoForAllServices
noteShouldSynchronizeTinkerDeviceInfo
stop
retryTimeForKey:attempts:
initWithQueue:backoffProvider:block:
saveTracking
syncCredential
pairingManager
sendAccountSyncMessage:messageID:queueOneIdentifier:allowCloudFallback:completionBlock:
_startRetryForKey:withAction:
_noteShouldSynchronizeTinkerDeviceInfo
allServices
isPaired
accountInfo
_sendAccountSyncMessage:withPersistentKey:
shouldSyncAccounts
synchronizeAccountsWithRemoteInfo:service:
fetchRemoteAccountsOfServiceTypes:withCompletionBlock:
_syncTinkerDeviceInfo
_constructAccountInfo:
usefulLoggingDescriptionAccountInfos:
pairedDeviceServiceMinCompatibilityVersion
accountSyncMinCompatibilityVersion
shouldNotSyncPhoneNumberAccounts
iCloudService
_appearsToBeEmail
pushHandler
descriptionForDictionary:options:
_updatePreferredAccountWithAccountInfo:withAccountSyncCommand:
_updateTinkerDeviceWithURIs:pushToken:
iCloudBasedService
smallDescription
disableAccountWithUniqueID:
loginID
removeAccount:
_registerAccountsWithRemoteInfo:
useiMessageCallerID
clearDisplayName
existingAccountOnService:withType:loginID:
setupLocalAccountForService:
localAccountOnService:
enablePrimaryAccountWithUniqueID:
_updateAccountWithAccountInfo:
__imArrayByFilteringWithBlock:
accountWithServiceName:loginID:
initWithLoginID:service:uniqueID:accountType:accountConfig:
addPrimaryAccount:
linkedAccounts
linkedServicesForService:
__imForEach:
setDisplayName:
useFaceTimeCallerID
updatePairedDeviceiCloudURIs:pushToken:
__imDictionaryByFilteringWithBlock:
descriptionForArray:options:
stopAnyUnfinishedSynchronization
kickAnyUnfinishedSynchronization
noteShouldSynchronizeAllServices
constructRAResponseDictionary:
incomingSyncMessage:
setSyncCredential:
setCurrentInFlightSyncAttempts:
setPairingManager:
setPushHandler:
setUserDefaults:
_syncCredential
_currentInFlightSyncAttempts
_pairingManager
_pushHandler
_userDefaults
initWithData:encryptionType:payloadMetadata:
payloadMetadata
_data
_payloadMetadata
phaseForExpirationDate:
initWithUser:expirationPhase:
expirationPhase
initWithUser:
expirationInterval
_expirationPhase
addActionListener:forRealm:
_attemptToKickoffExpirationTimerForUser:
_kickoffExpirationTimerForInfo:
usersToTimers
_expireTimer:
expirationManager:nearingExpirationForUser:
expirationManager:didExpireUser:
_cancelExpirationTimerForUser:
userStore:didRemoveUser:withAuthenticationCertificate:
userStore:didAddUser:
userStore:didUpdateUser:
userStore:didRemoveAuthenticationCertificateForUser:
initWithUserStore:delegate:
usersToTimersLock
setUsersToTimersLock:
setUsersToTimers:
_usersToTimersLock
_usersToTimers
validateListenerForLocalObject:andCheckEntitlement:
_respondToAppleCareRequestID:withMessageContext:error:
setShouldSupressRepairLogic:
signInResponder
iCloudSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
iCloudSignOut
listenerForLocalObject:
applecareResponseForRequestID:withError:
appleCareSignInUserName:DSID:authToken:requestID:messageContext:
appleCareSignOutUserWithRequestID:messageContext:
publicName
propertyListWithData:options:format:error:
_fullClusterFromData:error:
dataWithPropertyList:format:options:error:
_storeData:forIdentifier:completion:
clusterWithDataRepresentation:error:
_keychainEntryForCluster:
clientDatasByServiceType
setClientDatasByServiceType:
transparencyLoggableDatasByServiceType
setTransparencyLoggableDatasByServiceType:
_clientDatasByServiceType
_transparencyLoggableDatasByServiceType
publicLegacyIdentityData
publicNGMIdentityData
publicNGMPrekeyData
hasRegisteredContainer
hasUnregisteredContainer
generationError
rollingError
identityToRegisterError
serviceTypesFromRegistrations:
_shouldAddECKeysForServiceType:
NGMVersion
supportsHEIFEncoding
supportsAnimojiV2
supportsHDRdecoding
supportsFMDV2
supportsKeySharing
supportsHarmony
clientDatasForRegistrations:keyStore:
pushPriority
activityPolicy
version
setResponsePresenceTopic:
isWebTunnelMessage
wantsIDSProtocolVersion
wantsAPSRetries
isIDSMessage
wantsIntegerUniqueIDs
handleResponseHeaders:
responsePresenceTopic
_pushPriority
_activityPolicy
_version
_tokens
_activityTopic
_metadataBlob
_ttl
_responsePresenceTopic
isAccountsFrameworkAvailable
hasPerformedMigration
isiCloudSignedIn
isiTunesSignedIn
dsID
authKitAccountWithDSID:
authKitAccountWithAppleID:
securityLevelForAccount:
lastRegistrationFailureDate
timeSinceDateOnAccount:
lastRegistrationSuccessDate
aliases
vettedAliases
minusSet:
unselectReasonForAlias:
isiCloudAccountMatchingAccount:
registrationErrorReason
hasEverRegistered
lastRegistrationFailureError
timeSinceLastRegistrationFailureOnAccount:
timeSinceLastRegistrationSuccessOnAccount:
accountSecurityLevelForAccount:
areAllAliasesSelectedOnAccount:
areAllSelectedAliasesRegisteredOnAccount:
isProductionEnvironment
initWithAccountType:serviceIdentifier:doesExist:isEnabled:isUserDisabled:isiCloudSignedIn:doesMatchiCloudAccount:isiTunesSignedIn:registrationError:registrationErrorReason:registrationStatus:accountRegistrationStatus:hasEverRegistered:lastRegistrationFailureError:timeIntervalSinceLastRegistrationFailure:timeIntervalSinceLastRegistrationSuccess:accountSecurityLevel:areAllAliasesSelected:areAllSelectedAliasesRegistered:numberOfSelected:numberOfVetted:numberOfUnselectReasonUnknown:numberOfUnselectReasonAlertDenial:numberOfUnselectReasonClientCall:numberOfUnselectReasonBadAlias:numberOfUnselectReasonUpdateInfo:isProdEnvironment:
registrationAccountStatusMetricForAccount:
registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:
_repairTimerHit:
setupPhoneNumberRepairTimer
repairAccounts
shouldSupressRepairLogic
hasHardDeregistered
isLoading
_repairAccountsWithSuccessfulPhoneNumberRegistration
repairiCloudBasedAccounts
_repairAccountsWithSuccessfullAppleIDRegistrationForDSID:service:
_shouldBypassRepairLogic
_resetPhoneNumberRepairCounter
wantsPhoneNumberAccount
_createAndEnableExistingSystemAccounts
arrayWithObjects:
performCleanUpWithCompletion:
_repairiTunesBasedAccounts
adHocServiceType
isLocalSetupEnabled
disabledOnTinkerWatch
enabledOnlyWhenPaired
isTraditionalLocalSetupEnabled
_hasActiveAppleIDBasedAccountOnService:
hasActiveSMSAccount
_activeAppleIDAccount
setupAccountWithCompletionBlock:
iTunesService
iCloud
_createiTunesAccountFromSystemIfNeeded
addAccount:
repairService:withPrimaryUserName:
iTunesSignOut
updateDevicePropertiesWithDevices:
phoneRepair
_shouldNotSetupPhoneNumberRepairTimer
_lastRepairIntervalFromPrefs
dateWithTimeIntervalSinceReferenceDate:
_totalRepairCountFromPrefs
_phoneNumberRepairIntervalForCount:
_phoneNumberRepairTimerHit:
removeAppValueForKey:
_repairPhoneNumberAccounts
_phoneNumberRepairInterval
_phoneNumberRepairMaxInterval
initWithAccountController:systemAccountAdapter:userDefaults:
forceRepairAccounts:
kickRepairForAllRegistrationsSucceeded:
recalculatePhoneRepairTimer
systemAccountAdapter
setSystemAccountAdapter:
repairTimer
setRepairTimer:
phoneRepairTimer
setPhoneRepairTimer:
lastBagRepairInterval
setLastBagRepairInterval:
waitingForMigration
setWaitingForMigration:
_shouldSupressRepairLogic
_waitingForMigration
_systemAccountAdapter
_repairTimer
_phoneRepairTimer
_lastBagRepairInterval
disablePrimaryAccountWithUniqueID:
tryConsumePacketBuffer:
setServiceIdentifier:
hasServiceIdentifier
hasSignature
_localDetectedCorruption
sendData:peerID:
link:hasSpaceAvailable:deviceUniqueID:cbuuid:
getBytes:length:
peripheralDidUpdateName:
peripheral:didModifyServices:
peripheralDidUpdateRSSI:error:
peripheral:didReadRSSI:error:
peripheral:didDiscoverServices:
peripheral:didDiscoverIncludedServicesForService:error:
peripheral:didDiscoverCharacteristicsForService:error:
peripheral:didUpdateValueForCharacteristic:error:
peripheral:didWriteValueForCharacteristic:error:
peripheral:didUpdateNotificationStateForCharacteristic:error:
peripheral:didDiscoverDescriptorsForCharacteristic:error:
peripheral:didUpdateValueForDescriptor:error:
peripheral:didWriteValueForDescriptor:error:
peripheralIsReadyToSendWriteWithoutResponse:
peripheral:didOpenL2CAPChannel:error:
initWithWPLinkManager:withIdentifier:
triggerBTCorruptionRecovery
setHasSpaceAvailable:
didReceiveData:
linkID
_linkID
_peerID
_wpLinkManager
_incomingPacketBuffer
_hasSpaceAvailable
_shouldSendHasSpaceAvailable
authenticationDataSig
setAuthenticationDataSig:
authenticationDataAuthToken
setAuthenticationDataAuthToken:
authenticationDataUserID
setAuthenticationDataUserID:
responseMessage
setResponseMessage:
responseOrigin
setResponseOrigin:
_authenticationDataSig
_authenticationDataAuthToken
_authenticationDataUserID
_responseMessage
_responseOrigin
addDelegate:
initWithRapportClient:
removeDelegate:
initWithInput:initialValue:
currentItem
currentResult
initWithResponseCode:deviceID:
continueWithResult:
sendMessage:toDeviceIdentifier:completionBlock:
setReducerBlock:
reduceWithCompletion:
deliveryController:didReceiveMessage:topic:command:deviceID:messageID:
rapportClient:didDiscoverDevice:
rapportClient:didLoseDevice:
rapportClient:didReceiveMessage:fromID:
sendMessage:messageID:topic:command:destinationIDs:completionBlock:
_nextMessageID
setRapportClient:
_discoveredDeviceIDsLock
_rapportClient
bonjourDeliveryController
encryptedData
setEncryptedData:
setTargetPeerID:
setTargetToken:
setTargetSessionToken:
_encryptedData
_targetToken
_targetPeerID
_targetSessionToken
_isSupportIPsecLinkFlagSet
_isTinkerFlagSet
initWithBytes:length:encoding:
initWithBytes:length:loggingPrefixString:
productName
setProductName:
productVersion
setProductVersion:
setProductBuildVersion:
model
setModel:
minCompatibilityVersion
setMinCompatibilityVersion:
maxCompatibilityVersion
setMaxCompatibilityVersion:
_productName
_productVersion
_productBuildVersion
_model
_minCompatibilityVersion
_maxCompatibilityVersion
_ignoreIncomingPushes
_updatePushState
_acceptIncomingPushes
setRegistered:
handler:reregisterUserID:style:service:
serviceWithName:
errorCode
serverErrorDetail
promptMessage
radarTitle
radarDescription
radarComponentName
radarComponentVersion
radarComponentId
radarClassification
radarReproducibility
radarKeywords
promptTitle
_accountsWithService:
_isAccountRelevantForRegistrationPush:
_handleAction:forAccounts:
_handleReIdentifyActionForAccounts:
_handleReProvisionActionForAccounts:
_handleReRegisterActionForAccounts:
_handleValidateCredentialsActionForAccounts:
_handleForceRepairRegistrationActionForAccounts:
voidPassword
voidAuthenticationTokenAllowingGracePeriod
_removeAuthenticationCredentialsIncludingAuthToken:
isTemporary
forceRemoveUser:silently:
reregister
validateCredentialsWithDeliveryCompletionBlock:
handler:pushTokenChanged:
handler:reloadBag:
handler:profileHandlesUpdated:status:
handler:profile:deviceUpdated:service:
handler:flushCacheForURIs:
handler:requestedSysdiagnoseWithTapToRadarPushPayload:
handler:requestedPromptThroughPushWithTitle:message:defaultButton:defaultUrl:alternateButton:alternateUrl:
startTrackingRegisteredAccountID:
stopTrackingRegisteredAccountID:
fakeIncomingPushForUserID:style:service:
_registeredAccountIDs
_registeredForPushes
_setKeychainData:withServiceName:withAccountKey:withIDSRegistrationAccesssGroup:error:
accountsWithType:
setIsUserDisabled:
ids_secureUnarchiveObjectOfClass:withData:
updateRegistrationType:toState:error:
deviceKey
cypher
conversationGroup
_groupWithDeviceIdentity:parent:groupInfo:error:
signingIdentity
publicDataRepresentationWithSponsor:error:
dataWithData:
signData:error:
publicKeyData
groupServer
responseEntries
responseEngramID
initWithDataRepresentation:
initWithStableGroupID:generation:
_groupFromServerResponse:context:groupID:error:resultCode:resultDictionary:allEntries:completion:
responseVersion
conversationGroupWithUpdatedGroupID:error:
participants
initWithConversationGroup:deviceIdentity:participants:
initWithGroupInfo:groupID:cypher:
groupCrypto
publishGroupForKey:data:signature:forwardingSig:ENID:version:completion:
initWithStableGroupID:groupServerEntry:
modernIdentity
conversationSponsorPairFromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:fullDeviceIdentity:error:
sponsorAlias
participantsByAlias:
accountPublicKey
conversationKey
conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:sponsor:error:
groupMembers
applicationData
initWithAccountIdentity:paricipants:sharedApplicationData:
_participantsForDestinations:completion:
queryGroupServerForENID:withCompletion:
accountKey
setData:
setPublicKeyData:
publicDataRepresentationWithError:
entryFromPublicDataRepresentation:error:
isParentOfGroup:
_sponsorAccount
endpointsForURIs:service:fromURI:
participantsFromEndpoints:
devices
devicePublicKey
_sponsorAlias
sharedApplicationData
conversationGroupWithParent:members:sponsorAlias:sponsor:applicationData:error:
groupContext:upsertGroupWithInfo:previousGroup:completion:
groupContext:fetchGroupWithID:completion:
publicDataRepresentationForGroup:inContext:completion:
groupFromPublicDataRepresentation:inContext:completion:
participantsForCypher:completion:
validateCachedGroup:isParentOfGroup:completion:
setGroupServer:
_groupServer
_publicKeyData
_groupID
_forwardingTicket
groupContext
initWithDeviceData:deviceMetadata:
deviceData
deviceMetadata
isEqualToCloudKitKeyTransparencyDeviceRecord:
recordWithDeviceData:deviceMetadata:
_deviceData
_deviceMetadata
containerWithIdentifier:
initWithContainer:serverBag:queue:
container
privateCloudDatabase
initWithZoneName:ownerName:
base64EncodedStringWithOptions:
_recordNameForPushToken:
_zoneID
initWithRecordName:zoneID:
encryptedValuesByKey
_recordType
_recordIDForPushToken:
initWithRecordType:recordID:
_copyDeviceRecord:toCloudKitRecordRef:
cachedRecordZone
initWithRecordZoneIDs:
configuration
setDiscretionaryNetworkBehavior:
setTimeoutIntervalForRequest:
setCachedRecordZone:
initWithZoneID:
initWithRecordZonesToSave:recordZoneIDsToDelete:
setModifyRecordZonesCompletionBlock:
database
addOperation:
setFetchRecordZonesCompletionBlock:
_clientErrorWithCode:debugDescription:underlyingError:
_no_timeout_verifyEncryptionPrerequisitesWithCompletion:
serverBag
deviceToDeviceEncryptionAvailability
supportsDeviceToDeviceEncryption
accountInfoWithCompletionHandler:
_no_timeout_upsertKeyTransparencyDeviceRecord:forPushToken:completion:
lastSuccessfulUpsertDeviceRecord
_cloudKitRecordForPushToken:deviceRecord:
initWithRecordsToSave:recordIDsToDelete:
setSavePolicy:
setLastSuccessfulUpsertDeviceRecord:
setModifyRecordsCompletionBlock:
_createZoneIfNeededUsingTimeIntervalForRequest:isNonDiscretionary:completion:
_no_timeout_nukeKeyTransparencyDeviceRecordsWithCompletion:
_no_timeout_fetchKeyTransparencyDeviceRecordsWithCompletion:
currentDeviceRecordsPromise
_no_timeout_no_cache_fetchKeyTransparencyDeviceRecords
setCurrentDeviceRecordsPromise:
predicateWithValue:
initWithRecordType:predicate:
initWithQuery:
setZoneID:
setRecordFetchedBlock:
_deviceRecordForCloudKitRecord:
setQueryCompletionBlock:
fetchAccountEligibilityForDeviceToDeviceEncryptionWithCompletion:
upsertKeyTransparencyDeviceRecord:forPushToken:completion:
deleteKeyTransparencyDeviceRecordsForPushToken:completion:
nukeKeyTransparencyDeviceRecordsWithCompletion:
fetchKeyTransparencyDeviceRecordsWithCompletion:
_container
_serverBag
_cachedRecordZone
_lastSuccessfulUpsertDeviceRecord
_currentDeviceRecordsPromise
KeyTransparency
_propertyDictionariesFromPairedDevices:
persistedProperties
_migrationTypeForKeychainDictionary:
_migrateFromSinglePairedDeviceToMultipleWithKeychainDictionary:
initWithProperties:
initWithPairedDevice:isActive:
keychainDictionaryWithPairedDevices:
isMigrationRequiredForKeychainDictionary:
migrateKeychainDictionary:
systemIsShuttingDown
_performSetup
pushHandlerForAPSDelegatePort
setShouldWaitToSetTopics:
daemonCapabilities
_setExceptionHandlingDisabled:
defaultBroadcaster
initWithAccountController:peerIDManager:negativeRegistrationUpdateCache:registrationKeyManager:
HTTPMessageDeliveryClass
setUserAgent:
setReceivesMemoryWarnings:
setUsesPowerNotifications:
setWatchesSystemLockState:
uTunController
schedulePeriodicKeyTransparencyVerificationActivity
_cleanupIncomingFilesDirectory
_resetPreferences
uTunDeliveryController
rapportDeliveryController
registrationPushManager
centralRegListener
loadStoredAccounts
deviceHeartbeatCenter
encryptionController
currentDevice
_registerForCheckpointAndVacuumDB
registerForRegistrationAccountStatusMetric
idStatusQueryController
IDQueryCompletedWithFromURI:idStatusUpdates:service:success:error:
addCompletionBlock:forUniqueIdentifier:
addClientDataUpdateBlock:forToken:
daemonMIGInterface
acceptIncomingGrantRequests
daemonXPCInterface
daemonMIGQueryInterface
clearStateOnLaunch
_clearIDSState
messageStoreMigrator
serverStorageStateMachine
reissuePersistedRequests
_startPushHandlingLocked
activityStateMonitor
_postAliveNotification
negativeRegistrationUpdateCache
cleanupExpiredItems
copyMultipleForCurrentKeys:appID:
resetPreferencesForAllServices
defaultManager
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
incomingFilePath
moveItemAtPath:toPath:error:
removeItemAtPath:error:
_terminate
removeCompletionBlockForUniqueIdentifier:
_processOutgoingNonUrgentInternetMessages
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:
denyIncomingGrantRequests
timing
allPairedDevicesWithType:
localIdentities
iCloudIdentities
clientAtIndex:isEntitledToAccessService:forEntitlement:shouldWarn:
accountSetupInfo
isEnabledAccount:
dependentRegistrations
wantsTinkerDevices
removeListenerObject:
_resetQueuedBroadcastsForServices:priority:
intersectSet:
_processQueuedBroadcastsForServices:priority:forceRetry:
_dropQueuedBroadcastsForServices:priority:
_cleanupListenerWithPid:
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:
_removeAccount:
_removeAndDeregisterAccount:
updateAccount:withAccountInfo:
enableAccount:
disableAccount:
authTokenChanged:forAccount:
passwordChanged:forAccount:
authenticationChangedForAccount:
authenticateAccount:
passwordUpdatedForAccount:
updateAuthorizationCredentials:token:forAccount:
validateProfileForAccount:
addAliases:toAccount:
removeAliases:fromAccount:
validateAliases:forAccount:
unvalidateAliases:forAccount:
activateAlias:onAccount:
deactivateAlias:onAccount:
registerAccount:
unregisterAccount:
forceRemoveAccount:
_reregisterAndReidentify:account:
deactivateAndPurgeIdentifyForAccount:
hardDeregister
triggerFinalDeregister
iCloudSignInHackWithUserName:password:
iCloudSignOutHack
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iCloudUpdateForUserName:accountInfo:
iCloudModifyForUserName:
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
updateUserWithOldUserName:newUserName:
kickGetDependentForAccount:
reRegisterWithUserID:action:service:
getRegisteredIdentities
setPassword:forUsername:onService:
authenticatePhoneWithRequestUUID:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:
requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:
setPhoneUserSubscriptionSource:withRequestUUID:
fetchPhoneUserSubscriptionSourceWithRequestUUID:
startLocalSetup
stopLocalSetup
localSetupUnpair
localSetupUnpairStart
localSetupCompleted
connectPairedDevice:
deletePairedDevice:
getDeliveryStats
initialLocalSyncStartedForServices:
initialLocalSyncCompletedForServices:
setAllowedTrafficClasses:
dropAllMessagesWithoutAnyAllowedClassifier
reunionSyncStartedForServices:requestID:
reunionSyncCompletedForServices:requestID:
clearIDSState
updateSubServices:forService:deviceUniqueID:
setPairedDeviceInfo:
incomingAccountSyncMessage:
sendOpportunisticData:onService:usingAccountWithUniqueID:withIdentifier:options:
cancelOpportunisticDataOnService:withIdentifier:
sendCertifiedDeliveryReceipt:serviceName:
sendMessageWithSendParameters:
cancelItemWithIdentifier:service:
getProgressUpdateForIdentifier:service:
sendPersistedFile:userInfo:toDestinations:usingAccountWithUniqueID:identifier:
sendServerMessage:command:usingAccountWithUniqueID:
setPreferInfraWiFi:service:
setLinkPreferences:service:
startOTRTest:priority:
testCloudQRConnection:
failedDecryptingMessage:reason:forGroupID:onService:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:
setListenerServices:commands:capabilities:
registerForNotificationsOnServices:
xpcObject:objectContext:
openSocketWithOptions:
setNSUUID:onDeviceWithUniqueID:forService:
setupNewSessionWithConfiguration:
cleanupSession:
cleanupSessionWithInstanceID:
sendInvitation:withOptions:
sendInvitation:withData:declineOnError:
cancelInvitation:
cancelInvitation:withData:
cancelInvitation:withRemoteEndedReasonOverride:
acceptInvitation:
acceptInvitation:withData:
declineInvitation:
declineInvitation:withData:
reconnectSessionWithUniqueID:
endSession:
endSession:withData:
sendSessionMessage:toDestinations:forSessionWithUniqueID:
setAudioEnabled:forSessionWithUniqueID:
setMuted:forSessionWithUniqueID:
setPreferences:forSessionWithUniqueID:
setInviteTimetout:forSessionWithUniqueID:
acknowledgeSessionID:clientID:
sendAllocationRequest:options:
updateMembers:forGroup:sessionID:withContext:triggeredLocally:
updateParticipantData:forGroup:sessionID:withContext:
joinGroupSession:withOptions:
leaveGroupSession:participantInfo:
requestActiveParticipantsForGroupSession:
setupRealtimeEncryptionController:forAccountWithID:
sendRealTimeMediaPrekey:toGroup:
requestPublicKeysForRealTimeEncryption:forAccountWithID:
sendRealTimeEncryptionMasterKeyMaterial:toGroup:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:
resetRealTimeEncryptionKeys:forGroup:
continuityClientInstanceCreated
continuityStartAdvertisingOfType:withData:withOptions:
continuityStopAdvertisingOfType:
continuityStartScanningForType:withData:mask:
continuityStartScanningForType:withData:mask:peers:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:
continuityStopScanningForType:
continuityConnectToPeer:
continuityDisconnectFromPeer:
continuityStartTrackingPeer:forType:
continuityStopTrackingPeer:forType:
reportiMessageSpam:toURI:
reportiMessageUnknownSender:messageID:isBlackholed:messageServerTimestamp:toURI:
reportiMessageSpamCheckUnknown:count:requestID:
homeKitGetServiceUserIDs
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:
appleCareSignInUserName:DSID:authToken:requestID:
appleCareSignOutUserWithRequestID:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:
registrationControlGetRegistrationStateForRegistrationType:requestID:
initWithTarget:connection:protocol:forceSecureCoding:
connectionComplete:withResponse:
setupCompleteWithInfo:
daemonConnected
daemonDisconnected
opportunisticDataReceived:withIdentifier:fromID:context:
messageReceived:withGUID:withPayload:forTopic:toIdentifier:fromID:context:
dataReceived:withGUID:forTopic:toIdentifier:fromID:context:
accessoryDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
accessoryReportMessageReceived:accessoryID:controllerID:withGUID:forTopic:toIdentifier:fromID:context:
messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:
messageIdentifier:alternateCallbackID:forAccount:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
messageIdentifier:forTopic:toIdentifier:fromIdentifier:hasBeenDeliveredWithContext:
protobufReceived:withGUID:forTopic:toIdentifier:fromID:context:
pendingIncomingMessageWithGUID:forTopic:toIdentifier:fromID:context:
OTRTestCallback:time:error:
groupShareReceived:withGUID:forTopic:toIdentifier:fromID:context:
engramDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
checkTransportLogWithReason:
accountAdded:
accountRemoved:
accountUpdated:
accountsChanged:forTopic:
accountEnabled:onService:
accountDisabled:onService:
setupCompleteForAccount:transactionID:setupError:
account:accountInfoChanged:
account:registrationStatusInfoChanged:
account:aliasesChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
registrationFailedForAccount:needsDeletion:
refreshRegistrationForAccount:
updateDeviceIdentity:error:
account:dependentDevicesUpdated:
account:dependentDevicesUpdatedUponReconnect:
account:localDeviceAdded:
account:localDeviceRemoved:
service:tinkerDeviceAdded:
service:tinkerDeviceRemoved:
service:tinkerDeviceUpdated:
service:linkedDevicesUpdated:
didAuthenticatePhoneWithAuthenticationCertificateData:requestUUID:error:
didGeneratePhoneAuthenticationSignature:nonce:certificates:labelIDs:inputData:requestUUID:error:
didRequestCarrierTokenString:requestUUID:error:
didSetPhoneUserSubscriptionSource:requestUUID:error:
didFetchPhoneUserSubscriptionSource:requestUUID:error:
didFlushCacheForService:remoteURI:fromURI:guid:
sessionInvitationReceivedWithPayload:forTopic:sessionID:toIdentifier:fromID:transportType:
sessionAcceptReceived:fromID:withData:
sessionDeclineReceived:fromID:withData:
sessionCancelReceived:fromID:withData:
session:invitationSentToTokens:shouldBreakBeforeMake:
sessionDidJoinGroup:participantsInfo:error:
sessionDidJoinGroup:participantInfo:error:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
openedSocket:forHandlerID:error:
deliveryStats:
device:nsuuidChanged:
continuityDidUpdateStateToState:
continuityDidLosePeer:
continuityDidLosePeer:forType:
continuityDidStartTrackingPeer:error:
continuityDidStartTrackingPeer:forType:error:
continuityDidStopTrackingPeer:
continuityDidStopTrackingPeer:forType:
continuityDidStartAdvertisingOfType:
continuityDidStopAdvertisingOfType:
continuityDidStopAdvertisingOfType:withError:
continuityDidFailToStartAdvertisingOfType:withError:
continuityDidStartScanningForType:
continuityDidStopScanningForType:
continuityDidFailToStartScanningForType:withError:
continuityDidDiscoverType:withData:fromPeer:
continuityDidDiscoverPeerWithData:fromPeer:
continuityDidConnectToPeer:withError:
continuityDidDisconnectFromPeer:withError:
refreshUserAccessTokens:error:
deviceIdentifierDidChange:
didSwitchActivePairedDevice:forService:wasHandled:
localPairingResponseForRequestID:withError:
localPairingResponseForRequestID:withError:pairedDevices:
registrationControlResponseForRequestID:withError:
registrationControlStatusResponseForRequestID:requestID:withError:
iMessageReportSpamCheckUnknownResponseForRequestID:status:abusive:delay:withError:
initWithConnection:protocol:alreadyConfigured:forceSecureCoding:
setPid:
isSubsetOfSet:
unionSet:
setProcessName:
healthDebug
indexOfObjectIdenticalTo:
updateTopics
_updatePushCommandsLocked
_newSetupInfoWithContext:
refreshBundleIDs
localObjectDiedNotification:
remoteObjectDiedNotification:
_resetBroadcastQueuesForServices:
_flushBroadcastQueuesForServices:existingServices:
validateListenerForLocalObject:andPerformBlock:
validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:
clientInstancesRemoved
appleCare
kickiCloudRepair
cleanupSessionsForClient:
cleanupSocketsForClient:
defaultPeerSetPreferInfraWiFi:services:
flushProxy:
_removeListener:
_removeListenerObject:
_removeLocalListenerObject:
indexOfObject:
_processNameToServiceName:
removeLocalListenerObject:
launchDarwinNotification
launchMachServiceNotification
_pushTopics
_commands
addListener:topics:commands:queue:
pushToWakeDisabled
configureAsMacNotificationCenterObserver:withPushToWakeTopics:
setTopics:forListener:
_localPushTopics
setTopics:
enablePushHandler:
initWithObjects:
setCommands:forListener:
broadcastProxyForTargets:messageContext:protocol:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:
_lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:
hasAnyEntitlements
hasService:forEntitlement:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:
broadcasterForTopic:entitlement:messageContext:
broadcasterForTopic:ignoreServiceListener:messageContext:
accountsDebugging
healthDebugging
broadcastAttemptQueueFromPriority:
enqueueIncomingMessageBroadcast:broadcastData:forTopic:entitlement:command:capabilities:messageContext:
_shouldLaunchClientForCapabilities:
_lockedRemoteObjectsWithNotificationService:entitlement:command:capabilities:
_launchServiceOnDemand:
releaseBroadcastAttemptQueue:
_locked_printBroadcastAttemptMapForPriority:service:
logAccessWarningForAccount:withService:entitlement:clientEntitlements:logMessage:
allServicesStrings
initWithEntitlements:
_setupListenerConnection:listenerID:pid:setupInfo:entitlements:setupCompletionBlock:
daemon_oversized
hasAnyEntitlementForService:
replaceObjectAtIndex:withObject:
accountWithIdentifier:localObject:requiredEntitlement:
awdMetricsForConnectionUUID:
setServiceName:forConnectionUUID:
setClientInitTime:forConnectionUUID:
setDaemonOpenSocketTime:forConnectionUUID:
initWithService:isToDefaultPairedDevice:openError:socketError:
defaultLogger
socketOpenedForService:isToDefaultPairedDevice:openError:socketError:
setDaemonOpenSocketCompletionTime:forConnectionUUID:
setClientOpenSocketCompletionTime:forConnectionUUID:
setSuccess:forConnectionUUID:
reportAndRemoveForConnectionUUID:
initWithService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
socketClosedForService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
closeSocketWithOptions:queue:completionHandler:
queuedIncomingMessageDictionary
dictionaryWithCapacity:
allTinkerServices
iCloudIdentitiesFromIdentities:
localIdentitiesFromIdentities:
_notifyTinkerServicesOfPairedDevice:withBlock:
entitlementDictionary:isEntitledToAccessService:forEntitlement:forAccount:shouldWarn:
handler:didReceiveMessage:forTopic:fromID:messageContext:
handler:didReceiveMessage:forTopic:fromID:checkpointTrace:messageContext:
handler:didReceiveMessage:forUnknownTopic:messageContext:
handler:receivedOfflineMessagePendingForTopic:messageContext:
handler:receivedNoStorageResponseForTopic:messageContext:
handler:isConnectedChanged:
deliveryController:protobufReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:dataReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:messageReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:receivedAppLevelAckWithTopic:deviceID:btUUID:messageID:peerResponseIdentifier:priority:connectionType:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:ofTypes:
deliveryControllerHasSpaceforUrgentMessages:dataProtectionClass:ofTypes:
deliveryController:foundNearbyIPsecCapableDeviceWithUniqueID:
deliveryControllerQueuedIncomingMessageDictionary:
duetInterface:resourceAvailabilityChangedForIdentifiers:
didAddPairedDevice:
didRemovePairedDevice:
didUpdatePairedDevice:
didUpdateProtocolForPairedDevice:
registrationHashProcessor:didFlushCacheForService:remoteURI:localURI:guid:
dropQueuedBroadcastsForServices:
validateListenerForLocalObject:
listenerWithName:
_stopPushHandling
broadcasterForTarget:messageContext:
broadcasterForEntitlement:messageContext:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:
registrationBroadcasterForTopic:messageContext:
broadcasterForTopic:messageContext:
launchOnDemandServicesForQueuedBroadcastAttempts
dequeueBroadcastWithID:forMessageUUID:service:priority:
logAccessWarningForClientAtIndex:withService:entitlement:logMessage:
daemonInterface:shouldGrantAccessForPID:auditToken:portName:listenerConnection:setupInfo:setupResponse:
_pidSuspended:
setListenerServices:commands:capabilities:messageContext:
registerForNotificationsOnServices:messageContext:
xpcObject:objectContext:messageContext:
openSocketWithOptions:messageContext:
closeSocketWithOptions:messageContext:
getDeliveryStatsWithMessageContext:
queryUpdateNotifier
_listenerLock
_listeners
_listenerLocalObjects
_listenerIDs
_listenerServices
_listenerNotificationServices
_listenerCommands
_listenerCapabilities
_listenerEntitlements
_listenerBundleIDs
_queuedBroadcastAttempts
_urgentQueuedBroadcastAttempts
_defaultQueuedBroadcastAttempts
_syncQueuedBroadcastAttempts
_listenerCachedServices
_listenerCachedCommands
_notifier
_birthDate
_storageTimer
_messagesReceivedDuringStorage
_forcedGDRTokens
_nonUrgentInternetSendTimer
_nonUrgentInternetLastAttempt
_incomingMessageMultiQueue
_pendingOutgoingAttachments
_pendingIncomingAttachments
_localIncomingGUIDsLock
_localIncomingGUIDs
_remoteIncomingGUIDs
_incomingLocalPowerAssertionLock
_incomingLocalPowerAssertionClients
_incomingLocalPowerAssertion
_internalQueue
_isHardReset
_cloudPairingBeforeFirstUnlock
_hasProcessedMessagesAfterFirstUnlock
_deviceIsAsleep
_homeKitMessageDelivery
_signInResponder
_queryUpdateNotifier
_replayStateCommitter
_opportunisticDeliveryController
_registrationConductor
_transparentEndpointViewer
XPCAdapter
createServiceConnectionWithServiceName:invalidationHandler:terminationHandler:peerEventHandler:peerQueue:
resume
__setupServer
_server
_notifyToken
_shuttingDown
_portDidBecomeInvalid
invocationWithMethodSignature:
retainArguments
setSelector:
setArgument:atIndex:
_enqueueInvocation:
protocolChecker
protocol
_enqueueInvocationWithPriority:priority:
signatureWithObjCTypes:
_serverBagBoolForKey:withDefaultValue:
initWithServerBag:
shouldQueryOnEveryQRAllocationForServiceIdentifier:
wantsDeliveryStatus
anonymizedSenderID
lengthOfBytesUsingEncoding:
setAckBlock:
setWantsDeliveryStatus:
setAnonymizedSenderID:
setPayloadMetadata:
setDataLength:
initWithTargetToken:sessionToken:targetPeerID:encryptedData:wantsDeliveryStatus:wantsCertifiedDelivery:ackBlock:completionBlock:
_wantsCertifiedDelivery
_anonymizedSenderID
_wantsDeliveryStatus
_completionBlock
_ackBlock
_command
didCreateGroup:
didCacheGroup:
didUpdateGroup:withNewGroup:
didReceiveDecryptionFailureForGroup:
didReceiveRegistrationIdentityUpdate
groupContext:didCreateGroup:
groupContext:didCacheGroup:
groupContext:didUpdateGroup:withNewGroup:
groupContext:didReceiveDecryptionFailureForGroup:
groupContextDidReceiveRegistrationIdentityUpdate:
initWithDelegate:
initWithSuccess:
initWithError:
completed
null
fullfillWithValue:
setObject:atIndexedSubscript:
registerCompletionBlock:
all:
_result
_completionBlocks
_validatePreferences:forService:
preferencesForService:
accumulativePreferencesForAllServices
_preferencesLock
_servicesWithPreferences
addTrustedServices:
trustedServicesCount
clearTrustedServices
trustedServicesAtIndex:
trustedServicesType
hasPushToken
trustedServices
setTrustedServices:
_trustedServices
initWithName:qosClass:specific:
backingQueue
setBackingQueue:
specific
setSpecific:
_backingQueue
_specific
_queueForPriority:
asyncQueueForPriority:
syncQueueForPriority:
syncQueue
setSyncQueue:
defaultQueue
setDefaultQueue:
urgentQueue
setUrgentQueue:
_syncQueue
_defaultQueue
_urgentQueue
initWithRegistrationKeyManager:messageHashStore:usePairingKey:
_legacyIdentity
protectedHashOfMessageData:error:
containsMessageHash:
updateCreationDateForHash:
addMessageHash:
allowMessageData:
usePairingKey
setUsePairingKey:
messageHashStore
setMessageHashStore:
_usePairingKey
_messageHashStore
setToken:
activitySubActivity
setActivitySubActivity:
setActivityStatus:
setActivityTimestamp:
_activityStatus
_token
_activitySubActivity
_activityTimestamp
_configurePushHandler
shouldListen
topicsToListenOn
persistentEnrollmentHandler
setPersistentEnrollmentHandler:
listening
setListening:
_shouldListen
_listening
_topicsToListenOn
_persistentEnrollmentHandler
endpointsToEncryptedData
setUsedMMCS:
capabilities
valueForCapability:
forceAttachmentMessage
shouldSendAsAttachment:maxSize:
uploadData:toEndpoint:onTopic:forGUID:encryptionType:
setAggregatableMessages:
initWithMMCSUploader:
_mmcsUploader
isEngramEnabled
initWithIdentifier:queue:
ckContainer
keyElectionStore
engram
setSeal:
accountIdentityElector
seal
setValue:forKey:
deviceIdentityWithFullAdminServiceIdentity:error:
_keychainIdentifier
publicServiceIdentityAdminWithError:
deviceIdentityFromDataRepresentation:publicAdminServiceIdentity:error:
existingAccountIdentityClusterWithCompletion:
listeners
engramKeyStoreDidUpdateIdentities:
accountIdentityClusterForRegistrationWithCompletion:
rollFullDeviceIdentityWithCluster:error:
existingFullDeviceIdentityWithCompletion:
rollAccountIdentityWithCompletion:
notifyListenersEngramKeyStoreDidUpdateIdentities
setListeners:
_ckContainer
_seal
_deviceKey
checkConnectivityState:
timerWithTimeInterval:target:selector:userInfo:repeats:
mainRunLoop
addTimer:forMode:
sendMonitorMessage
isTerminusConnected
setTerminusConnected:
isTerminusNearby
setTerminusNearby:
isTerminusRegistered
setTerminusRegistered:
setPairedDeviceCBUUIDString:
setSuccess:
timeConnected
setTimeConnected:
timeDisconnected
setTimeDisconnected:
lastConnection
lastDisconnection
setLastConnection:
setLastDisconnection:
deliveryController:uniqueID:isNearby:
deliveryController:uniqueID:isConnected:
deliveryController:uniqueID:isCloudConnected:
monitorTimer
setMonitorTimer:
deviceMonitor
setDeviceMonitor:
cbuuidString
setCbuuidString:
pairedDeviceCBUUIDString
setIsConnected:
_monitorTimer
_deviceMonitor
_cbuuidString
_pairedDeviceCBUUIDString
_timeConnected
_timeDisconnected
_lastConnection
_lastDisconnection
ConnectivityMonitor
_isEntitledForPreferInfraWiFiForServices:error:
_defaultPeerSetPreferInfraWiFi:services:
duetInterface
clientProcessName
utunDeliveryController
reunionSyncStartedForServices:withCompletion:
reunionSyncCompletedForServices:withCompletion:
initWithConnection:clientProcessName:UTunDeliveryController:duetInterface:
setClientProcessName:
setUtunDeliveryController:
setDuetInterface:
_clientProcessName
_utunDeliveryController
_duetInterface
_cancelConnectionAndResetDataConnections:shouldObliterate:encryptionFailure:shouldTriggerCorruptionRecovery:
isDefaultPairedDeviceStartingToEncrypt
replaceBytesInRange:withBytes:length:
URIWithPrefixedURI:
publicKeyDecryptData:fromURI:identity:toURI:pushToken:service:priority:isRetry:replayKey:publicKeyType:completionBlock:avoidMainQueue:
publicKeyDecryptData:toDeviceID:publicKeyType:priority:error:
_callHandlerWithMessage:resetDataConnections:shouldObliterate:decryptionFailed:shouldTriggerCorruptionRecovery:
_checkSendNewMessage
_cleanupConnection
readFromConnection
writeToConnection
insertObject:atIndex:
cancelConnection
_clearChannel
publicKeyEncryptData:fromURI:identity:toURI:pushToken:service:priority:completionBlock:forceLegacy:avoidMainQueue:
publicKeyEncryptData:toDeviceID:publicKeyType:priority:error:
appendData:
_destroyFairplayDeviceSession
_destroyFairplayHostSession
processNegotiationData:deviceUniqueID:token:negotiationCount:
initWithDeviceUniqueID:cbuuid:receiveHandler:
simulateDecryptionFailure
encryptControlChannelForStoredIdentities
useConnection:withFirstMessage:
connected
sendPriorityMessage:
_utunControlMessageFairplayDeviceInfo
_utunControlMessageFairplayHostSessionInfo:deviceType:protocolVersion:
_utunControlMessageFairplayDeviceSessionInfo:grappaDeviceSessionInfoSize:
processFairplayHostSessionInfo:
processFairplayDeviceInfo:
processFairplayDeviceSessionInfo:
_handleFairplayAuthenticationFailure
sendOTRNegotiationMessage:negotiationCount:negotiationData:
processOTRNegotiationMessage:
sendSuspendOTRNegotiationMessage:
processSuspendOTRNegotiationMessage:
suspendOTRNegotiation:
resumeOTRNegotiation
isReadyForEncrypting
setIsReadyForEncrypting:
isDefaultPairedDevicePairedLocally
setIsDefaultPairedDevicePairedLocally:
isDefaultPairedDevicePairedRemotely
setIsDefaultPairedDevicePairedRemotely:
setDisableEncryption:
remoteDeviceEncryptionInfo
setRemoteDeviceEncryptionInfo:
didReceiveReestablishmentRequest
setDidReceiveReestablishmentRequest:
reestablishmentRequestReceiveTime
setReestablishmentRequestReceiveTime:
checksumEnabled
setChecksumEnabled:
avoidMainQueueOverrideToNO
setAvoidMainQueueOverrideToNO:
identityPair
setIdentityPair:
connecting
setConnecting:
_receiveHandler
_receiveHandlerBeingCalled
_pendingDataReceive
_pendingDataSend
_outgoingMessages
_outgoingPriorityMessages
_sendingPriorityMessage
_sendSuspended
_newSocket
_fairplayAuthState
_grappaHostSessionID
_grappaDeviceSessionID
_isReadyForEncrypting
_isDefaultPairedDevicePairedLocally
_isDefaultPairedDevicePairedRemotely
_identityPair
_disableEncryption
_didReceiveReestablishmentRequest
_reestablishmentRequestReceiveTime
_dataReceivedWithoutMessageCount
_serviceConnection
_connectionQueue
_shouldCallbackOnCancel
_canceledConnection
_callbackResetDataConnections
_callbackShouldObliterate
_callbackEncryptionFailed
_callbackShouldTriggerCorruptionRecovery
_checksumEnabled
_avoidMainQueueOverrideToNO
_connecting
_remoteDeviceEncryptionInfo
localFullIdentity
remotePublicIdentity
_localFullIdentity
_remotePublicIdentity
addAuthUserID:certificate:privateKey:publicKey:
countryCode
setCountryCode:
networkCode
setNetworkCode:
responseCertificateExpiration
setResponseCertificateExpiration:
numberFromString:
addPhoneAuthenticationCertificate:withUserID:
_countryCode
_networkCode
_responseCertificateExpiration
setUsesNotificationCenter:
addUserNotification:listener:
componentsSeparatedByString:
registrationAuthKit
initWithObject:key:
ttlInSeconds
bumpEvictionDateToSecondsFromNow:
backingStore
_delegate_didCacheObject:forKey:
_startEvictionTimerIfNeeded
evictCachedObjectForKey:
multiQueue
_fetchCachedObjectForKey:completion:
addBlock:forKey:description:
_delegate_shouldEvictObject:forKey:
_delegate_DidEvictObject:forKey:
_stopEvictionTimerIfEmpty
_stopEvictionTimer
evictionTimer
setEvictionTimer:
_performEvictionSweep
_delegate_shouldTTLCacheEvictExpiredItems
evictionDate
cacheObject:forKey:
_delegate_willReturnCachedObject:forKey:completion:
ttlCache:didCacheObject:forKey:
ttlCache:willReturnCachedObject:forKey:completion:
ttlCache:shouldEvictObject:forKey:
ttlCache:didEvictObject:forKey:
shouldTTLCacheEvictExpiredItems:
initWithQueue:ttlInSeconds:
fetchCachedObjectForKey:completion:
setBackingStore:
setTtlInSeconds:
setMultiQueue:
_backingStore
_ttlInSeconds
_evictionTimer
_multiQueue
setEvictionDate:
setKey:
setObject:
_key
_object
_evictionDate
membershipURIs
masterKeyMaterials
initWithMasterKeyMaterials:membershipURIs:
_masterKeyMaterials
_membershipURIs
initWithIdentifier:initialMembershipURIs:automaticResetInterval:automaticResetBlock:queue:
slowCPUDevice
setCurrentLocalMasterKeyMaterial:
setMembershipURIs:
setMasterKeyMaterials:
setInFlightResetBlock:
filteredSetUsingPredicate:
_startAutomaticCacheResetTimerIfNeeded
__imRandomizeArray
subarrayWithRange:
_groupMasterKeyCollectionToBroadcastForDestinationURI:shouldIncludePeerKeys:
nextLocalMasterKeyMaterial
sampleMkMCollectionToBroadcast:
currentLocalMasterKeyMaterial
automaticResetInterval
inFlightResetBlock
automaticResetBlock
masterKeyIdentifiersReceivedByClient
setByAddingObject:
setMasterKeyIdentifiersReceivedByClient:
initWithIdentifier:initialMembershipURIs:automaticResetBlock:queue:
resetCacheWithNewMembershipURIs:
resetRemoteMasterKeyMaterialCacheAndCancelResetInterval
cleanUpMasterKeyMaterialUsingPredicate:
noteReceivedGroupMasterKeyMaterialCollection:
groupMasterKeyCollectionToBroadcastForDestinationURI:
localMasterKeyCollectionToBroadcastForDestinationURI:
cachedMasterKeyMaterialCollection
hasCachedMasterKeyIdentifier:
noteClientReceiptOfMasterKeyIdentifier:
hasClientReceivedMasterKeyIdentifier:
resetClientMasterKeyIdentifierReceipts
setNextLocalMasterKeyMaterial:
setAutomaticResetInterval:
numberOfBroadcastCacheMKM
setAutomaticResetBlock:
_numberOfBroadcastCacheMKM
_currentLocalMasterKeyMaterial
_nextLocalMasterKeyMaterial
_automaticResetInterval
_automaticResetBlock
_inFlightResetBlock
_masterKeyIdentifiersReceivedByClient
RealTimeEncryptionController
basePhoneNumber
setBasePhoneNumber:
wantsExtraTimeoutRetry
maxTimeoutRetries
_basePhoneNumber
_regionID
initWithPhoneUser:expirationDate:finishedRegistration:
setHasBeenProvisioned:
setFinishedRegistration:
setHasNotifiedSuccess:
phoneUser
realmPrefixedIdentifier
unprefixedIdentifier
storageIdentifier
phoneBookNumber
isEqualToTemporaryPhoneUser:
isEqualToUser:
isEqualToDate:
shouldReplace:
isIdenticalToUser:
initWithPhoneUser:
setPhoneUser:
_hasBeenProvisioned
_finishedRegistration
_hasNotifiedSuccess
_phoneUser
initWithService:fromURI:toURI:
isEqualToURI:
fromURI
toURI
peerIDKeyWithService:fromURI:toURI:
hasMatchingURIs
setHasMatchingURIs:
_hasMatchingURIs
_fromURI
_toURI
isInitializedForSigning
isInitializedForScoring
setHelloMessage:
initWithResultData:serverKey:error:
signData:
serverKey
resultData
UDID
serialNumber
IMEI
MEID
isUsingAbsintheV4
isUsingBAA
setStateFlags:
setUDID:
setSerialNumber:
setIMEI:
setMEID:
setScoringNonce:
setBAACert:
setIntermediateRootCert:
stateFlags
_shouldUseAbsinthe
isAbsintheV4Enabled
_isBAAOptionEnabledByServerBag
isBAACertDisabled
isDebugPiscoLoggingEnabled
isSigningSupported
isScoringSupported
_isAbsintheV3EnabledByServerBag
_BAAFetchTimeoutFromServerBag
_BAACertTTLInMinutesFromServerBag
headersBySigningData:error:
activateWithValidationData:serverKey:scoringNonce:
deviceScoreWithCompletion:
isUsingAbsintheV3
_shouldUseAbsintheV4
_shouldUseBAAOnly
_shouldUseBAACertOption
_shouldUseDebugPiscoLogging
_deviceAbsintheUDID
_deviceAbsintheSerialNumber
_deviceAbsintheIMEI
_deviceAbsintheMEID
helloMessage
scoringNonce
BAACert
intermediateRootCert
_helloMessage
_UDID
_serialNumber
_IMEI
_MEID
_scoringNonce
_stateFlags
_BAACert
_intermediateRootCert
_resultData
_serverKey
_error
initWithEncryptionType:usedLastResortCache:usedCachedData:
initWithEncryptionType:
usedLastResortCache
usedCachedData
_usedLastResortCache
_usedCachedData
defaultPairedDependentRegistration
addConnectivityDelegate:
_servicesRemoved:
_servicesChanged
sysdiagnose_oversized
copyPushIdentity
isServerAvailable
apsEnvironmentName
deviceRegionInfo
faceTimeAudioSupported
faceTimeMultiwaySupported
currentSIMsWithError:
_registerForAllRegistrationsSucceeded
loadDeviceProperties
initWithServiceController:registrationController:systemAccountAdapter:deviceSupport:
removeObserver:
removeConnectivityDelegate:
_storeAccounts
sendHardDeregisterCompletionBlock:
setIsBeingRemoved:
cleanupAccount
_disableAccountWithUniqueID:
delayedSaveSettings
_cleanUpAccountCredentialForRemovedAccount:
adHocAccounts
_inUseUsernames
_inUseProfileIDs
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
cleanUpAccountsBasedOnInUseUsernamesBlock:profileIDBlock:completionBlock:
_addAccount:
_setupAdHocAccountsForPrimaryAccount:
_removePrimaryAccount:
_disablePrimaryAccountWithUniqueID:userAction:
deactivateRegistration
forgetPeerTokensForService:
removeCachedEntriesForService:
shouldDisableAccount:
_enableAccountWithUniqueID:
activateRegistration
hasAliasURI:
refreshAdHocServiceNames
_setupLocalAccounts
_setupUsingRemoteInfo
isCurrentDevicePairedOrPairing
isTraditionalDevicePairedOrPairing
_setupForLocal
_setupAdHocAccounts
localAccountSetupCompleted
_cleanupLocalAccounts
adHocServicesForIdentifier:
adHocServiceNames
enabledOnlyOnStandaloneDevices
initAdHocAccountWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:
primaryAccount
primaryAccountUniqueID
isEqualToArray:
_migrateLegacyAccounts1
_migrateLegacyAccounts2
preferencesDomain
copyKeyListForAppID:
setMultiple:remove:appID:
synchronizeAppID:
_legacyAccountsOnService:
_persistAccounts:
_preferencesOnDomain:
_FTCopyOptionallyGzippedData
setValue:forKey:appID:
internalCleanup
hasForcedReRegistered
issueGetDependentRequestForAccount:
_refreshLocalAccounts
sub_services
_migrateLegacyAccounts
_loadAndEnableStoredAccounts
_loadAndEnableStoredLegacyAccounts
_cleanupLegacyAccounts
_cleanupLegacyLocalAccounts
_setupLinkedAccounts
_cleanUpAccountCredentialStore
_resumeGDRReAuthenticateIfNecessary
accountControllerDidFinishLoadingAccounts:
initWithDictionary:service:uniqueID:
addAliases:
copyValueForKey:appID:
_FTOptionallyDecompressData
_createAccountWithDictionary:service:uniqueID:
loadAliasUserIntentMetadataIfNeeded
_addAccountDuringInitialSetup:
shouldAutoRegisterAllHandles
_attachOrphanedPhoneAliases:toRecipientAccounts:withAccountsToEnable:
_cleanupAccount
legacyPreferencesDomain
_issueDependentCheck
gdrReAuthenticateIfNecessary
_updateHandles:
registrationListener
_updateDeviceProperties
_dictionaryForKey:
saveDevicePropertiesWithOldKeys:
deviceWithUniqueID:updatedUUID:
setDeviceUniqueIDToCBUUID:
setAppleIDWithDSID:inUse:forService:
accountWithServiceName:aliasURI:
enabledAccounts
accountOnService:withAliasURI:
accountOnService:withLoginID:
accountWithServiceName:myID:
accountUniqueIDsWithType:
primaryAccountForAdHocAccount:
threadSafeServiceWithAccountUniqueID:
_strippedAccountInfo:
_isAccountInfoRegistered:
__pairedDeviceStateUpdated
accountsLoaded
registeredAccountsOnService:
issueGetDependentAndGetHandlesRequest
hasiCloudAccount
cloudPairedIDForDeviceID:
pushTokenForDeviceID:
deviceNameForDeviceID:
publicKeyForDeviceID:
setNSUUID:onDeviceWithUniqueID:
propertiesForDeviceWithUniqueID:
isiCloudHSA2
authKitAccountUpdate:
deviceCertificateForService:uri:
_accountIDMap
_enabledAccounts
_deviceProperties
_accountIDMapLock
_accountsLoaded
_isLoading
_hasHardDeregistered
_authkitQueue
_deviceSupport
initWithDeviceUniqueID:cbuuid:
_stopEchoTimer
dictionaryWithObject:forKey:
setLocalPartyID:
_createSimpleConnectionData
copyCurrentNetworkInterfaces
wrapperWithSockAddr:
address
index
_sendConnectionCheckRequest
setRemotePartyID:
_updateLinkTransportAddress:localAddress:remoteAddress:
_sendNominateRequest
newSocketWithIPVersion:wantsAWDL:wantsWiFi:wantsCellular:
_startConnectionEcho:
_handleEchoTimer
setDestinationAddress:localIfIndex:isFixedDestination:fromAddress:
setTrafficClass:
_startEchoTimer
getAttribute:attribute:
stunResponseToBuffer:outputLength:transactionID:reqCount:echoTime:delay:keyData:remainingLength:
_forwardPacketBuffer:fromDeviceUniqueID:cbuuid:
read:inputLength:
type
verifyMessageIntegrityWithKey:inputBuffer:inputLength:
_processStunBindingRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunBindingResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunEchoRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunEchoResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunDataIndication:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:packetBuffer:fromDeviceUniqueID:cbuuid:
dataIndicationToBuffer:outputLength:data:dataLen:keyData:remainingLength:
_processStunPacket:fromDevice:arrivalTime:fromDeviceUniqueID:cbuuid:
link:hostAwakeDidChange:deviceUniqueID:cbuuid:
link:didConnectOverCloud:cbuuid:
link:didFailToConnectOverCloud:cbuuid:
link:didDisconnectOverCloud:cbuuid:
createConnectionData:dataReadyHandler:
processRemoteConnectionData:completionHandler:
startConnectionForDevice:isInitiator:remotePartyID:useStunMICheck:
remoteHostAwake
localPartyID
remotePartyID
_udpLink
_dataReadyHandler
_completionHandler
_remoteAddressArray
_sockAddrPairTable
_sourceInterfaceIndex
_sourceAddress
_destinationAddress
_connectionRequestStartTime
_nominateRequestStartTime
_isInvalidated
_notifyReachableDone
_useStunMICheck
_keyData
_localPartyID
_remotePartyID
_nominateBlocks
_echoTimer
_headerOverhead
userName
isEqualToAppleUser:
initWithUserName:DSID:
_userName
_submitRegistrationAccountStatusMetric:
_shouldSubmitRegistrationCompletedForServiceIdentifier:
queryAndSubmitStatusForAccounts
registrationCompletedForRegistrationType:serviceIdentifier:wasSuccessful:registrationError:
stopAdvertisingOfType:
stopScanningForType:
startAdvertisingOfType:withData:
startScanningForType:withData:peers:
startScanningForType:withData:mask:peers:
startScanningForType:withData:mask:peers:boostedScan:duplicates:
connectToPeer:
connectOnMainQueueToPeer:
disconnectFromPeer:
sendData:toPeer:
isScanningOrAdvertising
setAlwaysConnectedForCBUUID:
clientInstanceCreatedWithMessageContext:
startAdvertisingOfType:withData:withOptions:
startScanningForType:withData:mask:
startScanningForType:withData:mask:boostedScan:duplicates:
removeLink:
sendReset
_continuity
_advertisingTypes
_scanningTypes
_linkIDToLink
_linkIDsConnecting
_linkIDsDisconnecting
_linkIDsAlwaysConnected
_connectivityDelegates
dataToEncrypt
legacyPublicKeyEncryptData:toEndpoint:priority:error:
publicKeyEncryptData:toEndpoint:usedEncryptionType:priority:error:
shouldForwardErrorForEncryptionType:forceECC:
_shouldAutoBugCaptureForECError:
setEndpointsToEncryptedData:
initWithEncryptionController:
_encryptionController
_errorForMissingEntitlement:
authenticatePhoneUser
localPhoneAuthenticationCertificates
phoneAuthenticationCertificatePublicKey
phoneAuthenticationCertificatePrivateKey
productOSVersion
setCarrierNonce:
slot
SIMIdentifier
authenticationCertificateForUser:
responseCarrierToken
setSelectedPhoneNumberRegistrationSubscriptionNumber:
selectedPhoneNumberRegistrationSubscriptionWithError:
_subscriptionSourceNumberForContext:
slotID
authenticatePhoneWithRequestUUID:messageContext:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:messageContext:
requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:messageContext:
setPhoneUserSubscriptionSource:withRequestUUID:messageContext:
fetchPhoneUserSubscriptionSourceWithRequestUUID:messageContext:
initWithQueue:userStore:
setLogToRegistration:
accountCleanup
_appearsToBeDSID
_writeAccountDefaults:force:
markAsUnselectedAlias:withReason:
setActiveAliases:
_resetVariables
queryService
isDeviceRegistered
reIdentify
addCompletionBlock:forToken:
_setupAccount
_initWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:isAdHocAccount:
_broadcastAccountInfoChanged
removeCompletionBlockForToken:
_stopRegistrationAgent
removeTarget:
writeAccountDefaults:
setUserUniqueIdentifier:
validateAliases:
dependentRegistrationsIncludingTinker:
dependentRegistration:findDeviceUniqueID:btID:forURI:token:supportsLiveDelivery:
dependentRegistration:hasDependentRegistrationWithURI:token:
shouldAllowLiveMessageDelivery
sessionIDforPeer:
_fromIDFromDevice:withCBUUID:uniqueID:
_bestGuessURIFromCanicalizedID
_dependentRegistrationsForDefaultPairedDevice:includingTinker:
defaultPairedDependentRegistrationIncludingTinker:
superService
shouldFilterInactiveAliases
activeAliases
_dependentRegistrationsForDefaultPairedDevice:includingCurrentDevice:includingTinker:
allPairedUniqueIDs
allTraditionallyPairedUniqueIDs
primaryServiceName
pairedDevicePairingProtocolVersion
pairedDeviceMinCompatibilityVersion
pairedDeviceMaxCompatibilityVersion
pairedDevicePrivateData
pairedDevice
pairedDeviceForUniqueID:
registeredDeviceFromDependentRegistrationDictionary:
dependentRegistrationMatchingUUID:includingTinker:
accountAndAdHocAccounts
isNull
_broadcastAccountMessageBlock:
accountUpdate
isEqualToDictionary:
isEqualToValue:
isEqualToAttributedString:
_notifyListenersWithChanges:
candidateEmails
_removeAliases:withReason:
removeAliases:
arrayByApplyingSelector:
_notifyClientDelegatesWithBlock:
_notifyDelegatesAddedLocalDevice:
setLoginID:
setIsTemporary:
authenticationChanged
isUsableForSending
findDeviceUniqueID:btID:forURI:token:supportsLiveDelivery:
hasDependentRegistrationWithURI:token:
fromIDForCBUUID:deviceID:
superAccount
activateAlias:
deactivateAlias:
dependentRegistrationsIncludingCurrentDevice
lastGDRDate
wasDisabledAutomatically
setWasDisabledAutomatically:
pendingDependentCheck
setPendingDependentCheck:
isIssuingDependentCheck
isBeingRemoved
_accountInfo
_registrationInfo
_setupHandlers
_registrationListeners
_dateOfLastHandlesCheck
_localServices
_disabledAutomatically
_duringInit
_shouldRequeryHandles
_issuingDependentCheck
_issuingHandlesCheck
_pendingDependentCheck
_pendingHandlesCheck
_pendingReIdentify
_pendingReRegister
_isRegistrationActive
_pendingAccountInfoBroadcast
_isBeingRemoved
_isIssuingDependentCheck
initWithQueue:idsDaemon:serviceController:pairingManager:quickSwitchHelper:accountController:utunController:utunDeliveryController:
initWithPairingManager:
initWithMachServiceName:
_setQueue:
daemonClients
setInvalidationHandler:
initWithQueue:collaboratorProvider:takingOverAndResumingConnection:
pairingCollaborator
pairedDeviceManagerCollaborator
clientConnection
initWithQueue:connection:activityMonitorStateManager:
listener:shouldAcceptNewConnection:
pairingCollaboratorForXPCDaemon:
pairedDeviceManagerCollaboratorForXPCDaemon:
reunionSyncCollaboratorWithClientProcessName:forXPCDaemon:
opportunisticCollaboratorForXPCDaemon:
registrationCollaboratorForXPCDaemon:
activityMonitorCollaboratorForXPCDaemon:
internalTestingCollaboratorForXPCDaemon:
listener
setListener:
setDaemonClients:
setPairingCollaborator:
setPairedDeviceManagerCollaborator:
_listener
_daemonClients
_pairingCollaborator
_pairedDeviceManagerCollaborator
initWithUserStore:queue:lockdownManager:systemMonitor:CTAdapter:userConfiguration:registrationController:pairingManager:
initWithSystemAccountAdapter:userStore:migrationTracker:queue:
enableHomeNumber
initWithUserStore:ctAdapter:
setDataProvider:forRealm:
initWithUserStore:accountController:serviceController:migrationTracker:restrictions:queue:
preferredAccountChanged:
bagReloaded:
serviceRestrictionsChanged:
reloadUsers
accountRepair
deviceCertificationRepair
recertifyDeviceIfNeeded
kickMissedTemporaryAlerts
checkRestorationState
shouldEnableHomeNumber
registrationQueue
setRegistrationQueue:
restoreMonitor
setRestoreMonitor:
CTAdapter
setCTAdapter:
SIMPhoneUserSynchronizer
setSIMPhoneUserSynchronizer:
systemAccountUserSynchronizer
setSystemAccountUserSynchronizer:
temporaryPhoneUserSynchronizer
setTemporaryPhoneUserSynchronizer:
userAccountSynchronizer
setUserAccountSynchronizer:
heartbeatCenter
setHeartbeatCenter:
setAccountSync:
setAccountRepair:
setDeviceCertificationRepair:
SIMResponder
setSIMResponder:
_registrationQueue
_restoreMonitor
_CTAdapter
_SIMPhoneUserSynchronizer
_systemAccountUserSynchronizer
_temporaryPhoneUserSynchronizer
_userAccountSynchronizer
_heartbeatCenter
_accountSync
_accountRepair
_deviceCertificationRepair
_SIMResponder
kickRepair
updateAccountActivation
synchronize
verifyState
deviceRecertificationCompleted:
SIM:didUpdateRegistrationState:
carrierBundleInformationDidChange
SIMInformationDidChange
addTarget:actionBlock:
_setupRestoreTimer
preflightStackForIdentifier:
setPreflightStack:forIdentifier:
clearAllPreflightStacks
registrationReasonByUserID
SIMForIdentifier:
CTPNRForSIM:
initWithCTPNR:preflightStackStore:
setReason:
_noteRegistrationAttemptForIdentifier:withRegistrationInfo:
addPhoneNumberValidationRequestor:
__imSetFromArray
removePhoneNumberValidationRequestor:
_clearConsentDenialsForUniqueIdentifier:
_notifyFailureWithError:registration:identifier:
_cleanupUntrackedValidators
resetSMSCounter
clearItem:
setPhoneNumber:
_identifierForValidator:
phoneUserWithUpdatedPhoneNumber:phoneBookNumber:
initWithSMSSignature:
setCredential:forUser:
_notifySuccess:token:identifier:
_sendABCForFailureForIdentifier:WithEvent:context:
_hasThresholdReachedForSMSTimeoutForIdentifier:
_resetRateLimitersForSMSTimeoutForIdentifier:
setRequireUserInteraction:
requestUserConsentToValidatePhoneNumberForCTPNR:completion:
validator:identifiedPhoneNumber:token:phoneBookNumber:
validator:failedIdentificationWithRegistrationError:
validator:handleABCEvent:
setRegistrationReason:forPhoneNumber:
clearConsentDenialsForRegistration:
clearConsentDenialsForPhoneUser:
_notifyNeedsNewIdentification
registrations
handlers
preflightStackStore
setRegistrationReasonByUserID:
stateMachineByUserID
setStateMachineByUserID:
userConsentDeniedForCTPNR
setUserConsentDeniedForCTPNR:
smallWindowSMSTimeoutRateLimiter
setSmallWindowSMSTimeoutRateLimiter:
wideWindowSMSTimeoutRateLimiter
setWideWindowSMSTimeoutRateLimiter:
registrationAttemptRateLimiter
setRegistrationAttemptRateLimiter:
_preflightStackStore
_registrationReasonByUserID
_stateMachineByUserID
_userConsentDeniedForCTPNR
_smallWindowSMSTimeoutRateLimiter
_wideWindowSMSTimeoutRateLimiter
_registrationAttemptRateLimiter
route
setRoute:
retryCount
setRetryCount:
engramID
setEngramID:
sigAlgorithm
setSigAlgorithm:
forwardingSig
setForwardingSig:
forwardingSigAlgorithm
setForwardingSigAlgorithm:
setResponseEngramID:
setResponseVersion:
setResponseEntries:
requiredUpdate
allowDualDelivery
setRequiredUpdate:
_route
_engramID
_requiredUpdate
_sigAlgorithm
_forwardingSig
_forwardingSigAlgorithm
_responseEngramID
_responseVersion
_responseEntries
setShouldPostNotifications:
_updateParentalSettings
_managedPrefsNotification:
active
_isDisabledService:
_setIsDisabled:forService:
shouldPostNotifications
_parentalControls
_active
_shouldPostNotifications
IDSGenericConnectionForLink:connectionSetupStartTime:firstPacketReceiveTime:connectionType:success:errorCode:
NRPairing
_notifyDelegatesWithBlock:
pairedDeviceRepository
activePairedDevice
_hasAllEncryptionKeys
_requestPairedDeviceInfo
_requestPairedDeviceInfoAfterDelay:
initWithPersister:
initWithNRDeviceManager:pairedDeviceRepository:
_loadPairedDevicePropertiesIfNeeded
_markSecuredEncryptionKeysAsRegenerated:
regeneration
_suspendOTRSessionsWithProtectionClass:
removeSessionKeyForToken:
suspendSessionNegotiation:askedByPairedDevice:
purgeSecuredEncryptionKeysForAllPairedDevices
encryptionClassAKey
encryptionClassCKey
encryptionClassDKey
_localDevicePrivateData
supportsSMS
supportsMMS
supportsApplePay
supportsHandoff
supportsTethering
deviceColor
enclosureColor
localDevice
pairing
_activePairedDeviceCBUUID
buildVersion
pairingType
allPairedDevices
iCloudURIs
publicClassDKey
publicClassAKey
publicClassCKey
privateData
_isPairedToDevice:
_updateActiveStateForAllPairedDevices:
deviceState
updateStateForDeviceWithUniqueID:
setShouldQuickSwitchAfterIPSecConnected:
cbuuidsOfPairedDevices
_nrDeviceIdentifierWithCBUUID:
nrDeviceManager
_updateActiveStateForAllPairedDevices
supportIPsec
cbuuidUUID
_networkRelayRegisterDeviceWithCBUUID:wasInitiallySetupUsingIDSPairing:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:
isMissingAnyPublicKeyForPairedDeviceWithCBUUID:
_cbuuidsWithIsPairingValue:
initWithIdentityData:
_identityDataErrorPairForDataProtectionClass:
initWithWithFullIdentityDataClassA:classC:classD:
pairedDevicesWithIsPairingValue:
initWithCBUUID:publicIdentityDataClassA:classC:classD:
shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:
registeredPairedDeviceDidConnectBlockPairs
_clearPairedDeviceDidConnectBlocksForUniqueID:
removeObjectsInArray:
updatePairedDeviceWithCBUUID:supportIPsec:
pairedDevicePairingType
updatePairedDeviceWithCBUUID:pairingType:
pairedDeviceWithCBUUID:
hasAllPublicKeys
_createRegistrationProperties:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:
_networkRelayRegisterDeviceWithCBUUID:properties:shouldPairDirectlyOverIPsec:
startIdsNRDeviceBridgeAndPreferenceHandlerWithIdentifier:
pairingProtocolDebug
pairedDevicePushToken
pairedDeviceiCloudURIs
updatePairedDeviceWithCBUUID:iCloudURIs:pushToken:
_purgeSecuredEncryptionKeysForAllPairedDevices
shouldQuickSwitchAfterIPSecConnected
_callPairedDeviceDidConnectBlocksForUniqueID:withError:
_isEncryptionKeyRegenerationSupportedByCapabilityFlags:
_isIPsecSupportedByCapabilityFlags:
_isTinkerPairedInCapabilityFlags:
devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:
_notifyDelegatesDevicePairedToDevice:
_notifyDelegatesDeviceUnpairedFromDevice:
_migrateSecuredEncryptionKeys
_hasRegeneratedSecuredEncryptionKeys
_regenerateSecuredEncryptionKeys
gatherLocalDeviceInfoWithCompletionBlock:
pairedDeviceBuildVersion
pairedDeviceProductVersion
pairedDeviceProductName
pairedDeviceHandlesWithPairingType:
_updatePairedState:
addLocalPairedDevice:BTOutOfBandKey:shouldPairDirectlyOverIPsec:pairingType:bluetoothMACAddress:
removeLocalPairedDevice:
disconnectActivePairedDevice
updateNetworkRelayStateForAllPairedDevices
cbuuidsOfPairingDevices
localDeviceRecord
pairedDeviceRecords
registerPairedDeviceWithUniqueID:didConnectBlock:
updateLocalPairedDevice:pairingType:
_isIPSecLinkEnabled
updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:
refreshPairedDeviceEncryptionKeys
_delegateMap
_hasLoadedPairedDevices
_pairingStateToken
_isPendingResetOfKeyRegenerationFlag
_pairedDeviceInfoRequestCountdown
_cbuuidToBTOutOfBandKeyDictionary
_shouldQuickSwitchAfterIPSecConnected
_nrDeviceManager
_pairedDeviceRepository
_registeredPairedDeviceDidConnectBlockPairs
setPhoneBookNumber:
setIsDefaultUser:
labelID
isEqualToPhoneUser:
isDefaultUser
characterSetWithCharactersInString:
stringByRemovingCharactersFromSet:
isPhoneNumber:equivalentToExistingPhoneNumber:
initWithLabelID:
initWithLabelID:phoneBookNumber:
initWithLabelID:phoneBookNumber:isDefaultUser:countryCode:networkCode:
phoneUserWithUpdatedPhoneNumber:
phoneUserWithUpdatedDefaultUser:countryCode:networkCode:
differsFromPhoneNumber:
_isDefaultUser
_phoneNumber
_phoneBookNumber
_labelID
initWithPreferedType:
initWithMessageDelivery:
arrayByAddingObjectsFromArray:
_queryGroupServerENID:withPreviousEntries:completion:
_getMessageCompletionCurrentEntries:withCompletion:
_putMessageCompletionWithCompletion:
publicKeyForURI:pushToken:fromURI:service:
initWithBytesNoCopy:length:freeWhenDone:
logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:
encryptDataWithAESKey:data:
decryptDataWithAESKey:data:
encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:
decryptLocalDeliveryPayload:forService:withDataProtectionClass:fromDevice:encryptionType:priority:error:
areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:
setMaxConcurrentMessages:
addAlias:
addServiceType:
addSession:
addCompletionBlock:forSession:
appleID
setAppleID:
setAliases:
deviceModel
setDeviceModel:
sessions
setSessions:
serviceTypes
setServiceTypes:
sessionToBlockMap
setSessionToBlockMap:
_appleID
_deviceModel
_aliases
_sessions
_serviceTypes
_sessionToBlockMap
__imFirstObject
stringWithLTREmbedding
setRepresentedApplicationBundle:
marketingNameForModel:
_localizedServicesUsageStringForDevice:useSingular:
_postAvailableNotificationForSessions:appleID:aliases:deviceName:serviceTypes:blockMap:
_postUsageNotificationForSessions:appleID:aliases:deviceName:deviceModel:serviceTypes:
_processAvailableNotifications
_processUsageNotifications
_noteNewAvailableNotification:
_noteNewUsageNotification:
addAvailableNotificationForSession:appleID:alias:deviceName:serviceType:completionBlock:
addUsageNotificationForSession:appleID:alias:deviceName:hardwareVersion:serviceType:
_availableNotifications
_usageNotifications
storedDescriptionForActivity:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
unregisterAccount
authenticateAccount
passwordUpdated
updateAuthorizationCredentials:token:
validateProfile
unvalidateAliases:
_reregisterAndReidentify:
deactivateAndPurgeIdentify
_submitRegistrationAccountStatusMetric
setClearStateOnLaunch:
sharedInstanceForDataProtectionClass:
iCloudUpdateForUsername:accountInfo:
iCloudModifyForUsername:
iTunesSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
updateUserWithOldUsername:newUsername:
keyRoll
_respondToRegistrationControlWithRequestID:status:messageContext:error:
respondToRegistrationControlActionWithRequestID:messageContext:error:
isGreenTea
initWithRegistrationType:registrationControlStatus:isInterestingRegion:
migrateClassA
migrateClassC
isFakingEveryUnlockAsFirstUnlock
_processStoredIncomingLocalMessages
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:messageContext:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:messageContext:
_removeAccount:messageContext:
_removeAndDeregisterAccount:messageContext:
updateAccount:withAccountInfo:messageContext:
enableAccount:messageContext:
disableAccount:messageContext:
authTokenChanged:forAccount:messageContext:
passwordChanged:forAccount:messageContext:
authenticateAccount:messageContext:
passwordUpdatedForAccount:messageContext:
updateAuthorizationCredentials:token:forAccount:messageContext:
validateProfileForAccount:messageContext:
addAliases:toAccount:messageContext:
removeAliases:fromAccount:messageContext:
validateAliases:forAccount:messageContext:
unvalidateAliases:forAccount:messageContext:
activateAlias:onAccount:messageContext:
deactivateAlias:onAccount:messageContext:
registerAccount:messageContext:
unregisterAccount:messageContext:
forceRemoveAccount:messageContext:
_reregisterAndReidentify:account:messageContext:
deactivateAndPurgeIdentifyForAccount:messageContext:
hardDeregisterWithMessageContext:
triggerFinalDeregisterWithMessageContext:
kickGetDependentForAccount:messageContext:
reRegisterWithUserID:action:service:messageContext:
repairAccountsWithMessageContext:
clearIDSStateWithMessageContext:
initialLocalSyncStartedForServices:messageContext:
initialLocalSyncCompletedForServices:messageContext:
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iCloudUpdateForUserName:accountInfo:messageContext:
iCloudModifyForUserName:messageContext:
iCloudSignOutWithMessageContext:
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iTunesSignOutWithMessageContext:
updateUserWithOldUserName:newUserName:messageContext:
iCloudSignInHackWithUserName:password:messageContext:
iCloudSignOutHackWithMessageContext:
setPassword:forUsername:onService:messageContext:
updateSubServices:forService:deviceUniqueID:messageContext:
setPairedDeviceInfo:messageContext:
setNSUUID:onDeviceWithUniqueID:forService:messageContext:
incomingAccountSyncMessage:messageContext:
regenerateRegisteredIdentityWithMessageContext:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:messageContext:
registrationControlGetRegistrationStateForRegistrationType:requestID:messageContext:
isGuest
_submitAWDMetric:withContainer:
_submitIDSSessionAWDMetric:withContainer:
sessionStartedWithAWDGUID:protocolVersionNumber:serviceName:clientType:
sessionInvitationSentWithAWDGUID:numberOfRecipients:
sessionInvitationReceivedWithAWDGUID:
sessionCancelSentWithAWDGUID:numberOfRecipients:remoteSessionEndReason:
sessionCancelReceivedWithAWDGUID:
sessionDeclineSentWithAWDGUID:
sessionDeclineReceivedWithAWDGUID:
sessionAcceptSentWithAWDGUID:
sessionAcceptReceivedWithAWDGUID:
sessionConnectedWithAWDGUID:
sessionReinitiateRequestedWithAWDGUID:
sessionReinitiateStartedWithAWDGUID:
sessionReinitiateConnectedWithAWDGUID:
sessionCompletedWithAWDGUID:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isScreenSharingSessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
sessionEndedWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
setDisallowRetry:
shouldMinimizeBagCacheTime
forceBagLoad
addTokenURINegativeCacheClearBlock
startBagLoad
groupCryptoMinVersionNumber
_tokenURIForToken:uri:
tokenURINegativeCacheItemForTokenURI:service:
maxLargeMessageSize
maxMessageSize
accessToken
_sendFTMessage:service:fromID:toID:toToken:toSessionToken:toPeople:fromIdentity:completionBlock:
_keyForURIs:service:
_pipelineHandleMessage:forURIs:service:
_checkFastDormancy
_maxPayloadSizeForMessage:
_forceAttachmentForMessage:
effectiveMaxPayloadSizeIfCanUseLargePayload:
peerMessageTrace
messageOnQueue
_verifyMatchingName:
shouldLogTouches
_touchStartDate
signpostID
messageBodyUsingCache
_processMessageResponse:error:resultCode:toURI:fromURI:service:fromIdentity:
apsdCheckpointTrace
setApsdCheckpointTrace:
setResponseTimeStamp:
setEndpointState:
_randomTemporaryPathWithSuffix:
writeToFile:atomically:
initWithServiceIdentifier:
dataUsageBundleID
stringByResolvingAndStandardizingPath
stringGUIDForObject:
_sendMessageDictionary:lastRetryInterval:dataToEncrypt:onService:wantsResponse:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:highPriority:fireAndForget:expirationDate:enforceRemoteTimeouts:messageID:fromID:fromIdentity:toID:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:checkpointTrace:destinationObject:ackBlock:willSendBlock:sendCompletionBlock:
sendFilePath:topic:userInfo:transferID:sourceAppID:encryptFile:progressBlock:completionBlock:
_queueMessage:service:dataToEncrypt:fromID:fromIdentity:toID:toPeople:originallyToPeople:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:checkpointTrace:destinationObject:willSendBlock:completionBlock:
hasPeerTokensForURI:fromURI:service:
_handleMessagesForURIs:originalURIs:service:fromID:
_emptyMessagesForURIs:service:
IDQuery
_discardMessage:forURIs:service:
_sendMessage:dataToEncrypt:onService:fromID:fromIdentity:toID:toPeople:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:checkpointTrace:destinationObject:willSendBlock:completionBlock:firstAttemptDate:
_touchEndDate
setAccessToken:
pushAckTimestamp
setDeliveryAcknowledgementBlock:
_handleAccessoryMessageForID:msg:service:fromID:fromIdentity:completionBlock:
initWithInfo:uris:service:maxSize:
_constructDeliveryPipeline
runWithInput:
deliveryAcknowledgementBlock
usedMMCS
aggregateMessages
sendRTCMetricWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:
initWithEncryptionController:transferServicesController:
pipelineFromComponents:
initWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:
timeToSend
endpointCount
usedPipeline
awdLogger
isSupportedEngramVersionNumber:
_sendAsAttachmentForMessage:payloadData:
_destinationCountForURIsAndTokens:
_sendFTFanoutMessage:service:fromID:toPeople:fromIdentity:completionBlock:
_sendAttachmentWithGuid:service:topic:originalCommand:additionalDictionary:encryptedData:toToken:toID:fromID:fromIdentity:canUseLargePayload:expirationDate:checkpointTrace:destinationObject:ackBlock:completionBlock:
_sendErrorDictionary:onService:fromID:fromIdentity:toID:toToken:topic:sendCompletionBlock:
sendMessageDictionary:messageID:dataToEncrypt:onService:wantsResponse:expirationDate:enforceRemoteTimeouts:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:priority:fireAndForget:fromID:fromIdentity:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:checkpointTrace:destinationObject:ackBlock:willSendBlock:sendCompletionBlock:
_messageQueue
_pendingOfflineMessages
_tokenURINegativeCache
OSVersion
setOSVersion:
sender
setSender:
attemptCount
setAttemptCount:
setGeo:
abusive
setAbusive:
delay
setDelay:
additionalQueryStringParameters
wantsHTTPGet
_OSVersion
_sender
_attemptCount
_geo
_abusive
_delay
properties
success
terminusConnected
terminusNearby
terminusRegistered
personalCBUUIDString
rtcType
setProperties:
_properties
setPersonalCBUUIDString:
_success
_terminusConnected
_terminusNearby
_terminusRegistered
_personalCBUUIDString
_callBlocksWithResult:registrations:error:
completionBlocks
setCompletionBlocks:
nextByte
totalBytes
domainHash
protobuf
resourcePath
resourceMetadata
socketPairMessageWithCommand:streamID:sequenceNumber:messageID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:didWakeHint:peerResponseIdentifier:messageUUID:payload:protobuf:resourcePath:resourceMetadata:expiryDate:
_niceToSocketCommand:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:didWakeHint:peerResponseIdentifier:messageUUID:data:expiryDate:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:didWakeHint:peerResponseIdentifier:messageUUID:expiryDate:protobuf:
initWithSequenceNumber:streamID:peerResponseIdentifier:
initWithResourceAtPath:metadata:sequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:didWakeHint:peerResponseIdentifier:messageUUID:expiryDate:
kickProgressBlock
processAckForSocketPairMessage:
socketPairMessage
setPayload:
awdTopic
setAwdTopic:
setDomainHash:
setToDeviceID:
setToURI:
fallbackBlock
setFallbackBlock:
progressBlock
setProgressBlock:
expectsPeerResponse
setExpectsPeerResponse:
wantsAppAck
setWantsAppAck:
nonWaking
setNonWaking:
nonCloudWaking
setNonCloudWaking:
compressPayload
setCompressPayload:
compressed
setCompressed:
didWakeHint
setDidWakeHint:
peerResponseIdentifier
setPeerResponseIdentifier:
timeEnqueued
setTimeEnqueued:
timeSent
setTimeSent:
isDoneSending
setProtobuf:
sentMessageDataSize
setSentMessageDataSize:
didFallback
setDidFallback:
queueOneIdentifier
setQueueOneIdentifier:
setRequireBluetooth:
setRequireLocalWiFi:
setResourcePath:
setResourceMetadata:
manualQueueRemoval
setManualQueueRemoval:
deniedToSend
setDeniedToSend:
shouldEnforceRemoteTimeout
setShouldEnforceRemoteTimeout:
duetIdentifiersOverride
setDuetIdentifiersOverride:
bypassDuet
setBypassDuet:
messageType
setMessageType:
underlyingSocketPairMessage
setUnderlyingSocketPairMessage:
messageState
_payload
_fromID
_topic
_awdTopic
_domainHash
_toDeviceID
_fallbackBlock
_progressBlock
_timeEnqueued
_timeSent
_expectsPeerResponse
_wantsAppAck
_nonWaking
_nonCloudWaking
_requireBluetooth
_requireLocalWiFi
_compressPayload
_compressed
_didWakeHint
_peerResponseIdentifier
_queueOneIdentifier
_underlyingSocketPairMessage
_isSending
_fullyAckd
_protobuf
_sentMessageDataSize
_didFallback
_resourcePath
_resourceMetadata
_manualQueueRemoval
_deniedToSend
_shouldEnforceRemoteTimeout
_duetIdentifiersOverride
_bypassDuet
_messageType
_messageState
setLocalContext:
setRemoteContext:
localContext
remoteContext
reqCount
setReqCount:
localCID
setLocalCID:
remoteCID
setRemoteCID:
lastSentSeq
setLastSentSeq:
lastSentAck
setLastSentAck:
_localCID
_remoteCID
_reqCount
_lastSentSeq
_lastSentAck
_localContext
_remoteContext
_copyPairedDevice
defaultPeerIsNearby
defaultPeerIsConnected
initWithBroadcastQueue:
_removeDevicePreferencesHandler
idsNRDeviceBridge
setIdsNRDeviceBridge:
setNrDevicePreferencesHandler:
nrDevicePreferencesHandler
_pairedDeviceUUID
_copyPeerWithID:
setIsLocalSetUpInProgress:
localSetUpStarted
localSetUpCompleted
_updateLocalSetupInProgressState:
isLocalSetUpInProgress
_createPeerFromDeviceInfo:
hashForString:
isPresent
defaultPeerConnectivityChanged:
_disableOTRForDefaultPairedPeer:
_refreshIPsecStatus
_deviceIDForPeer:
isScreenLit
notificationDelayInSeconds
lastCloudConnectedTime
initWithInactiveTime:linkType:priorLinkType:
setLastCloudConnectedTime:
enableConnectionForDefaultPairedDevice:
defaultPeerNearbyChanged:
_setCloudConnectionConnected:forPeer:
defaultPeerCloudConnectivityChanged:
setPreferInfraWiFiRequest:services:
setBluetoothLinkPreferences:inputbps:outputbps:
setQuickRelayRequest:
_createPeerFromDeviceID:
peerCloudConnectivityChanged:
defaultPeerMagnetIndicationOfAwakeStateChanged:
defaultPeerClassCConnectivityDidChange:
_enableOTRForDefaultPairedDevice
_setOTREnableTimer
_cleanupContinuityPeerMaps:
_currentOTRTimer
isLiveDeliveryWarmUpEnabled
startGlobalLinkForDevice:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:
stopIdsNRDeviceBridgeAndPreferenceHandler
copyPeerWithID:
localSetupStarted
setPendingCloudFlagOnDefaultPeer
_removePeerFromDeviceID:
sendData:service:protobuf:resourcePath:resourceMetadata:priority:dataProtectionClass:nonWaking:nonCloudWaking:requireBluetooth:requireLocalWiFi:queueOneIdentifier:expirationDate:enforceRemoteTimeouts:expectsPeerResponse:wantsAppAck:compressPayload:compressed:peerResponseIdentifier:messageID:topic:awdTopic:command:fromID:uriToDeviceID:localDeviceDestinationDeviceUUID:bypassDuet:duetIdentifiersOverride:messageType:fallbackBlock:progressBlock:completionBlock:
defaultPeerIsCloudConnected
enableCloudConnectionForDefaultPairedDevice:
hasSpaceForMessagesWithPriority:dataProtectionClass:
hasSpaceForCloudMessagesWithPriority:dataProtectionClass:
allowedTrafficClasses
legacyUTunBTLinkManagerDefaultPeerConnectivityChanged:
legacyUTunBTLinkManagerDefaultPeerNearbyChanged:
legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged:
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
peerCloudConnectivityChanged:isCloudConnected:
isTerminusConnectedOverBluetooth
findDefaultPeerToForceOTRNegotiation:priority:completionBlock:
lockContinuityPeer:btUUID:
unlockAllContinuityPeers
pendingContinuityPeerID:
tryNextContinuityPeer:
isPeerForPhoneContinuityLocalMessage:
enableOTRForDefaultPairedDevice
enableOTR
setShouldUseIPsecLinkForDefaultPairedDevice:
connectivityMonitor
setConnectivityMonitor:
setNotificationDelayInSeconds:
_deviceIDToPeerLock
_deviceIDToPeer
_btuuidToSessionID
_streamIDToTopicLock
_streamIDToTopic
_lastConnectedTime
_lastIsNearbyBecameTrue
_isLinkForDefaultPeerConnected
_trafficClassLock
_allowedTrafficClasses
_enableOTR
_otrTimer
_otrInitialized
_localAccountSetupCompleted
_defaultPeerConnectedDeferred
_continuityPeerLock
_lockedPeerMap
_peerListMap
_pendingPeerMap
_peerConnectBlocksMap
_peerFailureBlocksMap
_lastCloudConnectedTime
_broadcastQueue
_shouldUseIPsecLinkForDefaultPairedDevice
_isLocalSetUpInProgress
_idsNRDeviceBridge
_nrDevicePreferencesHandler
_connectivityMonitor
_notificationDelayInSeconds
getCString:maxLength:encoding:
_specificEntitlements
_shrunkenServiceIdentifiers
_serviceIdentifierCount
_specificEntitlementCount
groupContextController
observer
appendMiddleware:
groupContextForProtectionSpace:withCompletion:
upsertGroupWithInfo:previousGroup:completion:
fetchGroupWithID:completion:
publicDataRepresentationForGroup:completion:
groupFromPublicDataRepresentation:completion:
latestCachedGroupWithStableID:completion:
fetchAllKnownGroups:
deleteAllKnownGroupsWithCompletion:
deleteAllCachedValuesForGroupWithID:WithCompletion:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
didCreateGroup:completion:
didCacheGroup:completion:
didUpdateGroup:withNewGroup:completion:
didReceiveDecryptionFailureForGroup:completion:
didReceiveRegistrationIdentityUpdateWithCompletion:
setRemoteObjectInterface:
remoteObjectProxy
observerProxies
setInterruptionHandler:
setObserver:
setObserverProxies:
_observer
_observerProxies
addBlockToAggregateMessage:
addBlockToAggregatableMessage:trackingSet:
initWithEndpoints:keyTransparencyContext:
isEqualToPeerIDValue:
keyTransparencyContext
decodeObjectOfClasses:forKey:
peerIDValueWithEndpoints:keyTransparencyContext:
_endpoints
_keyTransparencyContext
setupNewIncomingSessionWithOptions:
submitAWDMetricsForIDSSessionInvitationReceived
addBlock:withTimeout:forKey:description:
setMasterKeyMaterial:forDevice:fromID:groupID:sessionID:fromSender:error:
noteReceivedGroupMasterKeyMaterials:URIs:sessionID:
requestPendingKeyMaterialsForGroup:sessionID:
destinationWithAlias:pushToken:
sendPublicKeyToDestination:group:sessionID:
processIncomingPrekeyRecoveryRequest:fromDevice:fromID:groupID:sessionID:serverDate:
processIncomingPrekeyAckForGroup:
setRealTimeEncryptionPublicKey:forDevice:fromID:groupID:sessionID:serverDate:
sessionWithInstanceID:
removeObjectsForKeys:
setEnableCriticalReliability:
setupNewOutgoingSessionWithOptions:
processIncomingInvitationWithPayload:topic:fromToken:fromID:toID:shouldFilter:idsMessageContext:messageContext:
processIncomingSessionAcceptMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionDeclineMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionCancelMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionEndMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionReinitiateMessage:fromToken:fromID:idsMessageContext:
processIncomingGroupSessionMessage:fromToken:fromID:toID:topic:idsMessageContext:
cleanupSessionWithChannelDestination:
_handleClientDeath:
sessionWithGroupID:
groupSessionGroupIDs
_sessionIDMultiQueue
_reportedReceivedMKM
fulfilledPromiseWithValue:
performMigrationIfNeeded
completedMigration
setCompletedMigration:
currentPromise
setCurrentPromise:
_completedMigration
_currentPromise
_currentForcedGDRCount
earlierDate:
dateByAddingTimeInterval:
_performedForcedGDRDatePeriod
_incrementForcedGDRCount
_updatePerformedForcedGDRDate
_clearForcedGDRCount
_clearForcedGDRDate
_updateVettedAliases:emailInfo:addToCurrentHandlesIfNeeded:
_validationStatusForAlias:
_addAliases:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:
_neededRegistrationType
registrationWithServiceType:registrationType:value:
setShouldAutoRegisterAllHandles:
setShouldRegisterUsingDSHandle:
regionServerContext
_rebuildRegistrationInfo:
setServiceType:
setRegistrationType:
setEmail:
setIdsUserID:
setIsCDMA:
setKeyPairSignature:
_aliasStrings
setRegionServerContext:
smsSignatureForID:
_IDFromFZIDType:
setAdHocServiceNames:
_registerAccount
_registrationAbilityChanged:
_identityRebuilt:
_identityGenerated:
_keychainMigrationComplete:
_needsEncryptionIdentityRoll:
setIsDisabled:
needsMigration
canRegister
_checkRegistration
_refreshRegistration
markAsUnvettedAlias:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:aliasProperties:
localizedCaseInsensitiveCompare:
sortedArrayUsingSelector:
applicationVersion
IDSVersion
identityVersion
_reregister
_notifyListenersAndSetDependentRegistrations:onRegistrationInfo:
setRegistrationStatus:error:alertInfo:
_updatePhoneNumberCallerID
isRegistrationActive
_reregisterAndReProvision
_removeAuthenticationCredentials
_registerForDeviceCenterNotifications
registrationCenter
removeAllRegistrations
bagURL
host
port
_unregisterAccount
_deregisterDeviceCenterNotifications
_isPasswordPromptPermissibleDuringAuthentication
_authenticateAccount
_FZBestGuessFZIDType
setMigrationContext:
hasActionForTarget:
_retryRegister
_migrateRegistrationIfNeeded
setNeedsMigration:
shouldShowUsageNotifications
wasRecentlySelectedAlias:
markAsVettedAlias:
appleIDNotificationCenter
_validateAliases:validateAlreadyValid:
isDeviceAuthenticated
_parseHandlesInfo:currentAliases:currentVettedAliases:
dateLastRegistered
_isBuddyShowing
_issueCriticalDependentCheck
initWithPrefixedURI:
handleRegistrationUpdateForHash:localURI:remoteURI:service:guid:forceUpdate:
setDependentRegistrationsTTL:
setDependentRegistrationAuthRetries:
setDependentRegistrationResponseCode:
dependentRegistrationAuthRetries
gdrCenter
shouldReAuthenticateForGDRResultCode:retries:
_reAuthenticate
setDependentRegistrations:
_notifyRegistrationListenersAccountDidUpdateRegisteredDevices
_hasBudgetForForcedGDR
_clearGDRState
tunnelService
_updateSessionsWithRegisteredURIs:
_flushTokensForRegisteredURIs:
_processReceivedDependentRegistration:oldDependentRegistrations:
_saveAndNotifyGDRUpdate
getDependentRegistrations:completionBlock:
_IDsFromURIs
arrayByAddingObject:
_updateSessionsWithRegisteredURIs:retryIfNotRegistered:
_unregistered130RetryInterval
activeURIsFromURI:service:
sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encryptPayload:wantsResponse:expirationDate:command:wantsDeliveryStatus:wantsCertifiedDelivery:deliveryStatusContext:messageUUID:priority:localDelivery:disallowRefresh:willSendBlock:completionBlock:
_updateCallerIDToTemporaryPhone
validationStatusForAlias:
_validateAliases:
invisibleAliases
markAsSelectedAlias:
trimmedString
_appearsToBePhoneNumber
removeCandidateEmail:
_unvalidateAliases:
sendValidateCredential:withDeliveryCompletionBlock:
validateRegion:phoneNumber:forRegistration:
_setUserIntentState:forAlias:withReason:
currentAliasState:
_stopTrackingUserIntentOfAlias:
_userIntentDictForAlias:
_allUserIntentWithDefaultReason:
_maxSelectedButVettedGracePeriod
GDR_oversized
account:didUpdateRegisteredDevices:
_issueForcedDependentCheckIfPossible
registrationController:deregistrationSucceeded:
refreshVettedAliases
markAsWasSelectedAlias:
reportSpamWithMessages:toURI:
addRegistrationListener:
removeRegistrationListener:
supportsSMSIdentification
isInMultiUserMode
initWithAccountController:serviceController:passwordManager:registrationConductor:deviceSupport:registrationControl:registrationController:userStore:
_signInDomain:withUsername:authToken:password:accountInfo:accountStatus:handles:
_updateDomainWithUsername:accountInfo:
_modifyDomainWithUsername:
_signOutDomain:
passwordManager
updatePreviousUsername:toNewUsername:
deviceSupport
registrationControl
setAccountStatus:forProfileID:username:service:
setHandlesForProfileID:username:service:handles:
_shouldServiceBeEnabledOnSignIn:forDomain:
_reregisterAndReProvisionForEDULoginWithUsername:
_shouldServiceBeDisabledOnSignOut:forDomain:
reloadUsersForRealm:
accountStore
accountTypeWithAccountTypeIdentifier:
initWithErrorCode:timeIntervalSinceAuthenticationParameterRequest:
credential
_passwordManager
_registrationControl
initWithDeliveryController:userDefaults:idsServerBag:
setDeliveryController:
setIdsServerBag:
makeObjectsPerformSelector:
_persistTopic:
startCollectingMetricsForServerStorageStateMachineFor:isPrimary:
_sendServerStorageMessageForTopic:retryCount:
terminateStateMachineForTopic:
_incrementMessagesFromStorageForTopic:
idsServerBag
_stateMachineTimedOut:
initWithReason:guid:service:additionalInformation:
_startExtendedTimeoutTimerForTopic:
_submitNoLastFromStorageMetricForService:
passThroughMessagesFromStorage
deliveryController
_startTimeoutTimerForTopic:
stopCollectingMetricsForServerStorageStateMachineFor:
_unpersistTopic:
initWithTopic:isPrimary:
endCollector
reportMetric
incrementMessageCount
_persistedTopics
recievedNoStorageResponseForTopic:messageContext:
recievedLastMessageFromStorageForTopic:
recievedMessageFromStorageForTopic:
inflightServerStorageStateMachineForTopic:
currentMetricCollectorForTopic:
metricCollectors
_currentStorageRetriesPerTopic
_deathTimerToTopicMap
_lastReceivedMessageTimePerTopic
_inflightStorageRequests
_pendingStorageRequests
_metricCollectors
_deliveryController
_idsServerBag
addActionListener:
selectedSubscriptionLabelDidChange:
removeActionListener:
_setupForCurrentSubscriptionState
setIsDeviceInDualPhoneIdentityMode:
dualSIMCapabilityEnabled
cachedIsSameSIM
_isInDualPhoneIdentityModeForSims:
isPNRNumber:andPhoneBookNumber:differentEnoughFromSIMIdentifier:toReregisterWithNewNumber:
mobileCountryCode
mobileNetworkCode
isDefaultVoiceSIM
silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:
_checkRegistrationStatus
lockdownManager
isActivated
setAuthenticationCertificate:forUser:
updatedUserSetForRealm:currentUsers:
setLockdownManager:
userConfiguration
setUserConfiguration:
setCachedIsSameSIM:
_lockdownManager
_userConfiguration
_cachedIsSameSIM
cachedIdentityForDeviceID:
cacheIdentity:forDeviceID:andPushToken:
removeCachedIdentityForPushToken:
identity
setIdentity:
_identity
initWithPeerIDManager:accountController:
addPurgeClientDataBlock:forToken:
_removeOldPersistence
removePurgeClientDataBlockForToken:
initWithUser:properties:
setUser:
initWithQueue:persister:registrationKeychainManager:
weakToStrongObjectsMapTable
_stringRepresentationOfUserRealm:
_updateUsersForCurrentUsers:updatedUsers:
_iterateByRealm:block:
_removeUser:
_addUser:
silentlySetAuthenticationCertificate:forUser:
tempPhoneCredentialForID:
smsSignature
setSMSSignature:mainID:
setTempPhoneCredential:forID:
authenticationCertForID:
setAuthenticationCert:forID:
usersWithRealms:
setProperties:forUser:
persistentMap
setPersistentMap:
registrationKeychainManager
setRegistrationKeychainManager:
realmByListener
setRealmByListener:
dataProviderByRealm
setDataProviderByRealm:
_persistentMap
_registrationKeychainManager
_realmByListener
_dataProviderByRealm
setResponseCode:
setCert:
_responseCode
requests
setRequests:
authenticationResponses
setAuthenticationResponses:
_addRequestWithID:cert:sig:csr:tag:
addRequestWithID:cert:
addRequestWithID:sig:csr:tag:
_requests
_authenticationResponses
valueForEntitlement:
stateManager
handleIncomingUpdate:onActivity:completion:
_entitledForActivity:
_handleUpdate:forActivity:
setupActivityMonitorClient:forActivity:
checkIfListeningForActivity:completion:
setShouldListen:forActivity:completion:
currentSubscriptionsForActivity:completion:
subscribeInfo:forActivity:withCompletion:
unsubscribeActivity:andSubActivity:withCompletion:
activityMonitorEntitlements
setActivityMonitorEntitlements:
clientRemoteObjectByActivity
setClientRemoteObjectByActivity:
setStateManager:
_activityMonitorEntitlements
_clientRemoteObjectByActivity
_stateManager
activityMonitor
initWithProperties:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
identities
initWithCBUUID:pairingType:
initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:
initWithPairedDevice:capabilityFlags:
initWithPairedDevice:deviceInfoPayload:
initWithPairedDevice:supportIPsec:
initWithPairedDevice:pairingType:
initWithPairedDevice:iCloudURIs:pushToken:
pairedDeviceWithoutSecuredEncryptionKeys
isPairing
language
setLanguage:
services
setServices:
privateDeviceData
setPrivateDeviceData:
validationData
setValidationData:
deviceScore
setDeviceScore:
deviceScoreNonce
setDeviceScoreNonce:
responseServices
setResponseServices:
responseHBI
setResponseHBI:
isMultipleAuthCertCapable
nonStandardMessageHeadersForOutgoingPush
_validationData
_responseServices
_language
_services
_privateDeviceData
_responseHBI
_deviceScore
_deviceScoreNonce
_flush
setFireTimeInterval:
reloadFromKeychain
keychainManager
keychainServiceForVersion:
keychainAccountForVersion:
keychainAccessGroupForVersion:
keychainAdapter
setKeychainData:service:account:accessGroup:allowSync:error:
__saveToKeychain
_saveToKeychain
_setPurgeTimer
getKeychainData:service:account:accessGroup:error:
removeKeychainDataOnService:account:error:
_reloadFromDictionary:
_loadIfNeeded
_keychain_comparisonValue
_keychain_isEqual:
addRegistration:
removeRegistration:
smsIDs
_tempPhoneCredentials
_smsSignatures
_authenticationCerts
_registrationData
_purgeTimer
_purgeCancelBlock
_purgeEnqueueBlock
_setupTokens
_listenForMGChanges
_updateCapabilities
_deferredUpdateCapabilities
supportedServicesToken
setSupportedServicesToken:
_supportedServicesToken
carrierBundleValueFromAllSIMsForKey:ofType:withFallback:
sharedFactory
createHTTPMessageDelivery
createAPNSMessageDelivery
registeredObjectForProtocol:
messageDeliveryFactory
cancelMessage:
userAgent
retryInAirplaneMode
setRetryInAirplaneMode:
logToRegistration
currentMessage
queuedMessages
__sendMessage:
_dequeuePendingRequestsIfNecessary
initWithPushHandler:lockdownManager:heartbeatCenter:ftNetworkSupport:sendMessageHandlerBlock:messageResponseHandlerBlock:
__reallySendAuthenticateRegistration
initWithQueue:block:
__reallySendRegistration
initWithCapacity:queue:block:
__reallySendDeregistration
initWithMessageDelivery:pushHandler:keyTransparencyVerifier:
__cleanupValidationInfo
__dumpState
_checkOverRegistrations
_sendAuthenticateRegistration:
_sendRegistrationAsDeregister:
_hasCurrentAuthenticationsOrRegistrations
cancelPendingExecutions
enqueueExecutionWithTarget:afterDelay:
__failValidationQueueWithErrorResponseCode:
signingSession
__imDataWithRandomBytes:
wiFiActiveAndReachable
_noteRegistration
absintheRetries
setAbsintheRetries:
responseAlertInfo
isKeyTransparencyEnabled
_md5Hash
initWithServiceIdentifier:accountIdentifier:URI:
initWithTransparencyStatus:transparencyBlob:
_keyTransparencyLoggableDataFromRegistrationMessage:service:URI:
initWithPushToken:loggableData:
keyTransparencyVerifier
transparencyTicketForRegistrationWithIndex:verificationState:entry:
setRegistrationDate:
setNextRegistrationDate:
setEnvironment:
setApplicationVersion:
setIdentityVersion:
setIDSVersion:
setKeyTransparencyEnrolledURIs:
_notifyRegistrationFailure:responseCode:registrationError:error:info:
_notifyAllSuccessfulRegistrations:
_URIsFromIDs
emailsToRegister
_URIsToRegisterForRegistration:
setKtLoggableData:
_hasOngoingAuthentications
_trustedDeviceForRegistrations:transparencyLoggableDatasByServiceType:
enrollTrustedDevice:
signatures
eligibleServiceIdentifiers
stringByReplacingOccurrencesOfString:withString:
hasSentinel
_processRegistrationMessage:sentRegistrations:descriptionString:actionID:actionString:isDeregister:deliveredWithError:resultCode:resultDictionary:
FTMessageDelivery_oversized
descriptionForObject:options:
_queueBuildingValidationDataIfNecessaryForMessage:withCompletion:
setDSAuthID:
_notifyIDSAuthenticationSuccess:
_notifyProvisionFailure:responseCode:registrationError:error:fatal:info:
_authMessageCompletionWithRegistration:withOverallSuccessBlock:overallFailure:
_authMessageForRegistration:
cancelRegisterActionsForRegistrationInfo:
setSpamMessages:
setSelfURI:
iMessageSpam
setUnknownSenderURI:
setIsBlackholed:
setMessageServerTimestamp:
_geoRegion
_hasRegistration:inQueue:
responseHandles
selfHandle
_notifyEmailQueryFailure:responseCode:registrationError:error:info:
setDSHandle:
_notifyEmailQuerySuccess:emailInfo:
initWithDictionary:copyItems:
_processGetHandlesMessage:registrations:deliveredWithError:resultCode:resultDictionary:allowPasswordPrompt:
_queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
_sendDeregistration:
__queueValidationMessage:
__failValidationQueue
__flushValidationQueue
_sendAbsintheValidationCertRequestIfNeeded
_notifyRegistrationIdentitiesUpdated
reportiMessageSpamCheckUnknown:count:completionBlock:
sendAuthenticateRegistrationTask
sendRegistrationTask
sendDeregistrationTask
cleanupAbsintheTask
_queuedRegistrations
_queuedAuthentications
_currentAuthentications
_currentRegistrations
_pendingDequeue
_pendingDeregistration
_currentGetHandlesBlocks
_currentGetHandlesRegistrations
_successfulRegistrations
_dateSentLastHTTPMessage
_dateLastRegistered
_accountingHour
_httpMessageDelivery
_gdrCenter
_keyTransparencyVerifier
_sendAuthenticateRegistrationTask
_sendRegistrationTask
_sendDeregistrationTask
_cleanupAbsintheTask
weight
setWeight:
responseIdentities
setResponseIdentities:
requiredForMessaging
setRequiredForMessaging:
resultExpected
setResultExpected:
selfURI
wantsManagedRetries
wantsBodySignature
dataUsageBundleIdentifier
_resultExpected
_weight
_responseIdentities
_requiredForMessaging
wrapperWithAddressString:withPortHostOrder:withInterfaceName:
fixedInterface
fixedInterfaceDestination
initWithDelegate:pairedDevice:
_startNetworkInterfaceListener:
_startCellularDataStatusListener:
_startReporter
_createWiFiManagerClient
_bringUpWiFi:
_newUDPLinkForDeviceUniqueID:cbuuid:IPVersion:port:
setDestinationAddress:isFixedDestination:fromAddress:
setDestinationAddressToDeviceIDMap:
_setBestLinkToCurrent:
_nearbyChangedForDefaultDevice
generateLinkReport:forceReport:
onTransportThread_PerServiceDataTransferredForDevice:services:
isLinkSuspended
suspendLink:
_startUDPLinkHandshakeForDefaultDevice:immediately:
_connectivityChangedForDefaultDevice:isCloudConnected:
interfaceAddressWithTransmittedBytes:length:withLocalInterfaceName:
IPVersion
initWithSockAddr:
_suspendBTLink:cbuuid:
_sendUDPLinkInterfaceAddresses:toDeviceID:isRetransmission:isReply:
remoteDetectedCorruption
isInvalidated
lastDestinationSent
lastDestinationReceived
setLastDestinationSent:
getTransmittableBytes:withPrefixByte:
defaultLinkType
_selectBestLink:
_processLinkChangeForDefaultDeviceFrom:to:
setPort:
setAllowsLinkLocal:
getGLClassWithOptions:
getAdditionalAllocationForAddress:selfAddress:relaySessionID:allocateType:qrReason:previousTime:previousError:previousRelayIP:previousAccessToken:requestSelfAllocation:isSessionIDRemoteDeviceID:withPreferredRemoteInterface:withPreferredLocalInterface:
reportAWDAllocatorEvent:relayProviderType:transport:localRAT:duration:idsSessionID:reportingDataBlob:isInitiator:
startKeepAliveTimer:relaySessionID:
stopKeepAliveTimer:relaySessionID:
initWithBlocks:qraAWDBlock:qraCONBlock:qraDISBlock:
startWithOptions:
sendPacketBuffer:destination:toDeviceID:
_sendPacketBuffer:toDeviceUniqueID:cbuuid:link:
startLinkForDeviceUniqueID:cbuuid:
_removeAllLinksForDeviceID:
_hasGlobalLinkConnectingOrConnected
updatePairedDevice:
connect
obliterateConnectionInfo
_newUDPGlobalLinkForDeviceUniqueID:cbuuid:
startDatagramLink
stopDatagramLink
_removeAllocateRequestForDevice:requestID:
_newGlobalLinkForDeviceUniqueID:cbuuid:options:
connectWithSessionInfo:interfaceAddress:joinSession:completionHandler:withLocalInterfacePreference:
disconnectWithCompletionHandler:
setAcceptedRelaySession:options:
setHasPendingAllocation:
sendSKEData:
setDefaultUnderlyingLink:
setPacketNotificationFilter:uniqueTag:isEnabled:
dropIPPackets:payloadArray:
updateProtocolQualityOfService:isGood:
stopKeepAlive:
setWiFiAssistState:
currentCellularSignalStrength:signalStrength:signalGrade:
startLinkProbing:
stopLinkProbing:
queryLinkProbingStatus:
flushLinkProbingStatus:
setRemoteDeviceVersion:
getSessionInfo:relaySessionID:requestType:options:
updateSessionParticipants:relaySessionID:participants:
_linkKeyForLink:
_removeLinkForDeviceID:linkKey:verifyWithLink:
_processLMCommandPacket:fromLink:deviceUniqueID:cbuuid:
_startAllocateRequestForDevice:
stopLinkForDeviceUniqueID:cbuuid:disconnectWP:
hasSuffix:
handleNetworkAddressChanges:hasIPv6AddressChange:
isEqualToWrapper:
reconnectWithLocalAddress:
radioAccessTechnology
handleCellularRATChange
manager:didPowerStateChange:
manager:linkDidConnect:
manager:linkDidDisconnect:
manager:didPairedDeviceChange:
cellularRadioAccessTechnologyDidChange:
cellularSoMaskDidChange:
triggerFixedInterfaceLinksDidConnect
injectFakePacketInBTLink:cbuuid:
flushBuffer:toDeviceUniqueID:cbuuid:
isConnectedToDeviceID:
triggerBTCorruptionRecoveryForCBUUID:
setRequireBT:
setShouldStartBTLinkManager:
createConnectionDataForDevice:localPartyID:dataReadyHandler:
processRemoteConnectionDataForDevice:remoteConnectionData:completionHandler:
startBTDatagramLinkForDeviceUniqueID:cbuuid:
stopBTDatagramLinkForDeviceUniqueID:cbuuid:
_addAllocateRequestForDevice:requestID:
handleAllocateRequestFailureForDevice:requestID:errorCode:
sendSKEData:skeData:completionHandler:
setDefaultUnderlyingLink:linkID:
setPacketNotificationFilter:linkID:uniqueTag:isEnabled:
dropIPPackets:linkID:payloadArray:
updateProtocolQualityOfService:linkID:isGood:
stopKeepAlive:linkIDs:
setWiFiAssistState:isWiFiAssistEnabled:
currentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
startLinkProbing:options:
stopLinkProbing:options:
queryLinkProbingStatus:options:
flushLinkProbingStatus:options:
setRemoteDeviceVersion:version:
getSessionInfo:relayGroupID:relaySessionID:options:
updateSessionParticipants:relayGroupID:relaySessionID:participants:
setIsOnPhoneCall:forDeviceID:
_handleNetworkChanges:
currentLinkType:andRATType:forDeviceID:
linkForCBUUID:
currentLinkType:
_getIDSLinkTypeString:
_handleWRMLinkRecommendation:
_subscribeToWRMForLinkRecommendation:
_unsubscribeFromWRMForLinkRecommendation
currentDefaultDeviceLinkType
_cbuuidToLinks
_deviceIDToCurrentLink
_deviceIDToUDPDestinations
_btLinkManager
_isCentral
_mayBringUpWiFi
_isWiFiBroughtUp
_shouldBringWiFiDown
_shouldKeepWiFiUp
_handshakeCounter
_WiFiBringUpCounter
_addressRetransmissionInterval
_requireBT
_shouldStartBTLinkManager
_deviceIDToAllocRequests
_deviceIDToGlobalLinkUp
_delayedDefaultDeviceAllocateRequest
_totalPacketsDropped
_previousPacketsDropped
_previousReportFileOpenTime
_minReportFileOpenTimeInterval
_reporterFile
_reporterFd
_isInternalInstall
_demoMode
_fixedInterface
_fixedInterfaceDestination
_hasFixedDestination
_reporterTimer
_dynamicStore
_cellularDataStatusListenerStarted
_defaultDeviceCbuuid
_doesDefaultDevicePreferInfraWiFi
_isDefaultDeviceUsingBTLink
_isDefaultDeviceNearby
_lastSentDefaultDeviceNearby
_lastSentDefaultDeviceConnectivity
_lastSentDefaultDeviceCloudConnectivity
_lastSentDefaultPeerConnectivity
_isDefaultDeviceOnPhoneCall
_hasDelayedNoConnectivityNotification
_localWiFiAddressUsedForDefaultDevice
_currentDefaultDeviceLinkType
SHA1HexString
uppercaseString
_newCompanionLinkClient
setDispatchQueue:
_handleDiscoveredDevice:
setDeviceFoundHandler:
_handleLostDevice:
setDeviceLostHandler:
_handleIncomingIDSMessageEvent:options:
registerEventID:options:handler:
activateWithCompletion:
publicIdentifier
setLocalDeviceUpdatedHandler:
sendEventID:event:destinationID:options:completion:
_companionLinkClientForDeviceIdentifier:completion:
_deviceWithIdentifier:error:
setDestinationDevice:
companionLinkClient
statusFlags
idsDeviceIdentifier
_isDiscoveredOverWiFi:
ttlCache
activeDevices
effectiveIdentifier
flags
setFlags:
setTtlCache:
_companionLinkClient
_discoveredDevices
_ttlCache
classStorageBecameAvailable:
_nonThreadSafeStopConnection
_isMagnetConnection
_inflightMessageCount
indexesOfObjectsPassingTest:
countForDataProtectionClass:
_sendingMessageCountForClass:
countForDataMessageType:
_sendingMessageCountForType:
_pendingOutgoingBytesForClass:
statistics
_isWiProxPeer
_startConnection
_nonThreadSafeIsConnected
_nonThreadSafeSocketOptions
suspendSocketWithOptions:
_connectivityChanged
_removeSocketPairMessage:localMessage:reason:detailedError:responseCode:
messages
_dequeueMessages
_startConnectionForContinuityPeer
resumeSocketWithOptions:shouldLogCall:
_clearLastFallbackWithReason:
_startNWConnectinForIPsecCase:controlChannelVersion:capabilityFlags:instanceID:serviceMinCompatibilityVersion:
_startAndSetupSocketPairConnection:capabilityFlags:instanceID:serviceMinCompatibilityVersion:socketDescriptor:
_sendSocketMessage:
pushMessage:
_removeMessageFromStatistics:
_checkAndStartConnection
initWithSocket:queue:delegate:priority:identifier:
_encryptDataWithOTR:token:
_decryptOTREncrtypedMessage:
_currentLink
_removeSocketPairMessage:localMessage:reason:responseCode:
enqueueMessage:
_resetFallbackTimeout:useNextFallback:
_startMessagesDequeueMessagesTimer
fireDate
_resetTimeout:
_handleBecomingEmptyForDataProtectionClass:
_handleBecomingEmpty
_handleBecomingEmptyOfCloudMessages
_clearSendingPowerAssertionWithReason:
_nanoConnectedFallbackTimeoutForService:
_nanoDisconnectedFallbackTimeoutForService:
_fallbackTimeoutForService:
_fallbackTimerFired
_messageIsAllowedToSendMessageOnTopic:
_performFallbackIfNecessary:
initWithIndex:
_timeoutTimerFired
initWithTimeInterval:name:shouldWake:target:selector:userInfo:useCurrentRunLoop:
_messageTimedOut:localMessage:
_inflightMessageCountForClass:
_shouldAWDLogMessage:
initWithService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
messageDeliveredForService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
wasWrittenToConnection
cancelMessageWithSequenceNumber:streamID:messageUUID:cancelReason:
_sendSocketMessage:ignoreSequenceNumber:
setWpConnectionErrorDomain:
setWpConnectionErrorCode:
setWpConnectionErrorUserInfo:
dequeueMessage:
setCancelled:
nonBluetoothAvailableForBundleId:
_invalidateMessagesDequeueTimer
supportsMessageOfType:
_inflightMessageCountForType:
nextSocketPairMessageNotOnServices:
checkServiceCompability:localMessage:
initWithIdentifier:timeout:
setStreamID:
setUseDynamicServiceName:
_nonBTAllowedForClientID:
duetIdentifiers
setMaxChunkSize:
setResumeResourceTransfers:
nextMessage
isDone
underlyingDataLength
_addOutgoingMessageSize:forTopic:dataProtectionClass:isResource:
initWithService:isToDefaultPairedDevice:messageSize:linkType:priority:
messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:
setWasWrittenToConnection:
setSequenceNumber:
_messageHasValidEncryptionStatus:
_sendEncryptedMessage:
_updateDictionary:addMessageSize:addMessageCount:
_addMessageSize:forTopic:direction:dataProtectionClass:isResource:
statisticsForDataProtectionClass:
_sendingMessageStatisticsForClass:
_dequeueMessagesTimerInterval
_dequeueMessagesTimerDidFire:
_requeueSendingMessage:
setSessionReady:
_requeueMessages:
startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
handleOTRNegotiationComplete:
addOTRSessionBlock:sessionBlock:key:
handleOTRNegotiationTimeout:
_processIncomingDataMessage:
OTREncryptData:OTRToken:priority:error:
cancelled
initWithVersion:encrypted:streamID:priority:sequenceNumber:fileXfer:data:
_sendOTREncryptedMessage:useEncryption:streamID:forPriority:flag:token:
publicKeyEncryptData:toDeviceID:priority:publicKeyType:completionBlock:
_sendPublicKeyEncryptedMessage:
isSessionReady:
_sendOTREncryptionQueue:streamID:
isSessionStoreAvailableForDataProtectionClass:
isUnderLock
fileXfer
_storeIncomingClassCDataMessageIfNeeded:topic:sequenceNumber:
hasMessagableOTRSessionForToken:
OTRDecryptData:OTRToken:priority:error:
_handleOTRDecryptionSuccess:
_storeIncomingClassADataMesageIfNeeded:topic:sequenceNumber:
_handleOTRDecryptionError:
publicKeyDecryptData:toDeviceID:priority:publicKeyType:completionBlock:
_decryptPublicKeyEncryptedMessage:completionBlock:
_flushMessagesAll:response:
initWithSequenceNumber:
_processMessage:withSequenceNumberBlock:
linkManager
pairWithFirst:second:
appendMessage:receiverError:
totalBytesReceived
resumeMessageWithSequenceNumber:streamID:messageUUID:nextByteOffset:
byteOffset
_resourceTransferUUIDAlreaadyReceived:
initWithMessage:resumeResourceTransfers:receiverError:
abortTransfer
setNextByte:
cancelReason
finalizedMessageDictionaryIfDone
_addIncomingMessageSize:forTopic:
initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:
messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:
_socketToNiceCommand:
_processDecryptedMessage:
_optionallyDecryptMessage:completionBlock:
_sendExpiredAckForMessage:
_dumpLogs
initWithReason:mappedStreamID:serviceName:
_sendAckForMessage:
isResponse
initWithProtobufData:type:isResponse:
_processIncomingResourceTransferMessage:messageUUID:streamID:topic:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:isDefaultPairedDevice:didWakeHint:
mappedStreamID
setOTRTestBlockFromCompletionBlock:token:
setDeviceBTUUID:
invalidateTimeoutTimer
_noteReceivedResourceTransferUUID:
maxQueueSize
isAlwaysConnected
supportsLegacyOTRSessionToken
_sendingMessages
_fallbackMessages
_statistics
_cumulativeOutgoingStatistics
_cumulativeIncomingStatistics
_tokenToOTREncryptionQueue
_tokenToOTRError
_dataProtectedIncomingMessages
_socketConnection
_openSocketCalled
_connectionSuspended
_timeoutTimer
_fallbackTimer
_dequeueTimer
_otrTokenIdentifier
_deliveryQueue
_sendingPowerAssertion
_rtt
_cachedBytes
_maxQueueSize
_lastFallback
_enabled
_needsHandshake
_isAlwaysConnected
_isCloudEnabled
_incomingResourceTransfers
_resettingIncomingResourceTransfers
_resumingIncomingResourceTransfers
_resumeResourceTransfers
_useSharedOTRSession
_useNamedOTRSessionToken
_supportsLegacyOTRSessionToken
_newServiceSupported
_supportDynamicServices
_supportDynamicServicesOptimization
_admissionDeniedTopics
_incomingServiceMapUpdateCounter
_supportedMessageTypes
_shouldAbortOnMissingTopic
_shouldUseNWFraming
_receivedResourceTransferUUIDs
_idsPriority
_cloudConnection
UTunConnection
registrationState
initWithPhoneNumber:phoneToken:
phoneToken
_phoneToken
isPNRSupported
_cancelScheduledHeartbeat
heartbeat
setInFlightHeartbeatBlock:
inFlightHeartbeatBlock
_cancelScheduledSMSTimeout
timedOutWaitingForSMS
setInFlightSMSTimeoutBlock:
inFlightSMSTimeoutBlock
setPNRDelegate:
loadNumberOfSuccessfulValidationSends
loadNumberOfPreflightAttempts
initWithCTPNR:preflightStackStore:HTTPDelivery:pushHandler:lockdownManager:systemMonitor:arbiter:systemAccountAdapter:
_clearSMSDeliveryTimeout
_deviceIDChangedNotification:
preflighStackStore
_getHighestPriorityMechanism
_errorCodeForRegistrationError:
_failPromisesWithError:
_fulfillPromisesWithPhoneNumber:token:
_validSIMStateForRegistration
isSIMReady
_scheduleHeartbeat:
_lockdownStateChanged:
handleRegistrationSMSSuccessfullyDeliveredWithTelephonyTimeout:
handleRegistrationSMSDeliveryFailed
handleIncomingSMSForResponse:
_smsDeliveryClear
_canDeliverSMSNow
_issueAsyncCoreTelephonyPhoneNumberValidationRequestWithPushToken:mechanism:
initWithPNRReason:mechanism:
PNRInfo
currentPreflightStack
_sendPreflightVerificationWithIMSI:PLMN:
_performHighestPriorityPreflightVerification
setCurrentPreflightStack:
_sendSMSVerificationWithMechanism:
arbiter
validationMode
preflightTestDataOverride
_notifyFailureWithError:
httpMessageDelivery
persistNumberOfPreflightAttempts:
_isPhoneNumberIdentificationSupported
_userHasDisabledSMSRegistration
_isAwaitingUserSelectionDuringSetup
_deviceCanRegisterPresently
userOptInRequired
_tryToSendSMSIdentification
_requestUserConsentForPhoneNumberValidationWithCompletion:
isValidationModeLegacy
maxAllowableNumberOfPreflightRequests
maxAllowableNumberOfSuccessfullySentVerifications
isValidationModeShortCircuitingPreflight
preflightShortCircuitMechanismOverride
_sendPreflightVerificationIfNeeded
handleRegistrationSMSDeliveryFailedWithShouldBypassRetry:
maxAllowableNumberOfValidationAttemptsWhileNoneHaveSentSuccessfully
_popHighestPriorityPreflightVerification
persistNumberOfSuccessfulValidationSends:
minimumIntervalBetweenValidationAttempts
_scheduleSMSTimeout:
_notifySuccess:
PNRReadyStateChanged:
PNRRequestSentWithRequestData:
PNRResponseReceivedWithResponseData:
_registrationControlStatus
_isUserSubscriptionSelectionStillPending
_registerForLockdownNotifications
_SIMSetupDidComplete
_setSMSDeliveryTimeout:
identifyPhoneNumberForRequestor:queue:
setHttpMessageDelivery:
setArbiter:
setPreflighStackStore:
CTPNR
setCTPNR:
setHandlers:
setRegistrations:
numberOfSuccessfulSends
setNumberOfSuccessfulSends:
numberOfAttemptsWithoutSuccessfulSend
setNumberOfAttemptsWithoutSuccessfulSend:
numberOfPreflights
setNumberOfPreflights:
isSMSWarningUp
setIsSMSWarningUp:
hasAcceptedSMSRequest
setHasAcceptedSMSRequest:
commCenterDead
setCommCenterDead:
needsToCheckPhoneNumberState
setNeedsToCheckPhoneNumberState:
didReceiveSIMSetupCompleteNotification
setDidReceiveSIMSetupCompleteNotification:
nextSendSMSDate
setNextSendSMSDate:
phoneNumberValidationStartDate
setPhoneNumberValidationStartDate:
smsSendDate
setSmsSendDate:
lastSendSMSTimer
setLastSendSMSTimer:
_requestors
_promises
_numberOfSuccessfulSends
_numberOfAttemptsWithoutSuccessfulSend
_numberOfPreflights
_isSMSWarningUp
_hasAcceptedSMSRequest
_phoneNumberValidationStartDate
_smsSendDate
_lastSendSMSTimer
_commCenterDead
_needsToCheckPhoneNumberState
_didReceiveSIMSetupCompleteNotification
_arbiter
_preflighStackStore
_inFlightHeartbeatBlock
_inFlightSMSTimeoutBlock
_CTPNR
_nextSendSMSDate
messageStoreForDataProtectionClass:
serverBagForBagType:
userIDArray
_submitGDRReponseToAWDWithResultCode:error:
initWithArray:copyItems:
_processStoredIncomingMessages
_hasReachedMaxNumberOfRetries:
_currentGetDependentRegistrationBlocks
_currentGetDependentRegistrations
_ftNetworkSupport
_sendMessageHandler
_messageResponseHandler
removeNegotiationTimer
performOTRSessionBlock:token:
initWithService:priority:duration:result:
OTRSessionNegotiation:priority:duration:result:
_handleNegotiationTimeout
initWithToken:
setNegotiationTimer
isNegotiating
setIsNegotiating:
isReady
setIsReady:
isSuspended
setIsSuspended:
lastStartTime
setLastStartTime:
negotiationCount
setNegotiationCount:
otrTestBlock
setOtrTestBlock:
_isNegotiating
_isReady
_isSuspended
_lastStartTime
_negotiationTimer
_negotiationCount
_otrTestBlock
performAsyncBlock:priority:
copyOTRTestBlock:
setSessionNegotiationStart:
sessionNegotiationCount:
_onQueueStartOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
setupNewSessionInfoWithToken:
sessionStartTimeWithToken:
setSessionNegotiationComplete:
isSessionNegotiating:
copySessionObjectForToken:
_reportOTRTestResult:setupTime:result:
_kickoffOTRNegotiationWithDevice:token:negotiationData:
_storageLock
_sessionStorage
_sessionInfoToToken
_priorityToCompletionBlocks
_priorityToTimeoutBlocks
setWasPrimary:
setStartTime:
messageCount
setMessageCount:
setEndTime:
endTime
startTime
linkType
wasPrimary
noteServerStorageStateMachineEndedFor:linkType:wasPrimary:timeTaken:numberProcessed:
dictionaryMetric
setLinkType:
_wasPrimary
_startTime
_endTime
_messageCount
setUseDictAsTopLevel:
setDataToEncrypt:
_publicDataRepresentationForGroup:completion:
_sendAheadGroup:withContext:
initWithProtectionSpace:
addServiceSignatures:
serviceSignaturesCount
clearServiceSignatures
serviceSignaturesAtIndex:
serviceSignaturesType
serviceSignatures
setServiceSignatures:
_serviceSignatures
loadStoreForDataProtectionClass:
_saveNow
postNotificationName:object:userInfo:
__saveStoreForDataProtectionClass:
OTRStore
_purgeMap
_objectForKey:
_setObject:forKey:
_setSaveTimer
_removeObjectForKey:
_daemonWillShutdown:
sessionKeyForToken:
storeSessionKey:token:
_sessionKeyStorage
_saveCancelBlock
_saveEnqueueBlock
_isClassDStoreAvailable
_isClassCStoreAvailable
_isClassAStoreAvailable
_changedSinceLastSave
isFinished
isBeingHandedOff
_addRemotePacketOutage
_numberOfOutagesSinceInterval:
relayInitiate
setRelayInitiate:
relayUpdate
setRelayUpdate:
relayCancel
setRelayCancel:
callID
setCallID:
setIsBeingHandedOff:
remoteICEData
setRemoteICEData:
localICEData
setLocalICEData:
localSKEData
setLocalSKEData:
remoteSKEData
setRemoteSKEData:
localCallInfoData
setLocalCallInfoData:
remoteCallInfoData
setRemoteCallInfoData:
localCN
setLocalCN:
peerCN
setPeerCN:
localNATType
setLocalNATType:
remoteNATType
setRemoteNATType:
localNATIP
setLocalNATIP:
remoteNATIP
setRemoteNATIP:
isAudioPaused
isVideoPaused
setIsVideoPaused:
isReinitiate
setIsReinitiate:
localConnectionType
setLocalConnectionType:
remoteConnectionType
setRemoteConnectionType:
inviteNeedsDelivery
setInviteNeedsDelivery:
_relayInitiate
_relayUpdate
_relayCancel
_remoteNATIP
_localNATIP
_remoteICEData
_localICEData
_localCN
_peerCN
_localNATType
_remoteNATType
_callID
_isBeingHandedOff
_isAudioPaused
_isVideoPaused
_isReinitiate
_localConnectionType
_remoteConnectionType
_remotePacketOutageTimes
_inviteNeedsDelivery
_localSKEData
_remoteSKEData
_localCallInfoData
_remoteCallInfoData
copyIdentity
newRemoteCredential
currentTime
currentDate
_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:
_sendIDStatusChanges:forService:URI:success:error:
initWithShouldAllowProxyQueries:peerIDManager:userDefaults:statusDepencencyProvider:
sortedArrayUsingComparator:
timeToCacheURI:fromURI:service:forStatus:
timeToCacheResultsForIDStatus:forService:
_URIFromFZIDType:
_IDStatusForURI:fromService:
cachedIDStatusForID:fromURI:fromService:
_lookupDateForURI:fromService:
_validExpiryForURI:fromService:
_negativeTTLForURI:fromService:
_cachedResultsForURIs:fromURI:fromService:
requestIDStatusForURIs:service:lightQuery:allowQuery:completionBlock:
_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:completionBlock:
requestIDStatusForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:completionBlock:
cachedIDStatusForID:fromURI:fromService:respectExpiry:
endpointsForURIs:service:fromURI:ignoringTTL:
_saveCache
_loadCache
_pruneExpiredStatusUnknownEntries
noteIncomingID:fromService:
hasValidStatusForURI:fromURI:fromService:
requestIDStatusForID:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
setCachedIDStatus:ForID:fromURI:fromService:
currentCache
currentCacheForService:
remoteDevicesForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
dependencyProvider
setDependencyProvider:
allowProxyQueries
setAllowProxyQueries:
_idStatusCache
_startQueryDate
_numQueriesThisHour
_allowProxyQueries
_dependencyProvider
_shouldSubmitMetricsBasedOnDate:isInitiator:
initWithCalendarIdentifier:
setTimeZone:
components:fromDate:
hour
minute
_shouldSubmitMetricsForThisSession
initWithGuid:protocolVersionNumber:serviceName:clientType:
initWithGuid:numberOfRecipients:
initWithGuid:
initWithGuid:numberOfRecipients:remoteSessionEndReason:
validNetworkEnabled
validNetworkActive
validNetworkReachable
initWithGuid:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isScreenSharingSessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
natType
connectionType
initWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
submitAWDMetricsForIDSSessionInvitationSentWithNumberOfRecipients:
submitAWDMetricsForIDSSessionCancelSentWithRemoteEndReason:numberOfRecipients:
submitAWDMetricsForIDSSessionCancelReceived
submitAWDMetricsForIDSSessionDeclineSent
submitAWDMetricsForIDSSessionDeclineReceived
submitAWDMetricsForIDSSessionAcceptSent
submitAWDMetricsForIDSSessionAcceptReceived
_checkAndUpdateDBIfRequiredForClass:
internalMigrationVersionOnDatabase
liveMigration
markLocalDestinationDeviceUUIDForAccounts:deviceUUID:
updateInternalMigrationVersionOnDatabaseWithValue:
migrateClassD
initWithPushPayload:
copyHandlersForEnumerating
commandToHandlerBlock
_updateListenerIfNeeded
registered
_registeredForPush
_isListening
timeToCacheNegativeResultsForService:
timeToCacheUnknownResultsForService:
_publicLegacyIdentityData
_publicNGMIdentityData
_publicNGMPrekeyData
_NGMVersion
interface
invalidationHandler
initWithQueue:takingOverAndResumingConnection:
setClientConnection:
errorForMissingEntitlement:
collaboratorProvider
reunionSyncCollaborator
setReunionSyncCollaborator:
pairingCollaboratorWithCompletion:
pairedDeviceManagerCollaboratorWithCompletion:
reunionSyncCollaboratorForClientProcessName:withCompletion:
opportunisticCollaboratorWithCompletion:
registrationCollaboratorWithCompletion:
activityMonitorCollaboratorWithCompletion:
interalTestingCollaboratorWithCompletion:
setCollaboratorProvider:
_clientConnection
_invalidationHandler
_collaboratorProvider
_reunionSyncCollaborator
getAllocation
addAllocation:
_allocations
_nextIndex
initWithTimer:
_timer
initQRStreamInfo:subscribedStreams:generationCounter:maxConcurrentStreams:
requestIDStr
IDSSessionID
setPurgeAtExpiration:
_allocationTimeout
cancelAllocationTimeoutTimer
recipients
provider
allocateProtocolVersion
appID
initWithType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
IDSQuickRelayEventType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
_purgeAllocation
responses
invalidateAllocation:
initWithRequest:
initWithResponse:
setRequestIDStr:
sessionIDStr
setSessionIDStr:
request
setRequest:
setResponses:
pushTokenToQRSessionID
setPushTokenToQRSessionID:
recipientPushToken
setRecipientPushToken:
duration
setDuration:
sharedSessionHasJoined
setSharedSessionHasJoined:
connectReadyHandler
setConnectReadyHandler:
isJoinAllocation
setIsJoinAllocation:
streamInfo
setStreamInfo:
_requestIDStr
_sessionIDStr
_request
_responses
_pushTokenToQRSessionID
_recipientPushToken
_duration
_sharedSessionHasJoined
_connectReadyHandler
_selfAllocations
_streamInfo
_isJoinAllocation
initWithResponse:cleanupTime:
_response
_cleanupTime
_setSessionInfoRequiredKeys
init:
setRecipients:
_uuidFromNSStringToNSData:
setIDSSessionID:
setSenderURI:
setAppID:
setAllocateType:
setActiveRelaySessionToken:
setActiveRelayIP:
setAllocateProtocolVersion:
setIsSharedSession:
setTestOptions:
setPreviousAccessToken:
setPreviousRelayIP:
setPluginRequests:
setGroupMemberCount:
setExistingRelayIP:
setExistingRelaySessionToken:
setExistingRelaySignature:
setSenderExternalIP:
setSelfAllocationCount:
setInvitationRetryCount:
setInfoAttribute:
QRAllocator_oversized
_sendAllocateRequest:
_addAllocationForSession:allocation:
_getIDSAWDLoggingInstance
_startQRConnectionWithDefaults:
_setupNewAllocation:sessionID:isSessionIDRemoteDeviceID:fromIdentity:fromURI:fromService:options:connectReadyHandler:withPreferredLocalInterface:forAdditionalAllocation:
_parseQuickRelayDefaults:gropuID:
_getResponseFromQRGroupID:
_createSessionInfoFromResponsePayload:
hasParticipantID:participantID:
_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:
_setResponseForQRGroupID:groupID:
_notifyParticipantID2PushTokenMappingChange:
_shouldUseCurrentResponse:cachedMessage:
_addConnectStatus:relaySessionID:previousTime:qrReason:previousError:previousRelayIP:previousAccessToken:
_handleIncomingAllocateResponse:isFromCache:requestOptions:
_findAllocationListForSessionID:
_dispatchIncomingAllocateResponse:isFromCache:requestOptions:
_queryPolicy
_storeMappingFromPushTokenToURIs:fromID:service:cert:forGroup:
UUID
_getSelfAllocationFromCache:
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:withPreferredLocalInterface:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:
_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock:
_startQRConnectionForSession:isInitiatorsAcceptedSession:withLocalInterfacePreference:
_getPushTokenFromParticipantID:participantID:
_filterSelfAllocationsForSessionID:
_getGroupID:
senderURI
getPushTokenForRelaySessionID:relaySessionID:
_findAllocationForSessionID:requestIDStr:
_isDuplicateResponse:newResponse:
_addResponseToCache:sessionInfo:modifiedMessage:
_isJoinRequestInProcess:
_processSelfAllocations:allocation:
_uriToParticipantID:
_startCleanupTimer
requestID
senderExternalIP
relaySoftwareVersion
_getCombinedSoftwareID:
relayPort
relayIP
relayIPv6
relaySessionToken
infoAttribute
reportingDataBlob
relaySessionKey
relayExpiryTimeStamp
initWithDouble:
_getErrorCodeFromAllocationStatus:
requestLength
initWithDuration:result:hasRecipientAccepted:payloadSize:topic:service:
IDSQRAllocation:result:hasRecipientAccepted:payloadSize:topic:service:
_hasSessionInfoRequiredKeys:
_sendAWDMetricsForAllocation:status:hasRecipientAccepted:
allKeysForObject:
_invalidateSession:isExpiryPurging:
_removeAllAllocationsForSessionID:
_discardAllocation:
allocateType
initWithBase64EncodedString:options:
_processAllocationStatusResult:
_getResponse:relaySessionID:
_sendKeepAliveRequest:
_cleanupResponses
setupNewAllocationToDevice:options:connectReadyHandler:
_getResponseForQRSessionID:sessionID:index:
getPushTokensFromParticipantIDs:participantIDs:
_getStatusMessageFromStatusCode:
setInitiatorsAcceptedToken:pushToken:
getCountOfPendingRecipientsAcceptedSessions
getCountOfSessionToAllocations
_requestIDToSession
_sessionToAllocations
_sessionInfoRequiredKeys
_pendingRecipientsAcceptedSessions
_initiatorsAcceptedSessionsWithToken
_requestIDToAllocateTime
_allocateResponses
_requestIDToPreferredLocalInterface
_responseCleanupTimer
_pushTokenToURIForGroup
_idsSessionIDToqrSessionID
QRAllocator
setAttempts:
_run
attempts
_isFinishedBlock
setScheduledBlock:
backoffProvider
_deferToQueue:after:block:
setBackoffProvider:
scheduledBlock
_backoffProvider
_attempts
_scheduledBlock
phoneNumberValidationMode
isCarrierInstall
isPrefightEnabledByServerBag
SMSLessMechanism
SMSMechanismWithContext:
phoneNumberValidationPreflightTestData
isValidationModeUsingPreflight
allowAnyNetwork
nonWifiFaceTimeAvailable
mapArray:onQueue:withBlock:completion:onQueue:
mapDictionary:onQueue:withBlock:completion:onQueue:
mapArray:withBlock:completion:onQueue:
mapDictionary:withBlock:completion:onQueue:
shouldQueryUpdateOfParams:
shouldHandleMessageWithUpdateHash:command:
responseCertificateData
setResponseCertificateData:
_responseCertificateData
startAdvertising:
nanoRegistryPluginManager
stopAdvertising
retrievePeripheralsWithIdentifiers:
connectPeripheral:options:
initWithDelegate:queue:
unregisterEndpoint:
_connectNow
cancelPeripheralConnection:
peer
initWithPipe:useSkywalkChannel:withDeviceUniqueID:cbuuid:
stringByAppendingFormat:
startDatagramLinkWithEndpointIdentifier:
stopDatagramLinkWithEndpointIdentifier:
registerEndpoint:type:priority:options:
_advertiseNow
_stopAdvertising
centralManagerDidUpdateState:
centralManager:willRestoreState:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didConnectPeripheral:
centralManager:didFailToConnectPeripheral:error:
centralManager:didDisconnectPeripheral:error:
centralManager:connectionEventDidOccur:forPeripheral:
centralManager:didUpdateANCSAuthorizationForPeripheral:
peripheralManagerDidUpdateState:
peripheralManager:willRestoreState:
peripheralManagerDidStartAdvertising:error:
peripheralManager:didAddService:error:
peripheralManager:central:didSubscribeToCharacteristic:
peripheralManager:central:didUnsubscribeFromCharacteristic:
peripheralManager:didReceiveReadRequest:
peripheralManager:didReceiveWriteRequests:
peripheralManagerIsReadyToUpdateSubscribers:
peripheralManager:didPublishL2CAPChannel:error:
peripheralManager:didUnpublishL2CAPChannel:error:
peripheralManager:didOpenL2CAPChannel:error:
scalablePipeManagerDidUpdateState:
scalablePipeManager:didRegisterEndpoint:error:
scalablePipeManager:didUnregisterEndpoint:
scalablePipeManager:pipeDidConnect:
scalablePipeManager:pipeDidDisconnect:error:
startDatagramLinkWithName:
stopDatagramLinkWithName:
isPoweredOn
idsNRPluginManager
setIdsNRPluginManager:
_centralManager
_peripheralManager
_pipeManager
_pipePeripheral
_pendingPipes
_pipePeripheralUUIDString
_pipeRegistered
_useSkywalkChannel
_linkIDToDatagramLink
_isPipeConnectingOrConnected
_managerQueue
_isPoweredOn
_datagramPipeRegistration
_idsNRPluginManager
_criticalIsCountingDown
initWithTimeInterval:
startCountingDown
isCountingDown
_startDateMutex
_timeInterval
nrDevicePreferences
servicesPreferringInfraWiFi
_reportPreferInfraWiFiToPowerLogs:
quickRelayRequestsCount
setQuickRelayRequestsCount:
setServicesPreferringInfraWiFi:
setNrDevicePreferences:
_quickRelayRequestsCount
_nrDevicePreferences
spamMessages
responseSpamMessages
setResponseSpamMessages:
_spamMessages
_responseSpamMessages
initWithPeerIDManager:registrationKeyManager:OTRController:publicKeyStorage:accountController:queueManager:failedTokenCache:
_builderAvoidMainQueue:forceLegacy:
_decryptData:encrypter:pkType:isRetry:priority:replayKey:completion:
_encryptData:encrypter:priority:completion:
encryptData:onQueue:error:
decryptData:onQueue:error:
performSyncBlock:priority:
publicKeyDecryptData:fromEndpoint:pkType:priority:error:
publicKeyDecryptData:fromEndpoint:pkType:priority:replayKey:completionBlock:
logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:
logRemoteDecryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:
failedTokenCache
setFailedTokenCache:
queueManager
setQueueManager:
_failedTokenCache
_queueManager
OTRToken
_OTRToken
stopCallID:
connectionInfoWithState:
initForReadingFromData:error:
setDecodingFailurePolicy:
_enableStrictSecureDecodingMode
finishDecoding
initializeNewCall
setPeerCN:callID:
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
setPeerProtocolVersion:forCallID:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:error:
sendData:forCallID:encrypted:
connectionInfoForCallID:
bestCallID
receivedRemoteConnectionData:
createConnectionData:handler:
startConnectionAsInitiator:peerProtocolVersion:errorHandler:
localCell
remoteCell
_connectionInfos
_connType
_localCell
_remoteCell
_connectionActive
_connectionEnableAudio
conference:updateInputFrequencyLevel:
conference:updateOutputFrequencyLevel:
conference:receivedNoRemotePacketsForTime:callID:
conference:didReceiveData:forCallID:
conference:withCallID:remoteMediaStalled:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:updateInputMeterLevel:
conference:updateOutputMeterLevel:
conference:receivedFirstRemoteFrameForCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteAudioPaused:callID:
conference:remoteVideoPaused:callID:
serverDiedForConference:
conference:inititiateRelayRequest:requestDict:
conference:sendRelayUpdate:updateDict:
conference:cancelRelayRequest:requestDict:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:networkHint:
conference:localIPChange:withCallID:
conference:didStartSession:withCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:withCallID:isSendingAudio:error:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:didReceiveARPLData:withCallID:
conference:didChangeLocalVariablesForCallID:
conference:remoteAudioEnabled:forCallID:
conference:localAudioEnabled:forCallID:error:
conference:remoteCallingModeChanged:forCallID:
conference:reinitializeCallForCallID:
conference:closeConnectionForCallID:
conference:isRemoteAudioBelowThreshold:
initRequiringSecureCoding:
encodedData
setIsKeyExchangeEnabled:
setIsAudioEnabled:
setIsVideoEnabled:
setIsDTLSEnabled:
IDSRealTimeEncryptionServiceName:activeParticipants:missingPrekeys:
IDSRealTimeEncryptionServiceName:activeParticipants:firstReceivedPacketMKMtimeDelta:
_accessToken
accessoryID
pairingToken
setResponseAdminAcccessToken:
setResponseExpiry:
setResponseAccessoryID:
_accessoryID
_pairingToken
_responseAccessoryID
_responseAdminAcccessToken
_responseExpiry
_successful
_hasRegisteredContainer
_hasUnregisteredContainer
_registeredKeychainError
_unregisteredKeychainError
_registeredDeserializationError
_unregisteredDeserializationError
_generationError
_rollingError
_identityToRegisterError
_shouldHaveRegisteredIdentity
_shouldHaveUnregisteredIdentity
errorContainer
missingPrekey
missingIdentity
_missingIdentity
_missingPrekey
_errorContainer
getLocalDeviceInfoWithCompletion:
getPairedDeviceInfoWithCompletion:
_sendInvitationWithOptions:data:declineOnError:
_sendInvitationMessageToDestinations:withOptions:contextData:declineOnError:connectionData:
preferences
_setLinkPreferences:
quickRelaySessionToken
publicIdentityDataFromLocalFullIdentity
setSSRCSend:
SSRCSend
setSeqSendStart:
seqSendStart
setInviteSentTime:
_sendCancelInvitationToDestinations:withData:
setStartConnectingDate:
remoteBlob
setConnectionTimer
_sendAcceptMessageWithContext:connectionData:
setDisableRemoteDeviceEncryption:
remoteAssumeRemoteDeviceEncryption
localBlob
useStunMICheck
initWithBytesNoCopy:length:deallocator:
SSRCRecv
seqRecvStart
setEncryptionInitialized:
destinationIsGuestDevice:
publicIdentityFromData:
setPeerProtocolVersion:
setUseStunMICheck:
setUseSecureQRControlMessage:
_isLocalDeviceSafeviewAdviserInitiatorOnLoboMacOrLaterAndRemoteDeviceIsPreTiboAnyPlatform
_isValidDestination:
setRemoteAssumeRemoteDeviceEncryption:
_remoteAssumeRemoteDeviceEncryption
_seqRecvStart
_SSRCRecv
_seqSendStart
_SSRCSend
_preferences
_quickRelaySessionToken
_remoteBlob
qSetupSeal
updateGroup:withParticipants:sharedApplicationData:completion:
createGroupWithParticipants:sharedApplicationData:completion:
fetchGroupWithGroupID:completion:
_groupFromPublicDataRepresentation:completion:
_participantsForCypher:completion:
_validateCachedGroup:isParentOfGroup:completion:
fetchLatestGroupWithStableID:completion:
_messagesGroupContextWithCompletion:
_fetchAllLocalKnownGroups:
_dropLocalCache:
_dropLocalCacheForGroupID:compeltion:
_noteRegistrationIdentityUpdate
messagesGroupContext
initWithAccountKey:deviceKey:
initWithAccountIdentity:dataSource:queue:
fileURLWithPath:
initOnDiskCacheWithContainerURL:Queue:
loadWithCompletion:
qGroupContextWithDeviceIdentity:completion:
setMessagesGroupContext:
_messagesGroupContext
servicePushTopic
setServicePushTopic:
serviceDuetIdentifiers
setServiceDuetIdentifiers:
serviceAdHocType
setServiceAdHocType:
serviceIsDSBased
setServiceIsDSBased:
serviceWantsReflectedSend
setServiceWantsReflectedSend:
serviceAllowProxyDelivery
setServiceAllowProxyDelivery:
serviceAllowLocalDelivery
setServiceAllowLocalDelivery:
serviceAllowWiProxDelivery
setServiceAllowWiProxDelivery:
serviceAllowLiveMessageDelivery
setServiceAllowLiveMessageDelivery:
serviceUseiMessageCallerID
setServiceUseiMessageCallerID:
serviceWantsTinkerDevices
setServiceWantsTinkerDevices:
silentlyFailMessagesOnSwitch
setSilentlyFailMessagesOnSwitch:
shouldProtectTrafficUsingClassA
setShouldProtectTrafficUsingClassA:
shouldAllowCloudDelivery
setShouldAllowCloudDelivery:
setShouldAllowLiveMessageDelivery:
setAccountType:
primaryRegistrationDSHandle
setPrimaryRegistrationDSHandle:
primaryRegistrationURIs
setPrimaryRegistrationURIs:
setIsRegistrationActive:
defaultPairedDependentRegistrations
setDefaultPairedDependentRegistrations:
appleIDPrimaryDependentRegistrations
setAppleIDPrimaryDependentRegistrations:
setAliasStrings:
accountDescription
setAccountDescription:
accountDisplayName
setAccountDisplayName:
listenerID
setListenerID:
entitlements
setEntitlements:
shouldIncludeDefaultDevice
setShouldIncludeDefaultDevice:
_serviceIsDSBased
_serviceWantsReflectedSend
_serviceAllowProxyDelivery
_serviceAllowLocalDelivery
_serviceAllowWiProxDelivery
_serviceAllowLiveMessageDelivery
_serviceUseiMessageCallerID
_serviceWantsTinkerDevices
_silentlyFailMessagesOnSwitch
_shouldProtectTrafficUsingClassA
_shouldAllowCloudDelivery
_shouldAllowLiveMessageDelivery
_shouldIncludeDefaultDevice
_serviceAdHocType
_accountType
_servicePushTopic
_serviceDuetIdentifiers
_primaryRegistrationDSHandle
_primaryRegistrationURIs
_dependentRegistrations
_defaultPairedDependentRegistrations
_appleIDPrimaryDependentRegistrations
_accountDescription
_accountDisplayName
_listenerID
_entitlements
_subService
sessionForceInternetInvitation
localizedCaseInsensitiveContainsString:
liveMessageDelivery
metricReportIdentifier
localDelivery
accountUUID
setFinalDestinations:
_sendRemotelyWithSendParameters:data:protobuf:willSendBlock:completionBlock:
enforceRemoteTimeouts
localDestinationDeviceUUID
substringToIndex:
originalfromID
message
checkpointTrace
setUncompressedMessageSize:
setCompressedMessageSize:
setUncompressedData:
bulkedPayload
useDictAsTopLevel
encryptPayload
bypassSizeCheck
_splitDestinations:intoLocalDestinations:remoteDestinations:threadContext:sendParameters:
_sendLocallyWithSendParameters:service:uriToLocalDestination:data:protobuf:threadContext:progressBlock:completionBlock:
setIsProxiedOutgoingMessage:
setGroupData:
defaultPairedDeviceDestination
sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:
setCheckpointTrace:
canUseLargePayload
shouldAllowProxyDelivery
allowLocalDelivery
allowWiProxDelivery
wantsLocalReflectedSend
shouldSilentlyFailMessagesOnSwitch
_splitDestinations:intoLocalDestinations:remoteDestinations:rapportDestinations:sendParameters:
_sendLocallyWithSendParameters:uriToLocalDestination:data:protobuf:completionBlock:
_rapportSendWithSendParameters:completionBlock:
sessionID
commandContext
dictionaryRepresentationWithUncompressedData
homeKitPayload
finalDestinations
interestingRegistrationProperties
requireAllRegistrationProperties
requireLackOfRegistrationProperties
setRequireAll:
setLackAll:
setInteresting:
requireAll
lackAll
interesting
sendOnePerToken
allowPartialSendsToSucceed
fakeMessage
disallowRefresh
displayIDs
devicesHashForURI:andService:
_sendMessageWithSendParametersOnMainThread:filteredDestinations:data:compressedData:protobufToSend:willSendBlock:completionBlock:
setBulkedPayload:
setDisallowRefresh:
newSendMessageContext
sendServerMessage:command:completionBlock:
decryptMessageData:myURI:fromURI:token:groupID:encryptionType:isLiveRetry:replayKey:completionBlock:
shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:
addUris:
urisCount
clearUris
urisAtIndex:
urisType
hasKtLoggableData
ktLoggableData
_ktLoggableData
_deviceIdentifierKeychainID
hasAllEncryptionKeys
regenerateDeviceIdentifier
_localDeviceIdentifier
forceLegacyPK
endpoint
setEndpoint:
setForceLegacyPK:
fullDeviceIdentityEncrypter
setFullDeviceIdentityEncrypter:
_forceLegacyPK
_endpoint
_fullDeviceIdentityEncrypter
_isUsingAccount:
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:
cleanUpExpiredMasterKeyMaterial
createKeyMaterialForGroup:sessionID:
_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:
_localDevicePushToken
_sendKeyMaterialsToGroup:sessionID:toSpecificMembers:shouldIncludeCachedPeerKeyMaterial:
_pruneInvalidAndLocalPushTokensFromTokens:
_sendRenewedPrekeysToGroups
sendMKMRecoveryRequestToDevice:fromID:groupID:sessionID:
_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest
isTestRunning
setIsTestRunning:
_dispatchRenewPrekeyTimer
removeExpiredPrekeys
setPublicIdentityData:
_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:remoteToken:previousRemotePublicKey:newRemotePublicKey:
publicIdentityData
sendPendingKeyMaterialsToGroup:sessionID:forDevice:fromID:
sendKeyMaterialsToWaitingParticipantsForGroup:sessionID:
sendPrekeyRequestToDestination:group:sessionID:
_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:completion:completionBlock:
createdAt
predicateWithBlock:
_stopMkmRollTimer
_handleMkmRollTimer
_handleMkmExpirationTimer
_stopMkmExpirationTimer
_locked_ensureGroupMasterKeyMaterialCacheForGroup:
initWithMKM:MKS:MKI:groupID:
initWithIndex:groupID:
isSentToClient
setIsSentToClient:
_startMkmRollTimer:block:
_startMkmExpirationTimer:block:
masterKeyMaterialForGroup:
isGeneratedLocally
_protectedCachedKeyMaterialsForDestination:pushToken:forGroup:outURIs:includePeers:
sendKeyMaterialsToLocal:sessionID:
_noteKeyMaterialDidSendToDestination:groupID:withSuccess:
sentToDevice:
resetDevicePrekey
rollNewKeysAfterResettingPrekeysForGroups:withReason:
timerWithTimeInterval:repeats:block:
didReceiveEndpointsUpdate:forGroup:sessionID:
participantPushToken
_isValidPushToken:
participantURI
destinationWithDestinations:
_startMKMRecovery
realTimeEncryptionPublicKeyDataForDevice:
sendPrekeyRequestToGroup:sessionID:
_storePendingKeyMaterial:forDevice:
activeParticipantsForGroup:
_realtimeEncryptionQueue
_isInternal
_shouldBroadcastAllValidMkMs
_mkmAcknowledgementTimeout
_preKeyRequestDelayDuration
_prekeyExpireDuration
_previousPrekeyExpireDuration
_mkmExpireDuration
_mkmRollDuration
_MKMRecoveryRetryCount
_isMKMRecoveryRunning
_isDeferredPrekeyRequestPending
_initialKeyMaterialDistributionTimeoutBlock
_mkmRollTimer
_mkmExpirationTimer
_mkmRollBlock
_mkmExpirationBlock
_accountIDs
_fromIDs
_identityForDevice
_previousIdentityForDevice
_prekeyAckCountForGroup
_publicKeyForDevice
_groupIDToKeyMaterialCache
_membersForGroup
_participantsForGroup
_participantsWaitingForKeyMaterials
_participantsWaitingForInitialKeyMaterials
_endpointSubscriptionForGroup
_lastKnownGroupIDToPushTokens
_lastKnownAccountIDToPushTokens
_pendingMasterKeyMaterials
_endpointUpdateTimer
_isTestRunning
accessoryIDs
adminID
expiry
setExpiry:
setResponseConsentTokens:
_accessoryIDs
_adminID
_expiry
_responseConsentTokens
setAccountGUID:
setGuid:
setAlternateGUID:
setForcedLocal:
setStoredSize:
setMainAccountGuid:
setLocalDestinationDeviceUUID:
setEnqueuedDate:
setLiveMessageDelivery:
setSent:
setWantsProgress:
accountGUID
forcedLocal
setAlternateCallbackID:
mainAccountGuid
setMainAccountUUID:
wantsProgress
initWithMessage:data:protobuf:fromID:toDestinations:accountGUID:useDictAsTopLevel:dataToEncrypt:encryptPayload:compressPayload:wantsResponse:expirationDate:enforceRemoteTimeouts:command:wantsDeliveryStatus:deliveryStatusContext:messageUUID:priority:guid:alternateGUID:identifier:forcedLocal:peerResponseIdentifier:expectsPeerResponse:wantsAppAck:fireAndForget:nonWaking:nonCloudWaking:storedSize:duetIdentifiersOverride:bypassDuet:mainAccountGuid:localDestinationDeviceUUID:enqueuedDate:messageType:alwaysSkipSelf:pushPriority:queueOneIdentifier:liveMessageDelivery:requireBluetooth:requireLocalWiFi:sent:wantsProgress:ignoreMaxRetryCount:wantsCertifiedDelivery:originalTimestamp:
canCombineWithMessage:
combineWithMessage:
copySendParameters
storedSize
enqueuedDate
sent
combinedMessages
_message
_destinations
_accountGUID
_useDictAsTopLevel
_dataToEncrypt
_encryptPayload
_wantsResponse
_deliveryStatusContext
_alternateGUID
_forcedLocal
_storedSize
_enforceRemoteTimeouts
_liveMessageDelivery
_sent
_wantsProgress
_ignoreMaxRetryCount
_originalTimestamp
_mainAccountGuid
_localDestinationDeviceUUID
_enqueuedDate
_combinedMessages
setIsLocal:
initWithMessage:fromID:topic:guid:isLocal:
isLocal
_isLocal
getOrCreateMessageStoreForDataProtectionClass:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:messageTypes:
unsentUrgentAccountUUIDsForMessageTypes:
messageStores
allOutgoingMessagesPendingDeleteWithLimit:
outgoingMessagesWithEnqueueDateOlderThan:notToDestinationDeviceID:andLimit:
setGUID:
deletePostponedMessages:classDDatabase:
deleteIncomingMessageWithGUID:
clearStatementCache
performBlock:
deleteExpiredIncomingMessagesOlderThan:withLimit:
deleteOutgoingMessageWithGUID:alternateGUID:classDDatabase:
incomingMessagesUpToLimit:messageTransportType:success:
unsentOutgoingMessagesUpToLimit:priority:wantsPayload:localDestinationDeviceID:
unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:
markAllOutgoingMessagesAsUnsent
markAllOutgoingMessagesAsUnsentForLocalDestination:
databaseSizeInMB
largestPayloadSizeAccountUUID
allOutgoingMessagesByGUID:
allOutgoingMessagesOnAccountGUID:localDestinationDeviceID:
allExpiredOutgoingMessages:
uniqueAccountGUIDsForUnsentOutgoingMessages:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:hardLimit:
allUnsentOutgoingMessagesForAccounts:priority:localDestinationDeviceID:hardLimit:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:wantsPayload:messageType:success:
checkpointAndVacuumDB
initWithDataProtectionClass:
initWithDatabase:
performBlock:waitUntilDone:
SHA256Data
storeInMessageStore
_incomingMessageIdentifierForMessageUUID:messagePayload:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:checkpointTrace:isLocal:dedupBehavior:completionBlock:
_createOutgoingMessageRecordsFromSQLRecords:includeMessagePayloads:
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:messageTypes:
bypassStorage
storeInDatabase
daemonDeathResend
alternateCallbackID
mainAccountUUID
longValue
sendToClient
_clearDatabaseCloseTimer
__closeDatabase
closeDatabase
_setDatabaseCloseTimer
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:withMessageTypes:
unsentUrgentAccountUUIDsWithDataProtectionClass:withMessageTypes:
deletePostponedMessages
deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:
deleteOutgoingMessageWithGUID:alternateGUID:
markOutgoingMessagesAsUnsentIncludingClassD:
databaseSizeBiggerThanThreshold:
largestEnquedMessagesAccountUUIDOverThreshold:
deleteAllMessagesWithAccountGUID:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:
checkpointAndVacuumDBWithDataProtectionClass:
_performInitialHousekeeping
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:isLocal:dedupBehavior:completionBlock:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:checkpointTrace:dedupBehavior:completionBlock:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:dedupBehavior:completionBlock:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:messageTypes:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:
duetIdentifiersOverrideForAccountWithGUID:priority:
largestEnquedMessagesAmountAccountUUID
storeOutgoingMessageWithSendParameters:guid:canSend:canBypassSimilarMessages:fromQueue:completionBlock:
markOutgoingMessageWithGUID:asSent:
performBlock:afterDelay:
_recursiveLock
_databaseCloseTimer
_databaseLastUpdateTime
_database
_checkpoints
_mutex
_messageStores
IDSMessageStore
setRequestID:
activeRelayIP
activeRelaySessionToken
existingRelayIP
existingRelaySessionToken
existingRelaySignature
setRelayIP:
setRelayPort:
setRelayIPv6:
setRelaySessionToken:
setRelaySessionKey:
setRelayExpiryTimeStamp:
setRelaySoftwareVersion:
inferredExternalIP
setInferredExternalIP:
setProvider:
isSharedSession
previousAccessToken
previousRelayIP
testOptions
invitationRetryCount
groupMemberCount
selfAllocationCount
pluginAllocations
setPluginAllocations:
setErrorCode:
errorMessage
setErrorMessage:
additionalInternalHeaders
_recipientDataSize
setProtocol:
setReportingDataBlob:
_requestID
_allocateType
_IDSSessionID
_senderURI
_recipients
_activeRelayIP
_activeRelaySessionToken
_existingRelayIP
_existingRelaySessionToken
_existingRelaySignature
_senderExternalIP
_appID
_provider
_allocateProtocolVersion
_protocol
_isSharedSession
_previousAccessToken
_previousRelayIP
_testOptions
_reportingDataBlob
_pluginRequests
_relayIP
_relaySessionToken
_relaySessionKey
_relayExpiryTimeStamp
_inferredExternalIP
_relaySoftwareVersion
_pluginAllocations
_errorCode
_errorMessage
_invitationRetryCount
_groupMemberCount
_selfAllocationCount
_infoAttribute
_relayIPv6
_interesting
_requireAll
_lackAll
clientProcessReceivedMessage:messageSize:deltaTime:priority:
wifiSetupAttemptType:duration:result:client:
WRMLinkRecommendation:primaryLinkType:magnetState:infraWiFiState:
IDSWiProxDidConnectToPeer:resultCode:
IDSWiProxDidDisconnectFromPeer:resultCode:
IDSCoreAnalyticsWiProxConnectionEvent:duration:resultCode:
IDSWiProxDidSendData:
IDSCoreAnalyticsWiProxDidSendData:
noteMessageReceivedForService:accountType:fromStorage:serverTimestamp:localTimeDelta:
IDSMagnetCorruptionDetailedEvent:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
submitOutgoingMessageTrace:
_addMessageToStatistics:
removeMessages:
_messages
_statisticsLock
localDeliveryQueue
sessionNetworkAvailabilityCheckOverrideBehavior
networkCheckOverrideBehavior
dateScreenLightLastChanged
setAvailability:
initWithFlags:options:timeout:wifiTimeout:completionBlock:
availability
_availability
identityWithError:
_clearInvitationTimer
_clearConnectionTimer
_clearPacketLossTimer
_clearEndSessionTimeoutTimer
inviteTimer
setInviteTimer:
_inviteTimedOut
inviteTimerCleared
connectionTimer
setConnectionTimer:
connectionTimeout
_connectionTimedOut
packetLossTimer
endSessionTimer
setEndSessionTimer:
endSessionTimeout
_endSessionTimedOut
identityWithData:error:
setAccountID:
setConnectionTimeout:
connectionTimerCleared
setConnectionTimerCleared:
setEnableQuickRelay:
setEnableSingleChannelDirectMode:
endSessionTimerCleared
setEndSessionTimerCleared:
setInviteTimerCleared:
lastPacketTime
setLastPacketTime:
setPacketLossTimer:
setServiceName:
encryptionStateStruct
setEncryptionStateStruct:
_connectionTimerCleared
_disableRemoteDeviceEncryption
_enableQuickRelay
_enableSingleChannelDirectMode
_enableSKE
_encryptionInitialized
_endSessionTimerCleared
_forceInternetInvitation
_isScreenSharingSession
_inviteTimerCleared
_sharedSession
_useSecureQRControlMessage
_useQRDirectly
_peerProtocolVersion
_seqSend
_accountID
_clientType
_clientUUID
_connectionCountHint
_connectionTimeout
_connectionTimer
_endSessionTimeout
_endSessionTimer
_inviteSentTime
_inviteTimeout
_inviteTimer
_lastPacketTime
_localBlob
_packetLossTimer
_remoteUseCloudPairedControlChannel
_serviceName
_startConnectingDate
_localUnauthenticatedFullIdentity
_remoteUnauthenticatedPublicIdentity
_encryptionStateStruct
filteredArrayUsingPredicate:
sortUsingComparator:
_callStateChanged
isOnCall
isWiFiUsable
supportsSimultaneousVoiceAndDataRightNow
enqueueQueryBlock:cleanup:
purgeData
initWithIdentifier:dataProtectionClass:keychainWrapper:systemMonitor:fileDirectory:
initWithContentsOfFile:
getBytes:range:
subdataWithRange:
initWithLength:
mutableBytes
dataWithLength:
directory
setDirectory:
_directory
initWithOriginPersister:destinationPersister:userDefaults:
originPersister
setOriginPersister:
destinationPersister
setDestinationPersister:
migrated
setMigrated:
migrationDefaultKey
setMigrationDefaultKey:
_migrated
_originPersister
_destinationPersister
_migrationDefaultKey
registrationProperties
addTokenURI:forProperty:toRegistrationPropertyToDestinationsMap:
willSendBlock
overrideSendOnePerTokenForService:
isForcingAttachmentMessage
isForcingOnePerFanout
isForcefulLegacyEnabled
isForcefulECCEnabled
setService:
setDisallowQueryRefresh:
setSendOnePerToken:
setRegistrationProperties:
setForceAttachmentMessage:
setForceOnePerFanout:
setMessageToSend:
setWillSendBlock:
_disallowQueryRefresh
_sendOnePerToken
_forceAttachmentMessage
_forceOnePerFanout
_usedMMCS
_registrationProperties
_messageToSend
_willSendBlock
_endpointsToEncryptedData
_aggregatableMessages
_aggregateMessages
subscriptionSlot
initWithQueue:connection:userStore:accountController:ctAdapter:
phoneSubscriptionsFromCTSIMs:
ctAdapter
isAnySIMInserted
initWithUnprefixedURI:
initWithURI:expirationDate:selected:
onlyAllowReads
unprefixedURI
requestSelectedSubscriptionsWithCompletion:
requestUnselectedTemporaryPhoneAliasesWithCompletion:
selectSubscription:withCompletion:
unselectSubscription:withCompletion:
setSelectedSubscriptions:withCompletion:
removeTemporaryPhoneAlias:withCompletion:
enableTemporaryPhoneAlias:withCompletion:
disableTemporaryPhoneAlias:withCompletion:
constructRAResponseDictionaryForServices:completionHandler:
setOnlyAllowReads:
setCtAdapter:
_onlyAllowReads
_ctAdapter
initWithQueryCompletionBlock:queue:
queryCompletionBlock
_queryCompletionBlock
initWithPeerIDManager:
initWithDelegate:dataSource:
initWithPushHandler:queryHandler:persistentMap:keyTransparencyVerifier:userDefaults:
serializedPublicLegacyIdentity
_peerIDKeysForService:andFromURI:
descriptionForData:options:
_setDisasterModeToken:forURI:
allowedCapabilities
initWithURI:clientData:KTLoggableData:mismatchedAccountFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:verifiedBusiness:serializedPublicMessageProtectionIdentity:senderCorrelationIdentifier:queryTimeInterval:serializedNGMDeviceIdentity:serializedNGMDevicePrekey:
transparencyTicketForQueryResultsWithIndex:verificationState:entries:localURI:
shouldSyncTrustCircleAfterSelfQueryForServiceIdentifier:
performTrustCircleVerificationForSelfQueryResultsWithIndex:entries:localURI:ticket:completion:
accountIdentifier
initWithTicket:accountIdentifier:
_asyncCleanupExpiredEntriesIfNeeded
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:allowRefresh:
shouldUseSelfTokens
_disasterModeTokenForURI:
_endpointsForService:fromURI:toURI:ignoreExpiration:
_datePassed:
senderCorrelationIdentifier
_valueOfProperty:forURI:pushToken:fromURI:service:
hasProperty:forURI:pushToken:fromURI:service:
queryHandler
forgetSessionTokensForURI:fromURI:service:
cleanupExpiredEntriesIfNeeded
finishedQueryWithInfo:forURIs:fromURI:service:
hasPublicKeyForURI:pushToken:fromURI:service:
senderCorrelationIdentifierForURI:pushToken:fromURI:service:
shouldShowPeerErrorsFor:pushToken:fromURI:service:
notePeerToken:forURI:fromURI:service:
hasPeerTokensForURIs:fromURI:service:
removeClientDataUpdateBlockForToken:
endpointQueryListeners
setEndpointQueryListeners:
clientDataUpdateBlocks
setClientDataUpdateBlocks:
purgeClientDataBlocks
setPurgeClientDataBlocks:
disasterModeTokens
setDisasterModeTokens:
setQueryHandler:
peerMap
setPeerMap:
setKeyTransparencyVerifier:
_endpointQueryListeners
_clientDataUpdateBlocks
_purgeClientDataBlocks
_disasterModeTokens
_queryHandler
_peerMap
initWithAccount:service:name:
account
idWithAccount:service:name:
serviceConnectorServiceForAccount
_hash
initWithLocalAddress:remoteAddress:
saPortHostOrder
localAddress
remoteAddress
isEqualToSockAddrWrapperPair:
wrapperPairWithLocalAddress:remoteAddress:
shortDescriptionForLocalAddress:remoteAddress:
shortDescription
_localAddress
_remoteAddress
didInvalidate
setDidInvalidate:
onTransportThread_StopBTDatagramLinkForDefaultPairedDevice
completionQueue
_closeSockets
_triggerStallDetectionLogsForDetector:withEvent:
newDetectorWithName:stallDetectedBlock:stallWarningBlock:
setByteMovementDelayThreshold:
setVerboseLogging:
initWithConnectionID:protocol:isCloudEnabled:
initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:
flagsString
initWithAddressPair:protocol:
setCompletionQueue:
reportToAWD:connectionType:error:
_createStallDetectorWithName:
localConnectionGUID
remoteConnectionGUID
setRemoteConnectionGUID:
addressPair
setAddressPair:
setSd:
sdCopy
setSdCopy:
sdOriginal
setSdOriginal:
sdNumberNoClose
setSdNumberNoClose:
connectError
setConnectError:
openSocketCompletionHandler
setOpenSocketCompletionHandler:
firstIncomingSYNSequenceNumber
setFirstIncomingSYNSequenceNumber:
expectedNextOutgoingSequenceNumber
setExpectedNextOutgoingSequenceNumber:
expectedNextIncomingSequenceNumber
setExpectedNextIncomingSequenceNumber:
creationTime
socketTrafficClass
setSocketTrafficClass:
hasMoreData
setHasMoreData:
lastSuccessfulSentTime
setLastSuccessfulSentTime:
compressionInfo
setCompressionInfo:
compressionState
setCompressionState:
suspended
setSuspended:
uint32Key
setUint32Key:
setIsCloudEnabled:
isControlChannel
setIsControlChannel:
isRealTime
setIsRealTime:
shouldStopBTDatagramLink
setShouldStopBTDatagramLink:
encryptionEnabled
setEncryptionEnabled:
keyMaterialLength
setKeyMaterialLength:
localKeyMaterial
setLocalKeyMaterial:
srtpProtocolVersion
setSrtpProtocolVersion:
checksumFailed
setChecksumFailed:
connectionInitTime
setConnectionInitTime:
firstDataPacketReceiveTime
setFirstDataPacketReceiveTime:
idsDeviceConnectionUUID
setIdsDeviceConnectionUUID:
connectionSetupStartTime
setConnectionSetupStartTime:
firstPacketReceiveTime
setFirstPacketReceiveTime:
connectionContext
setConnectionContext:
shouldSetWhiteListUUIDForStreamingSocket
setShouldSetWhiteListUUIDForStreamingSocket:
serviceConnection
setServiceConnection:
defaultPairedDeviceEndpoint
setDefaultPairedDeviceEndpoint:
outgoingStallDetectorName
setOutgoingStallDetectorName:
_localConnectionGUID
_remoteConnectionGUID
_addressPair
_sdCopy
_sdOriginal
_sdNumberNoClose
_connectError
_openSocketCompletionHandler
_firstIncomingSYNSequenceNumber
_expectedNextOutgoingSequenceNumber
_expectedNextIncomingSequenceNumber
_creationTime
_socketTrafficClass
_hasMoreData
_lastSuccessfulSentTime
_compressionInfo
_compressionState
_suspended
_completionQueue
_uint32Key
_isControlChannel
_isRealTime
_sentAWDReport
_encryptionState
_encryptionEnabled
_keyMaterialLength
_localKeyMaterial
_srtpProtocolVersion
_connectionInitTime
_firstPacketReceiveTime
_firstDataPacketReceiveTime
_idsDeviceConnectionUUID
_defaultPairedDeviceEndpoint
_lastStallDetectLogTime
_outgoingStallDetectorName
_shouldSetWhiteListUUIDForStreamingSocket
_shouldStopBTDatagramLink
_checksumFailed
_didInvalidate
_connectionSetupStartTime
setDeviceConnectionInfo:
_deviceConnectionInfo
appendToString:
timestamp
initWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
_timestamp
_processTime
_compressionTime
_sendTime
_bytes
initWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
_kernelTime
initWithTimestamp:kernelTime:bytes:
printCurrent
outgoingEventWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
incomingEventWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
kernelTestEventWithTimestamp:kernelTime:bytes:
addEvent:
_timingEvents
_lastPrintTime
_reloadSettings
resetTCPConnection:forDeviceConnectionInfo:
detectorWithName:
forceTriggerStallDetectedBlockWithEventName:
handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:
stringByPaddingToLength:withString:startingAtIndex:
startControlChannelWithDevice:endpoint:
removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:
stringComponentsForServiceConnectorService:
containsString:
setConnectionInitTime:forConnectionUUID:
startCompressionForConnection:deviceConnectionInfo:
internalStartConnectionWithEndpoint:service:parameters:serviceConnector:completionHandler:
internalOpenSocketWithDestination:localSA:remoteSA:protocol:trafficClass:completionHandler:
setupIPsecLinkForDeviceConnectionInfo:
setupUTunForDeviceConnectionInfo:
obliterateConnectionInfoForCBUUID:
resetAllConnectionsForDevice:
receiveControlChannelMessage:fromCbuuid:deviceUniqueID:
defaultPairedDeviceIdentityPair
obliterateConnectionInfoForCBUUID:completionBlock:completionQueue:
wrapperWithWrapper:andPortHostOrder:
prepareControlChannelForDeviceConnectionInfo:genericConnection:
didConnectControlChannelForDeviceConnectionInfo:connection:error:
resetIPsecTCPConnection:forDeviceConnectionInfo:
resetUTunTCPConnection:forDeviceConnectionInfo:
checkSuspendTrafficForDevice:wait:
setFirstPacketReceiveTime:forConnectionUUID:
startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:
processCompressionRequest:fromDeviceConnectionInfo:
processCompressionResponse:fromDeviceConnectionInfo:
setupNewDeviceConnectionInfoForCbuuid:deviceUniqueID:identityPair:remoteDeviceEncryptionInfo:shouldUseIPsecLink:
_prepareConnectionInfoWithCBUUID:deviceUniqueID:shouldUseIPsecLink:identityPair:remoteDeviceEncryptionInfo:
setupDataConnectionWithDeviceConnectionInfo:options:
closeDataConnectionWithDeviceConnectionInfo:options:
doCheckSuspendTrafficForDevice:
addPairedDevice:shouldPairDirectlyOverIPsec:
handleIncomingPacket:fromDeviceToken:
handleIPPayload:bytesLength:source:destination:upperProtocol:forDeviceConnectionInfo:flush:callerShouldStop:
_getStallDetectorForConnection:deviceConnecionInfo:
handleUtunChannelRead:limit:
initWithName:address:andTestTransport:
controlChannelVersionForCbuuid:
perServiceDataTransferredForDevice:services:
totalPacketsSentForDevice:services:
_deviceConnectionInfoTableByCbuuid
_deviceConnectionInfoTableByCbuuidLock
_linkManager
_logPackets
_vifShouldReadMultiple
_vifMaxPendingPackets
_vifUseChannel
_controlChannelEncryptionDisabled
_controlChannelVersionCacheLock
_controlChannelVersionCache
_isSimulateResetLoopTest
_ipsecQueue
_ignoreUTunChannelWriteSignal
isInDebilitatedMode
initWithDelegate:dataSource:dualMessageDelivery:networkChangeNotifier:pushHandler:
isServerBackoffModeActive
_bagLoaded:
__IMStripPotentialTokenURIs
_removeCompletionBlocksForURIs:fromURI:fromService:
dictionaryWithKeyArray:defaultValue:
forSending
forRefresh
forMessaging
_dequeuePendingQueryIfPossible
dataSource
hasQueryResultsForURI:fromURI:service:
isPhoneNumberEmergencyNumber:
_completionBlocksForURIs:fromURI:fromService:
setUnderlyingService:
setImportanceLevel:
allPrimaryServices
forceHTTPQueriesOnly
componentsJoinedByString:
isQueryRetryForBadSignatureEnabled
serverBackoffModeMaxSenderRetries
forceCellular
IDCertificate
queryRetryNumberForBadSignature
queryRetry
setForceCellular:
queryRetryIntervalForBadSignature
serverBackoffModeReceiverRetryInterval
linkQualityForInterfaceType:
_addCompletionBlock:forURIs:fromURI:fromService:
_startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
dualInterfaceidQueryMessageDelivery
setDualInterfaceidQueryMessageDelivery:
queryQueue
setQueryQueue:
completionBlocksToURIsMap
setCompletionBlocksToURIsMap:
extraCompletionBlocks
setExtraCompletionBlocks:
isInServerBackoffMode
setIsInServerBackoffMode:
networkChangeNotifier
setNetworkChangeNotifier:
setDataSource:
_isInServerBackoffMode
_dualInterfaceidQueryMessageDelivery
_queryQueue
_completionBlocksToURIsMap
_extraCompletionBlocks
_networkChangeNotifier
_dataSource
_smsSignature
writeToFile:options:error:
sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:
_transferServicesController
setBypassSizeCheck:
forceEncryptionOff
currentAverageRTT
localMessageState
endpointState
isDeviceBlackedOut
wpConnectionErrorDomain
wpConnectionErrorCode
wpConnectionErrorUserInfo
_sendMessageWithSendParameters:threadContext:onObject:willSendBlock:progressBlock:completionBlock:
disableAliasValidation
_shouldReplaceLocalDestination:
allowCloudDelivery
_canBulkMessageWithPriority:adHocServiceType:
_forwardSendMessageToAccountWithSendParameters:service:threadContext:guid:dataProtectionClass:willSendBlock:progressBlock:completionBlock:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:dataProtectionClass:
_canSendNonUrgentInternetMessageForTopic:
_performDuetCheckAndSendForServiceIdentifier:serviceDuetIdentifiers:sendParameters:logString:fromQueue:completionBlock:
_performDuetCheckAndSendForAccount:sendParameters:logString:fromQueue:completionBlock:
_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:
progressBlockForSendParameters:messageContext:topic:forObject:
_failSavedMessageCleanly:withResponseCode:
_cleanupOutgoingMessageDatabase
_cleanupOutgoingMessages
_cleanupOutgoingQWSMessages
_cleanupOutgoingExpiredMessages
_cleanupRunawayClientOutgoingMessages
_failSavedMessagesCleanly:withResponseCode:
_maxOutgoingDatabasesSizeInMB
_maxMessagesForRunawayClientConsideration
_cleanupExpiredIncomingMessages
allowSendingMessagesToInactiveDevice
dropMessageIndicatorCommand
_fetchAccountEntitlements:listenerID:inContext:
sendToDaemon
setOriginalfromID:
dropMessageIfDropPointIsDetectedWithSendParameters:
groupData
_canSendMessageWithAccount:toDestination:
_shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:service:
_shouldMessageBeProxied:service:
setSubServiceAccountUUID:
sendMessageWithIDSSendParameters:messageContext:threadContext:progressBlock:onObject:
initWithDictionaryRepresentation:
generateDeliveryReceipt
initWithCertifiedDeliveryContext:queryHash:
replayKey
initWithCertifiedDeliveryContext:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:failureReason:failureReasonMessage:
_sendCertifiedDeliveryReceiptIfNeededForMessage:service:failureReason:failureReasonMessage:
_sendErrorMessage:fromID:toDestinations:usingAccountWithUniqueID:useDictAsTopLevel:dataToEncrypt:wantsResponse:timeout:command:priority:completionBlock:
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:messageTypes:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:messageTypes:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:messageTypes:
_messageStoreForDataProtectionClass:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:messageTypes:dataProtectionClass:
_nonUrgentInternetSendTimerFired
timeZoneForSecondsFromGMT:
_currentSecondsIntoDay
_nonUrgentInternetSendProbabilityForCurrentWindow
_rollDieForNonUrgentInternetSend
_hasNonUrgentInternetSendingBudget
_updateNonUrgentInternetSendTimer
initWithGuid:service:command:priority:
setStartDate:
loggableOverviewForKey:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:certifiedDeliveryContext:isLiveRetry:completionBlock:
_topicAllowsNoEncryption:fromIdentifier:
_sendMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:
initWithPayload:legacyIdentity:
_submitLastResortCacheMetricForGUID:service:
_shouldForgetCachedPeerTokensForDecryptionErrorType:withOriginalDecryptionError:
_shouldRetryForDecryptionErrorType:
_decryptionRetryIntervalForError:
_failureReasonMessageFromECError:andLegacyError:
_shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:
_shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:
originalGUID
certifiedDeliveryVersion
certifiedDeliveryRTS
senderToken
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:localURI:remoteURI:replayKey:
dataWithContentsOfURL:options:error:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:certifiedDeliveryContext:completionBlock:
receiveFileTransfer:topic:path:requestURLString:ownerID:sourceAppID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:
_IDSPowerLogDictionary:info:
_checkIfDupeAndNoteGuid:local:topic:
getLocalIncomingPowerAssertion:queue:
_decryptAOverCMessage:topic:fromDeviceID:error:
_processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:
_processStoredIncomingLocalMessage:
_minimumNextStoredLoadTime
_processIncomingRemoteMessage:forTopic:fromID:storedGuid:messageContext:
_maximumNextStoredLoadTime
_processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:
_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:
_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:
_shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:
_noteDecryptionFailureForGroup:completion:
_commandIsSessionCommand:
tinkerMessagingOnly
_processIncomingRemoteMessage:forTopic:fromID:storedGuid:checkpointTrace:messageContext:
isDroppingMadridMessages
_shouldRejectMessageOnCrossAccountService:fromSender:
_messageStoreClass
allowCrossAccountMessages
_primaryAccountExistsForService:withURI:
_doesMessageContainValidCombination:
forceFlushOnDeliveryReceipt
_validAccountForIncomingMessageSentToIdentifier:service:filterMessage:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:messageContext:
dontFilterSelfMessagesForUnknownDevice
_isDeviceInAccountRegistration:forService:
decryption
_payloadFromDecryptedData:
_FTCopyGzippedData
_processNonMessagingPayloadWithCommand:dictionaryPayload:senderToken:topic:toIdentifier:fromID:peerResponseIdentifier:guid:service:shouldFilter:idsMessageContext:messageContext:
shouldProxyMessageForService:toIdentifier:
watchOnlyService
cacheIncomingGroup:completion:
_processIncomingRemoteResourceTransferMessage:guid:context:specificOriginator:broadcastTopic:toIdentifier:topic:messageContext:
wantsRemoteErrors
_processMessageError:topLevelMessage:error:messageID:service:serviceType:token:fromIdentifier:toIdentifier:groupID:completionBlock:
_shouldDropMessageForIncomingDecryptionErrorType:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:localURI:remoteURI:
_handleIncomingAttachmentMessage:forTopic:fromID:certifiedDeliveryContext:completionBlock:
_enqueueBlock:identifier:withTimeout:forKey:
_dedupBehaviorForMessage:
wantsPendingMessageUpdates
_broadcastPendingMessageUpdateForMessage:fromID:toIdentifier:forTopic:messageContext:
verifyAndRevealData:sendingDevice:cypherIdentifier:error:
_IMTransferServiceController
_storageTimerFired
_updateStorageTimerWithInterval:
wantsCheckTransportLogHint
_isBulkingStorageMessagesForService:
_noteLastItemFromStorage:
_noteItemFromStorage:
_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:
_shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:
_checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:
_unpublish
initWithParent:userInfo:
setTotalUnitCount:
URLWithString:
setFileURL:
setByteTotalCount:
setByteCompletedCount:
setKind:
setCancellable:
setPausable:
setFileOperationKind:
setUserInfoObject:forKey:
_publish
setCompletedUnitCount:
isValid
_addIncomingGUIDsWithGuid:isLocal:hasLock:
performBlock:withImplicitPriority:
_messageTypeForConnection:
allowsDuplicates
sendServerMessage:command:usingAccountWithUniqueID:messageContext:
sendOpportunisticData:onService:usingAccountWithUniqueID:withIdentifier:options:messageContext:
cancelOpportunisticDataOnService:withIdentifier:messageContext:
sendMessageWithSendParameters:messageContext:
sendCertifiedDeliveryReceipt:serviceName:messageContext:
setPreferInfraWiFi:service:messageContext:
setLinkPreferences:service:messageContext:
startOTRTest:priority:messageContext:
testCloudQRConnection:messageContext:
failedDecryptingMessage:reason:forGroupID:onService:messageContext:
_canBulkMessageWithParameters:
_processDisallowedMessages
_processMessagesUponUnpairing
_processStoredOutgoingUrgentMessagesProcessLocalAccounts:
_decryptEngramMessage:groupID:senderToken:fromID:guid:messageContext:
cancelItemWithIdentifier:service:messageContext:
getProgressUpdateForIdentifier:service:messageContext:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:messageContext:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:messageContext:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:messageContext:
lastPathComponent
attributesOfItemAtPath:error:
copyItemAtPath:toPath:error:
initWithMessageDelivery:passwordManager:
_queueForKey:
_setQueue:forKey:
_notifyRegionValidationSuccess:regionID:phoneNumber:context:verified:
_notifyInitialRegionQuerySuccess:
_renewTokenForRegistrationInfo:forceRenewal:failIfNotSilent:
_notifyRegionValidationFailure:responseCode:registrationError:error:info:
_notifyAuthenticationSuccess:
_serviceQueueForKey:
_noteSuccessfulToken:profileID:selfID:forRegistrationInfo:wasFetched:
_notifyAuthenticationFailure:responseCode:registrationError:error:info:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:forceRenewal:failIfNotSilent:outRequestID:completionBlock:
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
_sendAuthenticationRequest:forceNew:forceRenewal:failIfNotSilent:
_fetchTokenForRegistrationInfo:failIfNotSilent:failureBlock:
_processRegionValidationMessage:deliveredWithError:resultCode:resultDictionary:
_registrationNeedsAuthentication:
_registrationIsAuthenticating:
_sendAuthenticationRequest:forceNew:
_processDefaultInvitationContextMessage:deliveredWithError:resultCode:resultDictionary:
_queryInitialInvitationContextForRegistration:
_validateRegionID:phoneNumber:registration:
_sendAuthenticationRequest:forceNew:failIfNotSilent:
_removeMessageForRegistration:fromQueueForKey:
_haveQueuedMessageForRegistration:inQueueForKey:
_notifyAuthenticating:
_postUserNotificationWithTitle:message:identifier:completionHandler:
_queues
initWithPhoneAuthenticationCertificate:
_phoneAuthenticationCertificate
nextComponent
bindTo:
setNextComponent:
_nextComponent
_pairedDevicesFromPropertyDictionaries:
_saveToKeychainWithDictionary:
_removeFromKeychain
loadPairedDevices
savePairedDevices:
_keychainSchema
_checkContinuityEntitlementForMessageContext:
wpLinkManager
continuityClientInstanceCreatedWithMessageContext:
continuityStartAdvertisingOfType:withData:withOptions:messageContext:
continuityStopAdvertisingOfType:messageContext:
continuityStartScanningForType:withData:mask:peers:messageContext:
continuityStartScanningForType:withData:mask:messageContext:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:messageContext:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:messageContext:
continuityStopScanningForType:messageContext:
continuityStartTrackingPeer:forType:messageContext:
continuityStopTrackingPeer:forType:messageContext:
continuityConnectToPeer:messageContext:
continuityDisconnectFromPeer:messageContext:
_queueForImplicitPriority:
_sync_queue
_default_queue
_urgent_queue
setResponseServiceUserIDs:
_responseServiceUserIDs
initWithUserStore:accountController:serviceController:migrationTracker:userDefaults:restrictions:ctAdapter:queue:accountBuilder:
_accountsForUser:
midSynchronize
setMidSynchronize:
_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:
registration_oversized
cachedDisabledByService
setCachedDisabledByService:
bypassHomeNumberCarrierCheck
migrationTracker
setMigrationTracker:
accountBuilder
setAccountBuilder:
migrationPromise
setMigrationPromise:
_midSynchronize
_migrationTracker
_accountBuilder
_migrationPromise
initWithPasswordManager:
setTemporaryPhoneEmail:
keychain
environment
removeAuthTokenAllowingGracePeriodForProfileID:username:
needsProvisioning
setNeedsProvisioning:
_candidateEmails
set_candidateEmails:
temporaryPhoneEmail
keyTransparencyEnrolledURIs
setPasswordManager:
_needsMigration
_needsProvisioning
_needsRenewal
_runningSimpleAuthentication
_isDisabled
_shouldRegisterUsingDSHandle
_shouldAutoRegisterAllHandles
_registrationType
_retries
_absintheRetries
_vettedEmails
_dsHandle
_IDSVersion
_applicationVersion
_environment
_registrationDate
_nextRegistrationDate
_isC2K
_registrationStatus
_mainID
_regionBasePhoneNumber
_regionServerContext
_registrationCert
_serviceType
_migrationContext
_identityVersion
_keyPairSignature
_idsUserID
_adHocServiceNames
_temporaryPhoneEmail
_dependentRegistrationsTTL
_dependentRegistrationResponseCode
_dependentRegistrationAuthRetries
_keyTransparencyEnrolledURIs
_userUniqueIdentifier
_reportAndRemoveForConnectionUUID:
_setCreatedAt:forConnectionUUID:
_canReportMetric:
_currentMetrics
_metrics
_writeLock
strongToStrongObjectsMapTable
_loadServices
_loadSubServices
serviceLoader
lowRAMDevice
disableOnLowRAMDevice
prototypingOnly
loadServiceDictionaries
initWithServiceDictionary:
shouldLoadService:
_loadService:
setPushTopic:
setSuperService:
_currentSubServicesForDevice:superService:
_updateSubServicesForDevice:superService:newSubservices:
_saveSubServices
_anyDeviceUsingSubService:superService:
_unloadServiceWithName:
_loadSubServiceWithName:usingService:completionBlock:
reloadAdHocServices
_combinedServicesForAllDevices
allServicesWithAdHocServiceType:
linkedServiceNames
allAdHocServices
_servicesToNameMap
_servicesToTopicMap
_deviceIDToSubServicesMap
_allAdHocServices
_accessPairedDevicesInCriticalSectionWithBlock:
_criticalLoadPairedDeviceArray:
pairedDeviceRepo
_criticalPairedDeviceWithCBUUID:
_criticalActivePairedDevice
_addPairedDevice:
_criticalPutPairedDevice:
_criticalPersistState
_performTransactionInCriticalSectionWithBlock:
_criticalRemovePairedDeviceWithCBUUID:
_criticalAllPairedDevices
_criticalActivatePairedDeviceWithCBUUID:
_criticalPerformPairedDeviceDeactivation
_criticalPerformPairedDeviceActivationWithCBUUID:
_criticalUpdatePairedDevice:isActive:
_criticalPurgeSecuredEncryptionKeysForAllPairedDevices
_criticalUpdatePairedDeviceWithCBUUID:deviceInfoPayload:
_criticalUpdatePairedDeviceWithCBUUID:supportIPsec:
_criticalUpdatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
_criticalUpdatePairedDeviceWithCBUUID:pairingType:
_criticalUpdatePairedDeviceWithCBUUID:iCloudURIs:pushToken:
_criticalPerformTransactionWithBlock:
loadPairedDevicesFromStorage
containsPairedDeviceWithCBUUID:
addPairedDeviceWithCBUUID:pairingType:
removePairedDeviceWithCBUUID:
updatePairedDeviceWithCBUUID:deviceInfoPayload:
updatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
_pairedDevices
_pairedDevicesLock
_serverErrorDetail
_promptMessage
_promptTitle
_radarTitle
_radarDescription
_radarComponentName
_radarComponentVersion
_radarComponentId
_radarClassification
_radarReproducibility
_radarKeywords
createRandomKeyWithQuery:error:
deleteWithQuery:
copyMatchingWithQuery:outData:
createSignatureWithKey:algorithm:overData:error:
verifySignature:overData:withKey:algorithm:error:
copyPublicKey:
externalRepresentation:error:
syncCircleStatusWithError:
signingKeyReferenceWithAdapter:application:label:error:
_initWithAdapter:application:label:error:
_copyBackingRef:
initWithKeyRef:adapter:
adapter
base64EncodedDataWithOptions:
loadOrGenerateSigningKeyWithError:
appTag
setAppTag:
label
setLabel:
setAdapter:
_appTag
_label
_adapter
isInSyncCircle
signatureOfData:error:
verifySignature:overData:error:
withinSyncCircleSignatureOfData:error:
withinSyncCircleVerifySignature:overData:error:
keyRef
_keyRef
unknownSenderURI
isBlackholed
messageServerTimestamp
_isBlackholed
_messageServerTimestamp
_unknownSenderURI
accountBlob
parentPg
newPg
parentVersion
ENID
_accountBlob
_parentPg
_newPg
_parentVersion
_ENID
initWithDataProtectionClass:filename:
setFilename:
filename
_filename
stringByAppendingPathComponent:
fileSystemRepresentation
isPublicKeyDistributed
setIsPublicKeyDistributed:
fullIdentity
setFullIdentity:
publicIdentity
setPublicIdentity:
_sessionID
_isPublicKeyDistributed
_publicIdentityData
_fullIdentity
_publicIdentity
_addPairedDevice:withInfo:completion:
_updatePairedDevice:pairingType:completion:
_pairingDeviceCBUUIDs
_pairedDeviceCBUUIDs
idsDaemon
quickSwitchHelper
_sortedArrayFromCBUUIDSet:
BTOutOfBandKey
shouldPairDirectlyOverIPsec
isAlwaysPairAsTinker
addPairedDevice:completion:
addPairedDeviceWithInfo:completion:
updatePairedDevice:pairingType:completion:
connectPairedDeviceWithID:completion:
setupCompletedForPairedDeviceWithID:completion:
getPairingDevicesWithCompletion:
getPairedDevicesWithCompletion:
getPairingRecordsWithCompletion:
updatePairedDeviceWithID:supportIPsec:completion:
deletePairedDeviceWithID:completion:
unpairStartForDeviceWithID:completion:
stopLocalPairingForDeviceWithID:completion:
unpairDeviceWithID:completion:
forgetDeviceWithID:completion:
switchActivePairedDeviceWithID:completion:
disconnectActivePairedDevice:
redeliverMessagesForDevice:completion:
setAllowedTrafficClassifiersForDevice:classifiers:completion:
dropAllMessagesWithoutAnyAllowedClassifierForDevice:completion:
pairedDevicesInfo:
setIdsDaemon:
setQuickSwitchHelper:
setUtunController:
_idsDaemon
_quickSwitchHelper
_utunController
_verifier
keyTransparencyStore
isKeyTransparencyXPCActivityEnabled
keyTransparencyXPCActivityIntervalInSeconds
keyTransparencyMaximumVerificationsPerXPCActivity
ticket
_keyTransparencyEntriesForEndpoints:
fetchLocalDeviceTrustCircleEligibleServiceIdentifiersWithCompletion:
currentTrustCircleVerificationResultsForSelfQueriedIndex:entries:ticket:
currentPeerVerificationResultsForQueriedIndex:ticket:
forceVerificationWithIndex:ticket:completion:
fetchTrustedDevicesFromTrustCircle
fetchCloudKitTrustedDevices
fetchAccountKeyTrustedDevices
_cloudKitContainer
nukeKeyTransparencyStateWithCompletion:
sessionInfoRequest
setSessionInfoRequest:
responseSessionInfo
setResponseSessionInfo:
responseTTL
setResponseTTL:
absintheUDID
setAbsintheUDID:
absintheHello
setAbsintheHello:
responseAbsintheServKey
setResponseAbsintheServKey:
responseAbsintheResponse
setResponseAbsintheResponse:
responseDeviceScoreNonce
setResponseDeviceScoreNonce:
_sessionInfoRequest
_responseSessionInfo
_responseTTL
_absintheUDID
_absintheHello
_responseAbsintheServKey
_responseAbsintheResponse
_responseDeviceScoreNonce
initWithTimerBlock:
_timerFired
timerBlock
setTimerBlock:
restoreTimer
setRestoreTimer:
actionByTarget
setActionByTarget:
_timerBlock
_restoreTimer
_actionByTarget
setResponseHandles:
setSelfHandle:
_responseHandles
_selfHandle
initWithPhoneUser:authenticationCertificate:
initWithQueue:userStore:server:phoneNumberValidator:deviceSupport:
failedPromiseWithError:
initWithQueue:userStore:deviceSupport:
phoneAuthenticationCertificateSigningRequestForUser:
server
phoneNumberValidator
_phoneNumberValidator
_forSending
_forRefresh
_forMessaging
storageItemNameForLegacyIdentityIdentifier:
identityWithDataProtectionClass:error:
_retrying_loadLegacyIdentityWithIdentifier:serializationDidChange:deserializationDidFail:error:
identityWithLegacyFullIdentity:ngmFullDeviceIdentity:ngmVersion:error:
containerStorageItemNameForContainerIdentityIdentfier:
_loadContainerWithIdentifier:serializationDidChage:deserializationDidFail:needsEncryptionIdentityRoll:error:
legacyStorageItemNameForContainerIdentityIdentifier:
eraseFromKeyChain:
_loadLegacyIdentityWithIdentifier:serializationDidChange:deserializationDidFail:error:
didDataRepresentationFormatChangeFromDataRepresentation:error:
supportedVersion
ngmVersionFromDataRepresentation:
_notifyDelegateAboutClosedConnection
setShouldUseCrossLayerLogging:
_receiveFromNWConnection:
_processIncomingRawMessage:
shouldUseCrossLayerLogging
CrossLayerLogging
loggingSequenceIncoming
setLoggingSequenceIncoming:
nwConnection
loggingSequenceOutgoing
setLoggingSequenceOutgoing:
_dequeueNextMessageFromOutgoingQueue
_sendDataViaNWConnection:isLargeTransfer:
_createDispatchData
priorityQueue
setPriorityQueue:
setNwConnection:
currentOutgoingFragmentedMessageID
setCurrentOutgoingFragmentedMessageID:
incomingDataFragments
setIncomingDataFragments:
encryptionBlock
setEncryptionBlock:
decryptionBlock
setDecryptionBlock:
_sendMessageCounter
_outgoingMessageArrayLock
_loggingSequenceIncoming
_loggingSequenceOutgoing
_shouldUseCrossLayerLogging
_priorityQueue
_nwConnection
pointerValue
_getCurrentState:
valueWithPointer:
_notifyDict
publicDeviceIdentity
setNegativeRegistrationUpdateCache:
_negativeRegistrationUpdateCache
startFairplayAuthenticationForDeviceWithCbuuid:
endFairplayAuthenticationForDeviceWithCbuuid:
_devices
reportiMessageSpam:toURI:messageContext:
reportiMessageUnknownSender:messageID:isBlackholed:messageServerTimestamp:toURI:messageContext:
reportiMessageSpamCheckUnknown:count:requestID:messageContext:
_missingDeviceIdentity:
initWithUser:credential:
setCredential:
_credential
initWithUser:alertType:
alertType
_alertType
transactionQueue
prependItem:
executeReadyItemsWithBlock:
appendItem:
expirationManager
setExpirationManager:
setTransactionQueue:
_expirationManager
_transactionQueue
carrierNonce
setResponseCarrierToken:
_carrierNonce
_responseCarrierToken
channel
output
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
_dumpLogs:isDownstream:
initWithCorrectFramesSinceLastCorruption:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
_processOutgoingPacket
hostState
_readFromDataChannel:size:withFlags:isSynced:
initWithRecoveryTime:
_submitMagnetCorruptionMetricsToAWD
_resetMagnetCorruptionMetrics
stream:handleEvent:
flushBuffer:
observeValueForKeyPath:ofObject:change:context:
injectFakePacket:
_discardedRawBytes
_correctRawBytesSinceLastCorruption
_correctFramesSinceLastCorruption
_pipe
_dataChannel
_dataChannelPendingTx
_totalReceivedRawBytes
_currentIncomingPacket
_currentOutgoingPacket
_resyncing
_magnetCorruptionRecoveryMode
_previousCorruptionsDetected
_lastResyncTime
_lastNewMagnetCorruptionTime
_lastDownstreamDumpLogTime
_lastUpstreamDumpLogTime
_writeSuspended
_remoteHostAwake
_postedFirstHostStateChange
_linkSuspended
BTLink
addBlockToAggregateMessage:forURIs:messageQueue:
_overallSendTimestamp
initWithEligibleServiceIdentifiers:signatures:
_eligibleServiceIdentifiers
_signatures
isEqualToKeyTransparencyIndex:
_accountIdentifier
_URI
transparencyStatus
transparencyBlob
isEqualToKeyTransparencyVerificationState:
_transparencyStatus
_transparencyBlob
loggableData
isEqualToKeyTransparencyEntry:
_loggableData
_dependentRegistrationPropertyForKey:serviceIdentifier:pushToken:
trustedRemoteKeyTransparencySignatureForServiceIdentifier:pushToken:
expectedRemoteKeyTransparencyEligibilityForServiceIdentifier:pushToken:
currentLocalKeyTransparencyEligibleServiceIdentifiers
currentLocalKeyTransparencyEnrolledURIsForServiceIdentifier:
initWithApplication:
initWithPolicy:verifier:keyManager:store:registrationDataSource:internalMetricLogger:productionMetricLogger:
_presentInternalVerificationAlertWithText:
isKeyTransparencyEnabledForServiceType:
registrationDataSource
fetchLocalDeviceTrustCircleEligibilityWithCompletion:
isKeyTransparencyEnabledForServiceIdentifier:
isDeviceAccountStateKeyTransparencyEligible
isKeyTransparencyPeerVerificationAllowedWithoutEnrollment
_transparencyTicketForQueryResultsWithIndex:verificationState:entries:
_verifyKeyTransparencyOfRegisteredIndex:verificationState:entry:
isKeyTransparencyTrustCircleEnabled
_pruneTrustedDevice:givenEligibleServiceIdentifiers:
_enrollTrustedDevice:
_fetchTrustedDevicesFromTrustCircle
_performTrustCircleVerificationForSelfQueryResultsWithIndex:entries:localURI:ticket:completion:
_currentPeerVerificationResultsForQueriedIndex:ticket:
_currentSelfVerificationResultsAgainstTrustCircleForSelfQueriedIndex:entries:ticket:
_currentVerificationResultsForRegisteredIndex:ticket:
_forceVerificationWithIndex:ticket:completion:
KTVerifier
clearState:
_KTDatasForIDSKeyTransparencyEntries:
_keyTransparencyURIPrefixForServiceIdentifier:
validatePeerUri:accountID:loggableDatas:queryResponse:error:
_fulfullOrFailPromiseSeal:basedOnIndex:KTResult:transparentData:error:
validatePeerUriResult:uuid:completionBlock:
_fetchTrustedDevicesFromTrustCircleGivenIndex:entries:
isKeyTransparencyTrustCircleAllowedWithoutEnrollment
_KTDatasForIDSProtoKeyTransparencyTrustedDevices:serviceIdentifier:
_mutateSuccessfulSyncIndicatorOnKTLoggableDatas:forIndex:
convertToSelfRequest:serverDatas:syncedDatas:queryResponse:updateCompletionBlock:
successfulSync
validateSelfUriResult:uuid:syncedDatas:completionBlock:
_clientErrorForKTResult:underlyingError:
forceValidateUUID:uri:block:
_KTDataForIDSKeyTransparencyEntry:
validateEnrollmentUri:accountID:loggableData:insertResponse:error:
validateEnrollmentUriResult:uuid:completionBlock:
_IDSEndpointTransparencyStatesForKTTransparentData:index:
mismatchedAccountFlag
setSuccessfulSync:
isKeyTransparencyCloudKitCircleEnabled
_enrollTrustedDeviceToCloudKit:
isKeyTransparencyAccountKeyCircleEnabled
_enrollTrustedDeviceViaAccountKeySignature:
_submitMetricsForTrustedDeviceEnrollmentWithCloudKitResult:cloudKitOperationTimeInterval:accountKeyResult:accountKeyOperationTimeInterval:
_fetchAccountKeyTrustedDevicesGivenIndex:entries:
_mergeCloudKitTrustedDevices:accountKeyTrustedDevices:
_submitMetricsForTrustedDeviceVerificationWithCloudKitResult:cloudKitOperationTimeInterval:accountKeyResult:accountKeyOperationTimeInterval:index:entries:
keyManager
_IDSProtoKeyTransparencyTrustedDeviceForKeyTransparencyIndex:entry:
isKeyTransparencyAnalyticsEnabled
initWithKeyTransparencyVersion:cloudKitSuccess:cloudKitErrorDomain:cloudKitErrorCode:cloudKitUnderlyingErrorDomain:cloudKitUnderlyingErrorCode:cloudKitOperationTimeInterval:accountKeySuccess:accountKeyErrorDomain:accountKeyErrorCode:accountKeyUnderlyingErrorDomain:accountKeyUnderlyingErrorCode:accountKeyOperationTimeInterval:
isKeyTransparencyRTCAnalyticsEnabled
internalMetricLogger
isKeyTransparencySFAnalyticsEnabled
productionMetricLogger
_numberOfMatchesForCandidates:index:trustedDevices:
initWithKeyTransparencyVersion:cloudKitSuccess:cloudKitErrorDomain:cloudKitErrorCode:cloudKitUnderlyingErrorDomain:cloudKitUnderlyingErrorCode:cloudKitOperationTimeInterval:accountKeySuccess:accountKeyErrorDomain:accountKeyErrorCode:accountKeyUnderlyingErrorDomain:accountKeyUnderlyingErrorCode:accountKeyOperationTimeInterval:numberOfTotalDevices:numberOfCandidateDevices:numberOfMatchesFromCloudKit:numberOfMatchesFromAccountKey:
_isTrustedCandidate:index:givenTrustedDevices:
initWithClientData:
clientDatas
markedForDeletion
verified
initWithPushToken:verificationState:
isKeyTransparencyUIEnabled
currentVerificationResultsForRegisteredIndex:ticket:
_keyTransparencyStore
_KTVerifier
_keyManager
_registrationDataSource
_internalMetricLogger
_productionMetricLogger
_isKeyTransparencyEnabledViaDefaults
_isKeyTransparencyEnabledViaServerBag
_keyTransparencyEnablementLevelFromServerBag
isKeyTransparencyDisabled
isKeyTransparencyCloudKitCircleDisabled
isKeyTransparencyAccountKeyCircleDisabled
isKeyTransparencyAggressiveVerificationScheduleEnabled
responseRegistrations
setResponseRegistrations:
_responseRegistrations
initWithSuiteName:
integerForKey:
stringForKey:
boolForKey:
isPiscoDisabled
isDeviceScoringEnabled
initWithPeerIDManager:IDStatusQueryController:
IDStatusQueryController
setIDStatusQueryController:
_IDStatusQueryController
initWithQueue:messageDelivery:
_stringRepresentationForRealm:
_DSAuthIDForPushToken:
authenticatePhoneUserWithRequest:
_authenticateMessageForRequest:
_checkEntitlement:forAccountWithID:messageContext:
_sessionWithUniqueID:messageContext:requiredEntitlement:
_sessionWithInstanceID:messageContext:requiredEntitlement:
setupNewSessionWithConfiguration:messageContext:
cleanupSession:messageContext:
cleanupSessionWithInstanceID:messageContext:
sendInvitation:withOptions:messageContext:
sendInvitation:withData:declineOnError:messageContext:
acceptInvitation:messageContext:
acceptInvitation:withData:messageContext:
cancelInvitation:messageContext:
cancelInvitation:withData:messageContext:
cancelInvitation:withRemoteEndedReasonOverride:messageContext:
declineInvitation:messageContext:
declineInvitation:withData:messageContext:
reconnectSessionWithUniqueID:messageContext:
endSession:messageContext:
endSession:withData:messageContext:
sendSessionMessage:toDestinations:forSessionWithUniqueID:messageContext:
setAudioEnabled:forSessionWithUniqueID:messageContext:
setMuted:forSessionWithUniqueID:messageContext:
setPreferences:forSessionWithUniqueID:messageContext:
setInviteTimetout:forSessionWithUniqueID:messageContext:
acknowledgeSessionID:clientID:messageContext:
sendAllocationRequest:options:messageContext:
updateMembers:forGroup:sessionID:withContext:triggeredLocally:messageContext:
updateParticipantData:forGroup:sessionID:withContext:messageContext:
joinGroupSession:withOptions:messageContext:
leaveGroupSession:participantInfo:messageContext:
requestActiveParticipantsForGroupSession:messageContext:
isEqualToRealTimeEncryptionKeyMaterial:
_changeCreatedAt:
removeDeviceFromSentToDevice:
setIsGeneratedLocally:
_MKI
_MKS
_MKM
_createdAt
_isSentToClient
_isGeneratedLocally
_devicesToBeSent
RealTimeEncryption
IDSNRDeviceIdentifier
NSSecureCoding
NSCoding
NSCopying
IDSNRDeviceManager
IDSNRDeviceProperties
IDSNRDevicePairingProperties
IDSNRLinkPreferences
IDSNRBluetoothLinkPreferences
IDSNRDevicePreferences
IDSNRDeviceMonitor
IDSNREndpoint
IDSOpportunisticCache
IDSDeviceHeartbeatCenter
IMSystemMonitorListener
IDSBTDatagramLink
IDSLink
NSObject
IDSUserProperties
IDSSIMResponder
IDSNRDeviceBridge
IDSNRDeviceMonitorDelegate
IDSEndpointSubscription
IDSPublicIdentityCache
IDSPreflightMessage
IDSUTunPeerServiceMap
HomeKit
IDSDuetInterface
IDSPeerIDQuery
IDSPeerIDPushHandler
IDSActivityMonitorStateManager
IDSActivityPushListenerDelegate
IDSDeviceConnectionInfo
IDSAccountIdentityElector
IDSServerAuthenticatePhoneRequest
IDSServerAuthenticatePhoneResponse
IDSRegistrationKeyManagerKeyPairProvider
IDSRegistrationKeyManager
IDSRegistrationKeyConfig
IDSFrequentURISuggester
IDSDeviceConnection
IDSFanoutFactoryComponent
IDSMPFullDeviceIdentityContainerEncrypter
IDSPendingOfflineMessageResponse
IDSMessageMetricReporter
IDSClientChannelData
IDSClientChannel
IDSClientChannelManager
IDSSocketPairConnection
IDSSocketPairConnectionProtocol
IDSSystemAccount
IDSSystemAccountAdapter
IDSOpportunisticDeliveryController
IDSDSessionMessenger
IDSServiceStatistics
IDSHomeKitCloudRelayUserAccessTokensMessage
IDSPluginNanoRegistryProtocol
IDSNanoRegistryPluginManager
IDSCertifiedDeliveryReplayCommitter
IDSHeartbeatCenter
IDSProfileGetDefaultInvitationContext
IDSActivityDescription
IDSUTunPeer
IDSUTunConnectionDelegate
IDSWPLinkManagerConnectivityDelegate
IDSAuthenticateMessage
IDSKeychainWrapper
IDSSecOTRSession
IDSMMCSUploadResult
IDSDXPCOpportunistic
IDSXPCOpportunistic
IDSRegistrationController
IDSSMSRegistrationCenterListener
IDSAppleIDRegistrationCenterListener
IDSRegistrationCenterListener
IDSEndpointResolverComponent
IDSPeerAggregateMessage
IDSProtoKeyTransparencyLoggableData
IDSGroupStatusNotificationParameters
IDSURIEncrypter
IDSAsyncEncrypter
IDSAsyncDecrypter
IDSDeviceIDEncrypter
IDSSyncAsyncEncrypter
IDSSyncEncrypter
IDSSyncAsyncDecrypter
IDSSyncDecrypter
IDSPreflightStack
IDSDSession
_IDSSessionConnectionDelegate
IDSSocketPairConnectionDelegate
IDSBaseSocketPairConnectionDelegate
IDSRealTimeEncryptionDelegate
IDSIncomingMessageBroadcast
IDSHashingDeviceIdentityEncrypter
IDSProtoKeyTransparencyTrustedDeviceMetadata
IDSNGMSwizzler
IDSKTAnalyticsLogger
CUTMetricLogger
IDSFanoutSender
IDSMadridAckTrackerDelegate
IDSAPNSAckTrackerDelegate
IDSPersistentMapMetadata
IDSPersistentMapMergePolicy
IDSPersistentMap
IDSMissingMessageMetricReporter
IDSDGroupStatusNotificationController
IDSDGroupStatusNotificationControllerBroadcaster
IDSProfileMessage
IDSEncrypterBuilder
IDSDXPCInternalTesting
IDSXPCInternalTesting
IDSTrafficMonitor
IDSTemporaryPhoneAlertManager
IDSQuickSwitchHelper
IDSAccountSync
IDSEncryptedData
IDSTemporaryPhoneUserExpirationTimerInfo
IDSTemporaryPhoneUserExpirationManager
IDSUserStoreListener
AppleCare
IDSKeychainKeyElectionStore
IDSClientData
IDSClientDataRegistrationKeyManager
IDSClientDataResult
IDSClientDataGenerator
IDSActivityScribeMessage
IDSDAccountMetrics
IDSAccountRepair
IDSLocalMultiplexer
IDSMultiplexerGroupSessionTransport
IDSMultiplexerTransport
IDSGroupSessionMultiplexer
IDSProtoKeyTransparencyTrustedServiceSignature
IDSBTLELink
CBPeripheralDelegate
IDSValidateCredentialsMessage
IDSRapportDeliveryController
IDSRapportClientDelegate
IDSRapportDeliveryControllerRapportClient
IDSPeerMessage
IDSUTunControlMessage_Hello
IDSDRegistrationPushManager
IDSRegistrationPushHandlerListener
IDSDRegistrationControl
IDSDGroupContextDataSource
ENGroupContextDataSource
IDSMPConversationGroupEntry
IDSCloudKitKeyTransparencyDeviceRecord
IDSCloudKitKeyTransparencyStore
IDSPairedDeviceKeychainSchema
IDSDaemonProtocol
IDSDaemonListenerProtocol
IDSDaemon
IDSPushHandlerDelegate
IDSUTunDeliveryControllerDelegate
IDSDuetInterfaceDelegate
IDSRapportDeliveryControllerDelegate
IDSPairingManagerDelegate
IDSRegistrationHashProcessorDelegate
IDSDaemonMIGInterface
IDSQuickRelayAllocatorQueryPolicy
IDSPeerAggregatableMessage
IDSDGroupContextNotifyingObserver
ENGroupContextObserverMiddleware
ENGroupContextMiddleware
IDSPromise
IDSLinkPreferencesManager
IDSProtoKeyTransparencyTrustedDevice
IDSEncryptionQueue
IDSEncryptionAsyncQueue
IDSEncryptionSyncQueue
IDSEncryptionQueueManager
IDSMessageHashChecker
IDSActivityUpdatePush
IDSActivityPushListener
IDSMessageFactoryComponent
IDSEngramKeyStore
IDSConnectivityMonitor
IDSUTunDeliveryControllerConnectivityDelegate
IDSDXPCReunionSync
IDSXPCReunionSync
IDSUTunControlChannel
IDSUTunControlChannelIdentityPair
IDSProvisionTemporaryPhoneMessage
IDSTTLCache
IDSTTLCacheItem
IDSGroupMasterKeyMaterialCollection
IDSGroupMasterKeyMaterialCache
IDSProfileValidateInvitationContext
IDSTemporaryPhoneUser
IDSUser
IDSPeerIDKey
IDSValidationSession
IDSBaseMessageSigningSession
IDSValidationSigningResult
IDSDecryptionMetadata
IDSEncryptionMetadata
Dependency
IDSDAccountControllerDeviceSupport
IDSDAccountController
IDSUDPGlobalLink
IDSLinkDelegate
IDSAppleUser
Registration
IDSWPLinkManager
WPContinuityDelegate
IDSWPPacketSendingProtocol
IDSEncryptionComponent
PhoneNumberValidation
IDSDAccount
IDSDXPCDaemonServer
NSXPCListenerDelegate
IDSDXPCDaemonCollaboratorProvider
IDSRegistrationConductor
ExternalTriggers
IDSDAccountControllerDelegate
IDSRegistrationControllerListener
Notifications
IDSDeviceCertificationRepairDelegate
IDSCTAdapterListener
RestoreTracking
IDSPreflightStackStore
IDSSMSRegistrationCenter
IDSPhoneNumberValidationRequestor
IDSPhoneNumberValidationListener
IDSGroupPutMessage
IDSRestrictions
IDSGenericConnection
IDSPairingManager
IDSPhoneUser
IDSGroupServer
IDSGroupServerPushHandler
IDSEncryptionHelpers
IDSAppleIDNotification
IDSAppleIDNotificationCenter
IDSActivityStateProvider
Account
IDSSession
IDSDeliveryController
IDSCheckUnknownSenderMessage
IDSConnectivityMonitorMetric
CUTRTCMetric
CUTMetric
IDSConnectivityMonitorMetricProperties
IDSDRegistrationListener
IDSLocalDeliveryMessage
IDSHCInfo
IDSUTunDeliveryController
IDSNRDeviceBridgeDelegate
IDSUTunPeerDelegate
IDSEntitlements
IDSGroupContextDaemonProtocol
IDSGroupContextDataSourceDaemonProtocol
IDSGroupContextCacheMiddlewareDaemonProtocol
IDSGroupContextObserverDaemonProtocol
IDSDaemonXPCInterface
IDSDGroupContextNotifyingObserverDelegate
IDSAPNSAckTracker
IDSPeerIDValue
IDSDSessionController
IDSDataMigrationTracker
IDSDSignInResponder
IDSDSignInResponderDeviceSupport
IDSServerStorageStateMachine
IDSSIMPhoneUserSynchronizer
IDSUserStoreProvider
IDSPublicKeyStorageCache
IDSPublicKeyStorage
IDSUserDescription
IDSUserStore
IDSAuthenticateUsersResponse
IDSAuthenticateUsersMessage
IDSDXPCActivityMonitor
IDSActivityMonitorStateManagerListener
IDSXPCActivityMonitor
IDSPairedDevice
IDSRegistrationMessage
IDSRegistrationKeychainManager
KeychainManagerUtilities
IDSDaemonCapabilities
IDSMessageDeliveryFactory
ProviderExtensions
IDSRegistrationCenter
IDSRegistrationCenterMessageDelivery
IDSEngramKeyStoreListener
IDSIDQueryMessage
IDSLinkManager
IDSBTLinkManagerDelegate
IDSWPLinkManagerDelegate
IDSCellularLinkDelegate
IDSRapportClient
IDSTTLCacheDelegate
IDSUTunConnection
IDSPhoneNumberValidationStateMachine
IDSPhoneNumberValidationStateMachineMessageDelivery
IDSPhoneNumberValidationStateMachineLockdownManager
IDSPhoneNumberValidationStateMachineDeviceSupport
IDSPhoneNumberIdentification
IDSCTPNRDelegate
Collaborators
IDSGetDependentRegistrationsCenter
IDSOTRSessionInfo
IDSOTRController
IDSServerStorageMetricCollector
IDSGroupSendAheadObserver
IDSProtoKeyTransparencyTrustedServiceSignatures
IDSServerMessage
IDSOTRKeyStorage
_IDSSessionConnectionInfo
IDSIDStatusDependencyProvider
IDSIDStatusQueryController
IDSDSessionAWDMetrics
IDSDMessageStoreMigrator
IDSRegistrationPushHandler
IDSBagUtilities
IDSPublicIdentityData
IDSDXPCDaemon
IDSXPCDaemon
QRSelfAllocationArray
TimerWrapper
QRStreamInfo
QRAllocation
IDSAllocateResponseWrapper
IDSQuickRelayAllocator
IDSBlockRetryHandler
IDSPhoneNumberValidationModeArbiter
IDSAsyncMapper
IDSRegistrationCacheStateTransportPolicy
IDSValidationCertificateMessage
IDSBTLinkManager
CBCentralManagerDelegate
CBPeripheralManagerDelegate
CBScalablePipeManagerDelegate
IDSCountdown
IDSNRDevicePreferencesHandler
IDSReportSpamMessage
IDSEncryptionController
IDSOTREncrypter
_IDSSessionConnection
ConferenceDelegate
AVConferenceDelegate
IDSRealTimeEncryptionController
IDSPeerAccessoryMessage
IDSHomeKitCloudRelayAdminAccessTokenMessage
IDSAckStateMachine
IDSSocketPairConnectionTCPInfo
IDSNGMKeyLoadingErrorContainer
IDSNGMKeyLoadingMetric
IDSDXPCPairedDeviceManager
IDSXPCPairedDeviceManager
IDSDSessionInvitationManager
IDSDGroupContextController
IDSDAccountSendMessageContext
0 7C
Messaging
IDSProtoKeyTransparencyTrustedService
IDSCurrentDevice
IDSEndpointEncrypter
IDSDAccountRegistrationListener
IDSHomeKitCloudRelayConsentTokensMessage
IDSDOutgoingMessage
IDSDIncomingMessage
IDSDMessageStore
IDSDMessageStoreMap
IDSQuickRelayAllocateMessage
IDSRegistrationProperties
IDSLocalDeliveryQueue
IDSDSessionDefaultAvailabilityCheck
IDSDSessionAvailabilityCheck
IDSDSessionSharedState
IDSStatusQueryQueue
IDSDaemonMIGQueryInterface
IDSPersistentMapKeychainPersister
IDSPersistentMapPersister
IDSPersistentMapDiskPersister
IDSPersistentMigratingPersister
IDSMadridEndpointFilterComponent
IDSDeliveryPipelineParameter
IDSEndpointResolverParameter
IDSPipelineParameter
IDSMadridEndpointFilterParameter
IDSEncryptionParameter
IDSMessageFactoryParameter
IDSFanoutFactoryParameter
IDSDXPCRegistration
IDSXPCRegistration
IDSPeerIDManagerEndpointQueryListener
IDSPeerIDManager
IDSPersistentMapDelegate
IDSPeerIDQueryHandlerDelegate
IDSGenericConnectionID
IDSSockAddrWrapperPair
IDSConnectionContext
IDSUTunTimingEventOutgoing
IDSUTunTimingEvent
IDSUTunTimingEventIncoming
IDSUTunTimingEventKernelTest
IDSUTunTimingLogger
IDSUTunController
IDSPeerIDQueryHandler
IDSPhoneUserCredential
IDSUserCredential
IDSAttachmentEncryptionParameter
IDSMMCSUploader
IDSAppleIDRegistrationCenter
IDSAppleIDRegistrationCenterMessageDelivery
IDSTemporaryPhoneUserCredential
IDSPipelineComponent
IDSTransferServicesController
IDSPairedDeviceKeychainPersister
IDSPairedDevicePersister
Continuity
IDSDaemonPriorityQueueController
IDSHomeKitCloudRelayServiceUserIDsMessage
IDSUserAccountSynchronizer
IDSRegistration
IDSDeviceConnectionAWDMetrics
IDSDServiceController
IDSPairedDeviceRepository
IDSGroupGetMessage
IDSTapToRadarPushPayload
IDSAccountSigningKeyKeychainAdapter
IDSAccountSigningKeyReference
IDSAccountSigningKey
IDSReportUnknownSenderMessage
IDSGroupServerKeyElectionStoreItem
IDSGroupServerKeyElectionStore
IDSDatabase
IDSRealTimeEncryptionIdentity
IDSDXPCPairing
IDSXPCPairing
IDSTransparentEndpointViewer
IDSInitializeValidationMessage
IDSRestoreMonitor
IDSProfileGetHandlesMessage
IDSPhoneUserRegistry
IDSPhoneUserRegistryDeviceSupport
IDSPhoneUserAuthenticationCertificate
IDSPeerIDQueryContext
IDSRegistrationKeyManagerIdentityDataSource
IDSNWSocketPairConnection
IDSDevicePropertiesStateNotifier
IDSRegistrationHashProcessor
IDSDevicePolicyController
IDSSystemAccountUserSynchronizer
iMessageSpam
IDSDeviceCertificationRepair
IDSTemporaryPhoneUserAddTransaction
IDSTemporaryPhoneUserTransaction
IDSTemporaryPhoneUserRemoveTransaction
IDSTemporaryPhoneUserSynchronizer
IDSTemporaryPhoneUserExpirationManagerDelegate
IDSGetSIMAuthTokenMessage
IDSBTLink
NSStreamDelegate
IDSMadridAckTracker
IDSKeyTransparencyTrustedDeviceEnrollmentResult
IDSKeyTransparencyIndex
IDSKeyTransparencyVerificationState
IDSKeyTransparencyEntry
IDSKeyTransparencyRegistrationDataSource
IDSKeyTransparencyVerifier
IDSKeyTransparencyPolicy
IDSGetDependentRegistrationMessage
IDSAgentUserDefaults
IDSPeerIDQueryDataSource
IDSPeerIDQueryHandlerDataSource
IDSServer
Session
IDSRealTimeEncryptionKeyMaterial
v40@0:8@16@24@32
v32@0:8@16@24
@24@0:8@16
v24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
B16@0:8
@24@0:8^{_NSZone=}16
@16@0:8
v16@0:8
@"NSUUID"
v48@0:8@16@24@32@?40
Q16@0:8
v24@0:8Q16
v20@0:8B16
@"NSData"
@"NSNumber"
@"IDSNRBluetoothLinkPreferences"
@"IDSNRDeviceIdentifier"
@"NSSet"
@40@0:8@16@24@32
@36@0:8@16@24C32
C16@0:8
@"NSString"
@32@0:8@16@24
@24@0:8^@16
B32@0:8@16^@24
v24@0:8@?16
B24@0:8^@16
B40@0:8@16@24^@32
q16@0:8
v24@0:8q16
@"NSMutableDictionary"
@"IDSKeychainWrapper"
@"IDSFrequentURISuggester"
v32@0:8d16@24
@"IMTimer"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Q40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24@32
Q44@0:8^^{?}16i24@28@36
@28@0:8d16B24
Q40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@"NSString"24@"NSString"32
Q44@0:8^^{?}16i24@"NSString"28@"NSString"36
@"NSString"28@0:8d16B24
@"NSDictionary"16@0:8
v24@0:8@"NSString"16
@"<IDSLinkDelegate>"16@0:8
v24@0:8@"<IDSLinkDelegate>"16
@"<IDSLinkDelegate>"
@20@0:8B16
@48@0:8@16@24@32@40
v28@0:8i16@?20
@"IDSDAccountController"
@"IDSDServiceController"
@"IDSRegistrationController"
@"IDSRestrictions"
@"NSDate"
v28@0:8@16B24
v28@0:8@16C24
v28@0:8@"IDSNRDeviceMonitor"16B24
v28@0:8@"IDSNRDeviceMonitor"16C24
@36@0:8@16@24B32
v20@0:8C16
@"<IDSNRDeviceBridgeDelegate>"
@"NSObject<OS_dispatch_queue>"
@"IDSNRDeviceMonitor"
@?16@0:8
@"IDSURI"
@"NSArray"
B56@0:8@16@24@32@40^@48
@48@0:8@16@24@32^@40
@"IDSKVStore"
B24@0:8^[16C]16
B44@0:8@16S24^[16C]28^B36
B44@0:8S16^@20^[16C]28^B36
B60@0:8@16^S24B32^B36^[16C]44^B52
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
[16C]
@"NSMapTable"
[8[16C]]
v48@0:8@16@24@32@40
v56@0:8@16@24@32@40@48
v28@0:8B16@20
@32@0:8@16q24
v56@0:8@16q24@32@40@?48
@"<IDSDuetInterfaceDelegate>"
@"NSMutableSet"
@"NSData"16@0:8
v32@0:8@"IDSActivityPushListener"16@"IDSActivityUpdatePush"24
@64@0:8@16@24@32@40@48@56
v40@0:8@16@24@?32
@"<IDSActivityStateProvider>"
@"IDSActivityPushListener"
@"FTMessageDelivery"
@"IDSPeerIDManager"
^{IDSPortMap=[1024Q]S}16@0:8
^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i}16@0:8
^[16C]16@0:8
v24@0:8^[16C]16
S16@0:8
v20@0:8S16
v32@0:8@16^B24
d16@0:8
v24@0:8d16
i16@0:8
v20@0:8i16
@"IDSSockAddrWrapper"
@"IDSUTunControlChannel"
[2048I]
{IDSPortMap="ports"[1024Q]"lastAssignedPort"S}
{SimpleUInt32ToObjectTable="tableSize"i"elements"^{SimpleUInt32ToObjectTableElement}"elementCount"i}
@"NSMutableArray"
{IDSDCI_OutgoingPacketList="genericConnection"[64@]"sources"[64^v]"destinations"[64^v]"upperProtocols"[64C]"bytes"[64^v]"bytesLengths"[64Q]"numPackets"I"nextPacket"I}
@"NSObject<OS_nw_service_connector>"
v32@0:8@16@?24
@40@0:8@16q24^@32
@"IDSKeychainKeyElectionStore"
@"IDSCloudKitKeyElectionStore"
@"IDSGroupServerKeyElectionStore"
@"IDSPhoneUser"
@40@0:8q16@24@32
@"IDSAuthenticationCertificate"
v64@0:8@16^^{__SecKey}24^^{__SecKey}32^@40^B48^B56
v64@0:8@"NSString"16^^{__SecKey}24^^{__SecKey}32^@40^B48^B56
v48@0:8^@16^@24q32^B40
B36@0:8@16q24B32
@64@0:8@16@24@32@40B48B52@56
@24@0:8Q16
@40@0:8@16q24q32
@20@0:8I16
B32@0:8@16@24
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
B32@0:8@16q24
@"NSRecursiveLock"
@"IDSNGMKeyLoadingErrorContainer"
@"IDSRegistrationKeyConfig"
@"IMSystemMonitor"
@"IDSRegistrationKeyManagerIdentityDataSource"
@"IDSRateLimiter"
@"<IDSRegistrationKeyManagerKeyPairProvider>"
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
@"IDSMPFullDeviceIdentityContainer"
@"IDSNGMKeyRollingTicket"
@"IDSMPFullLegacyIdentity"
@"IDSAccountSigningKeyReference"
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
v76@0:8@16B24@28@36@44@52@60@68
@64@0:8@16@24@32Q40q48@56
@48@0:8@16@24^@32^@40
@52@0:8@16@24^@32@40B48
@44@0:8@16@24@32B40
@"NSData"48@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24@"NSString"32^@40
@"NSData"48@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24^@32^@40
@"NSData"52@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24^@32@"NSString"40B48
@"CUTUnsafePromise"44@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24@"NSString"32B40
@60@0:8@16@24@32@40@48B56
@"IDSRegistrationKeyManager"
@56@0:8@16@24@32@40@48
v80@0:8@16@24@32@40B48B52@56@64@72
@40@0:8*16I24r*28I36
@36@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16r*24I32
^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@0:8
r*16@0:8
I16@0:8
^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}
B40@0:8r^v16I24r^v28I36
B40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16r^v24I32B36
B44@0:8*16I24r^v28I36B40
B32@0:8@16@?24
B28@0:8@16B24
v32@0:8@?16@?24
B24@0:8@"IDSSocketPairMessage"16
B28@0:8@"IDSSocketPairMessage"16B24
v24@0:8@"IDSSocketPairMessage"16
v32@0:8@?<@"NSData"@?@"NSData"@"NSString">16@?<@"NSData"@?@"IDSSocketPairMessage">24
@"NSSet"16@0:8
@60@0:8i16@20@28q36@44Q52
v20@0:8I16
q32@0:8*16Q24
@"NSMutableData"
@"<IDSSocketPairConnectionDelegate>"
@"IDSStallDetector"
v48@0:8@16@24@?32@?40
v40@0:8@16@?24@?32
@48@0:8@16@24@?32^@40
@40@0:8@16@?24^@32
@40@0:8@16@24@?32
v64@0:8@16@24@32@40@48@?56
@"IDSOpportunisticCache"
v64@0:8@16@24@32@40@?48@?56
v76@0:8@16@24@32B40@44@52@?60@?68
B40@0:8@16@24@32
[60C]
@"APSConnection"
@"<IDSDSession><IDSDSessionAWDMetrics>"
@"IDSDSessionSharedState"
v24@0:8#16
@"<IDSPluginNanoRegistryProtocol>"
v40@0:8@?16@24@32
B32@0:8@16^d24
@"NSDictionary"
v96@0:8@16@24@32@40@48@56B64B68@72@80B88B92
v28@0:8@16I24
v28@0:8@"IDSUTunConnection"16B24
v96@0:8@"IDSUTunConnection"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88B92
v96@0:8@"IDSUTunConnection"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88B92
v56@0:8@"IDSUTunConnection"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48
v28@0:8@"IDSUTunConnection"16I24
v24@0:8@"IDSUTunConnection"16
v36@0:8@16@24B32
v36@0:8@"IDSWPLinkManager"16@"NSString"24B32
v32@0:8@"IDSWPLinkManager"16@"NSString"24
B32@0:8@"IDSWPLinkManager"16@"NSString"24
v40@0:8@"IDSWPLinkManager"16@"NSString"24@"NSError"32
@40@0:8@16q24B32I36
@52@0:8@16@24@32B40B44B48
v36@0:8@?16q24I32
B40@0:8I16q20I28q32
B36@0:8q16I24q28
v40@0:8@16^Q24^Q32
v28@0:8q16B24
v40@0:8@16q24q32
@36@0:8q16q24I32
B24@0:8q16
q24@0:8@16
v32@0:8@16B24B28
v40@0:8@16q24@?32
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
@"IDSUTunConnection"
@"<IDSUTunPeerDelegate>"
@"NSTimer"
@"NSObject<OS_dispatch_source>"
@"IDSUTunPeerServiceMap"
B28@0:8@16i24
@24@0:8q16
I24@0:8q16
q20@0:8I16
@32@0:8@16^@24
B52@0:8@16@24B32q36^@44
B56@0:8@16@24B32B36q40^@48
v48@0:8@16@24q32@?40
B40@0:8@16q24^@32
q24@0:8^@16
@24@0:8^{_SecOTRSession=}16
^{_SecOTRSession=}16@0:8
v24@0:8^{_SecOTRSession=}16
^{_SecOTRSession=}
@"IDSEncryptedData"
v24@0:8@?<v@?@"NSDictionary">16
@"IDSXPCConnection"
B20@0:8i16
B32@0:8@16i24B28
v40@0:8@16@24q32
v48@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40
v40@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24q32
v24@0:8@"IDSSMSRegistrationCenter"16
v60@0:8@16@24@32@40@48B56
v48@0:8@16@24q32@40
v32@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24
v60@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40@"NSDictionary"48B56
v48@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"NSArray"24
v40@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24@"NSArray"32
v24@0:8@"IDSRegistrationCenter"16
v60@0:8@16@24B32@36@44@52
B40@0:8@16^B24^B32
v40@0:8@16q24@32
v36@0:8@16B24q28
v32@0:8@16q24
@20@0:8i16
@"IDSUserStore"
@48@0:8@16@24@32Q40
@72@0:8@16@24q32@40@48@56@64
{?="ktVersion"b1"ngmVersion"b1}
v40@0:8@"NSData"16@"<IDSEncryptionAsyncQueue>"24@?<v@?@"NSData"@"NSError"@"IDSEncryptionMetadata">32
v60@0:8@16@24@32B40@44@?52
v60@0:8@"NSData"16@"NSString"24@"<IDSEncryptionAsyncQueue>"32B40@"IDSCertifiedDeliveryReplayKey"44@?<v@?@"NSData"@"NSError"@"IDSDecryptionMetadata">52
@24@0:8^B16
@40@0:8@16^@24^@32
@"IDSCertifiedDeliveryReplayCommitter"
@"IDSPublicIdentityCache"
@"<IDSMPFullDeviceIdentityContainerEncrypter>"
@48@0:8@16^@24@32^@40
@"NSData"48@0:8@"NSData"16^@24@"<IDSEncryptionSyncQueue>"32^@40
@52@0:8@16@24B32@36^@44
@"NSData"52@0:8@"NSData"16@"NSString"24B32@"<IDSEncryptionSyncQueue>"36^@44
@52@0:8@16@24@32@40B48
@44@0:8@16@24B32^@36
@"IDSPublicKeyStorage"
v36@0:8@16B24@28
v36@0:8@"_IDSSessionConnection"16B24@"NSError"28
v32@0:8@"_IDSSessionConnection"16@"NSError"24
v32@0:8@"_IDSSessionConnection"16@"NSData"24
v36@0:8@16@24I32
v36@0:8@"IDSSocketPairConnection"16@"NSData"24I32
v32@0:8@"IDSSocketPairConnection"16@"IDSSocketPairMessage"24
v24@0:8@"IDSSocketPairConnection"16
v32@0:8@"IDSBaseSocketPairConnection"16@"NSData"24
v24@0:8@"IDSBaseSocketPairConnection"16
v32@0:8@"NSDictionary"16@"IDSDestination"24
v24@0:8@"IDSRealTimeEncryptionKeyMaterial"16
v24@0:8@"NSError"16
v24@0:8@?<v@?B>16
*16@0:8
v44@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}24r*32I40
v28@0:8i16@20
v28@0:8i16i20i24
v28@0:8@16i24
v24@0:8i16B20
B48@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}24@32@40
v52@0:8@16c24@28@36@44
v28@0:8@16S24
v40@0:8@16c24@28C36
v32@0:8@16B24c28
v36@0:8@16@24C32
v52@0:8@16@24@32@40B48
@32@0:8@16Q24
v24@0:8i16i20
@"<IDSDSessionAvailabilityCheck>"
@"IDSBaseSocketPairConnection"
@"IDSClientChannel"
@"IDSConnectionContext"
@"IDSGroupStatusNotificationParameters"
[8^{?}]
@"IDSMultiplexerGroupSessionTransport"
@"IDSDSessionInvitationManager"
@"IDSDSessionMessenger"
@56@0:8@?16B24@28q36@44I52
@44@0:8@16@24B32^@?36
@"IDSMPFullDeviceIdentityContainerEncrypter"
@"IDSMessageHashChecker"
{?="status"b1}
v24@0:8@"<CUTMetric>"16
v24@0:8@"IDSDeliveryContext"16
v24@0:8@"IDSBaseMessage"16
@64@0:8@16@24@32@?40@?48@56
@"NSObject<OS_os_activity>"
@"IDSAckStateMachine"
@24@0:8@?16
@48@0:8@16q24@32@?40
@64@0:8@16q24@32q40@48@?56
@80@0:8@16q24@32@40d48d56@64@?72
@"<IDSPersistentMapDelegate>"
@"<IDSPersistentMapPersister>"
@"IDSPersistentMapMergePolicy"
v72@0:8@16@24@32@40@48@56@?64
v64@0:8@16@24@32@40@48@56
v84@0:8@16@24@32@40@48@56@64C72@?76
v72@0:8@16@24@32@40@48@56@64
v76@0:8@16@24@32@40q48@56@64C72
v96@0:8@16@24@32@40q48@56@64@72C80B84@?88
v56@0:8@16@24@32@40@?48
@"IDSDAccount"
@"IDSDSessionController"
@"IDSRealTimeEncryptionController"
@"IDSDGroupStatusNotificationControllerBroadcaster"
v24@0:8^{__SecKey=}16
^{__SecKey=}16@0:8
^{__SecKey=}
@72@0:8@16@24@32@40@48@56B64B68
@"IDSOTRController"
v28@0:8B16@?20
v28@0:8I16@?20
v52@0:8@16@24@32B40@?44
v44@0:8@16B24B28B32@?36
v32@0:8@"NSData"16@?<v@?@"NSDictionary"@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v28@0:8B16@?<v@?>20
v24@0:8@?<v@?I>16
v28@0:8I16@?<v@?>20
v32@0:8@"NSString"16@?<v@?>24
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@?<v@?>40
v72@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@?<v@?>64
v24@0:8@?<v@?@"NSError">16
v48@0:8@"NSString"16@"IDSURI"24@"IDSURI"32@?<v@?@"IDSQueryKeyTransparencyContext"@"NSArray"@"NSError">40
v52@0:8@"NSString"16@"IDSURI"24@"IDSURI"32B40@?<v@?@"NSArray"@"NSError">44
v48@0:8@"NSString"16@"IDSURI"24@"IDSURI"32@?<v@?@"NSError">40
v24@0:8@?<v@?@"NSArray"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v32@0:8@"NSString"16@?<v@?@"NSError">24
v44@0:8@"NSString"16B24B28B32@?<v@?@"NSError">36
v24@0:8@?<v@?@"NSString">16
v28@0:8B16@?<v@?@"NSError">20
B44@0:8@16@24I32@36
B36@0:8@16I24@28
v36@0:8@16B24@?28
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
d32@0:8@16q24
@"IDSRemoteCredential"
@"IDSPairingManager"
@"IDSPushHandler"
@"IMUserDefaults"
@40@0:8@16q24@32
@"IDSTemporaryPhoneUser"
v40@0:8@"IDSUserStore"16@"<IDSUser>"24@"IDSAuthenticationCertificate"32
v32@0:8@"IDSUserStore"16@"<IDSUser>"24
@"<IDSTemporaryPhoneUserExpirationManagerDelegate>"
@"IDSPublicIdentityData"24@0:8^@16
@"NSNumber"24@0:8@"NSString"16
@"IDSNGMKeyLoadingErrorContainer"16@0:8
d24@0:8@16
@28@0:8i16@20
d24@0:8q16
@"IDSSystemAccountAdapter"
@"<IMUserDefaults>"
B24@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16
@24@0:8@"NSString"16
v24@0:8@?<B@?^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}@"<IDSMultiplexerTransportClientConnection>">16
v24@0:8@"CBPeripheral"16
v32@0:8@"CBPeripheral"16@"NSArray"24
v32@0:8@"CBPeripheral"16@"NSError"24
v40@0:8@"CBPeripheral"16@"NSNumber"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBCharacteristic"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBDescriptor"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBL2CAPChannel"24@"NSError"32
@"<IDSWPPacketSendingProtocol>"
v32@0:8@"IDSRapportClient"16@"NSString"24
v40@0:8@"IDSRapportClient"16@"NSDictionary"24@"NSString"32
@"<IDSRapportDeliveryControllerDelegate>"
@"IDSRapportClient"
v24@0:8@"<IDSRapportClientDelegate>"16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
@40@0:8r^v16Q24@32
v32@0:8@"IDSRegistrationPushHandler"16@"NSData"24
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSString"24
v40@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSData"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSArray"24
v32@0:8@"IDSRegistrationPushHandler"16@"IDSTapToRadarPushPayload"24
v72@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64
v32@0:8q16@24
@"IDSRegistrationPushHandler"
B40@0:8q16q24^@32
q32@0:8q16^@24
B52@0:8@16@24@32@40i48
v48@0:8@"ENGroupContext"16@"_ENGroupInfo"24@"ENGroup"32@?<v@?@"ENGroup"@"NSError">40
v40@0:8@"ENGroupContext"16@"ENGroupID"24@?<v@?@"ENGroup"@"NSError">32
v40@0:8@"ENGroup"16@"ENGroupContext"24@?<v@?@"NSData"@"NSError">32
v40@0:8@"NSData"16@"ENGroupContext"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"<ENCypher>"16@?<v@?@"NSArray"B>24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?B@"NSError">32
v80@0:8@16@24@32@40q48@56@64@?72
@"IDSGroupServer"
@"ENGroupID"
v32@0:8@16^@24
v36@0:8d16B24@?28
@"CKContainer"
@"IDSServerBag"
@"CKRecordZone"
@"IDSCloudKitKeyTransparencyDeviceRecord"
@"CUTUnsafePromise"
Q24@0:8@16
v68@0:8@16@24i32@36@44@52@60
v52@0:8@16@24@32i40@44
v48@0:8@16q24@32@40
v80@0:8@16@24@32@40@48@56q64q72
v48@0:8@16@24@32q40
v40@0:8q16@24@32
v48@0:8q16@24@32@40
v48@0:8q16@24@32B40B44
v56@0:8q16@24@32@40B48B52
v52@0:8@16@24B32@36@44
v40@0:8q16q24@32
v68@0:8@"NSString"16@"NSString"24i32@"NSDictionary"36@"NSString"44@"NSString"52@"NSString"60
v52@0:8@"NSString"16@"NSString"24@"NSString"32i40@"NSDictionary"44
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSString"24
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"NSNumber"16@"NSString"24
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSDictionary"40@"NSNumber"48@"NSArray"56
v40@0:8@"NSString"16@"NSNumber"24@"NSString"32
v32@0:8@"NSData"16@"NSString"24
v48@0:8@"NSNumber"16@"NSString"24@"NSString"32@"NSString"40
v24@0:8@"NSArray"16
v24@0:8@"NSSet"16
v40@0:8@"NSArray"16@"NSString"24@"NSString"32
v24@0:8@"NSDictionary"16
v56@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v32@0:8@"NSDictionary"16@"NSString"24
v56@0:8@"NSURL"16@"NSDictionary"24@"NSArray"32@"NSString"40@"NSString"48
v40@0:8@"NSDictionary"16@"NSNumber"24@"NSString"32
v28@0:8B16@"NSString"20
v32@0:8@"NSString"16q24
v48@0:8@"NSDictionary"16q24@"ENGroupID"32@"NSString"40
v56@0:8@"NSString"16@"NSString"24@"NSNumber"32@"NSNumber"40@"NSNumber"48
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSNumber"40@"NSNumber"48@"NSNumber"56q64q72
v48@0:8@"NSString"16@"NSString"24@"NSString"32q40
v36@0:8@"NSSet"16@"NSSet"24I32
v32@0:8@"NSObject<OS_xpc_object>"16@"NSDictionary"24
v36@0:8@"NSString"16@"NSData"24B32
v32@0:8@"NSString"16@"NSData"24
v28@0:8@"NSString"16I24
v40@0:8@"NSData"16@"NSSet"24@"NSString"32
v32@0:8q16@"NSString"24
v52@0:8@"NSArray"16@"NSString"24@"NSString"32@"NSData"40B48
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSData"40
v40@0:8q16@"NSData"24@"NSDictionary"32
v40@0:8q16@"NSData"24@"NSData"32
v48@0:8q16@"NSData"24@"NSData"32@"NSArray"40
v48@0:8q16@"NSData"24@"NSData"32B40B44
v56@0:8q16@"NSData"24@"NSData"32@"NSArray"40B48B52
v52@0:8@"NSString"16@"NSString"24B32@"NSNumber"36@"NSString"44
v40@0:8@"NSString"16@"NSString"24@"NSData"32
v40@0:8@"NSString"16@"NSArray"24@"NSString"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40
v40@0:8@"NSString"16@"NSString"24@"NSArray"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8q16q24@"NSString"32
v80@0:8@16@24@32@40@48@56@64@72
v68@0:8@16@24@32q40@48B56@60
v40@0:8@16d24@32
v52@0:8@16@24@32B40@44
v36@0:8@16I24@28
v40@0:8@16@24^B32
v52@0:8@16q24B32d36@44
v28@0:8B16@"NSDictionary"20
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSDictionary"40
v72@0:8@"NSDictionary"16@"NSString"24@"NSDictionary"32@"NSString"40@"NSString"48@"NSString"56@"NSDictionary"64
v64@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64@"NSDictionary"72
v68@0:8@"NSString"16@"NSString"24@"NSString"32q40@"NSError"48B56@"NSDictionary"60
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"NSDictionary"56
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v40@0:8@"NSString"16d24@"NSError"32
v40@0:8@"NSString"16@"NSString"24@"NSError"32
v32@0:8@"NSString"16@"NSArray"24
v32@0:8@"NSString"16@"NSNumber"24
v32@0:8@"NSData"16@"NSError"24
v40@0:8@"NSData"16@"NSString"24@"NSError"32
v72@0:8@"NSData"16@"NSData"24@"NSArray"32@"NSArray"40@"NSData"48@"NSString"56@"NSError"64
v40@0:8@"NSNumber"16@"NSString"24@"NSError"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32B40@"NSError"44
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSNumber"56
v36@0:8@"NSString"16I24@"NSError"28
v36@0:8@"NSString"16@"NSSet"24B32
v28@0:8@"NSString"16B24
v40@0:8@"NSString"16@"NSArray"24@"NSError"32
v40@0:8@"NSString"16@"NSDictionary"24@"NSError"32
v32@0:8@"NSString"16@"NSError"24
v36@0:8@"NSString"16@"NSArray"24B32
v48@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8@"NSObject<OS_xpc_object>"16@"NSString"24@"NSError"32
v40@0:8@"NSString"16q24@"NSError"32
v32@0:8q16@"NSError"24
v40@0:8q16@"NSData"24@"NSString"32
v32@0:8@"NSArray"16@"NSError"24
v40@0:8@"NSString"16@"NSString"24^B32
v40@0:8@"NSString"16@"NSError"24@"NSArray"32
v40@0:8q16@"NSString"24@"NSError"32
v52@0:8@"NSString"16q24B32d36@"NSError"44
B52@0:8@16@24@32@40B48
v32@0:8@"IDSPushHandler"16@"NSData"24
v56@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"NSString"40@"IMMessageContext"48
v64@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"NSString"40@"IDSIncomingMessageCheckpointTrace"48@"IMMessageContext"56
v48@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"IMMessageContext"40
v40@0:8@"IDSPushHandler"16@"NSString"24@"IMMessageContext"32
v28@0:8@"IDSPushHandler"16B24
v120@0:8@16@24@32@40@48@56@64B72B76@80@88q96B104q108B116
v36@0:8@16q24I32
v44@0:8@16q24I32@36
v120@0:8@"IDSUTunDeliveryController"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108B116
v120@0:8@"IDSUTunDeliveryController"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108B116
v80@0:8@"IDSUTunDeliveryController"16@"NSString"24@"NSString"32@"NSString"40@"NSNumber"48@"NSString"56q64q72
v36@0:8@"IDSUTunDeliveryController"16q24I32
v44@0:8@"IDSUTunDeliveryController"16q24I32@"NSArray"36
v36@0:8@"IDSUTunDeliveryController"16I24@"NSArray"28
v32@0:8@"IDSUTunDeliveryController"16@"NSString"24
@"NSDictionary"24@0:8@"IDSUTunDeliveryController"16
v32@0:8@"IDSDuetInterface"16@"NSArray"24
v64@0:8@"IDSRapportDeliveryController"16@"NSDictionary"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56
v56@0:8@"IDSRegistrationHashProcessor"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48
B60@0:8@16@24i32@36@44@?52
@44@0:8@16@24@32I40
@52@0:8@16@24@32I40B44B48
@48@0:8@16@24@32I40B44
@36@0:8@16B24@28
v60@0:8@?16@24@32@40I48@52
v68@0:8@?16@24@32@40@48I56@60
@48@0:8q16@24@32q40
B20@0:8I16
v48@0:8Q16@24@32@40
B44@0:8Q16@24@32B40
B92@0:8@16i24{?=[8I]}28@60@68@76^@84
v44@0:8@16@24I32@36
@"IMRemoteObjectBroadcaster"
@"IMMultiQueue"
@"IMPair"
@"IMPowerAssertion"
@"IDSDSignInResponder"
@"IDSRegistrationHashProcessor"
@"IDSOpportunisticDeliveryController"
@"IDSRegistrationConductor"
@"IDSTransparentEndpointViewer"
@"<IDSXPCConnectionProtocol>"
@72@0:8@16@24@32@40B48B52@?56@?64
v32@0:8@"ENGroupContext"16@"ENGroup"24
v40@0:8@"ENGroupContext"16@"ENGroup"24@"ENGroup"32
v24@0:8@"ENGroupContext"16
@"<IDSDGroupContextNotifyingObserverDelegate>"
@"CUTResult"
v24@0:8@?<v@?>16
@36@0:8*16I24*28
v24@0:8r*16
@"IDSEncryptionQueue"
B32@0:8@16^@?24
@"IDSMessageHashStore"
@"<IDSActivityPushListenerDelegate>"
B32@0:8@16Q24
@"IDSMMCSUploader"
@"IDSCloudKitContainer"
@"CUTPromiseSeal"
@"NSHashTable"
v36@0:8@"IDSUTunDeliveryController"16@"NSString"24B32
v32@0:8@"NSArray"16@?<v@?@"NSError">24
@"IDSUTunDeliveryController"
@"IDSDuetInterface"
v40@0:8@16B24B28B32B36
v32@0:8B16B20B24B28
@28@0:8C16C20I24
@28@0:8*16I24
@"IDSUTunControlChannelIdentityPair"
@"NSObject<OS_nw_connection>"
@"IDSMPPublicLegacyIdentity"
@32@0:8@16d24
@"<IDSTTLCacheDelegate>"
@48@0:8@16@24@?32@40
@56@0:8@16@24d32@?40@48
@28@0:8@16B24
B24@0:8@"<IDSUser>"16
@"NSDictionary"32@0:8@"NSData"16^@24
@"NSError"
@32@0:8q16B24B28
@24@0:8B16B20
@28@0:8@16i24
@36@0:8@16i24@28
@"<IDSDAccountControllerDeviceSupport>"
@"<IDSDAccountControllerDelegate>"
v44@0:8@16B24@28@36
v40@0:8@16@"NSString"24@"NSString"32
B48@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}24@"NSString"32@"NSString"40
v44@0:8@16B24@"NSString"28@"NSString"36
v32@0:8@16@"NSData"24
v52@0:8@16c24@"NSUUID"28@"NSDictionary"36@"NSDictionary"44
v40@0:8@16c24@"NSUUID"28C36
v32@0:8@16@"NSDictionary"24
v52@0:8@16@"NSDictionary"24@"NSString"32@"NSString"40B48
v40@0:8@16B24@28B36
v36@0:8I16^{sockaddr=CC[14c]}20^{sockaddr=CC[14c]}28
B60@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52
B84@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}60@68@76
B56@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24d32@40@48
v40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24@32
@"IDSUDPLink"
{IDSSockAddrPairTable="iNumPair"i"iMaxNumPair"i"pairs"^{IDSSockAddrPair}"echoCount"i"digestKeyData"[1472C]"digestKeyDataLen"i}
{sockaddr_storage="ss_len"C"ss_family"C"__ss_pad1"[6c]"__ss_align"q"__ss_pad2"[112c]}
v40@0:8i16@20B28q32
Q32@0:8@16@24
Q32@0:8@"NSData"16@"NSUUID"24
@"<WPContinuity>"
@"<IDSWPLinkManagerDelegate>"
B28@0:8q16B24
@"IDSEncryptionController"
v64@0:8@16^@24^@32@40@48^B56
@64@0:8@16@24@32i40@44@52B60
@60@0:8@16@24@32i40@44@52
@52@0:8@16@24@32i40@44
v56@0:8^@16^@24@32@40^B48
@28@0:8B16B20B24
@"IDSRegistration"
@"IDSServiceProperties"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"<IDSXPCPairing>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCPairedDeviceManager>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCReunionSync>"32@0:8@"NSString"16@"IDSDXPCDaemon"24
@"<IDSXPCOpportunistic>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCRegistration>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCActivityMonitor>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCInternalTesting>"24@0:8@"IDSDXPCDaemon"16
@"NSXPCListener"
@"IDSDXPCPairing"
@"IDSDXPCPairedDeviceManager"
@"IDSRestoreMonitor"
@"IDSCTAdapter"
@"IDSSIMPhoneUserSynchronizer"
@"IDSSystemAccountUserSynchronizer"
@"IDSTemporaryPhoneUserSynchronizer"
@"IDSUserAccountSynchronizer"
@"IDSHeartbeatCenter"
@"IDSAccountSync"
@"IDSAccountRepair"
@"IDSDeviceCertificationRepair"
@"IDSSIMResponder"
v24@0:8@"IDSDAccountController"16
v32@0:8@"IDSRegistrationController"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationController"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationController"16@"NSArray"24
v24@0:8@"IDSRegistrationController"16
v24@0:8@"IDSDeviceCertificationRepair"16
v28@0:8@"<IDSCTSIM>"16B24
@"IDSPreflightStack"24@0:8@"NSString"16
v32@0:8@"IDSPreflightStack"16@"NSString"24
v32@0:8@"IDSCTPNR"16@?<v@?B>24
v48@0:8@"IDSPhoneNumberValidationStateMachine"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSPhoneNumberValidationStateMachine"16q24
@"<IDSPreflightStackStore>"
v60@0:8Q16@24@32@40B48@52
B24@0:8Q16
v40@0:8^I16^I24^I32
B20@0:8B16
B52@0:8@16@24B32q36@44
@48@0:8B16@20@28B36@40
v56@0:8@16B24@28@36B44@48
B72@0:8@16@24@32I40I44I48S52Q56@64
@"IDSCountdown"
@"IDSNRDeviceManager"
@"IDSPairedDeviceRepository"
@52@0:8@16@24B32@36@44
@36@0:8B16@20@28
v72@0:8@"NSData"16@"NSData"24@"NSData"32@"NSData"40@"NSData"48@"NSNumber"56@?<v@?@"IDSGroupPutMessage"@"NSError"q@"NSDictionary"@"NSArray">64
v32@0:8@"NSData"16@?<v@?@"IDSGroupGetMessage"@"NSError"q@"NSDictionary"@"NSArray">24
@?32@0:8@16@?24
@?24@0:8@?16
@"<FTMessageDeliveryProtocol>"
@"<IDSGroupServerPushHandler>"
v88@0:8@16@24@32@40@48@56q64B72B76q80
@68@0:8@16@24@32I40q44q52^q60
@68@0:8@16@24I32@36q44q52^@60
v32@0:8@?16@24
v32@0:8@"IDSActivityDescription"16@"NSString"24
@"IDSActivityDescription"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"IDSActivityInfo"16@"NSString"24
v76@0:8@16@24i32@36@44@52@60@68
v60@0:8@16@24@32i40@44@52
v48@0:8q16q24@32@40
v136@0:8@16@24@32q40B48B52B56B60B64q68Q76q84I92i96@100@108B116B120B124B128B132
v148@0:8@16I24I28I32I36@40B48B52B56I60@64@72@80I88I92I96B100@104@112@120B128@132@140
q20@0:8B16
v72@0:8@16@24q32@40@48@56@64
v140@0:8@16@24@32@40@48@56@64@72B80B84@88B96B100B104@108@116@?124@?132
v88@0:8@16@24@32@40@48@56@64@72@?80
v140@0:8@16@24@32@40@48@56@64@72@80@88B96@100@108@116@?124@?132
v144@0:8@16@24@32@40@48@56@64B72B76B80@84B92B96B100@104@112@?120@?128@136
v220@0:8@16d24@32@40B48B52B56B60B64B68@72B80@84@92@100@108@116@124@132@140B148B152@156B164B168@172@180@188@?196@?204@?212
v80@0:8@16@24@32@40@48@56@64@?72
v208@0:8@16@24@32@40B48@52B60B64B68B72q76B84@88@96@104@112@120@128B136B140@144B152B156@160@168@176@?184@?192@?200
v56@0:8@16@24q32B40B44q48
@"IDSConnectivityMonitorMetricProperties"
v36@0:8B16@20@28
C24@0:8q16
@112@0:8q16S24I28I32B36B40B44B48B52@56@64@72@80@88@96@104
@"IDSSocketPairMessage"
@"IDSProtobuf"
v24@0:8^v16
^v16@0:8
v28@0:8@"IDSNRDeviceBridge"16B24
v28@0:8@"IDSNRDeviceBridge"16C24
v112@0:8@16@24@32@40@48@56B64B68@72@80q88B96q100B108
v72@0:8@16@24@32@40@48q56q64
v28@0:8@"IDSUTunPeer"16B24
v24@0:8@"IDSUTunPeer"16
v112@0:8@"IDSUTunPeer"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100B108
v112@0:8@"IDSUTunPeer"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100B108
v72@0:8@"IDSUTunPeer"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48q56q64
v36@0:8@"IDSUTunPeer"16q24I32
v44@0:8@"IDSUTunPeer"16q24I32@"NSArray"36
v36@0:8@"IDSUTunPeer"16I24@"NSArray"28
v228@0:8@16@24@32@40@48q56I64B68B72B76B80@84@92B100B104B108B112B116@120@128@136@144@152@160@168@176B184@188q196@?204@?212@?220
@20@0:8S16
B28@0:8q16I24
v36@0:8@16q24B32
v44@0:8@16@24q32B40
@"<IDSUTunDeliveryControllerDelegate>"
@"IDSNRDeviceBridge"
@"IDSNRDevicePreferencesHandler"
@"IDSConnectivityMonitor"
^{_SpecificEntitlement=S(?=^SS)C}
v40@0:8@"_ENGroupInfo"16@"ENGroup"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"ENGroupID"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENGroup"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"NSData"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENStableGroupID"16@?<v@?@"ENGroup">24
v32@0:8@"ENGroupID"16@?<v@?>24
v32@0:8@"ENGroup"16@?<v@?@"NSError">24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?@"NSError">32
v24@0:8@"ENGroup"16
v32@0:8@"ENGroup"16@"ENGroup"24
@"NSXPCConnection"
@"IDSDGroupContextNotifyingObserver"
@"<IDSAPNSAckTrackerDelegate>"
@"IDSQueryKeyTransparencyContext"
v76@0:8@16@24@32@40@48B56@60@68
@"CUTPromise"
v36@0:8i16q20@28
v60@0:8q16i24@28@36B44B48@52
v52@0:8q16i24@28@36B44B48
C24@0:8@16
v32@0:8C16@20C28
@80@0:8@16@24@32@40@48@56@64@72
v72@0:8q16@24@32@40@48@56@64
@"<FTPasswordManager>"
@"<IDSDSignInResponderDeviceSupport>"
@"<IDSDRegistrationControl>"
@"IDSDeliveryController"
@32@0:8q16@24
@"NSSet"32@0:8q16@"NSSet"24
v28@0:8@"<IDSUser>"16B24
@"IMLockdownManager"
@"FTUserConfiguration"
@"IDSMPPublicDeviceIdentityContainer"
{_opaque_pthread_mutex_t=q[56c]}16@0:8
v80@0:8{_opaque_pthread_mutex_t=q[56c]}16
@"IDSPublicKeyStorageCache"
@"<IDSUser>"
@"IDSUserProperties"
v32@0:8q16@?24
@"IDSPersistentMap"
@"IDSRegistrationKeychainManager"
v40@0:8@"IDSActivityMonitorStateManager"16@"IDSActivityUpdate"24@"NSString"32
v36@0:8B16@20@?28
v32@0:8@"<IDSXPCActivityMonitorClient>"16@"NSString"24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v36@0:8B16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"IDSActivityInfo"16@"NSString"24@?<v@?@"NSError">32
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
@"IDSActivityMonitorStateManager"
@56@0:8@16@24I32I36I40S44@48
@"FTMessageDelivery"16@0:8
B24@0:8@"IDSBaseMessage"16
@"IDSBaseMessage"16@0:8
@"NSArray"16@0:8
v24@0:8@"IDSEngramKeyStore"16
v60@0:8@16q24q32@40B48@52
v56@0:8@16q24q32@40@48
v84@0:8@16@24@32@40@48B56@60q68@76
@?40@0:8@16@?24@?32
v60@0:8@16@24@32q40@48B56
B36@0:8@16B24@?28
@"<IDSRegistrationCenterMessageDelivery>"
@"IDSGetDependentRegistrationsCenter"
@"IDSKeyTransparencyVerifier"
@"CUTDeferredTaskQueue"
v28@0:8@"IDSBTLinkManager"16B24
v32@0:8@"IDSBTLinkManager"16@24
v28@0:8@"IDSWPLinkManager"16B24
v32@0:8@"IDSWPLinkManager"16@24
v32@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24
v24@0:8B16B20
v48@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24@32@40
v40@0:8@16@24B32B36
B24@0:8B16B20
@44@0:8@16@24Q32S40
Q48@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24@32@40
v40@0:8Q16@24@32
v44@0:8@16@24@?32i40
v36@0:8@16@24i32
v28@0:8@16c24
v36@0:8@16c24I28B32
v36@0:8@16c24@28
v32@0:8@16c24B28
v48@0:8@16^i24^i32^i40
v40@0:8^Q16^I24@32
@"IDSBTLinkManager"
@"IDSWPLinkManager"
[1025c]
^{__SCDynamicStore=}
v40@0:8@"IDSTTLCache"16@24@"NSString"32
v48@0:8@"IDSTTLCache"16@24@"NSString"32@?<v@?@>40
B40@0:8@"IDSTTLCache"16@24@"NSString"32
B24@0:8@"IDSTTLCache"16
@"RPCompanionLinkClient"
@"IDSTTLCache"
@72@0:8@16q24@32@40@48@56B64B68
Q20@0:8I16
Q24@0:8q16
v48@0:8i16@20Q28^[16C]36S44
v48@0:8@16Q24^[16C]32S40i44
v28@0:8d16B24
v56@0:8@16@24@32@40q48
v44@0:8Q16@24C32I36B40
v32@0:8Q16@24
v40@0:8Q16@24I32B36
v52@0:8@16B24S28q32i40@44
B36@0:8@16@24I32
v28@0:8B16q20
q20@0:8C16
v68@0:8@16@24S32@36B44B48@52B60B64
@"<IDSUTunConnectionDelegate>"
@"<IDSSocketPairConnectionProtocol>"
@"IDSLocalDeliveryQueue"
[3q]
v24@0:8@"<IDSCTPNRRequestData>"16
v24@0:8@"<IDSCTPNRResponseData>"16
q24@0:8q16
@"<IDSPhoneNumberValidationStateMachineMessageDelivery>"
@"<IDSPhoneNumberValidationStateMachineLockdownManager>"
@"IDSPhoneNumberValidationModeArbiter"
@"IDSCTPNR"
@64@0:8@16@24@32@40@?48@?56
@"IDSDeviceHeartbeatCenter"
@"FTNetworkSupport"
v36@0:8C16@?20@28
v28@0:8C16@20
I24@0:8@16
@?24@0:8@16
v36@0:8@16d24C32
v44@0:8@16@24@32I40
v44@0:8@16@24B32@?36
I24@0:8d16
@"IDSRemoteCredential"16@0:8
@"NSDate"16@0:8
@44@0:8B16@20@28@36
v56@0:8@16@24@32B40B44@48
I32@0:8@16@24
v68@0:8@16@24@32@40B48B52B56@?60
v64@0:8@16@24@32@40B48B52@?56
v44@0:8I16@20@28@36
I40@0:8@16@24@32
I44@0:8@16@24@32B40
@"<IDSIDStatusDependencyProvider>"
v28@0:8I16@20
v24@0:8@"NSNumber"16
v28@0:8I16@"NSNumber"20
d28@0:8I16@20
v24@0:8@?<v@?@"<IDSXPCPairing>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCPairedDeviceManager>"@"NSError">16
v32@0:8@"NSString"16@?<v@?@"<IDSXPCReunionSync>"@"NSError">24
v24@0:8@?<v@?@"<IDSXPCOpportunistic>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCRegistration>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCActivityMonitor>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCInternalTesting>"@"NSError">16
@"<IDSDXPCDaemonCollaboratorProvider>"
@"<IDSXPCReunionSync>"
@"IDSQuickRelayAllocateMessage"
@"QRSelfAllocationArray"
@"QRStreamInfo"
@80@0:8@16@24@32B40@44^{?=SSIQI*}52@60@?68i76
@40@0:8@16@24^q32
@40@0:8@16@24^B32
B60@0:8@16@24Q32S40S44I48@52
B32@0:8@16S24S28
@84@0:8@16@24B32@36@44@52@60@?68i76B80
@72@0:8@16@24@32@40@48@56@?64
@88@0:8@16I24@28q36S44Q48S56I60@64B72B76i80i84
I20@0:8i16
v32@0:8@16B24i28
v68@0:8I16q20q28I36Q40@48@56B64
@40@0:8@16@?24@?32
v40@0:8@16d24@?32
v48@0:8@16@?24@?32@40
v56@0:8@16@24@?32@?40@48
v24@0:8@"CBCentralManager"16
v32@0:8@"CBCentralManager"16@"NSDictionary"24
v48@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSDictionary"32@"NSNumber"40
v32@0:8@"CBCentralManager"16@"CBPeripheral"24
v40@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSError"32
v40@0:8@"CBCentralManager"16q24@"CBPeripheral"32
v36@0:8@16S24@28
v24@0:8@"CBPeripheralManager"16
v32@0:8@"CBPeripheralManager"16@"NSDictionary"24
v32@0:8@"CBPeripheralManager"16@"NSError"24
v40@0:8@"CBPeripheralManager"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheralManager"16@"CBCentral"24@"CBCharacteristic"32
v32@0:8@"CBPeripheralManager"16@"CBATTRequest"24
v32@0:8@"CBPeripheralManager"16@"NSArray"24
v36@0:8@"CBPeripheralManager"16S24@"NSError"28
v40@0:8@"CBPeripheralManager"16@"CBL2CAPChannel"24@"NSError"32
v24@0:8@"CBScalablePipeManager"16
v40@0:8@"CBScalablePipeManager"16@"NSString"24@"NSError"32
v32@0:8@"CBScalablePipeManager"16@"NSString"24
v32@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24
v40@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24@"NSError"32
@"CBCentralManager"
@"CBPeripheralManager"
@"CBScalablePipeManager"
@"CBPeripheral"
@"<IDSBTLinkManagerDelegate>"
@"IDSNanoRegistryPluginManager"
@24@0:8d16
@"IDSNRDevicePreferences"
@72@0:8@16@24@32@40@48@56@64
@56@0:8@16@24^q32q40^@48
@48@0:8@16@24q32^@40
@56@0:8@16@24q32q40^@48
v64@0:8@16@24q32q40@48@?56
v88@0:8@16@24@32@40@48@56q64@?72B80B84
v104@0:8@16@24@32@40@48@56q64B72@76q84@?92B100
v56@0:8@16@24q32q40@?48
@48@0:8@16@24q32^q40
v68@0:8@16@24q32B40q44@52@?60
v32@0:8@?16q24
v72@0:8@16@24@32@40@48@56q64
@"IDSEncryptionQueueManager"
B32@0:8B16I20@?24
@"AVConference"
@"<_IDSSessionConnectionDelegate>"
v40@0:8@16d24q32
v28@0:8@16f24
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v44@0:8@16q24B32@36
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v32@0:8@16I24I28
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v40@0:8@16Q24Q32
v40@0:8Q16Q24Q32
@32@0:8@16B24B28
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
@"ENGroupContext"
v72@0:8@16@24@32@40@48@?56@?64
v56@0:8@16^@24^@32^@40@48
v56@0:8@16@24@32@?40@?48
v148@0:8@16@24@32@40@48B56@60B68B72@76@84B92B96@100@108q116B124B128@?132@?140
v84@0:8@16@24@32@40@48q56B64@68@?76
v56@0:8@16^@24^@32@40@48
v80@0:8@16@24@32@40@48@56@?64@?72
v64@0:8@16@24@32@?40@?48@?56
@"IDSProtoKeyTransparencyLoggableData"
@"IDSEndpoint"
v32@0:8@"IDSDAccount"16@"NSArray"24
v48@0:8@16@24@32B40B44
@32@0:8@16@?24
B64@0:8@16@24@32@40@48@56
@68@0:8@16@24@32@40@48B56^@60
@52@0:8@16@24@32^@40B48
v44@0:8@16@24@32B40
v48@0:8q16@24@32q40
v84@0:8@16@24@32@40q48d56B64@?68@?76
@"IDSRealTimeEncryptionIdentity"
@300@0:8@16@24@32@40@48@56B64@68B76B80B84@88B96@100B108@112@120q128@136@144@152B160@164B172B176B180B184B188@192@200B208@212@220@228@236B244@248@256B264B268B272B276B280B284B288@292
@"IDSDestination"
@32@0:8B16q20I28
@40@0:8B16q20I28@32
@28@0:8I16@20
@40@0:8q16@24q32
v32@0:8d16q24
@36@0:8Q16C24^B28
@44@0:8Q16q24B32@36
@40@0:8Q16q24@32
@40@0:8@16@24q32
@48@0:8@16@24q32q40
@68@0:8@16@24q32q40B48q52^B60
v80@0:8@16@24@32@40@48@56B64C68@?72
v72@0:8@16@24@32@40@48B56C60@?64
v76@0:8@16@24@32@40@48@56C64@?68
v68@0:8@16@24@32@40@48C56@?60
@28@0:8^{__CFArray=}16B24
@48@0:8@16q24@32q40
@28@0:8B16q20
@36@0:8B16q20@28
@64@0:8Q16Q24q32@40B48B52@56
@72@0:8Q16Q24q32@40B48B52@56@64
@64@0:8@16q24Q32Q40@48@56
@56@0:8@16q24Q32Q40@48
v56@0:8@16@24B32B36@40@?48
v32@0:8@?16d24
v28@0:8@?16B24
@"IDSDatabase"
v52@0:8@16B24Q28Q36Q44
v48@0:8@16Q24Q32Q40
v68@0:8@16B24Q28Q36Q44Q52Q60
v52@0:8@16B24Q28Q36q44
v44@0:8@16B24Q28Q36
v76@0:8@16B24Q28Q36Q44Q52Q60Q68
v48@0:8Q16Q24Q32@40
v44@0:8@16Q24Q32I40
v32@0:8I16I20I24I28
v52@0:8Q16I24I28I32@36@44
v32@0:8Q16Q24
v52@0:8@16@24B32d36d44
v56@0:8Q16Q24Q32Q40Q48
v52@0:8@16q24B32d36q44
v32@0:8@"IDSDSession"16@?<v@?B>24
v32@0:8@"IDSDSession"16@?<v@?B@"NSData">24
@"IMNetworkAvailability"
@60@0:8@16@24B32@36@44@52
^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16@0:8
{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16@0:8
v4608@0:8{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16
@"_IDSSessionConnection"
@"<IDSDSession>"
{?="SRTPSend"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{cssm_data="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i"replayWindow"^{SRTPReplayProtection}}"SRTPRecv"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{cssm_data="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i"replayWindow"^{SRTPReplayProtection}}}
v24@0:8@"NSData"16
@48@0:8@16q24@32@40
@56@0:8@16q24@32@40@48
@?<v@?@"NSArray"@"NSArray"@"NSDictionary">16@0:8
@"IDSRegistrationProperties"16@0:8
@"IDSPeerMessage"16@0:8
@"IDSRegistrationProperties"
@"IDSPeerMessage"
v32@0:8@"IDSPhoneSubscription"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"IDSURI"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSDictionary">24
@32@0:8@?16@24
v24@0:8@"IDSPersistentMap"16
@"NSDictionary"48@0:8@"NSDictionary"16@"NSArray"24@"NSString"32@"NSString"40
@56@0:8@16@24@32@40B48B52
@60@0:8@16@24@32@40B48B52B56
@60@0:8@16@24@32@40Q48B56
B48@0:8@16@24@32@40
@76@0:8@16@24@32@40^@48^@56@64B72
d44@0:8@16@24@32I40
q56@0:8@16@24@32@40@48
B56@0:8@16@24@32@40@48
B64@0:8@16@24@32@40B48B52@?56
B64@0:8@16@24@32@40@48@?56
v56@0:8@16@24@32@?40@48
@"<IDSPeerIDQueryHandler>"
@"<IDSPeerIDPushHandler>"
@32@0:8@16i24B28
@36@0:8@16i24i28B32
v32@0:8Q16i24i28
v24@0:8*16
@"IDSGenericConnectionID"
@"IDSSockAddrWrapperPair"
@"IDSHCInfo"
@"NSObject<OS_nw_endpoint>"
@"IDSGenericConnection"
@"IDSDeviceConnectionInfo"
v24@0:8@"NSMutableString"16
@64@0:8d16d24d32d40d48q56
@40@0:8d16d24q32
v72@0:8r^v16Q24^{sockaddr=CC[14c]}32^{sockaddr=CC[14c]}40C48@52B60^B64
C60@0:8@16^{sockaddr=CC[14c]}24^{sockaddr=CC[14c]}32C40r^v44Q52
v56@0:8@16r*24@32@40@?48
B32@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16@24
v56@0:8@16@24@32i40i44@?48
Q32@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}24
Q36@0:8@16^^{?}24i32
v40@0:8@16@?24@32
{SimpleNSStringToObjectTable="tableSize"i"elements"^{SimpleNSStringToObjectTableElement}"elementCount"i}
@"IDSLinkManager"
B64@0:8@"NSArray"16@"NSData"24@"NSString"32@"NSString"40@"IDSPeerIDQueryContext"48@?<v@?@"NSString"@"NSArray"@"NSArray"@"NSDictionary"@"NSString"B@"NSDictionary"B>56
v32@0:8@?<v@?@"NSString"@"NSArray"@"NSArray"@"NSDictionary"@"NSString"B@"NSDictionary"B>16@"NSString"24
B48@0:8@?16@24@32@40
@"FTMessageDelivery_DualMode"
@"<IDSPeerIDNetworkChangeNotifier>"
@"<IDSPeerIDQueryHandlerDelegate>"
@"<IDSPeerIDQueryHandlerDataSource>"
@56@0:8@16@24@32@40Q48
@"IDSTransferServicesController"
v40@0:8^@16^@24@32
v96@0:8@16@24@32@40B48@52B60d64@72q80@?88
v56@0:8@16q24@32@40@48
v48@0:8@?16@24d32@40
B32@0:8q16@24
v76@0:8@16@24@32@40@48@56B64@?68
v92@0:8@16@24@32@40@48@56@64@72q80B88
v40@0:8@16@24d32
v48@0:8q16@24q32@40
v100@0:8B16@20@28@36@44@52@60@68@76@84@?92
B108@0:8@16@24@32@40@48@56@64@72@80B88@92@100
@88@0:8@16@24@32@40@48@56@64B72B76@80
v56@0:8I16@20q28I36q40@48
v88@0:8@16@24@32@40@48@56q64q72@80
v56@0:8@16@24@32q40@48
B40@0:8@16B24@28B36
B36@0:8@16B24@28
v76@0:8@16@24@32@40I48@?52@?60@?68
v44@0:8@16@24q32I40
v52@0:8@16@24q32@40I48
@?48@0:8@16@24@32@40
B32@0:8@16B24B28
B36@0:8@16B24B28B32
@"<IDSAppleIDRegistrationCenterMessageDelivery>"
@"<IDSPipelineComponent>"24@0:8@"<IDSPipelineComponent>"16
@"IDSPromise"24@0:8@"<IDSPipelineParameter>"16
@"<IDSPipelineComponent>"
v68@0:8@16@24@32@40B48@?52@?60
B24@0:8@"NSArray"16
@"IDSPairedDeviceKeychainSchema"
v56@0:8q16@24@32@40@48
v64@0:8q16@24@32@40B48B52@56
v56@0:8q16@24@32B40B44@48
@88@0:8@16@24@32@40@48@56@64@72@?80
@"IDSDataMigrationTracker"
B72@0:8@16@24@32@40@48I56I60I64S68
B24@0:8@?16
@"<IDSPairedDevicePersister>"
^{__SecKey=}32@0:8r^{__CFDictionary=}16^^{__CFError}24
i24@0:8r^{__CFDictionary=}16
i32@0:8r^{__CFDictionary=}16r^^v24
@48@0:8^{__SecKey=}16r^{__CFString=}24r^{__CFData=}32^^{__CFError}40
B56@0:8r^{__CFData=}16r^{__CFData=}24^{__SecKey=}32r^{__CFString=}40^^{__CFError}48
^{__SecKey=}24@0:8^{__SecKey=}16
@32@0:8^{__SecKey=}16^^{__CFError}24
i24@0:8^@16
@"NSData"48@0:8^{__SecKey=}16r^{__CFString=}24r^{__CFData=}32^^{__CFError}40
@"NSData"32@0:8^{__SecKey=}16^^{__CFError}24
^{__SecKey=}32@0:8^{__CFDictionary=}16^^{__CFError}24
i32@0:8^{__CFDictionary=}16r^^v24
i24@0:8^{__CFDictionary=}16
@48@0:8^{__SecKey=}16^{__CFString=}24^{__CFData=}32^^{__CFError}40
B56@0:8^{__CFData=}16^{__CFData=}24^{__SecKey=}32^{__CFString=}40^^{__CFError}48
@40@0:8@16@24^@32
^{__SecKey=}24@0:8^@16
@"<IDSAccountSigningKeyKeychainAdapter>"
@32@0:8^{__SecKey=}16@24
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v32@0:8@"IDSLocalPairingAddPairedDeviceInfo"16@?<v@?@"NSError">24
v40@0:8@"NSUUID"16q24@?<v@?@"NSError">32
v24@0:8@?<v@?@"IDSLocalPairingLocalDeviceRecord"@"NSDictionary"@"NSError">16
v36@0:8@"NSUUID"16B24@?<v@?@"NSError">28
v40@0:8@"NSString"16@"NSSet"24@?<v@?@"NSError">32
@"IDSDaemon"
@"IDSQuickSwitchHelper"
@"IDSUTunController"
@"IDSServer"
@"IDSPhoneNumberValidationStateMachine"
@"<IDSPhoneUserRegistryDeviceSupport>"
@32@0:8B16B20B24B28
@40@0:8q16q24^@32
B48@0:8@16q24q32^@40
@40@0:8q16^B24^@32
@64@0:8q16@24@32q40^@48^@56
@68@0:8q16B24^B28^B36^B44^@52^@60
@48@0:8@16^B24^B32^@40
@56@0:8@16^B24^B32^B40^@48
@52@0:8i16@20@28q36@44
v40@0:8Q16Q24@32
@"<IDSRegistrationHashProcessorDelegate>"
B24@0:8^B16
@"<IDSDeviceCertificationRepairDelegate>"
@"IDSTemporaryPhoneUserCredential"
v32@0:8@"IDSTemporaryPhoneUserExpirationManager"16@"IDSTemporaryPhoneUser"24
@"IDSTemporaryPhoneUserExpirationManager"
@"IDSTransactionQueue"
v32@0:8@16Q24
v32@0:8@"NSStream"16Q24
@44@0:8@16B24@28@36
v48@0:8@16@24@32^v40
q44@0:8^v16Q24i32^B36
v24@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]ccidQ[0C]}16
@"CBScalablePipe"
@"<IDSMadridAckTrackerDelegate>"
@"IDSProtoKeyTransparencyTrustedServiceSignatures"
q32@0:8@16@24
@"NSData"32@0:8@"NSString"16@"NSData"24
q32@0:8@"NSString"16@"NSData"24
v56@0:8@16@24Q32@40@48
@32@0:8Q16@24
v48@0:8@16d24@32d40
v64@0:8@16d24@32d40@48@56
Q40@0:8@16@24@32
@"IDSCloudKitKeyTransparencyStore"
@"IDSKeyTransparencyPolicy"
@"KTVerifier"
@"<IDSKeyTransparencyRegistrationDataSource>"
@"<CUTMetricLogger>"
B40@0:8@"NSString"16@"NSString"24@"NSString"32
@"IDSIDStatusQueryController"
v44@0:8@16@24B32@36
v60@0:8@16@24@32@40B48@52
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>abs-client</key>
<integer>772496756</integer>
<key>application-identifier</key>
<string>com.apple.identityservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>com.apple.BTServer.allowRestrictedServices</key>
<true/>
<key>com.apple.BTServer.appleMfgDataAdvertising</key>
<true/>
<key>com.apple.BTServer.appleMfgDataScanner</key>
<true/>
<key>com.apple.BTServer.le.att</key>
<true/>
<key>com.apple.BTServer.le.pipe</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>data-allowed-write</string>
<string>spi</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.Contacts.database-allow</key>
<true/>
<key>com.apple.CoreTelephony.DataUsageInfo.allow</key>
<true/>
<key>com.apple.SystemConfiguration.SCDynamicStore-write-access</key>
<true/>
<key>com.apple.SystemConfiguration.SCPreferences-write-access</key>
<string>YES</string>
<key>com.apple.asd.client</key>
<string>6624379988</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.companionappd.connect.allow</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.coretelephony.Identity.get</key>
<true/>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.private.ids.kt</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.gizmoappd.appmanager.allow</key>
<true/>
<key>com.apple.keystore.absinthe</key>
<true/>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mkb.usersession.info</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.mobilemail.mailservices</key>
<true/>
<key>com.apple.nano.nanoregistry.ids.plugin</key>
<true/>
<key>com.apple.networkd_privileged</key>
<true/>
<key>com.apple.networkrelay.companionLink.isEnabled</key>
<true/>
<key>com.apple.networkrelay.deviceMonitor</key>
<true/>
<key>com.apple.networkrelay.devicePreferences</key>
<true/>
<key>com.apple.networkrelay.devices.read</key>
<true/>
<key>com.apple.networkrelay.devices.write</key>
<true/>
<key>com.apple.payment.all-access</key>
<true/>
<key>com.apple.peerpayment.all-access</key>
<true/>
<key>com.apple.private.MobileActivation</key>
<array>
<string>RequestReactivation</string>
<string>GetActivationState</string>
</array>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
<string>SerialNumber</string>
<string>InternationalMobileEquipmentIdentity</string>
<string>MobileEquipmentIdentifier</string>
<string>SysCfg</string>
</array>
<key>com.apple.private.ProvInfoIOKitUserClient.access</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.private.ids.kt</key>
<string>com.apple.private.ids.kt</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.communicationsfilter</key>
<true/>
<key>com.apple.private.ids.remotecredentials</key>
<true/>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imtransferservice</key>
<true/>
<key>com.apple.private.kernel.global-proc-info</key>
<true/>
<key>com.apple.private.keychain.sysbound</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/DevicePrivateKey</string>
<string>NULL/DeviceCertificate</string>
<string>NULL/ActivationPrivateKey</string>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.nehelper.privileged</key>
<true/>
<key>com.apple.private.network.interface-control</key>
<true/>
<key>com.apple.private.network.restricted.port.ids_cloud_service_connector</key>
<true/>
<key>com.apple.private.network.restricted.port.ids_service_connector</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.security.storage.IdentityServices</key>
<true/>
<key>com.apple.private.skywalk.register-kernel-pipe</key>
<true/>
<key>com.apple.private.skywalk.register-user-pipe</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceBluetoothPeripheral</string>
</array>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<string>/Library/Caches/PassKit/</string>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.pisco.suinfo</string>
</array>
<key>com.apple.seserviced.kmlXpcService</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.telephony.cupolicy-monitor-access</key>
<true/>
<key>com.apple.terminusd.deviceMonitor</key>
<true/>
<key>com.apple.transparency.kt</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>fairplay-client</key>
<string>1004488730</string>
<key>keychain-access-groups</key>
<array>
<string>ichat</string>
<string>apple</string>
<string>lockdown-identities</string>
<string>com.apple.apsd</string>
</array>
<key>keychain-cloud-circle</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>identityservicesd</string>
</array>
</dict>
</plist>
