@(#)PROGRAM:CoreNFC  PROJECT:CoreNFC-1
records
%08x %08x %c[%s %s]:%i 
Total size of all NDEF records exceeds the size limit
%s %s
supportsSecureCoding
TB,R
T@"NSArray",C,N,V_records
length
TQ,R,N
Node size must be 2 bytes long
Block list element must be 2 or 3 bytes long
v8@?0
System code must not contain the 0xFF wildcard value
v24@?0@"NSData"8@"NSError"16
Number of nodes must be between 1 to 32 inclusively
Number of service codes must be between 1 to 16 inclusively
Number of elements in the block list and the block data list does not match
Block list size exceeds the maximum limit
Block data length must be 16 bytes long
Command packet length must be between 1 to 254 inclusively
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
type
session
T@"<NFCReaderSession>",R,W,N
available
TB,R,N,GisAvailable
currentSystemCode
T@"NSData",R,&,N
currentIDm
mifareFamily
identifier
T@"NSData",R,C,N
historicalBytes
TQ,N,V_mifareFamily
flags
TC,N,V_flags
manufacturerCode
TQ,N,V_manufacturerCode
customCommandCode
TQ,N,V_customCommandCode
requestParameters
T@"NSData",C,N,V_requestParameters
range
T{_NSRange=QQ},N,V_range
chunkSize
TQ,N,V_chunkSize
NFCISO15693ReaderSessionTag.m
Invalid UID length
%@ with response length = %lu
%@ in commandConfiguration asNSDataWithError
%@ in readConfiguration asNSDataArrayWithUID
icManufacturerCode
icSerialNumber
typeNameFormat
payload
NDEF payload exceeds the size limit
TNF=%d, Payload Type=%@, Payload ID=%@, Payload=%@, ChunkSize=%zu
Record serialization error
TC,N,V_typeNameFormat
T@"NSData",C,N,V_type
T@"NSData",C,N,V_identifier
T@"NSData",C,N,V_payload
Invalid UTF8 URI string
Missing URI field
NFCNDEFPayload.m
Please use -wellKnownTypeTextPayloadWithString:locale: replacement
Invalid payload length
Empty string
Invalid UTF8 character
%%%02X
com.apple.corenfc.session.xpc
Failed to connect to NFCD
maximumRetries
TQ,N,V_maximumRetries
retryInterval
Td,N,V_retryInterval
sessionKey
Tag is not connected
Error=%@
nfcd
Session queue is not available; dispatching on main queue
NFCTag.m
v16@?0@"NSError"8
configuration
Tq,R,N
XPC Error
Stack Error
Tag Not NDEF formatted
Unavailable initializer
Not available
No suitable NDEF tag found
Delegate conforms to [NFCNDEFReaderSessionDelegate readerSession:didDetectTags]; polling is auto restarted.
Invalid tag object
Only tag from the current session is allowed
Unknown delegate type: %ld
Delegate does not implement -readerSessionDidBecomeActive: method
NFCNDEFTag.m
Invalid expectedResponseLength value; should be from 1 to 65536 or -1
Invalid APDU format
Unexpected Lc & Le field combination
Missing data specified by Lc
Unexpected extended Lc & short Le combination
Unexpected short Lc & extended Le combination
Unexpected lc & le field combination
Missing data when Lc is > 0
0x%02X, 
0x%02X
instructionClass
TC,R,N
instructionCode
p1Parameter
p2Parameter
data
expectedResponseLength
initialSelectedAID
T@"NSString",R,&,N
applicationData
proprietaryApplicationDataCoding
TB,R,N
Feature not supported
Missing required entitlement
Invalid parameter
Invalid parameter length
Parameter value is out of bound
Tag connection lost
Maximum retries exceeded
Tag response error
Session invalidated
Packet length has exceeded the limit
Session invalidated by user
Session timeout
Session invalidated unexpectedly
System resource unavailable
First NDEF tag read
Invalid configuration parameters
NDEF tag is read only
NDEF tag write failed
Insufficient space on NDEF tag
NDEF tag does not contain any NDEF message
NFC radio is disabled
Block range must be between 0 to 255 inclusively
Data block length must be greater than 0
Unexpected block size of 0
Specified range length does not match the number of elements in the data block list
Elements in the data block list are inconsistent in size
v64@?0@"NSData"8q16q24q32q40q48@"NSError"56
Custom command code must be between 0xA0 to 0xDF inclusively
Forcing minimum 20ms delay
Invalid NFCPollingOption parameter
Not support
Delegate does not implement -tagReaderSessionDidBecomeActive: method
Delegate does not implement -tagReaderSession:didDetectTags: method
No suitable tag found
connectedTag
T@"<NFCTag>",R,&,N
{Mode=%ld, passId=%@, url=%@}
mode
Tq,N,V_mode
passTypeIdentifier
T@"NSString",&,N,V_passTypeIdentifier
T@"NSURL",&,N,V_url
status
Tq,R,N,V_status
vasData
T@"NSData",R,&,N,V_vasData
mobileToken
T@"NSData",R,&,N,V_mobileToken
B24@?0@8@"NSDictionary"16
Resource error!
URL length is greater than 64bytes!
Transceive error: %@
Restart polling
com.apple.corenfc.useractivity.ndefmessagepayload
Unarchive error: %@
Unexpected class type for the message
Archive error: %@
ndefMessagePayload
T@"NFCNDEFMessage",R,N
NFCError
ISO15693TagResponseErrorCode
TagResponseInvalidLength
http://www.
https://www.
http://
https://
tel:
mailto:
ftp://anonymous:anonymous@
ftp://ftp.
ftps://
sftp://
smb://
nfs://
ftp://
dav://
news:
telnet://
imap:
rtsp://
urn:
pop:
sip:
sips:
tftp:
btspp://
btl2cap://
btgoep://
tcpobex://
irdaobex://
file://
urn:epc:id:
urn:epc:tag:
urn:epc:pat:
urn:epc:raw:
urn:epc:
urn:nfc:
XPC error: %@
Not implemented
sessionState=%ld, proxy=%@
External reader detected
NFCReaderSession.m
Must be overridden by sub classes
Session queue is nil
Delegate queue is nil
Defaulting to CoreNFCSessionTypeUnknown
com.apple.corenfc.readersession.delegate
com.apple.corenfc.readersession
Dispatch resource init failed
UNKNOWN
NFCReaderSessionDelegate
NFCTagReaderSessionDelegate
NFCNDEFReaderSessionDelegate
NFCVASReaderSessionDelegate
Delegate object does not conform to %@ protocol
Unsupported poll mode
v20@?0@"NSError"8B16
v32@?0@"<NFTag>"8@"NSData"16@"NSError"24
Session has not begun
Session does not support invalidation with error
v32@?0q8Q16@"NSError"24
v24@?0@"NSError"8@"<NFNdefMessage>"16
ready
TB,R,N,GisReady
alertMessage
T@"NSString",C,N
readingAvailable
pollMethod
TQ,N,V_pollMethod
sessionConfig
TQ,N,V_sessionConfig
invalidated
TB,R,N,GisInvalidated
readerProxy
T@"NSObject<NFReaderSessionInterface><NSXPCProxyCreating>",R,&,N
T@"<NFTag>",R,N
sessionId
T@"NSNumber",R,N,V_sessionId
delegateType
Tq,R,N,V_delegateType
delegate
T@,R,W,N
sessionQueue
T@"NSObject<OS_dispatch_queue>",R,N
Delegate does not implement -readerSession:didDetectTags: method
com.apple.nfcd.service.corenfc
error=%@
v28@?0@"NSObject<NFReaderSessionInterface>"8B16@"NSError"20
v20@?0B8@"NSError"12
Stack error: %@
XPC Error: %@
v32@?0@"<NFCHardwareManagerCallbacks>"8Q16^B24
v32@?0@"<NFCSessionCallbacks>"8Q16^B24
delegates
T@"NSArray",R,C,N,GgetDelegates
NFCNDEFMessage
NSSecureCoding
NSCoding
NFCFeliCaTag
NFCTag
NSObject
NSCopying
NFCNDEFTag
NFCMiFareTag
NFCISO15693CustomCommandConfiguration
NFCISO15693ReadMultipleBlocksConfiguration
NFCISO15693ReaderSessionTag
NFCISO15693Tag
NFCHardwareManagerInterface
NFCHardwareManagerCallbacks
NFCNDEFPayload
ConvenienceHelpers
NFCSession
NFCTagCommandConfiguration
NFReaderSessionInterface
NFSessionInterface
NFReaderSessionCallbacks
NFSessionCallbackInterface
NFCNDEFReaderSessionDelegate
NFCNDEFReaderSession
NFCISO7816APDU
NFCISO7816Tag
NFCError
NFCTagReaderSession
NFCVASCommandConfiguration
NFCVASResponse
NFCVASReaderSession
CoreNFC
NFCReaderSessionDelegate
NFCTagReaderSessionDelegate
NFCVASReaderSessionDelegate
NFCReaderSession
NFCSessionCallbacks
NFCISO15693ReaderSession
NFCHardwareManager
init
coder:decodeArrayOfClass:forKey:
encodeObject:forKey:
count
initWithEmptyNdefMessage
countByEnumeratingWithState:objects:count:
type
length
identifier
payload
initWithFormat:
UTF8String
_initWithRecords:
copy
array
records
typeNameFormat
initWithFormatType:type:identifier:payload:chunkSize:
addObject:
data
arrayWithObject:
initWithNDEFRecords:
bytes
recordsFromBytes:length:
_validateRecords:fromOriginal:
_getPayloadsFromNDEFRecords:
description
chunkSize
recordsWithTNF:type:identifier:payload:chunkSize:outError:
addRecordArray:
asData
subdataWithRange:
exceptionWithName:reason:userInfo:
messageBegin
messageEnd
chunked
appendData:
dataWithData:
wellKnownTypeURIPayload
supportsSecureCoding
ndefMessageWithData:
encodeWithCoder:
initWithCoder:
initWithNFNdefMessage:
_getURLsFromNDEFMessage:
setRecords:
.cxx_destruct
_records
copyWithZone:
systemCode
errorWithCode:
dispatchOnDelegateQueueAsync:
dataWithBytes:length:
dictionaryWithObjects:forKeys:count:
errorWithCode:userInfo:
sendFeliCaCommandPacket:completionHandler:
appendBytes:length:
_transceiveWithData:completionHandler:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
asNFCISO15693Tag
asNFCISO7816Tag
asNFCFeliCaTag
asNFCMiFareTag
session
isAvailable
queryNDEFStatusWithCompletionHandler:
readNDEFWithCompletionHandler:
writeNDEF:completionHandler:
writeLockWithCompletionHandler:
pollingWithSystemCode:requestCode:timeSlot:completionHandler:
requestServiceWithNodeCodeList:completionHandler:
requestResponseWithCompletionHandler:
readWithoutEncryptionWithServiceCodeList:blockList:completionHandler:
writeWithoutEncryptionWithServiceCodeList:blockList:blockData:completionHandler:
requestSystemCodeWithCompletionHandler:
requestServiceV2WithNodeCodeList:completionHandler:
requestSpecificationVersionWithCompletionHandler:
resetModeWithCompletionHandler:
currentSystemCode
currentIDm
initWithSession:tag:startupConfig:
_sendAPDU:completionHandler:
sendMiFareCommand:completionHandler:
sendMiFareISO7816Command:completionHandler:
mifareFamily
historicalBytes
setMifareFamily:
_mifareFamily
setManufacturerCode:
setCustomCommandCode:
setRequestParameters:
setFlags:
initWithManufacturerCode:customCommandCode:requestParameters:maximumRetries:retryInterval:
setMaximumRetries:
setRetryInterval:
initWithManufacturerCode:customCommandCode:requestParameters:
asNSDataWithError:
manufacturerCode
customCommandCode
requestParameters
flags
_flags
_manufacturerCode
_customCommandCode
_requestParameters
setRange:
setChunkSize:
initWithRange:chunkSize:maximumRetries:retryInterval:
initWithRange:chunkSize:
asNSDataArrayWithUID:error:
range
_chunkSize
_range
maximumRetries
_MaxRetry
retryInterval
_MaxRetryInterval
_getInternalReaderSession
_transceiveWithSession:sendData:receivedData:error:
code
dataWithCapacity:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
reverseByteOrder:
decodeIdentifier:manufacturerCode:serialNumber:
_parseResponseErrorWithData:
numberWithUnsignedInteger:
_transceiveWithData:receivedData:commandConfig:error:
_parseResponseData:outError:
sendCustomCommandWithConfiguration:completionHandler:
readMultipleBlocksWithConfiguration:completionHandler:
stayQuietWithCompletionHandler:
readSingleBlockWithRequestFlags:blockNumber:completionHandler:
writeSingleBlockWithRequestFlags:blockNumber:dataBlock:completionHandler:
lockBlockWithRequestFlags:blockNumber:completionHandler:
readMultipleBlocksWithRequestFlags:blockRange:completionHandler:
writeMultipleBlocksWithRequestFlags:blockRange:dataBlocks:completionHandler:
selectWithRequestFlags:completionHandler:
resetToReadyWithRequestFlags:completionHandler:
writeAFIWithRequestFlag:afi:completionHandler:
lockAFIWithRequestFlag:completionHandler:
writeDSFIDWithRequestFlag:dsfid:completionHandler:
lockDFSIDWithRequestFlag:completionHandler:
lockDSFIDWithRequestFlag:completionHandler:
getSystemInfoWithRequestFlag:completionHandler:
getSystemInfoAndUIDWithRequestFlag:completionHandler:
getMultipleBlockSecurityStatusWithRequestFlag:blockRange:completionHandler:
fastReadMultipleBlocksWithRequestFlag:blockRange:completionHandler:
customCommandWithRequestFlag:customCommandCode:customRequestParameters:completionHandler:
extendedReadSingleBlockWithRequestFlags:blockNumber:completionHandler:
extendedWriteSingleBlockWithRequestFlags:blockNumber:dataBlock:completionHandler:
extendedLockBlockWithRequestFlags:blockNumber:completionHandler:
extendedReadMultipleBlocksWithRequestFlags:blockRange:completionHandler:
extendedWriteMultipleBlocksWithRequestFlags:blockRange:dataBlocks:completionHandler:
authenticateWithRequestFlags:cryptoSuiteIdentifier:message:completionHandler:
keyUpdateWithRequestFlags:keyIdentifier:message:completionHandler:
challengeWithRequestFlags:cryptoSuiteIdentifier:message:completionHandler:
readBufferWithRequestFlags:completionHandler:
extendedGetMultipleBlockSecurityStatusWithRequestFlag:blockRange:completionHandler:
extendedFastReadMultipleBlocksWithRequestFlag:blockRange:completionHandler:
sendRequestWithFlag:commandCode:data:completionHandler:
icManufacturerCode
icSerialNumber
queueReaderSession:sessionConfig:callback:
areFeaturesSupported:callback:
interfaceWithProtocol:
interface
setInterface:forSelector:argumentIndex:ofReply:
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
hardwareFailedToLoad
decodeIntegerForKey:
decodeObjectOfClass:forKey:
encodeInteger:forKey:
stringWithFormat:
initWithFormat:type:identifier:payload:
initWithFormat:type:identifier:payload:chunkSize:
setTypeNameFormat:
setType:
setIdentifier:
setPayload:
_typeNameFormat
_type
_identifier
_payload
compare:options:range:
substringFromIndex:
dataUsingEncoding:allowLossyConversion:
dataUsingEncoding:
absoluteString
wellKnownTypeURIPayloadWithString:
languageCode
isEqualToData:
getBytes:length:
string
appendString:
initWithData:encoding:
componentsWithString:
resolveURIString:
localeWithLocaleIdentifier:
substringWithRange:
appendFormat:
wellKnownTypeTextPayloadWithLocale:
wellKnownTypeURIPayloadWithURL:
wellKnowTypeTextPayloadWithString:locale:
wellKnownTypeTextPayloadWithString:locale:
_invalidate
dealloc
_connection
synchronousRemoteObjectProxyWithErrorHandler:
_connectIfNeeded
lock
initWithMachServiceName:options:
setRemoteObjectInterface:
setExportedInterface:
setExportedObject:
_connectionLock
invalidate
_setConnection:
unlock
didInvalidate
setInvalidationHandler:
setInterruptionHandler:
_setQueue:
resume
initWithMachServiceName:remoteObjectInterface:exportedObjectInterface:exportedObject:delegate:
_exportedObjectClassName
_xpcQueue
_remoteObjectInterface
_exportedObjectInterface
_machServiceName
_exportedObject
_delegate
_maximumRetries
_retryInterval
_setTag:
_setSession:
_setDelegateQueue:
connectedTag
isEqualToNFTag:
ndefStatus:maxMessageLength:
domain
isEqualToString:
stringWithUTF8String:
submitBlockOnDelegateQueue:
_translateNFCDError:
submitBlockOnSessionQueue:
readNdefMessageWithError:
writeLockNdef
writeNdefMessage:error:
checkPresenceWithError:
_connectWithSession:outError:
sessionId
sessionQueue
technology
tagB
pupi
tagID
tagA
selectedAID
tagF
SystemCode
applicationData
applicationDataCoding
_disconnectWithError:
sharedHardwareManager
getReaderSessionWithKey:
connectTag:error:
connectTag:completionHandler:
disconnectTagWithError:
transceive:tagUpdate:error:
isEqualToNumber:
isReadOnly
isNDEFFormatted
capacity
proprietaryApplicationDataCoding
disconnect
configuration
_connectWithCompletionHandler:
isMatchingSession:outError:
_tag
_sessionKey
_delegateQueue
_configuration
endSession:
prioritizeSession:
startPollingForTags:sessionConfig:callback:
startPollingForNDEFMessagesWithSessionConfig:callback:
stopPolling:
restartPolling:
connect:callback:
disconnectWithCardRemoval:callback:
transceive:callback:
checkPresence:
updateSharingUIScanText:callback:
updateSharingUIStateOnInvalidation:callback:
ndefRead:
ndefWrite:callback:
checkNdefSupport:
writeProtectNDEFTag:
setWithObject:
didStartSession:
didTerminate:
didUIControllerInvalidate:
didDetectTags:
didDetectNDEFMessages:fromTags:updateUICallback:
didDetectExternalReaderWithNotification:
delegateType
delegate
arrayWithArray:
readerSession:didDetectTags:
objectAtIndexedSubscript:
readerSession:didDetectNDEFs:
invalidateSessionWithReason:
initWithDelegate:queue:invalidateAfterFirstRead:
readerSession:didInvalidateWithError:
readerSessionDidBecomeActive:
initWithDelegate:sessionDelegateType:queue:pollMethod:sessionConfig:
featureAvailable:
restartPolling
readingAvailable
initWithDelegate:queue:pollMethod:
connectToTag:completionHandler:
_callbackDidInvalidateWithError:
_callbackDidBecomeActive
_invalidateAfterFirstRead
_tagsRead
ndefAvailability
ndefContainerSize
dispatchBlockOnDelegateQueueAsync:
_connectWithError:
_writeLocked
stringWithString:
initWithInstructionClass:instructionCode:p1Parameter:p2Parameter:data:expectedResponseLength:
initWithData:
instructionClass
instructionCode
p1Parameter
p2Parameter
expectedResponseLength
_payloadOffset
_fullPacket
NF_asHexString
sendCommandAPDU:completionHandler:
initialSelectedAID
initWithCode:userInfo:
dictionaryWithObjectsAndKeys:
addEntriesFromDictionary:
initWithDomain:code:userInfo:
numberWithUnsignedChar:
_generateRequestHeader:flags:
firstObject
numberWithChar:
_wtxRetryWithCommnand:maxRetry:completionHandler:
submitBlockOnSessionQueueWithDelay:block:
initWithPollingOption:delegate:delegateType:queue:
tagReaderSession:didInvalidateWithError:
tagReaderSessionDidBecomeActive:
tagReaderSession:didDetectTags:
initWithPollingOption:delegate:queue:
initWithPollingOption:swiftDelegate:queue:
_connectedTag
_swiftDelegateWrapper
initWithVASMode:passTypeIdentifier:url:
setMode:
setPassTypeIdentifier:
setUrl:
mode
passTypeIdentifier
_mode
_passTypeIdentifier
_url
initWithStatus:data:mobileToken:
status
vasData
mobileToken
_status
_vasData
_mobileToken
predicateWithBlock:
filteredArrayUsingPredicate:
startTimer:
initWithCallback:queue:
stopTimer
passConfigWithMode:passIdentifier:
alertMessage
sessionConfigWithUIMode:sessionType:initialScanText:vasPass:
beginSessionWithConfig:
TLVWithData:
childWithTag:
value
_selectOSE
objectAtIndex:
_getVASDataWithConfig:lastInSequence:
readerSession:didReceiveVASResponses:
initWithVASCommandConfigurations:delegate:queue:
beginSession
_presenceCheckTimer
_vasConfig
_payloadForIdentifier:
unarchivedObjectOfClass:fromData:error:
archivedDataWithRootObject:requiringSecureCoding:error:
_setPayload:object:identifier:dirty:
ndefMessagePayload
setNdefMessagePayload:
removeNFCHardwareManagerCallbacksListener:
dequeueReaderSession:
_invalidateSessionWithCode:message:finalUIState:activateCallback:
_invalidateSessionWithCode:
_startPollingWithMethod:sessionConfig:completionHandler:
_invalidateSessionAndActivateCallbackWithCode:
_resumeDelegateQueue
validateDelegate:expectedType:
isInvalidated
_connectTag:error:
_restartPollingWithCompletionHandler:
_convertMessageToInternal:
invalidateSession
invalidateSessionWithErrorMessage:
isReady
setAlertMessage:
handleSessionResumed
handleSessionSuspended:
_stopPollingWithCompletionHandler:
readerProxy
pollMethod
setPollMethod:
sessionConfig
setSessionConfig:
_sessionQueue
_proxy
_sessionState
_delegateQueueStarted
_invalidationCode
_sessionStartInProgress
_alertMessage
_pollMethod
_sessionConfig
_sessionId
_delegateType
initWithDelegate:queue:
numberWithInteger:
localizedDescription
setObject:forKey:
allKeysForObject:
removeObjectsForKeys:
removeObject:
objectForKey:
enumerateObjectsUsingBlock:
queueReaderSession:sessionConfig:completionHandler:
getDelegates
addNFCHardwareManagerCallbacksListener:
areFeaturesSupported:outError:
_delegates
_xpcSession
_queuedReaderSessions
B16@0:8
@24@0:8@16
B32@0:8@16@24
v24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@16@0:8
Q16@0:8
v16@0:8
@"NSArray"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@24@0:8^{_NSZone=}16
@"<NFCISO15693Tag>"16@0:8
@"<NFCISO7816Tag>"16@0:8
@"<NFCFeliCaTag>"16@0:8
@"<NFCMiFareTag>"16@0:8
@"<NFCReaderSession>"16@0:8
v24@0:8@?16
v32@0:8@16@?24
v24@0:8@?<v@?QQ@"NSError">16
v24@0:8@?<v@?@"NFCNDEFMessage"@"NSError">16
v32@0:8@"NFCNDEFMessage"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSError">16
v48@0:8@16q24q32@?40
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
v48@0:8@"NSData"16q24q32@?<v@?@"NSData"@"NSData"@"NSError">40
v32@0:8@"NSArray"16@?<v@?@"NSArray"@"NSError">24
v24@0:8@?<v@?q@"NSError">16
v40@0:8@"NSArray"16@"NSArray"24@?<v@?qq@"NSArray"@"NSError">32
v48@0:8@"NSArray"16@"NSArray"24@"NSArray"32@?<v@?qq@"NSError">40
v24@0:8@?<v@?@"NSArray"@"NSError">16
v32@0:8@"NSArray"16@?<v@?qqq@"NSArray"@"NSArray"@"NSError">24
v24@0:8@?<v@?qq@"NSData"@"NSData"@"NSError">16
v24@0:8@?<v@?qq@"NSError">16
v32@0:8@"NSData"16@?<v@?@"NSData"@"NSError">24
@"NSData"16@0:8
v32@0:8@"NFCISO7816APDU"16@?<v@?@"NSData"CC@"NSError">24
@40@0:8@16@24q32
v24@0:8Q16
@40@0:8Q16Q24@32
@56@0:8Q16Q24@32Q40d48
@24@0:8^@16
C16@0:8
v20@0:8C16
@"NSData"
@56@0:8{_NSRange=QQ}16Q32Q40d48
@40@0:8{_NSRange=QQ}16Q32
@32@0:8@16^@24
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
{_NSRange="location"Q"length"Q}
B40@0:8@16^Q24^@32
v32@0:8C16C20@?24
v40@0:8C16C20@24@?32
v44@0:8C16{_NSRange=QQ}20@?36
v52@0:8C16{_NSRange=QQ}20@36@?44
v28@0:8C16@?20
v44@0:8C16q20@28@?36
v36@0:8C16q20@?28
v48@0:8q16q24@32@?40
v32@0:8@"NFCISO15693CustomCommandConfiguration"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"NFCISO15693ReadMultipleBlocksConfiguration"16@?<v@?@"NSData"@"NSError">24
v32@0:8C16C20@?<v@?@"NSData"@"NSError">24
v40@0:8C16C20@"NSData"24@?<v@?@"NSError">32
v32@0:8C16C20@?<v@?@"NSError">24
v44@0:8C16{_NSRange=QQ}20@?<v@?@"NSArray"@"NSError">36
v52@0:8C16{_NSRange=QQ}20@"NSArray"36@?<v@?@"NSError">44
v28@0:8C16@?<v@?@"NSError">20
v28@0:8C16@?<v@?qqqqq@"NSError">20
v28@0:8C16@?<v@?@"NSData"qqqqq@"NSError">20
v44@0:8C16q20@"NSData"28@?<v@?@"NSData"@"NSError">36
v36@0:8C16q20@?<v@?@"NSData"@"NSError">28
v44@0:8C16q20@"NSData"28@?<v@?@"NSError">36
v36@0:8C16q20@?<v@?@"NSError">28
v44@0:8C16q20@"NSData"28@?<v@?C@"NSData"@"NSError">36
v28@0:8C16@?<v@?C@"NSData"@"NSError">20
v48@0:8q16q24@"NSData"32@?<v@?C@"NSData"@"NSError">40
B48@0:8@16^@24@32^@40
Q24@0:8@16
Vv40@0:8@16@24@?32
Vv32@0:8Q16@?24
Vv40@0:8@"NSObject<NFReaderSessionCallbacks>"16@"NFReaderSessionConfig"24@?<v@?@"NSObject<NFReaderSessionInterface>"B@"NSError">32
Vv32@0:8Q16@?<v@?B@"NSError">24
@44@0:8C16@20@28@36
@52@0:8C16@20@28@36Q44
@32@0:8@16@24
@56@0:8@16@24@32@40@48
@24@0:8@?16
@"NSLock"
@"NSXPCConnection"
@"NSObject<OS_dispatch_queue>"
@"NSXPCInterface"
@"NSString"
@"<NFCSessionCallbacks>"
d16@0:8
v24@0:8d16
q16@0:8
B32@0:8@16^@24
B24@0:8^@16
B48@0:8@16@24^@32^@40
@"<NFTag>"
@"NSNumber"
Vv24@0:8@?16
Vv24@0:8@?<v@?>16
Vv40@0:8Q16Q24@?32
Vv32@0:8@16@?24
Vv28@0:8B16@?20
Vv32@0:8q16@?24
Vv40@0:8Q16Q24@?<v@?@"NSError">32
Vv32@0:8Q16@?<v@?@"NSError">24
Vv24@0:8@?<v@?@"NSError">16
Vv32@0:8@"<NFTag>"16@?<v@?@"NSError">24
Vv28@0:8B16@?<v@?@"NSError">20
Vv32@0:8@"NSData"16@?<v@?@"<NFTag>"@"NSData"@"NSError">24
Vv24@0:8@?<v@?@"NSError"B>16
Vv32@0:8@"NSString"16@?<v@?@"NSError">24
Vv32@0:8q16@?<v@?@"NSError">24
Vv24@0:8@?<v@?@"NSError"@"<NFNdefMessage>">16
Vv32@0:8@"<NFNdefMessage>"16@?<v@?@"NSError">24
Vv24@0:8@?<v@?qQ@"NSError">16
v24@0:8@"NSError"16
v24@0:8@"NSArray"16
v40@0:8@"NSArray"16@"NSArray"24@?<v@?q>32
v24@0:8@"NFFieldNotification"16
v32@0:8@16@24
v32@0:8@"NFCNDEFReaderSession"16@"NSError"24
v32@0:8@"NFCNDEFReaderSession"16@"NSArray"24
v24@0:8@"NFCNDEFReaderSession"16
@56@0:8@16q24@32Q40Q48
@40@0:8@16@24Q32
@36@0:8@16@24B32
@48@0:8C16C20C24C28@32q40
@24@0:8q16
@32@0:8q16@24
@24@0:8C16C20
v40@0:8@16q24@?32
@48@0:8q16@24q32@40
@40@0:8q16@24@32
@"<NFCTag>"
v24@0:8q16
@"NSURL"
@40@0:8@16@24@32
@28@0:8@16B24
@"NFTimer"
v24@0:8@"NFCReaderSession"16
v32@0:8@"NFCReaderSession"16@"NSError"24
v32@0:8@"NFCReaderSession"16@"NSArray"24
v32@0:8@"NFCTagReaderSession"16@"NSError"24
v24@0:8@"NFCTagReaderSession"16
v32@0:8@"NFCTagReaderSession"16@"NSArray"24
v32@0:8@"NFCVASReaderSession"16@"NSError"24
v32@0:8@"NFCVASReaderSession"16@"NSArray"24
v24@0:8@"NFCVASReaderSession"16
B24@0:8Q16
v24@0:8@"NSString"16
v32@0:8Q16@?24
B32@0:8@16q24
v40@0:8Q16Q24@?32
@40@0:8@16^@24^@32
v44@0:8q16@24q32B40
@32@0:8^q16^Q24
@"NSObject<NFReaderSessionInterface><NSXPCProxyCreating>"
@"NSObject<OS_dispatch_group>"
B32@0:8Q16^@24
@"NSMutableArray"
@"NFCSession"
@"NSMutableDictionary"
