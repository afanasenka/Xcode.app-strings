com.apple.mobilemail
v8@?0
rgb(254,254,254)
background-color
none
-apple-color-filter
100%
max-width
1px 0px 1px 0px
padding
style
title
type
DOWNLOADING_STATUS
Downloading
Delayed
_mf_downloadingStatus
DOWNLOADABLE_STATUS
Tap to Download
_mf_downloadableStatus
_mf_state
action
subtitle
non-extended-content-item
UNAVAILABLE
Main
attachment
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
T@"NSObject<OS_os_log>",R
toolbarHeight
Td,N,V_toolbarHeight
topToBaseline
Td,N,V_topToBaseline
usePhoneLandscapeSymbolConfiguration
TB,N,V_usePhoneLandscapeSymbolConfiguration
com.apple.UIKit.activity.Quicklook
com.apple.mobilemail.activity.Quicklook
com.apple.mobilemail.saveToCameraRoll
com.apple.mobilemail.saveAllAttachments
com.apple.mobilemail.markupDocument
sourceIsManaged
TB,N
v16@?0@"EMContentRepresentation"8
failed to ingest %@ (%@)
v16@?0@"UIAction"8
SAVE_IMAGE
SAVE_VIDEO
QUICK_LOOK
MARKUP_DOCUMENT
MessageActivityViewController.m
Invalid initializer. Use the designated one instead.
delegate
T@"<ContentRepresentationHandlingDelegate>",W,N,V_delegate
context
Tq,N,V_context
T@"NSURL",&,N,V_url
PRINT
pageRenderer
T@"UIPrintPageRenderer",&,N,V_pageRenderer
/System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
### Failed to Soft Linked: /System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
v16@?0@"NSMutableSet"8
contentItem
T@"<EMContentItem>",&,N,V_contentItem
T@"NSString",&,N,V_type
networkUsage
Tq,N,V_networkUsage
topLevelProgress
T@"NSProgress",&,N,V_topLevelProgress
contentRequestPromise
T@"EFPromise",&,N,V_contentRequestPromise
contentRequestProgress
T@"NSProgress",&,N,V_contentRequestProgress
invokerIDs
T@"EFLocked",&,N,V_invokerIDs
future
T@"EFFuture",R,N
progress
T@"NSProgress",R,N
com.apple.mobilemail.messageContentItemsHelperAttachments
<%@: %p> %@
v16@?0@"NSError"8
@"NSProgress"16@?0@?<v@?@"NSURL"B@"NSError">8
replaceNodeWithSrcWithAttachment
set_state_for_attachment_cid
set_progress_for_attachment_cid
background-color:rgb(254,254,254);-apple-color-filter:none
imageAttachmentNodeFinishedDownloading
startDownloadForContentItem
v16@?0@"NSDictionary"8
com.apple.mobilemail.savingPhotos
com.apple.mobilemail.photoLibrary
B16@?0@"NSError"8
WKAttachment is missing for an ID with length %lu, type %@, %@user initiated
not 
webView
T@"WKWebView",&,N,V_webView
contentItems
T@"NSArray",&,N,V_contentItems
representationHandler
T@"<ContentRepresentationHandlingDelegate>",W,N,V_representationHandler
mailDropBannerMetadata
T@"EMMailDropMetadata",R,N,V_mailDropBannerMetadata
totalMailDropDownloadSize
TQ,N,V_totalMailDropDownloadSize
allMailDropsDownloaded
TB,N,V_allMailDropsDownloaded
maildropProgressHandler
T@?,C,N,V_maildropProgressHandler
com.apple.email.signposts
com.apple.mobilemail.MessageContentRepresentationRequest
@"<EFFuture>"16@?0@"<EMMessageListItem>"8
B16@?0@"EMContentRepresentation"8
@"<EFFuture>"16@?0@"EMMessage"8
v16@?0@"NSArray"8
signpostID
signpostLog
message
T@"EMMessage",R,N
itemID
T@"<EMCollectionItemID>",R,N,V_itemID
messageFuture
T@"EFFuture",R,N,V_messageFuture
hasStarted
TB,R
isFinished
state
NO_BODY
MessageHeaderViewModel.m
Invalid parameter not satisfying: %@
builderBlock
-[MessageHeaderViewModel initWithItemBuilder:]
/Library/Caches/com.apple.xbs/Sources/Mail_Sim/Mail-3654.20.0.1.22/MobileMail/MessageHeaderView/MessageHeaderViewModel.m
flagsBuilderBlock
v16@?0@"<MessageHeaderViewModelBuilder>"8
read
TB,N,GisRead
flagged
TB,N,GisFlagged
flagColors
T@"NSIndexSet",C,N
replied
TB,N,GisReplied
forwarded
TB,N,GisForwarded
TB,N,GisVIP
notify
TB,N,GisNotify
mute
TB,N,GisMute
blockedSender
TB,N,GisBlockedSender
hasAttachments
dateReceived
T@"NSDate",C,N
dateSent
subject
T@"ECSubject",C,N
mailbox
T@"MFMailboxUid",C,N
senderList
T@"NSArray",C,N
toList
ccList
bccList
atomManager
T@"MFAddressAtomStatusManager",&,N
T@"NSDate",C,N,V_dateSent
T@"ECSubject",C,N,V_subject
T@"MFMailboxUid",C,N,V_mailbox
T@"NSArray",C,N,V_senderList
T@"NSArray",C,N,V_toList
T@"NSArray",C,N,V_ccList
T@"NSArray",C,N,V_bccList
T@"MFAddressAtomStatusManager",&,N,V_atomManager
observableObserver
T@"EFObservable<EFObserver>",&,N,V_observableObserver
modelObservable
T@"EFObservable",R,N
MessageItemViewModel.m
TB,N,GisRead,V_read
TB,N,GisFlagged,V_flagged
T@"NSIndexSet",C,N,V_flagColors
TB,N,GisReplied,V_replied
TB,N,GisForwarded,V_forwarded
TB,N,GisVIP,V_VIP
TB,N,GisNotify,V_notify
TB,N,GisMute,V_mute
TB,N,GisBlockedSender,V_blockedSender
TB,N,V_hasAttachments
T@"NSDate",C,N,V_dateReceived
v16@?0@"MFModernLabelledAtomList"8
@"NSString"16@?0@"EMMessageSigner"8
MFAddressAtomStatusManager.m
Signers do not match
OTHER_SIGNERS_TITLE
PresentationOptionsEncodedIntoAddress
T@"MFMessageLoadingContext",W,N,V_context
account
T@"EMAccount",&,N,V_account
legacyAccount
T@"MailAccount",&,N,V_legacyAccount
securityInformation
T@"EMSecurityInformation",&,N,V_securityInformation
smimeError
T@"NSError",&,N,SsetSMIMEError:,V_smimeError
atomProvider
T@"<MFAddressAtomProvider>",W,N,V_atomProvider
MESSAGE_FROM_BLOCKED_SENDER
BLOCKED_SENDER_PREFERENCES
T@"<MFBlockedSenderBannerViewDelegate>",W,N,V_delegate
imageName
T@"NSString",&,N,V_imageName
tintColor
T@"UIColor",&,N,V_tintColor
T@"NSString",C,N,V_title
shortTitle
T@"NSString",C,N,V_shortTitle
handlerEnabled
TB,N,V_handlerEnabled
handler
T@?,C,N,V_handler
shouldDismissCardBeforeExecuteHandler
TB,N,V_shouldDismissCardBeforeExecuteHandler
flagColor
T@"NSNumber",&,N,V_flagColor
SEE_MORE
@"UIFont"8@?0
conversationItemFooterView.prefixFont
prefixFont
T@"UIFont",R,N
nameFont
defaultRevealActionButtonOriginY
Td,N,V_defaultRevealActionButtonOriginY
defaultSeeMoreButtonOriginY
Td,N,V_defaultSeeMoreButtonOriginY
contactStore
T@"EMCachingContactStore",&,N,V_contactStore
currentYOffset
Td,N,V_currentYOffset
shouldHideStickyFooterView
TB,R,N
revealActionsButton
T@"UIButton",&,N,V_revealActionsButton
seeMoreButton
T@"UIButton",&,N,V_seeMoreButton
senderName
T@"NSString",C,N,V_senderName
backgroundView
T@"UIVisualEffectView",&,N,V_backgroundView
seeMoreButtonHidden
TB,N,GisSeeMoreButtonHidden
seeMoreButtonAlpha
Td,N
seeMoreButtonHeight
Td,R,N
T@"<MFMessageFooterViewDelegate>",W,N,V_delegate
displayMetrics
T@"MFMessageDisplayMetrics",&,N,V_displayMetrics
allowsCursorSnapping
TB,N,V_allowsCursorSnapping
d8@?0
footerView.seeMoreButton.labelBaselineFromTop
T@"NSString",C,N,V_imageName
@16@?0@"UIColor"8
@16@?0@8
gradientLayer
T@"CAGradientLayer",R,N
gradientColors
T@"NSArray",&,N
locations
startPoint
T{CGPoint=dd},N
endPoint
-[MFHasMoreContentBannerView titleString]
/Library/Caches/com.apple.xbs/Sources/Mail_Sim/Mail-3654.20.0.1.22/MobileMail/MFHasMoreContentBannerView.m
-[MFHasMoreContentBannerView actionStringIsDownloading:]
titleString
T@"NSString",R
T@"<MFHasMoreContentBannerViewDelegate>",W,N,V_delegate
WAS_DOWNLOADED_AS_PLAIN
DOWNLOADING_FULL_MESSAGE
DOWNLOAD_FULL_MESSAGE
MESSAGE_PARTIALLY_DOWNLOADED
remainingBytes
TQ,V_remainingBytes
BYTES_DOWNLOADING
BYTES_REMAINING
TiltedTabViewSkyViewEnabled
UIDebuggingEnabled
tiltedTabSkyViewEnabled
TB,N,V_tiltedTabSkyViewEnabled
TB,N,V_UIDebuggingEnabled
MFLoadBlockedContentBannerView.m
blockedContentTypes
UNABLE_TO_VERIFY_MESSAGE_CONTENT
LOAD_MESSAGE
MESSAGE_HAS_MULTIPLE_SIGNERS
REMOTE_IMAGES_BLOCKED_ENCRYPTION
LOAD_REMOTE_IMAGES_ENCRYPTION
REMOTE_CONTENT_BLOCKED_TRUST_EVALUATION
LOAD_REMOTE_CONTENT_TRUST_EVALUATION
REMOTE_IMAGES_BLOCKED_OTHER
LOAD_REMOTE_IMAGES_OTHER
T@"<MFLoadBlockedContentBannerViewDelegate>",W,N,V_delegate
TQ,N,V_blockedContentTypes
MAIL_DROP_BANNER_SAVE_MIXED
MAIL_DROP_BANNER_SAVE_IMAGE
MAIL_DROP_BANNER_SAVE_NONIMAGE_PLURAL
MAIL_DROP_BANNER_SAVE_NONIMAGE
MAIL_DROP_BANNER_DOWNLOADING_MIXED_PLURAL
MAIL_DROP_BANNER_DOWNLOADING_MIXED
MAIL_DROP_BANNER_DOWNLOADING_IMAGES
MAIL_DROP_BANNER_DOWNLOADING_NONIMAGE_PLURAL
MAIL_DROP_BANNER_DOWNLOADING_NONIMAGE
MAIL_DROP_BANNER_DOWNLOADED_MIXED
MAIL_DROP_BANNER_DOWNLOADED_IMAGE
MAIL_DROP_BANNER_DOWNLOADED_PLURAL
MAIL_DROP_BANNER_DOWNLOADED
MAIL_DROP_BANNER_ATTACHMENT
MAIL_DROP_BANNER_FULL_RES
MAIL_DROP_BANNER_ATTACHMENT_PLURAL
MAIL_DROP_BANNER_ERROR
MAIL_DROP_BANNER_NOT_AVAILABLE_MAIL_DROP
MAIL_DROP_BANNER_NOT_AVAILABLE
MAIL_DROP_BANNER_AVAILABLE_MAIL_DROP
MAIL_DROP_BANNER_AVAILABLE
v20@?0@"NSString"8B16
metaData
T@"EMMailDropMetadata",&,N,V_metaData
bannerState
TQ,N,V_bannerState
downloadProgress
Td,N,V_downloadProgress
T@"<MFMailDropBannerDelegate>",W,N,V_delegate
/%lu
storage
T@"NSMapTable",R,N,V_storage
x-apple-msg-load-wk2
v16@?0@"NSCachedURLResponse"8
text/html
v24@?0@"MFMessageLoadingContextEvent"8@"NSError"16
v16@?0@"NSString"8
ShowAttachmentMarkup
registry
T@"_MFMessageContentURLProtocolRegistry",&,N
scheme
token
T@"EFCancelationToken",R,V_token
loadingContext
T@"MFMessageLoadingContext",R,V_loadingContext
promise
T@"EFPromise",&,N,V_promise
MFMessageContentViewDidAppear
MFMessageContentViewDidFinishFirstPaint
MFMessageContentViewDidFinishFirstPaintMessageKey
MFMessageContentViewDidFinishFirstPaintErrorKey
ShowRemoteImages
SkipMessageReformat
com.apple.mobilemail.messageViewAttachments
com.apple.mobilemail.messageViewTrustConfiguration
MCVLog
v16@?0@8
MCVError
name
stack
AttachmentNodeWasTapped
ExpandQuoteButtonTappedWithYOffset
currentOffsetTop
preOffsetTop
FinishedReformattingMessage
v16@?0@"NSNumber"8
FoundImageCIDAttachments
TextSelected
ImageError
DisableDisplayInfoCache
shouldSkipReformatting
Loading spinner displayed for %fl seconds
v24@?0@"EMContentRepresentation"8@"NSError"16
B16@?0@"EMMailbox"8
MFMessageContentView.m
SHOW_QUOTED_CONTENT
SEE_MORE_FROM
@"NSString"16@?0@"NSString"8
localizedStrings
collapseQuotedContent
showRemoteImages
initial-scale
viewport-width
padding-left
padding-right
padding-top
padding-bottom
BODY
attachments
v12@?0B8
v24@?0q8d16
v16@?0^{CGImage=}8
elementID
contentID
wkIdentifier
MULTI_MAILDROP_ATTACHMENT_LARGE_TITLE
%@_CH
MULTI_MAILDROP_ATTACHMENT_LARGE_MESSAGE
SINGLE_MAILDROP_ATTACHMENT_LARGE_TITLE
SINGLE_MAILDROP_ATTACHMENT_LARGE_MESSAGE
element_id
rect
width
height
@"MFQuotedContentAttribution"16@?0^@8
B16@?0@"DDScannerResult"8
x-apple-data-detectors
facetime
facetime-audio
file
Library/Mail
MESSAGE_CAUSED_PROBLEM_REPEATEDLY
DOWNLOAD
@"UIMenu"16@?0@"NSArray"8
@"UIViewController"8@?0
@"EFFuture"16@?0@"<EMContentItem>"8
SAVE_TO_FILES
SHARE
B16@?0@"UIMenuElement"8
scrollView.contentSize
T@"NSArray",C,V_attachments
selectedHTML
T@"NSString",C,N,V_selectedHTML
loadingIndicatorCancelable
T@"<EFCancelable>",&,N,V_loadingIndicatorCancelable
loadingView
T@"MFMessageContentLoadingView",&,N,V_loadingView
loadingIndicatorVisible
TB,N,GisLoadingIndicatorVisible
initialScale
Td,N,V_initialScale
hasVisibleContent
TB,N,V_hasVisibleContent
webViewLoadingController
T@"MFWebViewLoadingController",&,N,V_webViewLoadingController
T@"WKWebView",R,N
webViewConstants
T@"MFWebViewDictionary",R,N
attachmentDragPreviews
T@"NSDictionary",&,N,V_attachmentDragPreviews
allowLoadOfBlockedMessageContent
TB,N,V_allowLoadOfBlockedMessageContent
contentRepresentation
T@"EMContentRepresentation",R
contentRepresentationError
T@"NSError",&,N,V_contentRepresentationError
showingError
TB,N,V_showingError
loadingSpinnerTailspinToken
T@"<EFCancelable>",&,N,V_loadingSpinnerTailspinToken
trustConfigurationScheduler
T@"<EFScheduler>",R,N,V_trustConfigurationScheduler
T@"<MFMessageContentViewDelegate>",W,N,V_delegate
dataSource
T@"<MFMessageContentViewDataSource>",W,N,V_dataSource
contentRequest
T@"MessageContentRepresentationRequest",&,N,V_contentRequest
T@"MFMessageLoadingContext",&,N,V_loadingContext
scrollView
T@"UIScrollView",R,N
initialContentOffset
T{CGPoint=dd},N,V_initialContentOffset
headerView
T@"MFMessageHeaderView",R,N,V_headerView
headerViewSubjectBlock
T@"UIView",&,N,V_headerViewSubjectBlock
footerView
T@"MFConversationItemFooterView",R,N
automaticallyCollapseQuotedContent
TB,N,V_automaticallyCollapseQuotedContent
showMessageFooter
TB,N,V_showMessageFooter
shouldArchiveByDefault
TB,N,V_shouldArchiveByDefault
mayShareToUnmanaged
messageBlockingReason
Tq,N,V_messageBlockingReason
previousContentSnapshot
T@"UIView",&,N,V_previousContentSnapshot
T@"NSArray",R
initiallyZoomsToShowAllContent
TB,N,V_initiallyZoomsToShowAllContent
suppressScrolling
TB,N,V_suppressScrolling
contentPaddingFollowsLayoutMargins
TB,N,V_contentPaddingFollowsLayoutMargins
showsBanners
TB,N,V_showsBanners
zoomEnabled
TB,N,GisZoomEnabled,V_zoomEnabled
contentRepresentationIfAvailable
mailboxProvider
T@"MFMailboxProvider",&,N,V_mailboxProvider
daemonInterface
T@"EMDaemonInterface",&,N,V_daemonInterface
T@"WKWebView",W,N,V_webView
T@"NSString",C,N,V_name
snapshotView
T@"UIView",&,N,V_snapshotView
snapshotViewYOrigin
Td,N,V_snapshotViewYOrigin
 !important
QLPreviewController
/System/Library/PrivateFrameworks/QuickLook.framework/QuickLook
### Failed to Soft Linked: /System/Library/PrivateFrameworks/QuickLook.framework/QuickLook
QLItem
-[MFMessageDisplayMetrics fontCacheKeyPrefix]
/Library/Caches/com.apple.xbs/Sources/Mail_Sim/Mail-3654.20.0.1.22/MobileMail/MessageHeaderView/MFMessageDisplayMetrics.m
<%@: %p> traitCollection = %@
traitCollection
T@"UITraitCollection",&,N,V_traitCollection
layoutMargins
T{UIEdgeInsets=dddd},N,V_layoutMargins
safeAreaInsets
T{UIEdgeInsets=dddd},N,V_safeAreaInsets
footerViewDisplayMetrics
T@"ConversationFooterViewDisplayMetrics",&,N,V_footerViewDisplayMetrics
footerViewButtonsAnimationOffset
Td,N,V_footerViewButtonsAnimationOffset
trailingButtonView
T@"UIView",&,N,V_trailingButtonView
hasCompactLayout
hasGenerousMargins
prefersFlushSeparator
avatarDiameterForCurrentContentSize
minHorizontalSpacing
topToSenderBaseline
Td,R,N,V_topToSenderBaseline
topToSenderBaselineInConversation
topToSenderBaselineInConversationForMailActionHeader
baselineToBaselineSpacingInConversationForMailActionHeader
baselineToBaselineSpacing
Td,R,N,V_baselineToBaselineSpacing
baselineToBaselineSpacingInConversation
recipientBaselineToFirstSeparator
Td,R,N,V_recipientBaselineToFirstSeparator
recipientBaselineToFirstSeparatorInConversation
firstSeparatorToSubjectBaseline
Td,R,N,V_firstSeparatorToSubjectBaseline
headerBottomPadding
Td,R,N,V_headerBottomPadding
statusIndicatorHorizontalSpacing
statusIndicatorVerticalSpacing
Td,R,N,V_statusIndicatorVerticalSpacing
messageTopPaddingInConversation
messageBottomPaddingInConversation
messageTopPaddingInConversationForMailActionHeader
messageBottomPaddingInConversationForMailActionHeader
estimatedFooterViewHeight
footerViewTopToBaseline
cellHeightToStartScroll
footerViewTrailingButtonOrigin
topToGlyphBaselineInMailActionCardHorizontalGroup
baselineToBaselineSpacingInMailActionCardHorizontalGroup
bottomSpacingInMailActionCardHorizontalGroup
topToFirstBaselineSpacingInMailActionCardVerticalGroup
bottomToLastBaselineInMailActionCardVerticalGroup
mailActionCardPreferredHeightForPad
mailActionCardMaximumContainerViewHeightForLargerMediumDetent
mailActionCardSmallerMediumDetentCoverage
mailActionCardLargerMediumDetentCoverage
conversationHeaderViewCollapsedSuperTitleTopToFirstBaseline
conversationHeaderViewShouldHideCollapsedSuperTitle
conversationHeaderViewCollapsedTitleTopToFirstBaseline
conversationHeaderViewCollapsedTitleBottomToLastBaseline
conversationHeaderViewExpandedTitleTopToFirstBaseline
messageRegularDisplayMetrics.bodyFont
messageRegularDisplayMetrics.headerBottomPadding
B16@?0@"MFMessageHeaderViewBlock"8
v24@?0Q8^B16
MFMessageHeaderView.m
Blocks must be added to MFMessageHeaderViewBlock before they can be pinned.
v16@?0@"<MessageItemFlagsViewModelBuilder>"8
v32@?0@"MFMessageHeaderViewBlock"8Q16^B24
viewModel
T@"MessageHeaderViewModel",&,N,V_viewModel
draggableArea
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_draggableArea
T@"<MFMessageHeaderViewDelegate>",W,N,V_delegate
pinnedBlock
T@"MFMessageHeaderViewBlock",&,N,V_pinnedBlock
headerBlocks
T@"NSArray",C,N,V_headerBlocks
bottomSeparatorDrawsFlushWithLeadingEdge
TB,N,V_bottomSeparatorDrawsFlushWithLeadingEdge
v16@?0@"MessageHeaderViewModel"8
separator
T@"SeparatorLayer",&,N,V_separator
trailingAccessoryViewLayoutGuide
T@"UILayoutGuide",&,N,V_trailingAccessoryViewLayoutGuide
trailingAccessoryViewLayoutGuideWidth
T@"NSLayoutConstraint",&,N,V_trailingAccessoryViewLayoutGuideWidth
trailingAccessoryViewLayoutGuideTrailing
T@"NSLayoutConstraint",&,N,V_trailingAccessoryViewLayoutGuideTrailing
separatorLeading
T@"NSLayoutConstraint",&,N,V_separatorLeading
separatorTrailing
T@"NSLayoutConstraint",&,N,V_separatorTrailing
observableCancelable
T@"<EFCancelable>",&,N,V_observableCancelable
separatorIsHidden
TB,N,V_separatorIsHidden
separatorDrawsFlushWithLeadingEdge
TB,N,V_separatorDrawsFlushWithLeadingEdge
separatorDrawsFlushWithTrailingEdge
TB,N,V_separatorDrawsFlushWithTrailingEdge
usingLargeTextLayout
TB,N,V_usingLargeTextLayout
interactivelyResizing
TB,N,V_interactivelyResizing
MFQuotedContentAttribution.m
(type == MFQuotedContentAttributionTypeUnknown && senderName == nil) || (type == MFQuotedContentAttributionTypeNone && senderName == nil) || (type == MFQuotedContentAttributionTypeSender)
<%@:%p (Type: %@, Sender Name: %@>
unknownAttribution
T@"MFQuotedContentAttribution",R
noAttribution
Tq,R,N,V_type
T@"NSString",R,C,N,V_senderName
MFQuotedContentAttributionTypeUnknown
MFQuotedContentAttributionTypeNone
MFQuotedContentAttributionTypeSender
bannerConstraints
T@"NSArray",&,N,V_bannerConstraints
banner
T@"SGBanner",&,N,V_banner
<%@: %p> jsName='%@' => %@
javascriptName
T@"NSString",R,N,V_javascriptName
outdentedAttributionsPattern
message-id
(%@) %@
externalConstants
remoteObjectInterface
T@"_WKRemoteObjectInterface",&,N,V_remoteObjectInterface
T@"EMContentRepresentation",&,N,V_contentRepresentation
loadingURL
T@"NSURL",&,N,V_loadingURL
error
T@"NSError",&,N,V_error
webProcessPluginNeedsUpdate
TB,N,V_webProcessPluginNeedsUpdate
T@"MFWebViewDictionary",R,N,V_webViewConstants
webProcessDelegate
T@"<MFMailWebProcessDelegate>",W,N,V_webProcessDelegate
MailWebProcessBundle
bundle
PlugIns
preallocatedWebViews
T@"EFQueue",&,N,V_preallocatedWebViews
processPool
T@"WKProcessPool",&,N,V_processPool
<html dir=auto><body><i><font color=#888>%@</font></i></body></html>
MESSAGE_CAUSED_PROBLEM
MESSAGE_UNAVAILABLE
axis
TQ,N,V_axis
MailApplicationDidChangeRemoteImageLoading
MailApplicationDidChangePreviewLinesNotification
MailApplicationDidChangeShowToCCNotification
MailApplicationDidChangeSwipeActions
MailApplicationDidChangeConversationOrder
MailApplicationDidChangeConversationViewIncludesRelatedMessages
MailApplicationDidChangeConversationViewCollapseReadMessagesNotification
MailApplicationDidChangeAccountDisplayName
MailApplicationDidChangeAccounts
MailApplicationDidFinishLaunching
MailApplicationMemoryWarningNotification
MailApplicationStatusBarProgressDidHide
MailApplicationsDisableThreadingKeyChanged
MailApplicationProtectedDataWillBecomeUnavailable
MailApplicationProtectedDataDidBecomeAvailable
MailApplicationProtectedDataWasReconciled
MailApplicationProtectedDataForMailboxWasReconciled
MailApplicationAutoFetchStart
MailApplicationAutoFetchStop
MailInternalSettingsDidChange
identifiersOfPreviouslyDisplayedAccounts
identifiersOfDisplayedAccounts
MailNavigationControllerWillShowViewControllerNotification
MailNavigationControllerDidShowViewControllerNotification
MailNavigationControllerNewViewControllerKey
MailNavigationControllerPreviousViewControllerKey
MailNavigationControllerAnimatedKey
SharedMailboxControllerBadgeCountDidChange
SharedNetworkControllerBadgeCountKey
MainScene
ComposeScene
ConversationScene
ActiveDraftIdentifier
mailIncreasedContrastRed
mailLightGrayColor
mailDarkGrayColor
mailMoreButtonGrayColor
mailSystemLightGrayColor
mailSystemUltraLightGrayColor
@"UIColor"16@?0@"UITraitCollection"8
mailSelectedCellSystemLightGrayColor
mailSelectedCellSystemUltraLightGrayColor
mailChevronBoxColor
mailExpandedChevronBoxColor
mailHighlightedChevronBoxColor
mailSortOfNavBarBackgroundColor
mailVibrantDarkColor
mailVibrantLightColor
mailAccountCellTitleColor
mailGrabberColor
mailPreviousDraftPickerHeaderTextColor
mailConversationViewCellBackgroundColor
mailConversationViewCollapsedCellLabelColor
mailMessageListPrimarySelectionColor
mailMessageListSecondarySelectionColor
mailMessageListTertiarySelectionColor
mailFlaggedColor
T@"UIColor",R
mailFlaggedColorRed
mailFlaggedColorIncreasedContrastRed
mailFlaggedColorOrange
mailFlaggedColorYellow
mailFlaggedColorGreen
mailFlaggedColorTeal
mailFlaggedColorIndigo
mailFlaggedColorGray
mailDestructiveActionColor
mailArchiveActionColor
mailTransparentLightGrayColor
mailAppBackgroundColor
mailSecondaryLabelDarkColor
mailSelectedCellColor
mailSplitViewBorderColor
mailConversationViewBackgroundColor
mailTransferConversationViewBackgroundColor
mailConversationViewNoSelectedMessageViewBackgroundColor
mailHeaderSeparatorLayerColor
mailConversationViewExpandedCellBackgroundColor
mailConversationViewCollapsedCellBackgroundColor
mailConversationViewCollapsedCellHighlightedBackgroundColor
mailMessageListSelectedSummaryColor
mailMessageListSelectedAnnotationColor
mailMessageListSelectedStatusIndicatorColor
mailMessageListSelectedRecipientColor
mailTodayFilterColor
mailAttachmentsFilterColor
mailVIPFilterColor
mailDockViewLightBackgroundColor
mailDockViewDarkBackgroundColor
mailDockedPlaceholderViewBackgroundColor
mailDockViewShadowGradientColors
mailDockViewShadowGradientColorLocations
mailTiltedTabCloseButtonTintColor
mailExpandedConversationViewCellDateLabelColor
mailTransferStackViewBackgroundColor
mailSplitViewBackgroundColor
VIPManager.m
+setBackingManager: must be called before attempting to get the default instance
q24@?0@"EMVIP"8@"EMVIP"16
hasVIPs
allVIPs
T@"NSSet",R,C,N
allVIPEmailAddresses
T@"EAEmailAddressSet",R,C,N
defaultInstanceLock
T^{os_unfair_lock_s=I},R
defaultInstance
T@"VIPManager",R,N
backingManager
T@"<EMVIPManager>",R,N,V_backingManager
_try_catch_wrap(%@).apply(null, %@);
v24@?0@8@"NSError"16
Content Item %{public}@ generated snippet: %@
error creating pass from content item %{public}@: %{public}@
content item %{public}@ had neither a storage or data transfer byte count
injecting attachment element, failed to load content item %{public}@
tapped unknown attachment %@
tapped attachment %@
Removing and re-creating task: %@
#Attachments Error saving Maildrop image: %{public}@
#Attachments Error reading extracted archive entry %@
#Attachments Error opening zip at %@.
Content request for message %{public}@ already issued
MessageContentRepresentationRequest
itemID=%{signpost.description:attribute,public}@
MessageContentRepresentationRequestFailed
Issuing content request for message %{public}@
 enableTelemetry=YES 
Content request for message %{public}@ loaded successfully
Content request for message %{public}@ failed to load with error: %{public}@
retry-attempt=%{signpost.description:attribute,public}hhu
#Attachments nil date string result for meta data [%@] expiration [%@]
#MessageLoading loading message %{public}@ had error (%{public}@/%ld): fragment %{public}@
#Warning [MCVLog] %{public}@
[MCVError] Unhandled JS Exception: %{public}@ "%@" - callstack: %{public}@
Got NULL value for SeeMoreButtonTappedWithYOffset
#MessageLoading %p: set message content request: %{public}@
MFMessageContentView
#Warning #MessageLoading %p: set nil content request, removing loading indicator
#Warning #MessageLoading %p: setPreviousContentSnapshot:%p (was %p)
#Warning #MessageLoading %p: adding previousContentSnapshotWrapperView: %p
#Warning #MessageLoading %p: removing previousContentSnapshotWrapperView: %p
contentRepresentation requested before it finished loading: %{public}@
#Warning #MessageLoading %p: bringing loading view to front: %p
#Warning #MessageLoading %p: bringing previous content snapshot wrapper view to front: %p
#Warning #MessageLoading %p: showing delayed progress indicator
#Warning #MessageLoading %p: loadingIndicatorVisible=%@ (view: %p wasVisible %@)
#Warning #MessageLoading Error loading content represenation for message %@ : %{public}@
#MessageLoading (%p) Request webView load for message-id: %{public}@, representation: %{public}@
Waiting for a WebKit presentation update for message - libraryid=%{public}@
ask webkit to take a snapshot - libraryid=%{public}@
Blocking file:// URL from web view.
Blocking navigation action for request whose target frame is not the main frame (iframe, probably): %@
#Warning #MessageLoading %p: rendering progress did first paint, removing loading indicator
#Warning #MessageLoading %p: removing previous content snapshot
#WebViewLoading webViewWebContentProcessDidTerminate %@ (pid: %d; crash count: %ld)
** Message Content View did fail navigation: %{public}@
#WebViewLoading _webViewWebProcessDidBecomeUnresponsive %@ (pid: %d)
Failed to decode attachment previews: %@
WebView=%{signpost.description:attribute,public}p itemID=%{signpost.description:attribute,public}@ AccountType=%{public, signpost.telemetry:number1}lu Status=%{public, signpost.telemetry:number2}ld enableTelemetry=YES 
#WebViewLoading %@ Killing and resetting webview: %@
#WebViewLoading %@ Sending request to reload webview: %@
#WebViewLoading %@ Sending request to stop loading webview: %@
#WebViewLoading %@ Sending request to load webview with content representation: %{public}@
#WebViewLoading %@ Sending request to load webview with error: %{public}@
#WebViewLoading %@ Sending request to load webview with loading URL: %@
#WebViewLoading updatingWebProcessPlugin: %@
Failed to find a message for error: %{public}@
#MailServices saveVIP: %@
#MailServices deleteVIPWithIdentifier: %@
B@ffffff
?UUUUUU
@@333333
//  Copyright 
 2015 Apple Inc. All rights reserved.
var ATTACHMENT_STATE = {
DEFAULT : 1,
DOWNLOADABLE : 2,
DOWNLOADING : 3,
function AttachmentElement(dom_element) {
this.dom_element = dom_element;
this.downloadableStatus = this.dom_element.getAttribute("_mf_downloadableStatus");
this.downloadingStatus = this.dom_element.getAttribute("_mf_downloadingStatus");
var elem_ref = this;
this.dom_element.onclick = function(e) {
        // Ignore control/right clicks since that goes through [MFMessageContentView _webView:contextMenuConfigurationForElement:...]
        if (e.button == 0 && !e.ctrlKey) {
            elem_ref.onClick();
        }
    };
AttachmentElement.prototype = {
setState : function(state) {
        var currentState = this.dom_element.getAttribute('_mf_state');
        if (state != currentState) {
            this.dom_element.setAttribute('_mf_state', state);
            switch(state) {
                case ATTACHMENT_STATE.DEFAULT:
                    this.dom_element.removeAttribute('action');
                    this.dom_element.removeAttribute('progress');
                    break;
                case ATTACHMENT_STATE.DOWNLOADABLE:
                    this.dom_element.setAttribute('action', this.downloadableStatus);
                    this.dom_element.removeAttribute('progress');
                    break;
                case ATTACHMENT_STATE.DOWNLOADING:
                    this.dom_element.setAttribute('action', this.downloadingStatus);
                    this.dom_element.setAttribute('progress', '0.0');
                    break;
            }
            // force a layout update - removing the action attribute is not enough
            this.dom_element.setAttribute('title', this.dom_element.getAttribute('title'));
        }
    },
    setProgress : function(value) {
        this.dom_element.setAttribute('progress', value);
    },
onClick : function() {
// For testing
        // simulate_download_attachment_for_cid(this.dom_element.id);
        var content_id = this.dom_element.id;
        var message = {
            element_id : content_id,
            rect : getRectForElementWithID(this.dom_element.id),
        };
        
        window.webkit.messageHandlers.AttachmentNodeWasTapped.postMessage(message);
function attachment_element_for_cid(cid) {
    var attachmentNode = null;
    var elem = document.getElementById(cid);
    // Only applicable to attachment icons and inline attachment previews
    if (elem && (elem.tagName.toLowerCase() == "attachment" || elem.tagName.toLowerCase() == "img")) {
        attachmentNode = new AttachmentElement(elem);
    } else {
        // Inline images may have an id that differs from cid
        var images = document.getElementsByTagName('img');
        for (var i = 0; i < images.length; ++i) {
            if (images[i].src == "cid:"+cid) {
                elem = images[i];
                attachmentNode = new AttachmentElement(elem);
                break;
            }
        }
    }
    return attachmentNode;
 * Installs the AttachmentElement click handler on each attachment element.
function addClickHandlersForNodes(nodes, elements) {
    for (var i = 0; i < nodes.length; i++) {
        var attachmentNode = nodes[i];
        
        elements.push(new AttachmentElement(attachmentNode));
    }
function updateAttachmentClickHandlers() {
    var elements = []
    addClickHandlersForNodes(document.getElementsByTagName("attachment"), elements);
    addClickHandlersForNodes(document.getElementsByTagName("img"), elements);
    return elements
/// For testing
function simulate_download_attachment_for_cid(cid) {
var attachment = attachment_element_for_cid(cid);
attachment.setState(ATTACHMENT_STATE.DOWNLOADING);
function did_finish() {
attachment.setState(ATTACHMENT_STATE.DEFAULT);
var simulated_progress = 0.0;
var interval_handle = setInterval(function() {
simulated_progress += 0.01;
        attachment.setProgress(simulated_progress);
if (simulated_progress >= 1.0) {
clearInterval(interval_handle);
did_finish();
}, (1000 / 30));
// Functions to be called from native code //
/* extern */ function set_state_for_attachment_cid(cid, state) {
var attachment_elem = attachment_element_for_cid(cid);
    if (attachment_elem) {
        attachment_elem.setState(state);
    }
/* extern */ function set_progress_for_attachment_cid(cid, progress) {
var attachment_elem = attachment_element_for_cid(cid);
    if (attachment_elem) {
        attachment_elem.setProgress(progress);
    }
/* Utility Functions */
var g_edgeToEdgeRule = null;
var g_additionalBodyStyleRule = null;
var g_documentReformatter = new MailDocumentReformatter();
var g_viewportConfigurationDictionary = {};
var g_documentNeedsReformat = false;
function MCVLog(string) {
    console.log(string); // if a debug console is attached...
    window.webkit.messageHandlers.MCVLog.postMessage(string);
/* Global Exception Handling */
function MCVError(error) {
    var message = {
        "name" : error.name,
        "message" : error.message,
        "stack" : error.stack,
        "error" : JSON.stringify(error),
    };
    window.webkit.messageHandlers.MCVError.postMessage(message);
window.onerror = function (message) {
    MCVError(new Error(message));
function _try_catch_wrap(func) {
    if (!func._mf_wrapped) {
        func._mf_wrapped = function () {
            try {
                func.apply(this, arguments);
            }
            catch (e) {
                MCVError(e);
                throw e;
            }
        }
    }
    return func._mf_wrapped;
window.addEventListener("error", event => {
    if (event.target instanceof HTMLImageElement && event.target.src) {
        window.webkit.messageHandlers.ImageError.postMessage(event.target.src);
    }
}, true)
var nativeAddEventListener = window.EventTarget.prototype.addEventListener;
var nativeRemoveEventListener = window.EventTarget.prototype.removeEventListener;
window.EventTarget.prototype.addEventListener = function (event, callback, bubble) {
    nativeAddEventListener.call(this, event, _try_catch_wrap(callback), bubble);
window.EventTarget.prototype.removeEventListener = function (event, callback, bubble) {
    nativeRemoveEventListener.call(this, event, callback._mf_wrapped || callback, bubble);
/* - - -- --- ----- -------- ----- --- -- - - */
function _styleForSystemAppearance() {
    var shouldBeLight = false;
    var shouldUseColorFilter = true;
    var declaredColorSchemes = this._declaredColorSchemes();
    if (declaredColorSchemes) {
        shouldUseColorFilter = false;
        if ((declaredColorSchemes.includes("light") || declaredColorSchemes.includes("only")) && !declaredColorSchemes.includes("dark")) {
            shouldBeLight = true;
        }
    }
    else {
        // Check to see if the document can still use dark mode via the colorFilter
        var imageElements = document.body.querySelectorAll("img");
        for (i = 0; i < imageElements.length; i++) {
            var image = imageElements[i];
            if (image.src.startsWith("http") && (image.width > 1 || image.height > 1) && !image.className.startsWith("lp-rich-link")) {
                shouldBeLight = true;
                break;
            }
        }
        var style = window.getComputedStyle(document.body);
        if (style.backgroundImage !== "none") {
            shouldBeLight = true;
        }
    }
    if (shouldBeLight) {
        document.documentElement.classList.add('apple-mail-light-only');
    } else if (shouldUseColorFilter) {
        document.documentElement.classList.add('apple-mail-implicit-dark-support');
    }
// Returns a parsed array of values for the `color-scheme` property or meta tag; if it exists.
// This also normalizes the values to lowercase. (see rdar://problem/45879558 & rdar://problem/50096600)
function _declaredColorSchemes() {
    // Add a style class that disables the color-scheme property temporarily so this code can check
    // for color-scheme usage in the author styles.
    document.documentElement.classList.add("testing-dark-mode");
    // Check for the 'color-scheme' CSS property in computed style on the document element.
    // This property takes precedence over the meta tag in WebKit, so it needs checked first.
    // This is auto aliased by WebKit from the deprecated 'supported-color-schemes' property,
    // so this code only needs to check the colorScheme name to support both.
    var colorSchemeProperty = window.getComputedStyle(document.documentElement).colorScheme;
    if (colorSchemeProperty && colorSchemeProperty !== "auto") {
        let result = colorSchemeProperty.split(/\s+/);
        if (result && result.length) {
            document.documentElement.classList.remove("testing-dark-mode");
            return result;
        }
    }
    document.documentElement.classList.remove("testing-dark-mode");
    // Try the 'color-scheme' or deprecated 'supported-color-schemes' meta tag.
    var colorSchemesMetaElements = document.querySelectorAll("meta[name='color-scheme']");
    if (!colorSchemesMetaElements)
        colorSchemesMetaElements = document.querySelectorAll("meta[name='supported-color-schemes']");
    var lastColorSchemesMetaElement = colorSchemesMetaElements ? colorSchemesMetaElements[colorSchemesMetaElements.length - 1] : null;
    if (lastColorSchemesMetaElement && lastColorSchemesMetaElement.content) {
        let result = lastColorSchemesMetaElement.content.toLowerCase().split(/\s+/);
        if (result && result.length)
            return result;
    }
    return null;
function LOCSTRING(key) {
    var locstrings = window.externalConstants.getValue("localizedStrings");
    return locstrings[key] ? locstrings[key] : key;
function _getViewportMetatag() {
    var metatag = null;
    var metatags = document.getElementsByTagName("meta");
    for (var metatag_i in metatags) {
        var tag = metatags[metatag_i];
        if (tag.name == "viewport") {
            metatag = tag;
            break;
        }
    }
    return metatag;
function _updateViewportMetatag() {
    var metatag = _getViewportMetatag();
    if (metatag == null) {
        metatag = document.createElement("meta");
        metatag.name = "viewport";
        document.head.appendChild(metatag);
    }
    var content = "";
    if (g_viewportConfigurationDictionary["viewport-width"]) {
        content += "width = " + g_viewportConfigurationDictionary["viewport-width"];
    }
    if (g_viewportConfigurationDictionary["initial-scale"]) {
        content += ", initial-scale = " + g_viewportConfigurationDictionary["initial-scale"];
    }
    metatag.content = content;
/* Post fix methods */
function setViewportWidth(viewportWidth) {
    if (viewportWidth != getViewportWidth()) {
        g_viewportConfigurationDictionary["viewport-width"] = viewportWidth;
        _updateViewportMetatag();
    }
function getViewportWidth() {
    var result = NaN;
    var metatag = _getViewportMetatag();
    if (null != metatag) {
        var matches = metatag.content.match(/width\s*=\s*([^, ]*)/);
        if (matches) {
            result = parseInt(matches[1]);
        }
    }
    return result;
function setInitialScale(initialScale) {
    g_viewportConfigurationDictionary["initial-scale"] = initialScale;
    _updateViewportMetatag();
function fixRelativeElementHeights() {
    // Since conversation view, our viewport width is supposed to start at 1px and grow just to perfectly fit the
    // contents inside. If a document has a top-level element that is 100% height, it will be rendered at 1px height,
    // which is not expected. It's expected that top-level elements defined to have 100% height should be redered at
    // the height of the screen, so let's fix that here.
    if (document.body.getBoundingClientRect().height < 5.0 /* usually 1, but add a few just to make sure */) {
        var comfortableScreenHeight = 900; // doesn't have to be accurate.
        var nextElement = null;
        var nodeIterator = document.createNodeIterator(document.body, NodeFilter.SHOW_ELEMENT);
        while ( (nextElement = nodeIterator.nextNode()) ) {
            var found = false;
            // We have to do this to trick because if we ask the CSSStyleDeclaration for it's "height", we'll get it's actual
            // computed height instead of the height defined in CSS by the document author.
            var previousDisplayValue = nextElement.style.getPropertyValue("display");
            nextElement.style.setProperty("display", "none");
            if (nextElement.getAttribute("height") == "100%") {
                nextElement.setAttribute("height", comfortableScreenHeight + "px");
                found = true;
            }
            var computedStyle = window.getComputedStyle(nextElement);
            var computedHeight = computedStyle.height;
            if (computedHeight == "100%" || computedHeight == "auto") {
                nextElement.style.setProperty("height", comfortableScreenHeight + "px");
                found = true;
            }
            nextElement.style.setProperty("display", previousDisplayValue);
            if (found) break;
        }
    }
function message_on_document_load() {
    setViewportWidth(window.externalConstants.getValue("viewport-width"));
    setInitialScale(window.externalConstants.getValue("initial-scale"));
    
    // Needs to be called before updatePadding() and updateEdgeToEdgeStyle()
    prepareBaseFormattingStylesheet();
    updatePadding();
    console.log("calling _styleForSystemAppearnace()");
    self._styleForSystemAppearance();
    window.externalConstants.onChangeCallback = function(changedKeys) {
        if (changedKeys.includes("padding")) {
            updatePadding();
        }
        if (changedKeys.includes("viewport-width")) {
            var oldViewportWidth = g_documentReformatter.currentDocumentViewportWidth();
            var newViewportWidth = window.externalConstants.getValue("viewport-width");
            setViewportWidth(newViewportWidth);
            if (newViewportWidth != oldViewportWidth) {
                g_documentReformatter.reformat();
            }
        }
    };
    // Post-processing pipeline
    fixOutdentedAttributions();
    updateEdgeToEdgeStyle(true); // true = notify about image elements
    updateAttachmentClickHandlers();
    if (window.externalConstants.getValue("collapseQuotedContent")) {
        findAndCollapseBlockquotes();
    }
    fixRelativeElementHeights();
    g_documentReformatter.loggingEnabled = true;
    g_documentReformatter.reformat();
    startObservingSelection();
function startObservingSelection () {
    document.onselectionchange = function() {
        var currentSelectedText = window.getSelection();
        var selectedHTML = "";
        if (currentSelectedText.rangeCount > 0) {
            var range = currentSelectedText.getRangeAt(0);
            //creating a new representation of selected text
            var selectedTextHtmlContainer = document.createElement("div");
            for (var i = 0, len = currentSelectedText.rangeCount; i < len; ++i) {
                var currentContent = currentSelectedText.getRangeAt(i).cloneContents();
                selectedTextHtmlContainer.appendChild(currentContent);
            }
            if (selectedTextHtmlContainer.textContent.length > 0) {
                //Remove data detector tags.
                var linkTags = selectedTextHtmlContainer.getElementsByTagName("A");
                //copy linkTags into its own array so we don't live update and skip elements.
                linkTags = Array.prototype.slice.call(linkTags, 0);
                for (var i = 0; i < linkTags.length; i++) {
                    var tag = linkTags[i];
                    if (tag.getAttribute("x-apple-data-detectors") == "true") {
                        var span = document.createElement("span");
                        span.innerHTML = tag.innerHTML;
                        tag.replaceWith(span);
                    }
                }
                selectedHTML = selectedTextHtmlContainer.innerHTML;
            }
        }
        window.webkit.messageHandlers.TextSelected.postMessage(selectedHTML);
    };
//----------------------------------------
// Padding & Friends.
//----------------------------------------
function prepareBaseFormattingStylesheet() {
    if (g_edgeToEdgeRule == null) {
        // Create and insert a style element at the top of of the document's HEAD
        var styleElement = document.createElement("style");
        styleElement.type = "text/css";
        styleElement.title = "x-apple-mail-formatting";
        document.head.insertBefore(styleElement, document.head.firstChild);
        
        var styleSheet = styleElement.sheet;
        // Create a rule to hold additional body styles
        styleSheet.insertRule("BODY {}", 0);
        g_additionalBodyStyleRule = styleSheet.rules[0];
        
        // Create a rule for the edge-to-edge class
        styleSheet.insertRule(".x-apple-edge-to-edge {}", 0);
        g_edgeToEdgeRule = styleSheet.rules[0];
    }
function updatePadding() {
    var padding = window.externalConstants.getValue("padding");
    var important = !!window.externalConstants.getValue("useWideLayout");
    
    var priority = null;
    
    // If the BODY's CSS rules have 100% width or min-width, then the author
    // *really* wants their email to go full width. Don't make our padding important
    // so we don't clash with the author's intended design.
    if (important && !_bodyHas100PercentWidth()) {
        priority = "important";
    }
    
    // For some reason I'm unable to change the rule's padding once it's been marked important once.
    // Clearing the rule's text before adding the padding gets the job done.
    // Note: CSSRule.removeProperty() isn't working here either.
    g_additionalBodyStyleRule.style.cssText = "";
    g_additionalBodyStyleRule.style.setProperty("padding", padding, priority);
    
    updateEdgeToEdgeStyle(false);
function _bodyHas100PercentWidth() {
    var has100PercentWidth = false;
    
    var allBodyRules = window.getMatchedCSSRules(document.body);
    
    if (allBodyRules != undefined) {
        for (var i=0; i<allBodyRules.length; i++) {
            var rule = allBodyRules[i];
            
            if (rule.style.width == "100%" || rule.style.minWidth == "100%") {
                has100PercentWidth = true;
                break;
            }
        }
    }
    
    return has100PercentWidth;
//----------------------------------------
// Edge-to-Edge Image Styling.
//----------------------------------------
 * Iterates through all image elements in the document and applies or removes edge-to-edge styling as needed.
function updateImagesNeedingEdgeToEdgeStyling(shouldNotifyAboutImageAttachments) {
    var imgNodes = document.getElementsByTagName("img");
    var attachmentImageNodesInfo = [];
    for (var i = 0; i < imgNodes.length; i++) {
        var imgNode = imgNodes[i];
        applyEdgeToEdgeStylingToNodeWhenComplete(imgNode);
        var src = imgNode.src;
        if (shouldNotifyAboutImageAttachments && src) {
            var matches = src.match(/^cid:(.*)/);
            if (matches) {
                var imageNodeID = imgNode.id;
                if (undefined === imageNodeID || 0 == imageNodeID.length) {
                    // there's no ID on this cid: image node. just use the contentID
                    imgNode.id = matches[1];
                }
                let identifier = HTMLAttachmentElement.getAttachmentIdentifier(imgNode);
                attachmentImageNodesInfo.push({
                                              "src" : imgNode.src,
                                              "elementID" : imgNode.id,
                                              "contentID" : matches[1],
                                              "wkIdentifier" : identifier,
                                              });
            }
        }
    }
    if (0 < attachmentImageNodesInfo.length) {
        window.webkit.messageHandlers.FoundImageCIDAttachments.postMessage(attachmentImageNodesInfo)
    }
function elementQualifiesForEdgeToEdgeStyling(node) {
    if (node.style.position == "static") return false;
    if (node.hasAttribute("width") && !node.hasAttribute("apple-width")) return false;
    if (nodeHasAncestorWithTag(node, "BLOCKQUOTE")) return false;
    if (nodeHasAncestorWithTag(node, "TABLE")) return false;
    return true;
 * Applies edge-to-edge class immediately if the given node is complete.
 * Otherwise, adds an event listener that applies the edge-to-edge class on load.
function applyEdgeToEdgeStylingToNodeWhenComplete(node) {
    if (elementQualifiesForEdgeToEdgeStyling(node)) {
        if (node.complete) {
            applyEdgeToEdgeStylingToNodeIfNeeded(node);
        } else {
            node.setAttribute("x-apple-pending-edge-to-edge", true);
            node.addEventListener("load", function () {
                node.removeAttribute("x-apple-pending-edge-to-edge");
                applyEdgeToEdgeStylingToNodeIfNeeded(this);
            }, true);
        }
    }
 * Updates the document's standard edge-to-edge CSS rule. Should be called when ever the body's padding changes.
function updateEdgeToEdgeStyle(shouldNotifyAboutImageAttachments) {
    if (g_edgeToEdgeRule != null) {
        var computedBodyStyle = window.getComputedStyle(document.body);
        var leftPadding = parseInt(computedBodyStyle.paddingLeft);
        var rightPadding = parseInt(computedBodyStyle.paddingRight);
        if (!(isNaN(leftPadding) || isNaN(rightPadding))) {
            leftPadding += "px";
            rightPadding += "px";
            var width = "calc(100% + " + leftPadding + " + " + rightPadding + ")";
            var marginLeft = "-" + leftPadding;
            g_edgeToEdgeRule.style.width = width;
            g_edgeToEdgeRule.style.marginLeft = marginLeft;
        }
    }
    updateImagesNeedingEdgeToEdgeStyling(shouldNotifyAboutImageAttachments);
 * Applies the appropriate edge-to-edge class to the given node if it qualifies for edge-to-edge styling.
function applyEdgeToEdgeStylingToNodeIfNeeded(node) {
    var computedBodyStyle = window.getComputedStyle(document.body);
    var leftPadding = parseInt(computedBodyStyle.paddingLeft);
    var rightPadding = parseInt(computedBodyStyle.paddingRight);
    var viewportWidth = getViewportWidth();
    // If the body's padding, or viewport isn't defined yet, then we shouldn't attempt this.
    // This method should get another call when the body padding is updated.
    if (!isNaN(leftPadding) && !isNaN(rightPadding) && !isNaN(viewportWidth)) {
        // Remove old edge-to-edge classes if they exist
        node.classList.remove("x-apple-wide-margin-edge-to-edge");
        node.classList.remove("x-apple-edge-to-edge");
        // Only apply edge-to-edge style if all of the following are true...
        // 1: The image is naturally wider than the maximum content width
        // 2: The image element isn't statically positioned
        // 3: The image element doesn't have a width defined by the content creator (not set by an Apple mail client)
        // 4: the image element isn't contained in a block quote or table
        var maxContentWidth = viewportWidth - (leftPadding + rightPadding);
        if (node.naturalWidth < maxContentWidth) return;
        if (!elementQualifiesForEdgeToEdgeStyling(node)) return;
        var hasCozyMargins = (leftPadding > 30.0) && (rightPadding > 30.0);
        var nodeClass = hasCozyMargins ? "x-apple-wide-margin-edge-to-edge" : "x-apple-edge-to-edge";
        node.classList.add(nodeClass);
        node.removeAttribute("width");
        node.removeAttribute("height");
    }
 * Checks if the given node has an ancestor with the given tag.
function nodeHasAncestorWithTag(node, tag) {
    var hasAncestorWithTag = false;
    var parentNode = node.parentNode;
    while (parentNode != null) {
        if (parentNode.tagName != null && parentNode.tagName.toUpperCase() == tag.toUpperCase()) {
            hasAncestorWithTag = true;
            break;
        }
        parentNode = parentNode.parentNode;
    }
    return hasAncestorWithTag;
//----------------------------------------
// Image Functions
//----------------------------------------
 * Forces a displayed image element to reload. This will cause WebKit to ignore its cache for this image and
 * hit MobileMail's attachment manager for the image data, allowing us to display an updated image.
function refreshImageWithContentID(contentID) {
    var images = document.getElementsByTagName("img");
    var oldImageSRC = "cid:"+contentID;
    oldImageSRC = oldImageSRC.toUpperCase();
    for (var i = 0; i < images.length; i++) {
        var image = images[i];
        if (image.src.toUpperCase() == oldImageSRC) {
            // Giving the image SRC a query will cause WebKit to think it's a completely different URL.
            // We currently ignore query parameters in our attachment manager and focus on the CID component of the URL.
            image.src += "?x-apple-mail-forceupdate";
            break;
        }
    }
 * Called when an image that isn't referenced in the DOM finishes downloading.
 * This finds the attachment node with the given id and swaps it out for an image element with the SRC cid:<nodeId>.
function imageAttachmentNodeFinishedDownloading(nodeId, markup) {
    var attachmentNode = document.getElementById(nodeId);
    if (attachmentNode && attachmentNode.tagName.toLowerCase() == "attachment") {
        attachmentNode.outerHTML = markup;
        var imgElement = document.getElementById(nodeId);
        applyEdgeToEdgeStylingToNodeWhenComplete(imgElement);
        
        imgElement.onclick = function() {
            var message = {
                element_id : nodeId,
                rect : getRectForElementWithID(nodeId),
            };
            
            window.webkit.messageHandlers.AttachmentNodeWasTapped.postMessage(message);
        };
    }
function replaceNodeWithSrcWithHTML(src, htmlRepresentation, installAttachmentClickHandler = false) {
    var element = null;
    function elementWithSrcForTagName(src, tagName) {
        var nodes = document.getElementsByTagName(tagName);
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes.item(i);
            if (node.src == src) {
                return node;
            }
        }
    }
    // Fast path. See if there's an img element with the source attribute
    element = elementWithSrcForTagName(src, "img");
    if (!element) {
        // Slow path. Enumerate all elements
        element = elementWithSrcForTagName(src, "*");
    }
    if (element) {
        var newParentElement = document.createElement("div");
        newParentElement.innerHTML = htmlRepresentation;
        var newNode = newParentElement.firstChild
        element.parentNode.replaceChild(newNode, element);
        if (installAttachmentClickHandler) {
            new AttachmentElement(newNode);
        }
    }
function replaceNodeWithSrcWithAttachment(src, htmlRepresentation) {
    replaceNodeWithSrcWithHTML(src, htmlRepresentation, true);
function addPoint(point1, point2) {
    return {
        x: point1.x + point2.x,
        y: point1.y + point2.y,
    };
 * Returns the position of {element} relative to the document.
 * @param element : Element to find the position of
 * @returns {POINT object} Absolute position of {element} as a dict containing keys 'x' and 'y'.
function getElementPosition(element) {
    if (element == null) {
        return { x: 0, y: 0 };
    } else {
        return addPoint({ x: element.offsetLeft, y: element.offsetTop }, getElementPosition(element.offsetParent));
    }
 * Returns the bounding box of the element with ID {elementID}
 * @param elementID : ID of element
 * @returns {RECT object} Rectangle representing the absolute position {x/y} of the element
 *                        and bounding size {width/height}
function getRectForElementWithID(elementID) {
    var rect = { x: 0, y: 0, width: 0, height: 0 };
    var element = document.getElementById(elementID);
    if (element) {
        var position = getElementPosition(element);
        rect.x = position.x;
        rect.y = position.y;
        var computedStyle = window.getComputedStyle(element);
        rect.width = parseInt(computedStyle.width);
        rect.height = parseInt(computedStyle.height);
    }
    return rect;
function expandQuoteButtonTapped(blockquoteElement, seeMoreButton) {
    // Use this if we ever decide to expand inline:
    // expandBlockquote(blockquoteElement, seeMoreButton);
    var preOffsetTop = blockquoteElement.getAttribute("preOffsetTop");
    var currentOffset = getElementPosition(seeMoreButton);
    window.webkit.messageHandlers.ExpandQuoteButtonTappedWithYOffset.postMessage({
        'preOffsetTop' : preOffsetTop,
        'currentOffsetTop' : currentOffset.y,
    });
function expandBlockquote(blockquoteElem, seeMoreButton) {
    seeMoreButton.parentElement.removeChild(seeMoreButton);
    var targetHeight = blockquoteElem.getAttribute("preOffsetHeight");
    blockquoteElem.style.display = "";
    blockquoteElem.style.overflowY = "hidden";
    blockquoteElem.style.webkitAnimationDuration = "0.55s";
    var animUUID = "anim" + Date.now();
    var lastSheet = document.styleSheets[document.styleSheets.length - 1];
    lastSheet.insertRule("@-webkit-keyframes " + animUUID + "{ \
        from { \
            opacity: 0; \
            height: 0px; \
        } \
        to { \
            opacity: 1; \
            height: " + targetHeight + "px; \
        } \
    }", lastSheet.cssRules.length);
    blockquoteElem.style.webkitAnimationName = animUUID;
function shouldCollapseBlockquoteElement(blockquoteElement) {
    var sufficientSize = false;
    var lineGuess = 0;
    var charCount = 0;
    var nodeIterator = document.createNodeIterator(blockquoteElement, NodeFilter.SHOW_ALL);
    var node = null;
    while ( (node = nodeIterator.nextNode())) {
        if (node.nodeType === Node.ELEMENT_NODE) {
            if (node.tagName.toLowerCase() == "br") {
                lineGuess++;
            } else {
                if (node.childElementCount == 0) {
                    var computedStyle = window.getComputedStyle(node);
                    if (computedStyle.display == "block") {
                        // Block element with no children. This is a "line"
                        lineGuess++;
                    }
                }
            }
        }
        if (node.nodeType === Node.TEXT_NODE) {
            charCount += node.length;
        }
        if ((lineGuess > 5) || (charCount > 350)) {
            sufficientSize = true;
            break;
        }
    }
    return sufficientSize;
function clipBlockquotePreviewElement(previewElement, previewHeight, isBottom) {
    var contentWrapperClientRect = previewElement.getBoundingClientRect();
    var contentHeight = contentWrapperClientRect.height;
    if (contentHeight > previewHeight) {
        // Cribbed from OS X. This code makes sure we don't cut in the middle of a line.
        var contentWrapperRange = document.createRange();
        contentWrapperRange.selectNodeContents(previewElement);
        var textRects = contentWrapperRange.getClientRects();
        var startY = (isBottom) ? contentWrapperClientRect.bottom : contentWrapperClientRect.top;
        var minYCutoff = (isBottom) ? contentWrapperClientRect.top : contentWrapperClientRect.bottom;
        for (var index = 0; index < textRects.length; index++) {
            var effectiveIndex = (isBottom) ? textRects.length - index - 1 : index;
            var textRect = textRects[effectiveIndex];
            var currentY = 0;
            if (isBottom) {
                currentY = textRect.bottom;
                // Found a line that is closer to the boundary
                if ((currentY <= (startY - previewHeight)) && (currentY >= minYCutoff)) {
                    minYCutoff = currentY;
                }
            } else {
                currentY = textRect.top;
                // Found a line that is closer to the boundary
                if ((currentY >= (startY + previewHeight)) && (currentY <= minYCutoff)) {
                    minYCutoff = currentY;
                }
            }
        }
        previewHeight = (isBottom) ? (startY - minYCutoff) : (minYCutoff - startY);
        contentWrapperRange.detach();
        // TODO: Page scale?
        // var previewHeightInPx = Math.round(previewHeight / this.pageScale);
        var previewHeightInPx = Math.round(previewHeight);
        // Actually clip the contentWrapper
        previewElement.style.cssText += "height: " + previewHeightInPx + "px !important; overflow: hidden !important;";
    }
function collapseBlockquote(blockquoteElement, showPreview) {
    var preOffsetHeight = blockquoteElement.offsetHeight;
    blockquoteElement.setAttribute("preOffsetHeight", preOffsetHeight);
    var expandQuoteAnchor = document.createElement("a");
    expandQuoteAnchor.href = "#";
    expandQuoteAnchor.onclick = function() { expandQuoteButtonTapped(blockquoteElement, expandQuoteAnchor); };
    expandQuoteAnchor.ondragstart = function(event) { event.preventDefault(); };
    var seeMoreButton = document.createElement("div");
    seeMoreButton.className = "button";
    if (showPreview) {
        var topPreviewElement = document.createElement("div");
        topPreviewElement.appendChild(blockquoteElement.cloneNode(true));
        topPreviewElement.style.overflow = "hidden";
        var bottomPreviewElement = document.createElement("div");
        bottomPreviewElement.appendChild(blockquoteElement.cloneNode(true));
        bottomPreviewElement.style.overflow = "hidden";
        seeMoreButton.innerHTML = LOCSTRING("SHOW_QUOTED_CONTENT");
        expandQuoteAnchor.className = "_AppleShowQuotedContentButton";
        expandQuoteAnchor.appendChild(topPreviewElement);
        expandQuoteAnchor.appendChild(seeMoreButton);
        expandQuoteAnchor.appendChild(bottomPreviewElement);
        blockquoteElement.parentNode.insertBefore(expandQuoteAnchor, blockquoteElement);
        clipBlockquotePreviewElement(topPreviewElement, 42, false);
        clipBlockquotePreviewElement(bottomPreviewElement, 42, true);
        bottomPreviewElement.scrollTop = bottomPreviewElement.scrollHeight;
    }
    blockquoteElement.style.display = "none";
function findAndCollapseBlockquotes() {
    function _saveOffsetTopForElement(element) {
        var elementPosition = getElementPosition(element);
        element.setAttribute("preOffsetTop", elementPosition.y);
    }
    // First check for outlook blockquotes
    var outlookBlockquotes = collectTopLevelOutlookBlockquotes(document.body);
    if (outlookBlockquotes.length > 0) {
        for (var i = 0; i < outlookBlockquotes.length; i++) {
            var element = outlookBlockquotes[i];
            collapseBlockquote(element, showPreview = false);
        }
        return; // don't do our normal blockquote collapsing.
    }
    // Find all topmost blockquote elements. Don't bother collapsing children.
    var topBlockquoteElements = [];
    var blockquotes = document.getElementsByTagName("blockquote");
    for (var i = 0; i < blockquotes.length; i++) {
        var element = blockquotes.item(i);
        var topmostBlockquoteElement = element;
        while ( element.parentElement != null ) {
            element = element.parentElement;
            if ( element.tagName.toLowerCase() == "blockquote" ) {
                topmostBlockquoteElement = element;
            }
        }
        if (topBlockquoteElements.indexOf(topmostBlockquoteElement) == -1) {
            topBlockquoteElements.push(topmostBlockquoteElement);
            // Save this now, because after we start collapsing stuff above, this value will change.
            _saveOffsetTopForElement(topmostBlockquoteElement);
        }
    }
    // Collect sibling blockquotes. Plaintext messages, and even messages from richtext composers, will sometimes
    // have a blockquote element after every line break.
    var elementsToCollapse = [];
    var elementsAbsorbed = [];
    for (var i = 0; i < topBlockquoteElements.length; i++) {
        var element = topBlockquoteElements[i];
        if (elementsAbsorbed.indexOf(element) != -1) {
            continue;
        }
        
        var adjacentBlockquote = function(blockquote) {
            var nextElementSibling = blockquote.nextElementSibling;
            if (!nextElementSibling || nextElementSibling.tagName !== "BLOCKQUOTE") {
                return null;
            }
            var rangeBetweenBlockquotes = document.createRange();
            rangeBetweenBlockquotes.setStartAfter(blockquote);
            rangeBetweenBlockquotes.setEndBefore(nextElementSibling);
            return rangeBetweenBlockquotes.text().length ? null : nextElementSibling;
        }
        
        var blockquote = adjacentBlockquote(element);
        if (blockquote) {
            var newElement = document.createElement("div");
            element.parentNode.insertBefore(newElement, element);
            _saveOffsetTopForElement(newElement);
            do {
                while (true) {
                    var sibling = element.nextSibling;
                    newElement.appendChild(element);
                    elementsAbsorbed.push(element);
                    
                    if (element === blockquote) {
                        element = sibling;
                        break;
                    }
                    element = sibling;
                }
                
                blockquote = adjacentBlockquote(newElement);
            } while (blockquote);
            elementsToCollapse.push(newElement);
        } else {
            elementsToCollapse.push(element);
        }
    }
    for (var i = 0; i < elementsToCollapse.length; i++) {
        var element = elementsToCollapse[i];
        // Determine whether or not to show a preview of the collapsed content.  We'll show a preview if it's not the
        // bottom blockquote.
        var isBottomBlockquote = false;
        var isLastBlockquote = (i == (elementsToCollapse.length - 1));
        if (isLastBlockquote) {
            // ... but just because it's the last blockquote doesn't mean it's the *bottom* blockquote. We have to check here to see if
            // this blockquote is actually at the bottom of the message. We do so by looking at a flat hierarchy of this blockquote's
            // sibling elements, counting the length of the text in these elements (removing whitespace). If the length is zero, then
            // that means the siblings have no valuable content, and thus this element is at the "bottom".
            function nextFlatSibling(elem) { return elem.nextSibling ? elem.nextSibling : elem.parentNode.nextSibling; }
            function siblingTextContentLength(elem) {
                if (!elem) return 0;
                var elemContent = "";
                
                switch (elem.nodeType) {
                    case Node.TEXT_NODE:
                        elemContent = elem.data;
                        break;
                        
                    case Node.ELEMENT_NODE:
                        // We only care about this element if it's visible.
                        var computedStyle = window.getComputedStyle(elem);
                        if (computedStyle && computedStyle.display !== "none") {
                            elemContent = elem.textContent;
                        }
                        
                        break;
                    default:
                        break;
                }
                
                return elemContent.replace(/(\n)|(\s+)/g, "").length + siblingTextContentLength(nextFlatSibling(elem));
            }
            var siblingLength = siblingTextContentLength(nextFlatSibling(element));
            if (siblingLength == 0) isBottomBlockquote = true;
        }
        if (isBottomBlockquote /* always collapse bottom quote */ || shouldCollapseBlockquoteElement(element)) {
            collapseBlockquote(element, showPreview = !isBottomBlockquote);
        }
    }
function quoteDepth(element) {
    var depth = 0;
    var parent = element;
    while (parent != null) {
        if (parent.tagName.toLowerCase() == "blockquote") {
            depth++;
        }
        parent = parent.parentElement;
    }
    return depth;
function isMicrosoftParagraphElement(element) {
    function test(element) {
        return (
            element &&
            element.nodeType == Node.ELEMENT_NODE &&
            element.tagName.toLowerCase() == "p" &&
            (element.className.toLowerCase() == "msonormal" || ((element.parentElement.getAttribute("style") || "").search("mso-element") === 0))
        );
    }
    var firstNonEmptyChild = element.children[0];
    if (firstNonEmptyChild) {
        // sometimes it's buried under a <div> for paragraphs starting after a newline.
        while ( (firstNonEmptyChild.childElementCount == 1 && firstNonEmptyChild.children[0].tagName.toLowerCase() == "div") ) {
            firstNonEmptyChild = firstNonEmptyChild.children[0];
        }
    }
    return ( test(element) || test(firstNonEmptyChild) );
function mightBeAMicrosoftQuoteSeparatorLine(element) {
    // Not very accurate, but it doesn't have to be. Just see if it has a top border and some padding.
    return (element.style.borderTop.length > 0 && element.style.paddingTop.length > 0);
function isTopLevelOutlookBlockquoteElement(divElement) {
    var retVal = false;
    if (quoteDepth(divElement) <= 0) {
        // See if it has a border
        if (mightBeAMicrosoftQuoteSeparatorLine(divElement)) {
            // First child should be a paragraph tag with the class "msonormal"
            var firstChild = divElement.firstElementChild;
            if (isMicrosoftParagraphElement(firstChild)) {
                retVal = true;
            }
        }
    }
    return retVal;
function collectTopLevelOutlookBlockquotes(rootElement) {
    var topLevelQuoteElements = [];
    // Outlook for Windows / OS X
    var containsMSOElements = (rootElement.getElementsByClassName("MsoNormal").length > 0);
    var containsWordSections = (rootElement.getElementsByClassName("WordSection1").length > 0);
    if (containsMSOElements || containsWordSections) {
        var idx = 0;
        var divElementsNodeList = rootElement.getElementsByTagName("div");
        var topLevelOutlookQuotes = [];
        for (var i = 0, length = divElementsNodeList.length; i < length; ++i) {
            var divElement = divElementsNodeList.item(i);
            if (isTopLevelOutlookBlockquoteElement(divElement)) {
                while (!divElement.previousElementSibling && !divElement.nextElementSibling && divElement.parentElement) {
                    divElement = divElement.parentElement;
                }
                topLevelOutlookQuotes.push(divElement);
            }
        }
        for (var currentElement = topLevelOutlookQuotes.shift(); currentElement; currentElement = topLevelOutlookQuotes.shift()) {
            var range = document.createRange();
            range.setStartBefore(currentElement);
            var previousSibling = currentElement.previousSibling;
            if (!previousSibling) {
                previousSibling = currentElement.parentElement;
            }
            if (topLevelOutlookQuotes[0]) {
                range.setEndBefore(topLevelOutlookQuotes[0]);
            } else {
                var treeWalker = document.createTreeWalker(currentElement.parentElement, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, {
                    acceptNode: function(node) {
                        if (node instanceof Element && (node.tagName === "O:P" || mightBeAMicrosoftQuoteSeparatorLine(node) || isMicrosoftParagraphElement(node))) {
                            return NodeFilter.FILTER_REJECT;
                        }
                        if (node instanceof HTMLDivElement || node instanceof HTMLQuoteElement  || node instanceof HTMLSpanElement
                            || node instanceof HTMLParagraphElement || (node instanceof Text && !node.data.trim().length)) {
                            return NodeFilter.FILTER_SKIP;
                        }
                        return NodeFilter.FILTER_ACCEPT;
                    }
                });
                treeWalker.currentNode = currentElement;
                var lastElement = treeWalker.nextSibling();
                if (lastElement) {
                    while (lastElement.parentElement !== treeWalker.root) {
                        lastElement = lastElement.parentElement;
                    }
                    lastElement = lastElement.previousElementSibling;
                } else {
                    lastElement = treeWalker.root.lastElementChild;
                }
                range.setEndAfter(lastElement);
            }
            var newDiv = document.createElement("div");
            newDiv.className = "x-apple-outlook-blockquote";
            newDiv.appendChild(range.extractContents());
            previousSibling.parentNode.insertBefore(newDiv, previousSibling);
            topLevelQuoteElements.push(newDiv);
        }
    }
    // Outlook.com
    var horizontalRulerNodeList = document.getElementsByTagName("hr");
    var containsHorizontalRulers = (horizontalRulerNodeList.length > 0);
    var containsOriginalAttributions = (document.getElementById("x_divRplyFwdMsg") != undefined); // "original" reply?
    var containsAdditionalAttributions = (document.getElementById("divRplyFwdMsg") != undefined); // "other" replies?
    if (containsHorizontalRulers && (containsOriginalAttributions || containsAdditionalAttributions)) {
        // Just cut everything from the first separator down. It's too much of a mess to parse accurately.
        var range = document.createRange();
        var firstRuler = horizontalRulerNodeList.item(0);
        var previousSibling = firstRuler.previousSibling;
        if (!previousSibling) {
            previousSibling = firstRuler.parentElement;
        }
        range.setStartBefore(firstRuler);
        var lastSibling = firstRuler;
        var nextSibling = lastSibling;
        while ( (nextSibling = nextSibling.nextElementSibling) != undefined ) {
            if (nextSibling.tagName.toLowerCase() != "div") break;
            lastSibling = nextSibling;
        }
        range.setEndAfter(lastSibling);
        var newDiv = document.createElement("div");
        newDiv.className = "x-apple-outlook-blockquote";
        newDiv.appendChild(range.extractContents());
        previousSibling.parentNode.insertBefore(newDiv, previousSibling);
        topLevelQuoteElements.push(newDiv);
    }
    return topLevelQuoteElements;
function fixOutdentedAttributions() {
    var pattern = window.externalConstants.getValue("outdentedAttributionsPattern");
    var regex = new RegExp(pattern, 'i');
    // Shallow copy. We'll be modifying the DOM in the loop below, so do this to avoid an infinite loop
    // of processing our own new blockquote elements.
    var blockquotes = document.getElementsByTagName("blockquote");
    blockquotes = Array.prototype.slice.call(blockquotes, 0);
    var FIXED_ELEMENT_ATTR = "__apple_fixed_attribute";
    for (var i = 0; i < blockquotes.length; i++) {
        var element = blockquotes[i];
        var previousElementDepth = (i > 0) ? quoteDepth(blockquotes[i - 1]) : 0;
        var currentElementDepth = quoteDepth(element);
        if (currentElementDepth > previousElementDepth) {
            var foundAttribution = false;
            var previousNode = element.previousElementSibling;
            if (previousNode == null) {
                previousNode = element.parentElement.previousElementSibling;
            }
            var accumulatedElements = [];
            while (!foundAttribution && previousNode != null && accumulatedElements.length < 4) {
                if (previousNode.nodeType == 1 && previousNode.getAttribute(FIXED_ELEMENT_ATTR) == "true") {
                    // Already fixed. Skip.
                    break;
                }
                accumulatedElements.push(previousNode);
                var text = text = previousNode.textContent;
                if (regex.test(text)) {
                    foundAttribution = true;
                }
                previousNode = previousNode.previousSibling;
            }
            if (foundAttribution) {
                accumulatedElements.reverse();
                var newBlockquote = document.createElement("blockquote");
                newBlockquote.setAttribute("type", "cite");
                newBlockquote.setAttribute(FIXED_ELEMENT_ATTR, "true");
                var parent = accumulatedElements[0].parentElement;
                parent.insertBefore(newBlockquote, accumulatedElements[0]);
                for (var elem_i in accumulatedElements) {
                    var element = accumulatedElements[elem_i];
                    element.parentElement.removeChild(element);
                    newBlockquote.appendChild(element);
                }
            }
        }
    }
function longPressedAttachment(range) {
    // This is only used for figuring out if an attachment can be dragged out into a separate window.
    // Only return attachment ID if it is being long-pressed with no other content selected
    if (!window.getSelection().isCollapsed) {
        return "";
    }
    var attachments = document.querySelectorAll("attachment");
    var result = [];
    for (var i = 0, length = attachments.length; i < length; ++i) {
        var attachment = attachments[i];
        if (attachment.id && range.isPointInRange(attachment, 0))
            result.push(attachment.id);
    }
    
    var images = document.querySelectorAll("img");
    for (var i = 0, length = images.length; i < length; ++i) {
        var image = images[i];
        var source = image.src;
        if ((source.startsWith("cid:") || (image.id.length && image.attachmentIdentifier.length)) && range.isPointInRange(image, 0)) {
            result.push(image.id);
        }
    }
    return result.length == 1 ? result[0] : "";
// message_on_document_load() needs to run immediately.
// both the "load" and "DOMContentLoaded" events aren't fired until all embedded <img> tags have loaded from the network (or timed out)
_try_catch_wrap(message_on_document_load)();
//  Copyright 
 2016 Apple Inc. All rights reserved.
// This is unnecessary a lot of the time. Setting this to 'true' will also require a DFS when reformatting,
// which can be quite expensive.
var ATTEMPT_TO_REFORMAT_TOP_LEVEL_ELEMENTS = false;
var SMALL_ELEMENT_WIDTH = 10.0; // ignore elements of this box size
var TRANSFORM_WRAPPER_CLASS_NAME = "x-apple-transform-wrapper";
/* Utility Functions */
function _iterateAllDocumentElements(_this, iterator /* : function(currentNode) */) {
    // Use a "stop function" to stop this, because there's no pass by reference in js (gun emoji)(head emoji)
    var stop = false;
    function stopFunction() {
        stop = true;
    }
    var currentNode = null;
    var nodeIterator = document.createNodeIterator(document.body, NodeFilter.SHOW_ELEMENT);
    while ( !stop && (currentNode = nodeIterator.nextNode()) ) {
        iterator.call(_this, currentNode, stopFunction);
    }
function _elementHash(element) {
    var box = element.getBoundingClientRect();
    var aNumber = box.left + box.top;
    return element.tagName + "_" + aNumber;
function _depthFirstIterateAllBodyElements(_this, iterator /* : function (currentNode, stopFunction) */) {
    var stop = false;
    function stopFunction() {
        stop = true;
    }
    var visited = [];
    function visitNode(node, xpath) {
        if (stop) return;
        if (node == undefined) return;
        visited[xpath] = true;
        var children = node.children;
        for (var i = 0; i < children.length; i++) {
            var child = children.item(i);
            if (visited[child] == undefined) {
                visitNode(child, xpath + "/" + _elementHash(child));
            }
        }
        if (!stop) {
            iterator.call(_this, node, stopFunction);
        }
    }
    visitNode(document.body, "body");
function _elementIsContainedInElementOfTagName(element, tagName) {
    var contained = false;
    for (var parentElement = element.parentElement; parentElement != null; parentElement = parentElement.parentElement) {
        if (tagName == parentElement.tagName.toLowerCase()) {
            contained = true;
            break;
        }
    }
    return contained;
function _elementIsContainedInTable(element) {
    return _elementIsContainedInElementOfTagName(element, "table");
function _elementIsContainedInBlockquote(element) {
    return _elementIsContainedInElementOfTagName(element, "blockquote");
function _stripWhitespace(text) {
    return text.replace(/(\n)|(\s+)/g, "");
function _isEdgeToEdgeFormattedElement(elem) {
    // Anything else we can look at?
    return (elem && elem.nodeType == Node.ELEMENT_NODE &&
                (elem.getAttribute("x-apple-pending-edge-to-edge") ||
                 elem.classList.contains("x-apple-edge-to-edge") ||
                 elem.classList.contains("x-apple-wide-margin-edge-to-edge")));
function _isRescalableElement(elem) {
    if (elem.tagName.toLowerCase() == "img" && !elem.complete) {
        // static width?
        if (elem.width == undefined && elem.style.width == undefined) {
            return false;
        }
    }
    return !_isEdgeToEdgeFormattedElement(elem);
function ReformatterChange(element, propertyName, propertyValue, important) {
    this.element = element;
    this.propertyName = propertyName;
    this.propertyValue = propertyValue;
    this.important = important;
    this.cleanupBlock = function() {};
    this._previousValue = undefined;
ReformatterChange.prototype = {
    applyChange : function() {
        var styleDeclaration = this.element.style;
        this._previousValue = styleDeclaration.getPropertyValue(this.propertyName);
        styleDeclaration.setProperty(this.propertyName, this.propertyValue, this.important);
    },
    rollbackChange : function() {
        var styleDeclaration = this.element.style;
        if (this._previousValue != undefined) {
            styleDeclaration.setProperty(this.propertyName, this._previousValue, "");
        } else {
            styleDeclaration.removeProperty(this.propertyName);
        }
        this.cleanupBlock();
    },
var LOG_LEVEL_INFO = 0;
var LOG_LEVEL_WARN = 1;
var LOV_LEVEL_ERROR = 2;
function MailDocumentReformatter() {
    // constructor
    this.goalViewportWidth = 0.0;
    this.maximumWidth      = 0.0;
    this.meanWidth         = 0.0;
    this.widthDeviation    = 0.0;
    this.loggingEnabled    = false;
    this.reformattedWidth  = 0.0;
    this._rightFloats = undefined; // undefined means "uninitialized"
    this._hasLeftFloats = undefined;
    this._firstElementContainingText = null;
    this._appliedChanges = [];
MailDocumentReformatter.prototype = {
    _log : function(str, level) {
        level = level != undefined ? level : 0;
        if (this.loggingEnabled || level > 0) {
            MCVLog("[MDR]: " + str);
        }
    },
    _updateMetrics : function() {
        this.maximumWidth = 0.0;
        var nodeCount = 0;
        var widthSum = 0;
        var widthValues = [];
        _iterateAllDocumentElements(this, function(currentNode) {
            var boundingBox = currentNode.getBoundingClientRect();
            var width = boundingBox.width;
            // Ignore small elements
            if (width > SMALL_ELEMENT_WIDTH) {
                nodeCount++;
                widthSum += width;
                widthValues.push(width)
                var rightBoundary = boundingBox.left + boundingBox.width;
                if (rightBoundary > this.maximumWidth) {
                    this.maximumWidth = rightBoundary;
                }
            }
        });
        if (nodeCount > 0) {
            this.meanWidth = (widthSum / nodeCount);
            for (var i = 0; i < nodeCount; i++) {
                var width = widthValues[i];
                this.widthDeviation += (width - this.meanWidth) * (width - this.meanWidth);
            }
            this.widthDeviation = Math.sqrt(this.widthDeviation / nodeCount);
        }
    },
    _updateFloatsIfNecessary : function() {
        if (this._hasLeftFloats == undefined || this._rightFloats == undefined) {
            var hasAnyLeftFloat = false;
            // Not sure if we need to use this yet...
            // var containsUnknownImageDimensions = false;
            var rightFloats = [];
            _iterateAllDocumentElements(this, function(currentNode) {
                if (currentNode.hasChildNodes()) {
                    var computedStyle = window.getComputedStyle(currentNode);
                    var floatValue = computedStyle.float;
                    if (floatValue.toLowerCase() == "right") {
                        rightFloats.push(currentNode);
                    } else if (floatValue.toLowerCase() == "left") {
                        hasAnyLeftFloat = true;
                    }
                }
            });
            this._hasLeftFloats = hasAnyLeftFloat;
            this._rightFloats = rightFloats;
        }
    },
    /**
     * Returns the first element in the DOM that contains actual readable text. Uses a DFS
     * to find the deepest element that meets this requirement.
     * @returns {ELEMENT} First non-text element that contains readable text.
     */
    firstElementContainingText : function() {
        if (this._firstElementContainingText == null) {
            var element = null;
            _depthFirstIterateAllBodyElements(this, function(currentNode, stop) {
                if (currentNode.nodeType == Node.ELEMENT_NODE) {
                    var text = _stripWhitespace(currentNode.textContent);
                    if (text.length > 0) {
                        element = currentNode;
                        stop();
                    }
                }
            });
            this._firstElementContainingText = element;
        }
        return this._firstElementContainingText;
    },
    containsLeftFloats : function() {
        this._updateFloatsIfNecessary();
        return this._hasLeftFloats;
    },
    rightFloats : function() {
        this._updateFloatsIfNecessary();
        return this._rightFloats;
    },
    _setPropertyOnElement : function(element, propertyName, propertyValue, important) {
        important = important != undefined ? important : "";
        var change = new ReformatterChange(element, propertyName, propertyValue, important);
        change.applyChange();
        this._appliedChanges.push(change);
        return change;
    },
    currentDocumentViewportWidth : function() {
        return Math.max(document.body.clientWidth, document.documentElement.clientWidth);
    },
    _shouldReformatElement : function(element) {
        // Permit only block elements for now. Don't allow things like svg and pattern elements to be reformatted.
        var allowedTags = [ "body", "div", "table", "td", "tr", "span", "img", "blockquote", "ul", "li", "form", "pre", "footer", "center" ];
        return ( allowedTags.indexOf(element.tagName.toLowerCase()) >= 0 );
    },
    /**
     * Computes the intrinsic size and position of `element`.
     * @param element : Element whose rect to measure
     * @returns {RECT} Rectangle with properties width, height, x, and y.
     */
    _rectForElement : function(element) {
        var box = element.getBoundingClientRect();
        var elementRect = {
            x : box.left,
            y : box.top,
            width  : box.width,
            height : box.height
        };
        return elementRect;
    },
    /**
     * Iterates over all child elements and calculates the rect that encompasses all child bounding boxes. This is
     * different than simply asking for `element`s bounding box, because it might have a static or relative width.
     * This is a common case for table elements (especially table layouts, whose width is usually defined to be 100%).
     * @param element : Element whose rect to calculate
     * @returns {RECT} Rectangle with width and height properties.
     */
    _getSpilloverBoundingClientRect : function(element) {
        // Iterate over all child elements
        var spilloverRect = {width: 0, height: 0};
        var currentNode = null;
        var nodeIterator = document.createNodeIterator(element, NodeFilter.SHOW_ELEMENT);
        while ( currentNode = nodeIterator.nextNode() ) {
            var boundingBox = currentNode.getBoundingClientRect();
            if (boundingBox) {
                var rightEdge = boundingBox.left + boundingBox.width;
                var bottomEdge = boundingBox.top + boundingBox.height;
                if (rightEdge > spilloverRect.width) spilloverRect.width = rightEdge;
                if (bottomEdge > spilloverRect.height) spilloverRect.height = bottomEdge;
            }
        }
        return spilloverRect;
    },
    /**
     * Destructively resizes an element by manually adjusting it's width and height. This is usually the first thing
     * we try when reformatting an individual element. Uses an !important priority to override any 3rd party size that
     * may have been applied.
     * @param element : Element to resize
     * @param newSize : Dictionary containing new optional 'width' and 'height' keys.
     */
    _resizeElement : function(element, newSize) {
        if (_isRescalableElement(element)) {
            this._log(" - Resizing <" + element.tagName + "> element: width: " + newSize.width);
            if (newSize.width)  this._setPropertyOnElement(element, "width", newSize.width + "px", "important");
            if (newSize.height) this._setPropertyOnElement(element, "height", newSize.height + "px", "important");
            return true;
        }
        return false;
    },
    /**
     * Destructively rescales an element using webkit transforms, and places the element in a parent block
     * display element.
     * @param element : Element to rescale
     * @param scaleFactor : x-y scale to apply to the element. Typically this is a ratio of the current size to
                            it's desired size.
     * @returns {BOOLEAN} Whether or not it succeeded.
     */
    _rescaleElement : function(element, scaleFactor) {
        if (element.className == TRANSFORM_WRAPPER_CLASS_NAME) {
            // Don't attempt to rescale an element's transform wrapper. Scale should be rolled back should scaling
            // be attempted again.
            this._log("Tried to rescale already scaled transform wrapper");
            return false;
        }
        var changes = [];
        if (element.parentElement != document.documentElement && _isRescalableElement(element)) {
            var computedStyle = window.getComputedStyle(element);
            if (computedStyle.display == "inline") {
                // i.e., span elements, need to be converted into block elements.
                changes.push(this._setPropertyOnElement(element, "display", "inline-block", "important"));
            }
            // If this element contains unloaded (probably remote) images, then the boundingBox calculation below will
            // be incorrect. The solution enacted below will apply the rescale transform anway, then when the image is finished
            // downloading will rollback all the changes applied here and try again. There could be potential problems with this,
            // for instance elements that are reformatted *around* this element that depend on the size it, so a potential solution
            // for that would be to lock the reformatter until the images in here are done loading, but then that would cause the
            // user to see/interact with this document in a half-reformatted state. Better to just re-run the formatter (to various
            // extents) when the images finish loading.
            var numIncompleteImages = 0;
            var images = element.getElementsByTagName("img");
            for (var i = 0; i < images.length; i++)  {
                var image = images.item(i);
                if (!image.complete) numIncompleteImages++;
            }
            var boundingBox = element.getBoundingClientRect();
            var resizeWidth  = boundingBox.width;
            var resizeHeight = boundingBox.height;
            if (element.getAttribute("width")) { // static width?
                resizeWidth = element.getAttribute("width");
            }
            this._resizeElement(element, { width: resizeWidth, height: resizeHeight });
            changes.push(this._setPropertyOnElement(element, "transform-origin", "0 0"));
            changes.push(this._setPropertyOnElement(element, "transform", "scale(" + scaleFactor + ")"));
            // TODO: adjust margin?
            var marginAdjustmentWidth = boundingBox.width * (1.0 - scaleFactor);
            // Adjust size of parent element, non-destructively
            var range = document.createRange();
            var newNode = document.createElement("div");
            newNode.className = TRANSFORM_WRAPPER_CLASS_NAME;
            range.selectNode(element);
            range.surroundContents(newNode);
            // The wrapper div's height must be in terms of the element's clientHeight since it gives us
            // the elements "true" height, ignoring any transforms applied to its parents. boundingBox gives us
            // the element's visual size, including transforms applied at all levels.
            var scaledHeight = element.clientHeight * scaleFactor;
            
            this._log(" - Rescaling <" + element.tagName + "> element: height: " + scaledHeight);
            
            var change = this._setPropertyOnElement(newNode, "height", scaledHeight + "px");
            change.cleanupBlock = function() {
                var newRange = document.createRange();
                newRange.selectNodeContents(newNode);
                var newNodeContents = newRange.extractContents();
                newNode.parentNode.insertBefore(newNodeContents, newNode);
                newNode.parentElement.removeChild(newNode);
            };
            changes.push(change);
            // Now if we had incomplete images, add an onload observer so we can try again once they're done
            // loading.
            if (numIncompleteImages > 0) {
                for (var i = 0; i < images.length; i++) {
                    var image = images.item(i);
                    var outerThis = this;
                    image.onload = function() {
                        numIncompleteImages--;
                        if (numIncompleteImages == 0) {
                            // Rollback the changes (if they're still in the _appliedChanges stack)
                            outerThis._log("All images have loaded. Rolling back rescaling changes from preload.");
                            changes.map(function(change) {
                                // Be sure to remove them from the _appliedChanges (but only if they haven't yet been rolled back yet
                                var i = outerThis._appliedChanges.indexOf(change);
                                if (i > -1) {
                                    outerThis._appliedChanges.splice(i, 1);
                                    change.rollbackChange();
                                }
                            });
                            // and try rescaling again if the element is still valid
                            if (element.parentElement) {
                                outerThis._log("Rescaling element again with images loaded.");
                                outerThis._rescaleElement(element, scaleFactor);
                            }
                        }
                    }
                }
            }
        }
        return (changes.length > 0);
    },
    /**
     * Gets this from the display info cache in the native layer above. If we
     * didn't reformat the message last time, don't try to do it again.
     * @returns {BOOLEAN} Whether or not we should bail out.
     */
    _shouldSkipReformatting : function() {
        var shouldSkip = !!window.externalConstants.getValue("shouldSkipReformatting");
        if (!shouldSkip) {
            var metatags = document.getElementsByTagName("meta");
            for (var i = 0; i < metatags.length; i++) {
                var tag = metatags.item(i);
                if (tag.name == "x-apple-disable-message-reformatting") {
                    shouldSkip = true;
                    break;
                }
            }
        }
        return shouldSkip;
    },
    /**
     * First step in the rescaling process. Attempts to scale top level tables
     * (i.e., documents that are laid out using table layouts).
     * @returns {Boolean} Whether or not rescaling should continue based on some exceptions defined below.
     */
    rescaleTopLevelElements : function() {
        var shouldContinue = true;
        var hasLeftFloats  = this.containsLeftFloats();
        var hasRightFloats = (this.rightFloats().count > 0);
        this._log("Has left floats: " + hasLeftFloats + ", right floats: " + hasRightFloats);
        if (hasLeftFloats) {
            // Old rule: Don't rescale if there's a left float.
            shouldContinue = false;
        } else {
            var topLevelElements = [];
            // TODO: do we still have to worry about right floats? These would be images
            // that are supposed to show up "inline" with text.
            // See: http://www.w3schools.com/css/tryit.asp?filename=trycss_layout_float
            if (shouldContinue) {
                var hasAnyRescalableTables = false;
                var maxImageBoundingBoxLeftEdge = this.goalViewportWidth * 0.25;
                var tablesNodeList = document.getElementsByTagName("table");
                for (var i = 0; i < tablesNodeList.length; i++) {
                    var table = tablesNodeList.item(i);
                    if (!_elementIsContainedInTable(table)) {
                        var firstTextElement = this.firstElementContainingText();
                        if (!firstTextElement) {
                            shouldContinue = false;
                            break;
                        }
                        var tableBoundingRect = table.getBoundingClientRect();
                        var firstElemBoundingRect = firstTextElement.getBoundingClientRect();
                        if (tableBoundingRect.top <= firstElemBoundingRect.top && !_elementIsContainedInBlockquote(table)) {
                            shouldContinue = false;
                            break;
                        }
                        topLevelElements.push(table);
                        hasAnyRescalableTables = true;
                    }
                }
                if (shouldContinue && !hasAnyRescalableTables) {
                    var hasImages = false;
                    var imageElements = document.getElementsByTagName("img");
                    for (var i = 0; i < imageElements.length; i++) {
                        var img = imageElements.item(i);
                        if (!_elementIsContainedInTable(img)) {
                            hasImages = true;
                            break;
                        }
                    }
                    var hasPreTags = false;
                    if (!hasImages) {
                        var preTags = document.getElementsByTagName("pre");
                        for (var i = 0; i < preTags.length; i++) {
                            var pre = preTags.item(i);
                            if (!_elementIsContainedInTable(pre)) {
                                hasPreTags = true;
                                break;
                            }
                        }
                    }
                    shouldContinue = (hasImages || hasPreTags);
                }
                if (shouldContinue) {
                    var goalWidth = this.goalViewportWidth;
                    for (var i = 0; i < topLevelElements.length; i++) {
                        var elem = topLevelElements[i];
                        var boundingBox = elem.getBoundingClientRect();
                        var scaleFactor = goalWidth / (boundingBox.left + boundingBox.width);
                        if (!this._rescaleElement(elem, scaleFactor)) {
                            shouldContinue = false;
                            break;
                        }
                    }
                }
            }
        }
        return shouldContinue;
    },
    /**
     * This is the main reformatting routine. Iterates through every element to find one that
     * exceeds our goalViewportWidth, picks just that one element to resize, then repeats the process until we've
     * hit every element, or we hit the same element more than once. This process is detailed further below.
     * @returns {BOOLEAN} Whether or not something was reformatted.
     */
    rescaleDocument : function() {
        var bodyStyle = window.getComputedStyle(document.body);
        var goalViewportWidth = this.goalViewportWidth;
        var shouldContinue = true;
        var WIDTH_EXCEED_THRESHOLD = 10.0;
        var lastResizedElement = null;
        var lastRescaledElement = null;
        while (shouldContinue) {
            var reformattedElement = null;
            // Pick out one individual element to reformat...
            _iterateAllDocumentElements(this, function(elem, stop) {
                if (this._shouldReformatElement(elem)) {
                    var elementRect = this._rectForElement(elem);
                    // If this element's right side goes beyond our goal viewport width, it's a candidate for scaling/sizing.
                    if ( ((elementRect.x + elementRect.width) - goalViewportWidth) > WIDTH_EXCEED_THRESHOLD ) {
                        if (_elementIsContainedInTable(elem)) {
                            this._log("Found a stray element inside of a table...");
                            // Tables are a special case. See if the entire table can be scaled down instead of messing with this
                            // individual element (especially if it's a td, tr, etc.).
                            var tableElem = null;
                            var parentNode = elem;
                            while ( parentNode = parentNode.parentElement ) {
                                if (parentNode.tagName.toLowerCase() == "table") {
                                    tableElem = parentNode;
                                    break;
                                }
                            }
                            if (tableElem) {
                                var spilloverRect = this._getSpilloverBoundingClientRect(tableElem);
                                if ( (spilloverRect.width - goalViewportWidth) > WIDTH_EXCEED_THRESHOLD ) {
                                    this._log("Found <TABLE> element to reformat.");
                                    tableElem.setAttribute("width", parseInt(spilloverRect.width));
                                    elem = tableElem;
                                    elementRect = this._rectForElement(tableElem);
                                    elementRect.width = spilloverRect.width;
                                    elementRect.height = spilloverRect.height;
                                }
                            }
                        }
                        var computedStyle = window.getComputedStyle(elem);
                        var horizontalPadding = parseInt(computedStyle.paddingLeft) + parseInt(computedStyle.paddingRight);
                        // Compute desired width
                        var desiredWidth = goalViewportWidth;
                        if (elem != document.body) {
                            // The desired width should exclude body padding.
                            desiredWidth = desiredWidth - (parseInt(bodyStyle.paddingLeft) + parseInt(bodyStyle.paddingRight)) - elementRect.x;
                        } else {
                            desiredWidth = desiredWidth - horizontalPadding;
                        }
                        var outerThis = this;
                        resize = function(elem, width) {
                            if (lastResizedElement != elem) {
                                var height = undefined;
                                if (elem.tagName.toLowerCase() == "img") {
                                    // need to scale these proportionally
                                    height = (desiredWidth / elementRect.width) * elementRect.height;
                                }
                                // Attempt to RESIZE the element. Some elements won't respond to this change (i.e., elements with no
                                // defined width, tables, inline-divs, etc.), so this may not work.
                                var success = outerThis._resizeElement(elem, {width: desiredWidth, height: height});
                                lastResizedElement = elem;
                                reformattedElement = elem;
                                return success;
                            }
                            return false;
                        };
                        rescale = function(elem, width) {
                            if (lastRescaledElement != elem) {
                                // This path means we tried to explicitly size the element, but it didn't work. Try applying a webkit
                                // transform (scale) on it instead.
                                var scaleFactor = width / (elementRect.width + elementRect.x);
                                var success = outerThis._rescaleElement(elem, scaleFactor);
                                lastRescaledElement = elem;
                                reformattedElement = elem;
                                return success;
                            }
                            return false;
                        };
                        if (desiredWidth > 0.0) {
                            var strategies = [resize, rescale];
                            if (elem.tagName.toLowerCase() == "table") {
                                strategies = [rescale, resize];
                            } else if (elem == document.body) {
                                strategies = [resize];
                            }
                            var success = false;
                            for (var i = 0; i < strategies.length; i++) {
                                var strategy = strategies[i];
                                success = strategy(elem, desiredWidth);
                                if (success) break;
                            }
                            if (!success) {
                                // If we're here, we tried sizing, then scaling, but it still keeps coming up as the problematic element.
                                // This means we probably can't reformat this message because of this one element. Bail out!
                                // TODO: roll back the last change to this element?
                                this._log("Hit the same element. Stopping reformatting.");
                                shouldContinue = false;
                            }
                        } else {
                            // If we're here, this usually means we didn't format the parent element for some reason. Is it a table, or perhaps
                            // an element with a tag type that's not in the list of allowed tags (see _shouldReformatElement)?
                            this._log("Found element that could not be sanely rescaled.");
                            shouldContinue = false;
                        }
                        stop();
                    }
                }
            });
            if (!reformattedElement) {
                this._log("Hit the end of the document without finding an element to reformat.");
                shouldContinue = false;
            }
        }
        return !!(lastResizedElement || lastRescaledElement);
    },
    reformat : function() {
        if (this._shouldSkipReformatting()) {
            this._log("Skipping reformatting.", LOG_LEVEL_WARN);
            return false; // NOTE: early return!
        }
        if (this.reformattedWidth > 0.0) {
            this.rollbackAllChanges();
        }
        var didReformatDocument = false;
        var goalViewportWidth = window.externalConstants.getValue("viewport-width");
        var actualViewportWidth = this.currentDocumentViewportWidth();
        this.goalViewportWidth = goalViewportWidth;
        if (actualViewportWidth > goalViewportWidth) {
            this._log("Reformat is necessary. Goal: " + goalViewportWidth + ", actual: " + actualViewportWidth);
            this._updateMetrics();
            if (ATTEMPT_TO_REFORMAT_TOP_LEVEL_ELEMENTS) {
                var shouldResize = (this.widthDeviation > this.meanWidth);
                // If the mean is within DEV_OFFSET (1.1) std dev's of the max, we should try again.
                if (!shouldResize) {
                    var difference = Math.abs(this.maximumWidth - this.meanWidth);
                    var scaledDev = this.widthDeviation * 1.1;
                    shouldResize = difference < scaledDev;
                }
                this._log("Should resize: " + (shouldResize ? "YES" : "NO"));
                if (shouldResize) {
                    // This means we probably have a table layout. Try to rescale it first.
                    didReformatDocument = this.rescaleTopLevelElements();
                }
                this._log("Rescaled top level elements: " + didReformatDocument);
            }
            var shouldRescale = false;
            var zoomFactor = goalViewportWidth / this.maximumWidth;
            if (zoomFactor < 1.0) {
                shouldRescale = true;
            }
            this._log("Should rescale (zoomFactor: " + zoomFactor + "): " + (shouldRescale ? "YES" : "NO"));
            if (shouldRescale) {
                didReformatDocument = this.rescaleDocument();
            }
            if (didReformatDocument) {
                this.reformattedWidth = this.goalViewportWidth;
            }
        }
        window.webkit.messageHandlers.FinishedReformattingMessage.postMessage( didReformatDocument );
        return didReformatDocument;
    },
    rollbackAllChanges : function() {
        this._log("Rolling back [" + this._appliedChanges.length + "] reformatted changes...");
        var changes = this._appliedChanges;
        if (changes.length > 0) {
            // Be sure to do this in reverse
            for (var i = changes.length - 1; i >= 0; i--) {
                var change = changes[i];
                change.rollbackChange();
            }
        }
        this._appliedChanges = [];
        // Update reformatted width with new width so rolling back doesn't trigger another reformat.
        this.reformattedWidth = g_documentReformatter.currentDocumentViewportWidth();
    },
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.email</key>
<true/>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceAddressBook</string>
</array>
</dict>
</plist>
ContentItemMarkupGenerator
EFLoggable
NSObject
ConversationFooterViewDisplayMetrics
MessageActivityViewController
MessageAttachmentActionGenerator
MessageSaveToCameraRollActivity
MessageSaveImageAttachmentActivity
MessageSaveVideoAttachmentActivity
MessageSaveAllAttachmentsActivity
MessageQuicklookImageAttachmentsActivity
MessageMarkupDocumentActivity
MessagePrintQuicklookableAttachmentActivity
MessageContentItemRepresentationTask
MessageContentItemsHelper
MessageContentRepresentationRequest
EFCancelable
EFSignpostable
MessageContentRepresentationRequestDelegate
EMContentItemRequestDelegate
MessageHeaderViewModel
MessageHeaderViewModelBuilder
MessageItemViewModelBuilder
MessageItemFlagsViewModelBuilder
NSCopying
MessageItemViewModel
MFAddressAtomStatusManager
MFAddressBookClient
MFBlockedSenderBannerView
MFCardAction
MFFlagColorCardAction
MFConversationItemFooterView
_UICursorInteractionDelegate
MFConversationItemRoundButton
MFGradientView
MFHasMoreContentBannerView
_MFPlainTextBannerView
_MFPartiallyDownloadedBannerView
MFInternalSettingsCache
MFLoadBlockedContentBannerView
MFMailDropBannerView
_MFMessageContentURLProtocolRegistry
MFMessageContentURLProtocol
_MFTapPreventingRecognizer
MFMessageContentView
UIPopoverPresentationControllerDelegate
UIAdaptivePresentationControllerDelegate
_WKInputDelegate
WKNavigationDelegatePrivate
WKNavigationDelegate
WKUIDelegatePrivate
WKUIDelegate
MFHasMoreContentBannerViewDelegate
MFLoadBlockedContentBannerViewDelegate
MFBlockedSenderBannerViewDelegate
MFMessageHeaderViewDelegate
MFMessageFooterViewDelegate
MFMailDropBannerDelegate
MFPopoverPresentationSource
UIScrollViewDelegate
MFMailWebProcessDelegate
MFReusable
AbT(
_MFMessageContentViewScriptHandler
WKScriptMessageHandler
_MFMessageContentResizeWrapperView
MFMessageDisplayMetrics
MFMessageDisplayMetricsCompact
MFMessageDisplayMetricsRegular
MFMessageHeaderView
MFMessageHeaderViewBlock
MFQuotedContentAttribution
MFReadableContentMarginCalculator
MFSuggestionBannerView
MFUserScriptLibrary
MFMailWebProcessProxy
MFWebViewDictionary
MFWebViewLoadingController
MFWKWebViewFactory
MessageContentView
SeparatorLayer
MobileMail
MFUIDebugging
VIPManager
EMVIPManager
EMVIPReader
UTF8String
UTType
contentID
isAvailableLocally
isDisplayableInlineContentItem:
dictionary
ef_conformsToUTType:
setObject:forKeyedSubscript:
dictionaryWithObjects:forKeys:count:
htmlSnippetWithTag:includeTrailingTag:attributes:
attachmentElementMarkupStringForContentItem:
ef_publicDescription
displayName
localizedName
organizationName
storageByteCount
exchangeEventUID
mainBundle
localizedStringForKey:value:table:
stringFromByteCount:countStyle:
dataTransferByteCount
isDisplayableImageContentItem:
isDisplayableSinglePagePDFContentItem:
isSinglePagePDF
markupStringForDisplayForContentItem:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
currentDevice
userInterfaceIdiom
mf_hasCompactDimension
setUsePhoneLandscapeSymbolConfiguration:
setTopToBaseline:
setToolbarHeight:
mainScreen
_referenceBounds
displayMetricsWithSafeAreaInsets:interfaceOrientation:traitCollection:
toolbarHeight
topToBaseline
usePhoneLandscapeSymbolConfiguration
_usePhoneLandscapeSymbolConfiguration
_toolbarHeight
_topToBaseline
initWithActivityItems:applicationActivities:
arrayWithObjects:count:
setExcludedActivityTypes:
setSourceIsManaged:
sourceIsManaged
_sourceIsManaged
countByEnumeratingWithState:objects:count:
mainThreadScheduler
contentURL
onScheduler:addSuccessBlock:
actionWithTitle:image:identifier:handler:
systemImageNamed:
_saveToCameraRollActionForFutureRepresentations:title:image:
previewURL:
markupURL:
saveImageActionForFutureRepresentation:
saveVideoActionForFutureRepresentation:
saveAllAttachmentsActionWithTitle:futureRepresentations:
quicklookActionForURL:contentRepresentationHandlingDelegate:
markupDocumentActionForURL:contentRepresentationHandlingDelegate:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
init
setDelegate:
setContext:
mutableCopy
removeObject:
path
prepareWithActivityItems:
_prepareWithActivityItems:
initWithAttachmentHandlingDelegate:context:
activityType
activityImage
_beforeActivity
delegate
context
.cxx_destruct
_delegate
_context
canSaveAllAttachmentsInContext:
activityTitle
localizedTitleForSaveAllAttachmentsAction
allMediaAttachmentFutures
activityDidFinish:
canPerformWithActivityItems:
performActivity
setUrl:
_cleanup
initWithAttachmentHandlingDelegate:context:url:
_url
sharedPrintController
pageRenderer
setPrintPageRenderer:
presentAnimated:completionHandler:
initWithPrintPageRenderer:
setPageRenderer:
_pageRenderer
initWithObject:
progressWithTotalUnitCount:
promise
topLevelProgress
contentRequestPromise
future
invokerIDs
addObject:
performWhileLocked:
containsObject:
contentRequestProgress
type
networkUsage
optionsWithRequestedRepresentationType:networkUsage:
contentItem
completionHandlerAdapter
requestRepresentationWithOptions:completionHandler:
setContentRequestProgress:
addChild:withPendingUnitCount:
initWithContentItem:type:networkUsage:
progress
addAccessedByInvokerWithID:
hasBeenAccessedByInvokerWithID:
resume
setNetworkUsage:
setContentItem:
setType:
setTopLevelProgress:
setContentRequestPromise:
setInvokerIDs:
_networkUsage
_contentItem
_type
_topLevelProgress
_contentRequestPromise
_contentRequestProgress
_invokerIDs
ef_conformsToRFC822UTType
serialDispatchQueueSchedulerWithName:qualityOfService:
stringWithFormat:
copy
objectForKeyedSubscript:
contentItemForContentID:
contentItems
isEqualToString:
mailDropMetadata
fileSize
merge:
flags
setFlags:
setTotalMailDropDownloadSize:
_computeMailDropProperties
componentsWithURL:resolvingAgainstBaseURL:
absoluteString
_injectAttachmentViewForElementWithSourceAttributeValue:forContentItem:
contentItemForElementID:
displayStateForContentItem:
displayViewerForContentItem:rect:view:
startDownloadForContentItem:userInitiated:
representationHandler
showSelectedExchangeEventUID:fromRect:view:
_futureForContentItem:networkUsage:invokerID:previouslyInvoked:progress:
showSelectedContentRepresentation:fromRect:view:
showMenuForSelectedContentRepresentation:fromRect:view:
resultIfAvailable
cancel
_representationTypeForContentItem:
setDisplayState:forContentItem:
onScheduler:addFailureBlock:
hasItemConformingToTypeIdentifier:
setDataAvailability:forTypeIdentifier:
registerFileRepresentationForTypeIdentifier:dataAvailableImmediately:visibility:loadHandler:
stringByDeletingPathExtension
setSuggestedName:
registerObject:visibility:
addSuccessBlock:
webView
mcv_executeJavaScriptMethod:arguments:
isFinished
numberWithInteger:
fractionCompleted
setPercentCompleted:forContentItem:
maildropProgressHandler
numberWithDouble:
_updateProgressFraction:forContentItem:
performBlock:
ef_observeKeyPath:options:usingBlock:
always:
isPhotoArchive
initWithName:expiration:preventIdleSleep:
archiveDirectory
inputWithURL:
archive
scrubbedArchiveEntries
contents
length
imageWithData:
invalidate
decompressContents:completion:
initWithURL:options:error:
isRegularFile
_attachmentForIdentifier:
sharedReporter
reportIssueType:description:
setFileWrapper:contentType:completion:
inlineImageFinishedDownloading:
completedUnitCount
setCompletedUnitCount:
didStartDownloadForContentItemWithProgress:
initWithWebView:contentItemHandler:
setContentItems:
associateElementID:withContentID:
associateElementID:withWKAttachmentID:
mailDropBannerMetadata
noteDidFinishDocumentLoadForURL:
noteDidFailLoadingResourceWithURL:
attachmentWasTappedWithElementID:rect:view:
showMenuForContentItem:rect:view:
futureForContentItem:download:
updateDragItemProvider:forElementID:
downloadAllMailDropAttachments
setWebView:
setRepresentationHandler:
totalMailDropDownloadSize
allMailDropsDownloaded
setAllMailDropsDownloaded:
setMaildropProgressHandler:
_elementIDToContentID
_elementIDToWKAttachmentID
_contentIDToTask
_inlinedImageContentIDs
_didComputeMailDropProperties
_totalUnstartedMailDropDownloadSize
_attachmentsScheduler
_totalMailDropProgress
_allMailDropsDownloaded
_mailDropBannerMetadata
_webView
_contentItems
_representationHandler
_totalMailDropDownloadSize
_maildropProgressHandler
signpostLog
initWithMessage:includeSuggestionItems:delegate:
itemID
futureWithResult:
_commonInitWithIncludeSuggestionItems:delegate:
initWithMessageList:itemIdentifier:includeSuggestionItems:delegate:
messageListItemForItemID:
displayMessage
then:
observableObserver
replay:
filter:
connect
addCancelable:
dealloc
messageFuture
result
signpostID
defaultScheduler
optionsWithRequestedRepresentationType:networkUsage:includeSuggestionItems:
requestRepresentationWithOptions:delegate:completionHandler:
em_itemNotFoundError
futureWithError:
onScheduler:then:
null
observerDidReceiveResult:
_resetFuture:
userInfo
em_unknownError
addFailureBlock:
finishWithFuture:
_issueMessageContentRepresentationRequest
start
_contentRepresentationFuture
resultIfAvailable:
result:
hasStarted
objectAtIndexedSubscript:
observerWithResultBlock:completionBlock:failureBlock:
observeOn:
subscribe:
immediateScheduler
onScheduler:addLoadObserver:
initWithMessage:includeSuggestionItems:
initWithMessageList:itemIdentifier:includeSuggestionItems:
updateItemID:messageList:
message
retry
waitForResult
state
addLoadObserver:
_cancelationToken
_inputObservable
_contentObservable
_futureContentRepresentation
_hasError
_retyAttempt
_includeSuggestionItems
_contentRepresentationLock
_itemID
_messageFuture
contentObjectID:generateHTMLSnippetsForRelatedContentItems:completionHandler:
mf_stringByEscapingHTMLCodes
localizedStringWithFormat:
initWithMarkupString:baseURL:
markupString
contentObjectID:generateHTMLSnippetsForMailDropContentItems:completionHandler:
contentObjectID:placeholderHTMLForEmptyContentWithCompletionHandler:
doesNotRecognizeSelector:
isBlockedSender
setBlockedSender:
hasAttachments
setHasAttachments:
dateReceived
setDateReceived:
dateSent
setDateSent:
subject
setSubject:
mailbox
setMailbox:
senderList
setSenderList:
toList
setToList:
ccList
setCcList:
bccList
setBccList:
atomManager
setAtomManager:
initWithBuilder:
setObservableObserver:
_flagsChangedInModel:
read
setRead:
flagged
setFlagged:
flagColors
setFlagColors:
replied
setReplied:
forwarded
setForwarded:
isVIP
setVIP:
conversationNotificationLevel
setNotify:
setMute:
isBlocked
date
isEqualToDate:
isEqualToArray:
isRead
isFlagged
isEqualToIndexSet:
isReplied
isForwarded
isNotify
isMute
copyWithZone:
initWithItemBuilder:
modelObservable
updatedFlagsModelWithBuilder:
updatedModelWithMessage:
_dateSent
_subject
_mailbox
_senderList
_toList
_ccList
_bccList
_atomManager
_observableObserver
_read
_flagged
_replied
_forwarded
_VIP
_notify
_mute
_blockedSender
_hasAttachments
_flagColors
_dateReceived
_commonInit
defaultCenter
_trustDidChange:
addObserver:selector:name:object:
_legacyAccountsDidChange:
_vipSendersDidChange:
defaultInstance
sharedManager
addClient:
removeClient:
updateTrustForDisplayedAtoms
_invalidateAtoms
atomProvider
addressBookDidChange:
iterateDisplayedAtomListsWithBlock:
setSecurityInformation:
smimeError
setSMIMEError:
securityInformation
signers
count
subarrayWithRange:
otherSigners
signingCertificateTrustInfo
sender
ef_map:
setOtherSigners:
_updateAtomsInList:
addressAtoms
emailAddress
commonName
stringValue
mf_formattedAddressWithName:email:useQuotes:
setAddress:
actionForTrustInformation:
setPresentationOptions:
updateAtomsForVIP
firstObject
title
_updateOtherSignersList:
shouldDecorateAtomListWithSMIMEStatus:
isSigned
isEncrypted
isDisplayStringFromAddressBook
displayString
mf_hasSameNamesAs:
_atomContainsVIPSender:
isInternal
em_userDefaults
boolForKey:
presentationOptions:encodedIntoAddress:
presentationOptions
initWithTrustInformation:
action
legacyAccount
uniqueID
accountWithUniqueId:
setLegacyAccount:
_updateVIPStatus
ABPerson
addObjectsFromArray:
unmodifiedAddressString
mf_addressComment
allObjects
vipForEmailAddresses:andDisplayNames:
addressBookManager:addressBookDidChange:
addressBookPreferencesChangedForAddressBookManager:
initWithAccount:
setAtomProvider:
updateWithSecurityInformation:
account
setAccount:
_atomProvider
_account
_legacyAccount
_securityInformation
_smimeError
initWithFrame:
banner
setTitle:
setAction:
setAccessoryType:
_titleControlTapped:
addTarget:action:forControlEvents:
_bannerDismissed:
didTapBlockedSenderBannerView:
didDismissBlockedSenderBannerView:
cardActionWithTitle:shortTitle:imageName:tintColor:handlerEnabled:handler:
setShortTitle:
setImageName:
setTintColor:
setHandler:
setHandlerEnabled:
handlerEnabled
executeHandler
handler
cardActionWithTitle:shortTitle:imageName:tintColor:handler:
executeHandlerIfEnabled
imageName
tintColor
shortTitle
shouldDismissCardBeforeExecuteHandler
setShouldDismissCardBeforeExecuteHandler:
_handlerEnabled
_shouldDismissCardBeforeExecuteHandler
_imageName
_tintColor
_title
_shortTitle
_handler
flagColor
setFlagColor:
_flagColor
setAccessibilityIdentifier:
setInsetsLayoutMarginsFromSafeArea:
mailConversationViewExpandedCellBackgroundColor
setBackgroundColor:
initWithDelegate:
addInteraction:
effectWithStyle:
initWithEffect:
setFrame:
setClipsToBounds:
setTranslatesAutoresizingMaskIntoConstraints:
setBackgroundView:
addSubview:
_updateBackgroundView
layer
setAnchorPoint:
buttonWithType:
setCharge:
titleLabel
_setTextColorFollowsTintColor:
setLineBreakMode:
prefixFont
setFont:
bundleForClass:
setTitle:forState:
sizeToFit
_updateSeeMoreButton
mf_symbolConfigurationForView:
setPreferredSymbolConfiguration:forImageInState:
setImage:forState:
setShowsLargeContentViewer:
_fontMetricCacheDidInvalidate:
_updateButtons
setNeedsLayout
setLayoutMargins:
shouldHideStickyFooterView
backgroundView
setAlpha:
setSeeMoreButtonHidden:
seeMoreButton
setHidden:
isHidden
alpha
frame
revealActionsButton
setSenderName:
setAttributedTitle:forState:
layoutSubviews
displayMetrics
estimatedFooterViewHeight
bounds
layoutActionButtonWithBounds:
layoutSeeMoreButton
currentYOffset
moveOriginYByOffset:
layoutMarginsDidChange
setBounds:
footerViewDidChangeHeight:
footerViewTopToBaseline
effectiveUserInterfaceLayoutDirection
layoutMargins
setDefaultSeeMoreButtonOriginY:
traitCollection
hasCompactLayout
setNumberOfLines:
sharedFontMetricCache
systemFontOfSize:
cachedFont:forKey:
cachedPreferredFontForStyle:
semanticContentAttribute
userInterfaceLayoutDirectionForSemanticContentAttribute:
footerViewTrailingButtonOrigin
horizontalSizeClass
setDefaultRevealActionButtonOriginY:
traitCollectionDidChange:
setCurrentYOffset:
defaultRevealActionButtonOriginY
defaultSeeMoreButtonOriginY
allowsCursorSnapping
initWithView:
effectWithPreview:
imageView
convertPoint:fromView:
mf_currentScreenScale
cursorWithRoundedRect:
styleWithEffect:cursor:
nameFont
cursorInteraction:regionForLocation:defaultRegion:
cursorInteraction:regionForRequest:defaultRegion:
cursorInteraction:styleForRegion:modifiers:
cursorInteraction:styleForRegion:
cursorInteraction:willEnterRegion:withAnimator:
cursorInteraction:willExitRegion:withAnimator:
cursorInteraction:willEnterRegion:
cursorInteraction:willExitRegion:
isSeeMoreButtonHidden
setSeeMoreButtonAlpha:
seeMoreButtonAlpha
seeMoreButtonHeight
setDisplayMetrics:
addTarget:action:toButton:
showAttributionWithSenderName:
hideAttribution
pointInside:withEvent:
setRevealActionsButton:
senderName
setAllowsCursorSnapping:
contactStore
setContactStore:
setSeeMoreButton:
_allowsCursorSnapping
_backgroundView
_revealActionsButton
_displayMetrics
_senderName
_defaultRevealActionButtonOriginY
_defaultSeeMoreButtonOriginY
_contactStore
_currentYOffset
_seeMoreButton
preferredContentSizeCategory
_firstLineBaseline
cachedFloat:forKey:
size
image
baselineOffsetFromBottom
setTintAdjustmentMode:
setMasksToBounds:
setCornerRadius:
setContentMode:
_setImage
mf_systemImageNamed:forView:
update
CGColor
gradientLayer
setColors:
colors
colorWithCGColor:
setLocations:
locations
setStartPoint:
startPoint
setEndPoint:
endPoint
layerClass
setGradientColors:
gradientColors
initWithFrame:remainingBytes:
actionStringIsDownloading:
animateWithDuration:animations:
setUserInteractionEnabled:
didTapHasMoreContentBannerView:
bannerWithFrame:isPlainText:remainingBytes:
titleString
reloadData
requestLoad
remainingBytes
setRemainingBytes:
_remainingBytes
mf_stringRepresentationForBytes:
sharedCache
tiltedTabSkyViewEnabled
UIDebuggingEnabled
setTiltedTabSkyViewEnabled:
setUIDebuggingEnabled:
_tiltedTabSkyViewEnabled
_UIDebuggingEnabled
_updateBannerText
loadBlockedContentBannerDidTriggerLoad:
initWithFrame:blockedContentTypes:blockingReason:
setBlockedContentTypes:
blockedContentTypes
_blockingReason
_blockedContentTypes
labelColor
setTextColor:
preferredFontForTextStyle:
secondaryLabelColor
contentSizeCategoryDidChangeNotification:
systemGray4Color
initWithProgressViewStyle:stroke:frame:
layoutMarginsGuide
firstBaselineAnchor
topAnchor
constraintEqualToAnchor:constant:
lastBaselineAnchor
bottomAnchor
leadingAnchor
constraintEqualToAnchor:
trailingAnchor
trailingAccessoryViewLayoutGuide
constraintLessThanOrEqualToAnchor:
centerXAnchor
centerYAnchor
activateConstraints:
isInvalid
isExpired
_setupDownloadLabel
_setupExpirationLabel
_setupDownloadIcon
progressDidFinish
superview
bannerState
avatarDiameterForCurrentContentSize
setConstant:
_bodyLeading
updateConstraints
setText:
setTimeStyle:
setDateStyle:
expiration
stringFromDate:
_hasDataLocally
startDownload:
removeTarget:action:forControlEvents:
bringSubviewToFront:
setNeedsDisplay
setBannerState:
mailDropBannerDidTriggerDownload:
_shouldDisplayProgress
setProgress:
setNeedsUpdateConstraints
invalidateIntrinsicContentSize
setSeparatorIsHidden:
setDownloadProgress:
shouldPresent
metaData
setMetaData:
downloadProgress
_hasLoaded
_expirationLabel
_downloadLabel
_downloadIcon
_progressView
_iconWrapperWidth
_labelFirstBaseline
_expirationFirstBaseline
_expirationBottom
_metaData
_bannerState
_downloadProgress
performSyncBlock:
weakToWeakObjectsMapTable
lock
setScheme:
setPath:
storage
setObject:forKey:
unlock
objectForKey:
query
setQuery:
sharedRegistry
URLForLoadingContext:scheme:
loadingContextForURL:
_lock
_storage
registerClass:
registry
scheme
caseInsensitiveCompare:
initWithRequest:cachedResponse:client:
client
response
URLProtocol:didReceiveResponse:cacheStoragePolicy:
data
URLProtocol:didLoadData:
URLProtocolDidFinishLoading:
URLProtocol:didFailWithError:
addCancelationBlock:
request
initWithURL:MIMEType:expectedContentLength:textEncodingName:
initWithResponse:data:userInfo:storagePolicy:
errorWithDomain:code:userInfo:
_didLoadContentEvent:error:
finishWithError:
dataUsingEncoding:
appendData:
attachmentManager
content
mf_messageFragment
loadingContext
messageID
domain
code
attachmentForTextAttachment:error:
fetchLocalData
markupStringForDisplayWithData:allowAttachmentElement:
htmlData
preferredCharacterSet
done
_cachedResponseWithData:error:
finishWithResult:error:
initialize
setRegistry:
URLForLoadingContext:
canInitWithRequest:
canonicalRequestForRequest:
requestIsCacheEquivalent:toRequest:
startLoading
stopLoading
token
setPromise:
_token
_loadingContext
_promise
numberOfTapsRequired
_isMatchingTapGestureRecognizer:
canBePreventedByGestureRecognizer:
canPreventGestureRecognizer:
_stopObservingContentHeight
setPreservesSuperviewLayoutMargins:
setContentPaddingFollowsLayoutMargins:
setAllowLoadOfBlockedMessageContent:
setNavigationDelegate:
_setInputDelegate:
setUIDelegate:
scrollView
_reloadUserStyleSheets
_updateMinimumFontSize
_addScriptHandlerForKey:handler:
_handleAttachmentTapMessage:
floatValue
_expandQuoteWithCollapsedBlockquoteOffset:expandedOffset:
boolValue
setCachedMetadataBool:forKey:
_foundImageCIDAttachments:
setSelectedHTML:
messageContentView:didChangeSelectedHTML:
selectedHTML
URLWithString:
webProcessDidFailLoadingResourceWithURL:
setMessageBlockingReason:
setInitialScale:
setInitiallyZoomsToShowAllContent:
setShowsBanners:
setZoomEnabled:
setActive:
_fontSizeDidChange:
_darkerSystemColorsStatusDidChange:
_addLoadingSubview:
setWebProcessDelegate:
_setupWebProcessLocalizedStrings
setNumberOfTapsRequired:
addGestureRecognizer:
_observeBlockedSenderListChangedNotification
webViewLoadingController
webViewConstants
messageContentViewDidFinishLoadingMessage:
messageContentViewDidFinishFirstPaint:
messageContentViewDidDisplayContent:
messageContentView:didFinishRenderingWithHeight:
messageContentView:expandQuoteAtCollapsedOffset:expandedOffset:
messageContentViewWillBeginZoomingMessage:
messageContentView:didEndZoomingMessageWithOffset:
messageContentView:didTapRevealActionsButton:
messageContentView:loadingIndicatorDidChangeVisibility:
messageContentView:didLoadSecurityInformation:
contentItemHandlingDelegateForMessageContentView:
mailboxes
setHasVisibleContent:
_clearAllBannersAnimated:
noAttribution
render:
_mailboxForBanner:
mailboxProvider
objectID
legacyMailboxForObjectID:
displayMessageUsingViewModel:
cachedMetadataBoolForKey:
numberWithBool:
showDelayedProgressUI
globalAsyncScheduler
afterDelay:performBlock:
setLoadingSpinnerTailspinToken:
loadingSpinnerTailspinToken
setContentRepresentationError:
messageContentView:handleContentRepresentation:
contentRequestDidReceiveContentRepresentation:error:
clearMessage
setLoadingIndicatorVisible:
isInboxMailbox
ef_firstObjectPassingTest:
canArchive
removeFromSuperview
systemBackgroundColor
setAutoresizingMask:
contentRequest
ef_all:
setName:
configuration
userContentController
name
addScriptMessageHandler:name:
dictionaryWithObjects:forKeys:
showMessageFooter
_layoutFooterView
loadingView
_layoutLoadingView
setScrollEnabled:
mf_activateDebugModeIfEnabled
footerView
setSize:
contentInset
contentPaddingFollowsLayoutMargins
_setNeedsPaddingConstantsUpdate
performWithoutAnimation:
firstResponder
isDescendantOfView:
selectAll:
_firstResponderIsInWebView
canPerformAction:withSender:
headerView
reload
automaticallyCollapseQuotedContent
setAutomaticallyCollapseQuotedContent:reloadIfNeeded:
_revealActionsButtonTapped
_seeMoreButtonTapped
numberWithInt:
setWithArray:
sharedApplication
_bodyFont
pointSize
preferences
minimumFontSize
setMinimumFontSize:
safeAreaInsets
readableContentMarginsForWidth:minMargins:safeAreaInsets:
_updateWebViewPaddingConstants
performSelectorOnMainThread:withObject:waitUntilDone:
_viewportWidth
_scaledValueForValue:
lineHeight
leading
hasGenerousMargins
_setObscuredInsets:
_overrideLayoutParametersWithMinimumLayoutSize:maximumUnobscuredSizeOverride:
setContentInset:
componentsJoinedByString:
setValuesForKeysWithDictionary:
_removeAllUserStyleSheets
_addUserStyleSheet:
_styleSheetWithPadding:useWideLayout:
previousContentSnapshot
setPreviousContentSnapshot:
removeHeaderBlock:animated:
setAttachments:
_clearLoadRemoteImagesBannerAnimated:
_clearHasMoreContentBannerAnimated:
_clearBlockedSenderBannerAnimated:
messageContentView:clearSuggestionsBannerAnimated:
insertSubview:above:
loadingIndicatorCancelable
setLoadingIndicatorCancelable:
isLoadingIndicatorVisible
setLoadingIndicatorVisible:animated:
_removeLoadingSubview:
animateWithDuration:animations:completion:
relatedContentItems
_requestWebViewLoadWithRepresentation:
hasMoreContent
remainingByteCount
_addHasMoreContentBannerWithRemainingBytes:
_addBlockedSenderBannerIfNeeded
addHeaderBlock:animated:
requestWebViewLoadWithError:
contentMessage
_configureTrustEvaluationsForSignersInSecurityInformation:
hasEncryptedDescendantPart
allowLoadOfBlockedMessageContent
_loadBlockedMessageContactWarningWithRepresentation:
trustEvaluation
requiresReevaluationWithNetworkAccess
requestWebViewLoadWithContentRepresentation:
messageBody
_loadBlockedMessageContactWarning
topLevelPart
decryptedMessageBodyIsEncrypted:isSigned:
SMIMEError
requestWebViewLoadWithContext:
contentRepresentation
requestWebViewLoadWithoutShowingMessageWithContext:
requestWebViewLoadWithoutShowingMessageWithRepresentation:
_triggerWebViewLoadWithoutShowingContentRepresentation
captureSnapshotOfView:withSnapshotType:
renderInContext:
scale
imageWithCGImage:scale:orientation:
contentSize
drawInRect:
_snapshotRect:intoImageOfWidth:completionHandler:
_doAfterNextPresentationUpdate:
cachedMetadataOfClass:forKey:
setCachedMetadata:forKey:
_updateFileWrapperForAttachment:contentID:
alertControllerWithTitle:message:preferredStyle:
actionWithTitle:style:handler:
addAction:
presentingViewControllerForMessageContentView:
presentViewController:animated:completion:
_displayDismissibleAttachmentErrorWithTitle:message:
_adjustedRectForAttachmentRect:
zoomScale
contentOffset
dataSource
messageContentView:quotedContentAttributionForMessage:
unknownAttribution
futureWithBlock:
_beginObservingContentHeight
launchedToTest
messageContentViewContentLayerFinished:
_dataDetectionResults
ef_onScheduler:
_processDataDetectionMetricsFromResults:
showsBanners
messageBlockingReason
insertHeaderBlock:atIndex:animated:
trustConfigurationScheduler
evaluateTrustsWithOptions:
webProcessBrowserContextControllerDidBecomeAvailable
defaultTimeZone
coreResult
ef_countObjectsPassingTest:
shownViaDataDetectorsLinkInApp:
isUserInitiated
contentRepresentationIfAvailable
hasPrefix:
navigationType
removeAllObjects
sharedController
_dataDetectionContextForWebView:
defaultActionForURL:results:context:
performAction:inView:interactionDelegate:
isFaceTimeMultiwayURL
initWithURL:
setWantsStagingArea:
sharedInstance
launchAppForJoinRequest:
messageContentView:clickedLinkInMessage:scheme:
containsString:
targetFrame
isMainFrame
messageContentView:openPossibleStoreURL:
initialContentOffset
setContentOffset:
_notifyDelegateScrollViewSizeChanged:
initiallyZoomsToShowAllContent
minimumZoomScale
setZoomScale:
_logRequestFinishWithSuccess:
postNotificationName:object:
clearSelectedHTML
_webProcessIdentifier
slapWebView
_loadAlternateHTMLString:baseURL:forUnreachableURL:
_killWebContentProcess
hideMenuForSelectedContentRepresentation
setAttachmentDragPreviews:
initWithData:encoding:
initWithDropOperation:
whitespaceAndNewlineCharacterSet
addCharactersInString:
string
invertedSet
rangeOfCharacterFromSet:
initForReadingFromData:error:
setWithObjects:
decodeObjectOfClasses:forKey:
itemProvider
teamData
attachmentDragPreviews
targetedDragPreviewInContainer:centerOffset:
_webView:previewItem:
subjectWithoutPrefix
publicMessageURL
uniqueIdentifier
sharedConnection
mayOpenFromManagedToUnmanaged
_contentItemForElement:
menuWithTitle:children:
configurationWithIdentifier:previewProvider:actionProvider:
canPreviewItem:
initWithEventUID:eventStore:
viewController
initWithURL:MIMEType:
initWithPreviewItems:
setIsContentManaged:
array
ef_conformsToMarkupUTType
mayShareToUnmanaged
_allAttachmentsArePhotosOrVideos
initForExportingURLs:asCopy:
_setIsContentManaged:
boundingRect
_showModalViewController:presentationSource:forceNavigationController:
identifier
elementActionTypeForUIActionIdentifier:
_activatedElementInfo
_contextMenuConfigurationForAttachment:
addCompletion:
_adjustWebViewInsetsToAccomodateHeaderAndFooter
layoutIfNeeded
setTransform:
CGSizeValue
isFatPipe
_alertMailDropDownloadIsTooLargeForCell:
_downloadAllMailDropAttachments
viewPrintFormatter
requestAdditionalContentWithCompletion:
loadBlockedContent
_reloadWithPartiallyEncryptedMessageAllowed
_reloadWithRemoteContentAllowed
_reevaluateTrustWithNetworkAccessAllowed
_triggerWebViewLoad
reevaluateTrustWithNetworkAccessAllowed
dismissViewControllerAnimated:completion:
initWithRootViewController:
setModalPresentationStyle:
popoverPresentationController
mf_setAsSourceForPopoverPresentationController:
presentedViewController
topViewController
navigationItem
rightBarButtonItem
presentedControllerDoneButtonItem
setRightBarButtonItem:
setSourceView:
setSourceRect:
dismissPresentedViewController:
initWithBarButtonSystemItem:target:action:
isZoomEnabled
subviews
_obscuredInsets
_resetHeaderOffsetForZoom
suppressScrolling
clearColor
isZooming
isZoomBouncing
_adjustHeaderOffsetForZoom
transportType
contentRepresentationError
integerValue
statisticsKind
accountStatisticsKindToIdentifier:
postNotificationName:object:userInfo:
prepareForReuse
shouldPromptForBlockedSender
defaultWorkspace
blockedSenderURL
openSensitiveURL:withOptions:
setPromptForBlockedSender:
_handleBlockSenderListChanged:
adaptivePresentationStyleForPresentationController:
adaptivePresentationStyleForPresentationController:traitCollection:
presentationController:viewControllerForAdaptivePresentationStyle:
presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:
presentationControllerShouldDismiss:
presentationControllerWillDismiss:
presentationControllerDidDismiss:
presentationControllerDidAttemptToDismiss:
prepareForPopoverPresentation:
popoverPresentationControllerShouldDismissPopover:
popoverPresentationControllerDidDismissPopover:
popoverPresentationController:willRepositionPopoverToRect:inView:
_webView:didStartInputSession:
_webView:willSubmitFormValues:userObject:submissionHandler:
_webView:focusShouldStartInputSession:
_webView:decidePolicyForFocusedElement:
_webView:accessoryViewCustomButtonTappedInFormInputSession:
_webView:insertTextSuggestion:inInputSession:
_webView:willStartInputSession:
_webView:focusRequiresStrongPasswordAssistance:
_webViewAdditionalContextForStrongPasswordAssistance:
_webView:shouldRevealFocusOverlayForInputSession:
_webView:focusedElementContextViewHeightForFittingSize:inputSession:
_webView:focusedElementContextViewForInputSession:
webView:decidePolicyForNavigationAction:decisionHandler:
webView:decidePolicyForNavigationAction:preferences:decisionHandler:
webView:decidePolicyForNavigationResponse:decisionHandler:
webView:didStartProvisionalNavigation:
webView:didReceiveServerRedirectForProvisionalNavigation:
webView:didFailProvisionalNavigation:withError:
webView:didCommitNavigation:
webView:didFinishNavigation:
webView:didFailNavigation:withError:
webView:didReceiveAuthenticationChallenge:completionHandler:
webViewWebContentProcessDidTerminate:
webView:authenticationChallenge:shouldAllowDeprecatedTLS:
_webView:navigation:didFailProvisionalLoadInSubframe:withError:
_webView:willPerformClientRedirectToURL:delay:
_webView:didPerformClientRedirectFromURL:toURL:
_webViewDidCancelClientRedirect:
_webView:navigationDidFinishDocumentLoad:
_webView:navigation:didSameDocumentNavigation:
_webView:renderingProgressDidChange:
_webViewWebProcessDidCrash:
_webViewWebProcessDidBecomeResponsive:
_webViewWebProcessDidBecomeUnresponsive:
_webCryptoMasterKeyForWebView:
_webView:authenticationChallenge:shouldAllowLegacyTLS:
_webView:didNegotiateModernTLS:
_webViewDidBeginNavigationGesture:
_webViewDidEndNavigationGesture:withNavigationToBackForwardListItem:
_webViewWillEndNavigationGesture:withNavigationToBackForwardListItem:
_webView:willSnapshotBackForwardListItem:
_webViewDidRemoveNavigationGestureSnapshot:
_webView:decidePolicyForNavigationAction:decisionHandler:
_webView:decidePolicyForNavigationAction:userInfo:decisionHandler:
_webView:decidePolicyForNavigationAction:preferences:userInfo:decisionHandler:
_webView:didStartProvisionalNavigation:userInfo:
_webView:didFailNavigation:withError:userInfo:
_webView:URL:contentRuleListIdentifiers:notifications:
_webView:contentRuleListWithIdentifier:performedAction:forURL:
_webView:webContentProcessDidTerminateWithReason:
_webView:didStartProvisionalLoadWithRequest:inFrame:
_webView:didFailProvisionalLoadWithRequest:inFrame:withError:
_webView:didCommitLoadWithRequest:inFrame:
_webView:didFailLoadWithRequest:inFrame:withError:
_webView:didFinishLoadWithRequest:inFrame:
_webView:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:
_webView:didFinishLoadForQuickLookDocumentInMainFrame:
_webViewDidRequestPasswordForQuickLookDocument:
_webView:willGoToBackForwardListItem:inPageCache:
_webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:
webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:
webViewDidClose:
webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:
webView:shouldPreviewElement:
webView:previewingViewControllerForElement:defaultActions:
webView:commitPreviewingViewController:
webView:contextMenuConfigurationForElement:completionHandler:
webView:contextMenuWillPresentForElement:
webView:contextMenuForElement:willCommitWithAnimator:
webView:contextMenuDidEndForElement:
_webView:decideDatabaseQuotaForSecurityOrigin:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:
_webView:decideDatabaseQuotaForSecurityOrigin:databaseName:displayName:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:
_webView:decideWebApplicationCacheQuotaForSecurityOrigin:currentQuota:totalBytesNeeded:decisionHandler:
_webView:printFrame:
_webView:printFrame:completionHandler:
_webViewClose:
_webViewFullscreenMayReturnToInline:
_webViewDidEnterFullscreen:
_webViewDidExitFullscreen:
_webViewRequestPointerLock:
_webViewDidRequestPointerLock:completionHandler:
_webViewDidShowSafeBrowsingWarning:
_webViewDidLosePointerLock:
_webView:hasVideoInPictureInPictureDidChange:
_webView:shouldAllowPDFAtURL:toOpenFromFrame:completionHandler:
_webView:imageOrMediaDocumentSizeChanged:
_webView:requestMediaCaptureAuthorization:decisionHandler:
_webView:includeSensitiveMediaDeviceDetails:
_webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:
_webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:
_webView:mediaCaptureStateDidChange:
_webView:dragDestinationActionMaskForDraggingInfo:
_webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:
_webView:requestGeolocationPermissionForFrame:decisionHandler:
_webView:runBeforeUnloadConfirmPanelWithMessage:initiatedByFrame:completionHandler:
_webView:editorStateDidChange:
_webView:didRemoveAttachment:
_webView:didInsertAttachment:withSource:
_webView:didInvalidateDataForAttachment:
_webView:didResignInputElementStrongPasswordAppearanceWithUserInfo:
_webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:
_webView:didChangeFontAttributes:
_webView:takeFocus:
_webView:runWebAuthenticationPanel:initiatedByFrame:completionHandler:
_webView:handleAutoplayEvent:withFlags:
_webView:willShareActivityItems:
_webView:shouldIncludeAppLinkActionsForElement:
_webView:actionsForElement:defaultActions:
_webView:didNotHandleTapAsClickAtPoint:
_webView:shouldRequestGeolocationAuthorizationForURL:isMainFrame:mainFrameURL:
_webView:requestGeolocationAuthorizationForURL:frame:decisionHandler:
_webView:fileUploadPanelContentIsManagedWithInitiatingFrame:
_webView:previewViewControllerForURL:
_webView:commitPreviewedViewController:
_webView:willPreviewImageWithURL:
_webView:commitPreviewedImageWithURL:
_webView:didDismissPreviewViewController:committing:
_webView:didDismissPreviewViewController:
_webView:contextMenuConfigurationForElement:completionHandler:
_webView:contextMenuForElement:willCommitWithAnimator:
_webView:contextMenuWillPresentForElement:
_webView:contextMenuDidEndForElement:
_webView:showCustomSheetForElement:
_webView:alternateActionForURL:
_attachmentListForWebView:
_attachmentListForWebView:sourceIsManaged:
_webView:indexIntoAttachmentListForElement:
_webView:finalObscuredInsetsForScrollView:withVelocity:targetContentOffset:
_webView:previewViewControllerForURL:defaultActions:elementInfo:
_webView:previewViewControllerForAnimatedImageAtURL:defaultActions:elementInfo:imageSize:
_presentingViewControllerForWebView:
_webView:getAlternateURLFromImage:completionHandler:
_webView:alternateURLFromImage:userInfo:
_webView:previewViewControllerForImage:alternateURL:defaultActions:elementInfo:
_webView:adjustedDataInteractionItemProviders:
_webView:adjustedDataInteractionItemProvidersForItemProvider:representingObjects:additionalData:
_webView:performDataInteractionOperationWithItemProviders:
_webView:dataInteraction:sessionWillBegin:
_webView:dataInteraction:session:didEndWithOperation:
_webView:dataInteractionOperationWasHandled:forSession:itemProviders:
_webView:willUpdateDataInteractionOperationToOperation:forSession:
_webView:willUpdateDropProposalToProposal:forSession:
_webView:previewForLiftingItem:session:
_webView:previewForCancellingItem:withDefault:
_webView:willPerformDropWithSession:
_webView:dataOwnerForDropSession:
_webView:dataOwnerForDragSession:
_webView:didChangeSafeAreaShouldAffectObscuredInsets:
_webView:didPresentFocusedElementViewController:
_webView:didDismissFocusedElementViewController:
_webView:gestureRecognizerCouldPinch:
_webView:shouldAllowDeviceOrientationAndMotionAccessRequestedByFrame:decisionHandler:
headerViewDidChangeHeight:
mf_setAsSourceWithExtendedRectForPopoverPresentationController:
scrollViewDidScroll:
scrollViewDidZoom:
scrollViewWillBeginDragging:
scrollViewWillEndDragging:withVelocity:targetContentOffset:
scrollViewDidEndDragging:willDecelerate:
scrollViewWillBeginDecelerating:
scrollViewDidEndDecelerating:
scrollViewDidEndScrollingAnimation:
viewForZoomingInScrollView:
scrollViewWillBeginZooming:withView:
scrollViewDidEndZooming:withView:atScale:
scrollViewShouldScrollToTop:
scrollViewDidScrollToTop:
scrollViewDidChangeAdjustedContentInset:
webProcessDidFinishDocumentLoadForURL:
webProcessDidFinishLoadForURL:
webProcessDidBlockLoadingResourceWithURL:
webProcessDidCreateBrowserContextControllerLoadDelegate
setContentRequest:
setAutomaticallyCollapseQuotedContent:
setShowMessageFooter:
updateForRedisplay
_requestWebViewLoadWithLoadingContext:
generateSnapshotImageWithCompletion:
_libraryMessage
_quotedContentAttributionForMessage:
_objectContainsNonEmptyString:
_attachmentPreviewsFromData:
downloadFutureForContentItem:
loadHasMoreContentBannerIfNecessary
_showModalViewController:presentationSource:
setSuppressScrolling:
setDataSource:
setLoadingContext:
setInitialContentOffset:
headerViewSubjectBlock
setHeaderViewSubjectBlock:
shouldArchiveByDefault
setShouldArchiveByDefault:
hasVisibleContent
setMailboxProvider:
daemonInterface
setDaemonInterface:
attachments
setLoadingView:
initialScale
setWebViewLoadingController:
showingError
setShowingError:
_loadingCancelable
_relatedItemsHelper
_headerView
_mailDropBanner
_loadHasMoreContentBanner
_loadImagesHeaderBlock
_blockedSenderBanner
_previousContentSnapshotWrapperView
_scriptHandlers
_presentedControllerDoneButtonItem
_activatedAttachmentRect
_contentSizeObservation
_suppressContentSizeNotifications
_suppressContentSizeNotificationsUntilFirstPaint
_originalZoomInsets
_paddingConstantsNeedUpdate
_footerView
_inFlightURLs
_webProcessCrashCount
_flags
_automaticallyCollapseQuotedContent
_showMessageFooter
_shouldArchiveByDefault
_initiallyZoomsToShowAllContent
_suppressScrolling
_contentPaddingFollowsLayoutMargins
_hasVisibleContent
_showsBanners
_zoomEnabled
_allowLoadOfBlockedMessageContent
_showingError
_dataSource
_contentRequest
_selectedHTML
_headerViewSubjectBlock
_messageBlockingReason
_previousContentSnapshot
_mailboxProvider
_daemonInterface
_attachments
_loadingIndicatorCancelable
_loadingView
_initialScale
_webViewLoadingController
_attachmentDragPreviews
_contentRepresentationError
_loadingSpinnerTailspinToken
_trustConfigurationScheduler
_initialContentOffset
body
userContentController:didReceiveScriptMessage:
_name
snapshotViewYOrigin
initWithFrame:snapshotView:
snapshotView
setSnapshotView:
setSnapshotViewYOrigin:
_snapshotView
_snapshotViewYOrigin
stringByAppendingString:
initWithSource:forMainFrameOnly:
pathForResource:ofType:
stringWithContentsOfFile:encoding:error:
setTraitCollection:
setSafeAreaInsets:
setFooterViewDisplayMetrics:
displayMetricsWithTraitCollection:layoutMargins:safeAreaInsets:interfaceOrientation:
setTrailingButtonView:
_scaledFloatWithValue:fontStyle:
_scaledFloatWithValue:fontStyle:maximumContentSizeCategory:
messageTopPaddingInConversation
avatarDiameter
topToSenderBaselineInConversation
baselineToBaselineSpacingInConversation
messageTopPaddingInConversationForMailActionHeader
topToSenderBaselineInConversationForMailActionHeader
baselineToBaselineSpacingInConversationForMailActionHeader
cachedScaledFloatWithValue:fontStyle:
cachedScaledFloatWithValue:fontStyle:maximumContentSizeCategory:
footerViewDisplayMetrics
_calculateFooterViewButtonsAnimationOffset
trailingButtonView
conversationHeaderViewShouldHideCollapsedSuperTitle
displayMetricsWithTraitCollection:layoutMargins:safeAreaInsets:interfaceOrientation:trailingButtonView:
fontCacheKeyPrefix
prefersFlushSeparator
minHorizontalSpacing
recipientBaselineToFirstSeparatorInConversation
statusIndicatorHorizontalSpacing
messageBottomPaddingInConversation
messageBottomPaddingInConversationForMailActionHeader
_cachedFontForStyle:
cellHeightToStartScroll
topToGlyphBaselineInMailActionCardHorizontalGroup
baselineToBaselineSpacingInMailActionCardHorizontalGroup
bottomSpacingInMailActionCardHorizontalGroup
topToFirstBaselineSpacingInMailActionCardVerticalGroup
bottomToLastBaselineInMailActionCardVerticalGroup
mailActionCardPreferredHeightForPad
mailActionCardMaximumContainerViewHeightForLargerMediumDetent
mailActionCardSmallerMediumDetentCoverage
mailActionCardLargerMediumDetentCoverage
conversationHeaderViewCollapsedSuperTitleTopToFirstBaseline
conversationHeaderViewCollapsedTitleTopToFirstBaseline
conversationHeaderViewCollapsedTitleBottomToLastBaseline
conversationHeaderViewExpandedTitleTopToFirstBaseline
topToSenderBaseline
baselineToBaselineSpacing
recipientBaselineToFirstSeparator
firstSeparatorToSubjectBaseline
headerBottomPadding
statusIndicatorVerticalSpacing
footerViewButtonsAnimationOffset
setFooterViewButtonsAnimationOffset:
_traitCollection
_topToSenderBaseline
_baselineToBaselineSpacing
_recipientBaselineToFirstSeparator
_firstSeparatorToSubjectBaseline
_headerBottomPadding
_statusIndicatorVerticalSpacing
_footerViewButtonsAnimationOffset
_footerViewDisplayMetrics
_trailingButtonView
_layoutMargins
_safeAreaInsets
preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:
fontWithDescriptor:size:
setDistribution:
setAxis:
_updateSeparators
setDraggableArea:
headerBlocks
separatorIsHidden
separator
convertRect:fromView:
pinnedBlock
insertObject:atIndex:
viewModel
insertSubview:atIndex:
_animationConstraintsForBlockAtIndex:
deactivateConstraints:
insertArrangedSubview:atIndex:
_layoutAnimatedWithCompletion:
setPinnedBlock:
removeArrangedSubview:
indexOfObject:
setHeaderBlocks:animated:
mf_diffWithArray:
removedIndexes
enumerateIndexesWithOptions:usingBlock:
addedIndexes
enumerateIndexesUsingBlock:
backgroundColor
mf_isTranslucent
heightAnchor
constraintEqualToConstant:
animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:
setViewModel:
bottomSeparatorDrawsFlushWithLeadingEdge
lastObject
_blockHasWhiteOrClearBackground:
setSeparatorDrawsFlushWithTrailingEdge:
enumerateObjectsUsingBlock:
whiteColor
drawRect:forViewPrintFormatter:
draggableArea
removeAllHeaderBlocksAnimated:
setHeaderBlocks:
setMessageFlags:conversationFlags:
setBottomSeparatorDrawsFlushWithLeadingEdge:
_headerBlocks
_bottomSeparatorDrawsFlushWithLeadingEdge
_pinnedBlock
_viewModel
_draggableArea
createPrimaryViews
initializePrimaryLayoutConstraints
setSeparatorDrawsFlushWithLeadingEdge:
setSeparator:
setTrailingAccessoryViewLayoutGuide:
addLayoutGuide:
widthAnchor
setTrailingAccessoryViewLayoutGuideWidth:
setTrailingAccessoryViewLayoutGuideTrailing:
trailingAccessoryViewLayoutGuideWidth
trailingAccessoryViewLayoutGuideTrailing
directionalLayoutMargins
setUsingLargeTextLayout:
separatorLeading
setSeparatorLeading:
separatorTrailing
setSeparatorTrailing:
observableCancelable
subscribeWithResultBlock:
setObservableCancelable:
separatorDrawsFlushWithLeadingEdge
separatorDrawsFlushWithTrailingEdge
usingLargeTextLayout
interactivelyResizing
setInteractivelyResizing:
_separatorIsHidden
_separatorDrawsFlushWithLeadingEdge
_separatorDrawsFlushWithTrailingEdge
_usingLargeTextLayout
_interactivelyResizing
_separator
_trailingAccessoryViewLayoutGuide
_trailingAccessoryViewLayoutGuideWidth
_trailingAccessoryViewLayoutGuideTrailing
_separatorLeading
_separatorTrailing
_observableCancelable
initWithType:senderName:
attributionWithSenderName:
_readableWidth
commonInitWithBanner:
mf_debugModeEnabled
purpleColor
colorWithAlphaComponent:
setCloseButtonCenterXAnchor:
bannerConstraints
_constraintsForEdges:banner:useLayoutMarginsGuide:
setBannerConstraints:
initWithFrame:banner:
willMoveToSuperview:
setBanner:
_banner
_bannerConstraints
initWithBytes:length:encoding:
appendString:
initWithSource:injectionTime:forMainFrameOnly:
initWithObjects:
userScripts
initWithCapacity:
descriptionWithLocale:indent:
stringByTrimmingCharactersInSet:
registerDictionary:name:
setDictionary:forWebViewDictionaryWithName:
setValuesForKeysWithDictionary:forWebViewDictionaryWithName:
remoteObjectInterfaceWithProtocol:
_remoteObjectRegistry
remoteObjectProxyWithInterface:
dictionaryWithValuesForKeys:
isEqualToDictionary:
keyEnumerator
allKeys
allKeysForObject:
allValues
objectEnumerator
objectsForKeys:notFoundMarker:
getObjects:andKeys:count:
enumerateKeysAndObjectsWithOptions:usingBlock:
removeObjectForKey:
synchronize
_setRequiresSynchronization
removeObjectsForKeys:
setDictionary:
_updateRemoteInstance
registerWithWebView:javascriptName:
javascriptName
_webProcessProxy
_changedKeys
_requiresResynchronization
_javascriptName
sharedWebViewFactory
mf_attributionExpression
pattern
_reconveneWebProcessBundle
_unregisterWebProcessDelegate:
weakProxyForObject:
remoteObjectInterface
unregisterExportedObject:interface:
registerExportedObject:interface:
_registerWebProcessDelegate:
_killWebContentProcessAndResetState
loadingURL
_doIssueLoadRequest
error
loadFileURL:allowingReadAccessToURL:
requestWithURL:cachePolicy:timeoutInterval:
loadRequest:
subjectString
stringByReplacingOccurrencesOfString:withString:
queryItemWithName:value:
setQueryItems:
_setRemoteInspectionNameOverride:
setLoadingURL:
loadHTMLString:baseURL:
setError:
setContentRepresentation:
registerContentRepresentation:
webProcessDelegate
setRemoteObjectInterface:
webProcessPluginNeedsUpdate
setWebProcessPluginNeedsUpdate:
_webProcessPluginNeedsUpdate
_webViewConstants
_webProcessDelegate
_remoteObjectInterface
_contentRepresentation
_loadingURL
_error
_didReceiveMemoryWarning:
setPreallocatedWebViews:
URLForResource:withExtension:subdirectory:
setInjectedBundleURL:
setShouldTakeUIBackgroundAssertion:
_initWithConfiguration:
_setAllowsMetaRefresh:
_setAllowsJavaScriptMarkup:
_setAttachmentElementEnabled:
_setWaitsForPaintAfterViewDidMoveToWindow:
_setColorFilterEnabled:
setDataDetectorTypes:
setSelectionGranularity:
_setTextAutosizingEnabled:
_setPunchOutWhiteBackgroundsInDarkMode:
processPool
setProcessPool:
_setAdditionalSupportedImageTypes:
sharedHandler
setURLSchemeHandler:forURLScheme:
initWithFrame:configuration:
setAllowsLinkPreview:
setScrollsToTop:
setBouncesVertically:
setContentInsetAdjustmentBehavior:
_setIndicatorInsetAdjustmentBehavior:
addUserScript:
_observedRenderingProgressEvents
_setObservedRenderingProgressEvents:
boundedQueueWithCapacity:
preallocatedWebViews
_instantiateWebView
enqueue:
dequeue
preallocateWebViews
preallocateWebViewIfNeeded
_preallocatedWebViews
_processPool
ef_match
mf_isSMIMEError
localizedDescription
mailHeaderSeparatorLayerColor
setContentCompressionResistancePriority:forAxis:
setContentHuggingPriority:forAxis:
separatorHeight
sizeThatFits:
intrinsicContentSize
axis
_axis
systemOrangeColor
systemRedColor
colorNamed:
systemYellowColor
systemGreenColor
systemTealColor
systemIndigoColor
systemGrayColor
systemPurpleColor
systemGroupedBackgroundColor
traitCollectionWithUserInterfaceStyle:
traitCollectionWithTraitsFromCollections:
resolvedColorWithTraitCollection:
colorWithDynamicProvider:
tableCellDefaultSelectionTintColor
opaqueSeparatorColor
separatorColor
secondarySystemGroupedBackgroundColor
mailSystemLightGrayColor
systemBlackColor
blackColor
colorWithWhite:alpha:
mailSecondaryLabelDarkColor
systemGray5Color
mf_useSplitViewStyling
secondarySystemBackgroundColor
getRed:green:blue:alpha:
systemBlueColor
getWhite:alpha:
colorWithRed:green:blue:alpha:
mailFlaggedColorRed
mailFlaggedColorOrange
mailFlaggedColorYellow
mailFlaggedColorGreen
mailFlaggedColorTeal
mailFlaggedColorIndigo
mailFlaggedColorGray
mailFlaggedColor
mailFlaggedColorIncreasedContrastRed
mailDestructiveActionColor
mailArchiveActionColor
mailTransparentLightGrayColor
mailLightGrayColor
mailDarkGrayColor
mailMoreButtonGrayColor
mailAppBackgroundColor
mailSystemUltraLightGrayColor
mailSelectedCellColor
mailSelectedCellSystemLightGrayColor
mailSelectedCellSystemUltraLightGrayColor
mailChevronBoxColor
mailExpandedChevronBoxColor
mailHighlightedChevronBoxColor
mailSortOfNavBarBackgroundColor
mailVibrantDarkColor
mailVibrantLightColor
mailAccountCellTitleColor
mailGrabberColor
mailPreviousDraftPickerHeaderTextColor
mailSplitViewBorderColor
mailConversationViewBackgroundColor
mailConversationViewCollapsedCellBackgroundColor
mailConversationViewCollapsedCellHighlightedBackgroundColor
mailConversationViewCollapsedCellLabelColor
mailTransferConversationViewBackgroundColor
mailConversationViewNoSelectedMessageViewBackgroundColor
mailDockViewLightBackgroundColor
mailDockViewDarkBackgroundColor
mailDockedPlaceholderViewBackgroundColor
mailDockViewShadowGradientColors
mailDockViewShadowGradientColorLocations
mailTiltedTabCloseButtonTintColor
mailExpandedConversationViewCellDateLabelColor
mailTransferStackViewBackgroundColor
mailSplitViewBackgroundColor
mailMessageListPrimarySelectionColor
mailMessageListSecondarySelectionColor
mailMessageListTertiarySelectionColor
mailMessageListSelectedSummaryColor
mailMessageListSelectedAnnotationColor
mailMessageListSelectedStatusIndicatorColor
mailMessageListSelectedRecipientColor
mailCellSelectionStateColorForInterfaceLevel:
mailMailboxPickerBackgroundColorForTraitCollection:
mailTodayFilterColor
mailAttachmentsFilterColor
mailVIPFilterColor
mf_colorFromColor:toColor:progress:
mf_colorFromFlagColor:
mf_enableDebugModeInView
_setDrawsDebugBaselines:
setBorderColor:
setBorderWidth:
defaultInstanceLock
initWithBackingManager:
_vipsDidChange:
backingManager
hasVIPs
allVIPs
allVIPEmailAddresses
vipWithIdentifier:
isVIPAddress:
saveVIPs:
removeVIPsWithIdentifiers:
removeVIPsWithEmailAddresses:
localizedCaseInsensitiveCompare:
sortUsingComparator:
emailAddresses
intersectSet:
mf_uncommentedAddress
mf_copyIDNADecodedEmailAddress
initWithType:qualifier:expression:
orCompoundCriterionWithCriteria:
sortedVIPs
criterionForEmailAddresses:
setBackingManager:
saveVIP:
deleteVIPWithIdentifier:
existingPersonForVIP:usingAddressBook:
vipCriteria
allVIPEmailAddressesCriterion
_abPersonByVIPIdentifierLock
_abPersonByVIPIdentifier
_queue
_backingManager
dataWithJSONObject:options:error:
mcv_executeJavaScriptExpression:
evaluateJavaScript:completionHandler:
@16@0:8
@24@0:8@16
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSObject<OS_os_log>"16@0:8
@64@0:8{UIEdgeInsets=dddd}16q48@56
d16@0:8
v24@0:8d16
v20@0:8B16
@32@0:8@16@24
@40@0:8@16@24@32
@32@0:8@16q24
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"<ContentRepresentationHandlingDelegate>"
@40@0:8@16q24@32
@"NSURL"
@"UIPrintPageRenderer"
@40@0:8@16@24q32
@"<EMContentItem>"
@"NSString"
@"NSProgress"
@"EFPromise"
@"EFLocked"
v32@0:8@16@24
v64@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24@56
@28@0:8@16B24
@56@0:8@16q24@32^B40^@48
q24@0:8@16
v32@0:8q16@24
v32@0:8d16@24
v24@0:8Q16
@?16@0:8
v24@0:8@?16
@"NSMutableDictionary"
@"NSMutableSet"
@"<EFScheduler>"
@"EMMailDropMetadata"
@"WKWebView"
@"NSArray"
@36@0:8@16B24@28
@36@0:8@16@24B32
@44@0:8@16@24B32@36
v28@0:8B16@20
@32@0:8@16@?24
@24@0:8@?16
@"<EMContentItemRequestDelegate>"
@"EFCancelationToken"
@"EFObservable<EFObserver>"
@"EFObservable"
@"EFFuture"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<EMCollectionItemID>"
v40@0:8@16@24@?32
v32@0:8@16@?24
v40@0:8@"EMObjectID"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"EMObjectID"16@?<v@?@"NSString"@"NSError">24
@"NSIndexSet"16@0:8
v24@0:8@"NSIndexSet"16
@"NSDate"16@0:8
v24@0:8@"NSDate"16
@"ECSubject"16@0:8
v24@0:8@"ECSubject"16
@"MFMailboxUid"16@0:8
v24@0:8@"MFMailboxUid"16
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"MFAddressAtomStatusManager"16@0:8
v24@0:8@"MFAddressAtomStatusManager"16
@24@0:8^{_NSZone=}16
@"NSDate"
@"ECSubject"
@"MFMailboxUid"
@"MFAddressAtomStatusManager"
@"NSIndexSet"
v32@0:8@16^v24
v32@0:8@"MFAddressBookManager"16^v24
v24@0:8@"MFAddressBookManager"16
i24@0:8@16
@"<MFAddressAtomProvider>"
@"MFMessageLoadingContext"
@"EMAccount"
@"MailAccount"
@"EMSecurityInformation"
@"NSError"
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@"<MFBlockedSenderBannerViewDelegate>"
@56@0:8@16@24@32@40@?48
@60@0:8@16@24@32@40B48@?52
@"UIColor"
@"NSNumber"
@48@0:8@16{CGPoint=dd}24@40
v40@0:8@16@24@32
@"_UICursorRegion"48@0:8@"_UICursorInteraction"16{CGPoint=dd}24@"_UICursorRegion"40
@"_UICursorRegion"40@0:8@"_UICursorInteraction"16@"_UICursorRequest"24@"_UICursorRegion"32
@"_UICursorStyle"40@0:8@"_UICursorInteraction"16@"_UICursorRegion"24q32
@"_UICursorStyle"32@0:8@"_UICursorInteraction"16@"_UICursorRegion"24
v40@0:8@"_UICursorInteraction"16@"_UICursorRegion"24@"<_UICursorInteractionAnimating>"32
v32@0:8@"_UICursorInteraction"16@"_UICursorRegion"24
v48@0:8{UIEdgeInsets=dddd}16
v40@0:8@16:24q32
B40@0:8{CGPoint=dd}16@32
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@"UIVisualEffectView"
@"UIButton"
@"<MFMessageFooterViewDelegate>"
@"MFMessageDisplayMetrics"
@"EMCachingContactStore"
v32@0:8{CGPoint=dd}16
{CGPoint=dd}16@0:8
@60@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16B48Q52
@20@0:8B16
@"<MFHasMoreContentBannerViewDelegate>"
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16Q48
@64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16Q48q56
@"<MFLoadBlockedContentBannerViewDelegate>"
@"UILabel"
@"MFProgressView"
@"NSLayoutConstraint"
@"<MFMailDropBannerDelegate>"
@"NSLock"
@"NSMapTable"
B32@0:8@16@24
@32@0:8@16^@24
q32@0:8@16@24
v40@0:8@16q24@32
q24@0:8@"UIPresentationController"16
q32@0:8@"UIPresentationController"16@"UITraitCollection"24
@"UIViewController"32@0:8@"UIPresentationController"16q24
v40@0:8@"UIPresentationController"16q24@"<UIViewControllerTransitionCoordinator>"32
B24@0:8@"UIPresentationController"16
v24@0:8@"UIPresentationController"16
v40@0:8@16N^{CGRect={CGPoint=dd}{CGSize=dd}}24N^@32
v24@0:8@"UIPopoverPresentationController"16
B24@0:8@"UIPopoverPresentationController"16
v40@0:8@"UIPopoverPresentationController"16N^{CGRect={CGPoint=dd}{CGSize=dd}}24N^@32
v48@0:8@16@24@32@?40
d48@0:8@16{CGSize=dd}24@40
v32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
v48@0:8@"WKWebView"16@"NSDictionary"24@"NSObject<NSSecureCoding>"32@?<v@?>40
B32@0:8@"WKWebView"16@"<_WKFocusedElementInfo>"24
q32@0:8@"WKWebView"16@"<_WKFocusedElementInfo>"24
v40@0:8@"WKWebView"16@"UITextSuggestion"24@"<_WKFormInputSession>"32
@"NSDictionary"24@0:8@"WKWebView"16
B32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
d48@0:8@"WKWebView"16{CGSize=dd}24@"<_WKFormInputSession>"40
@"UIView"32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
v40@0:8@"WKWebView"16@"WKNavigationAction"24@?<v@?q>32
v48@0:8@"WKWebView"16@"WKNavigationAction"24@"WKWebpagePreferences"32@?<v@?q@"WKWebpagePreferences">40
v40@0:8@"WKWebView"16@"WKNavigationResponse"24@?<v@?q>32
v32@0:8@"WKWebView"16@"WKNavigation"24
v40@0:8@"WKWebView"16@"WKNavigation"24@"NSError"32
v40@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"WKWebView"16
v40@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24@?<v@?B>32
v48@0:8@16@24@32@40
v40@0:8@16@24d32
v40@0:8@16@24q32
v32@0:8@16Q24
v56@0:8@16@24@32@40@?48
v32@0:8@16q24
v36@0:8@16@24B32
v48@0:8@16q24@32@?40
v48@0:8@"WKWebView"16@"WKNavigation"24@"WKFrameInfo"32@"NSError"40
v40@0:8@"WKWebView"16@"NSURL"24d32
v40@0:8@"WKWebView"16@"NSURL"24@"NSURL"32
v40@0:8@"WKWebView"16@"WKNavigation"24q32
v32@0:8@"WKWebView"16Q24
@"NSData"24@0:8@"WKWebView"16
v32@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24
v32@0:8@"WKWebView"16@"WKBackForwardListItem"24
v40@0:8@"WKWebView"16@"WKNavigationAction"24@?<v@?q@"_WKWebsitePolicies">32
v48@0:8@"WKWebView"16@"WKNavigationAction"24@"<NSSecureCoding>"32@?<v@?q@"_WKWebsitePolicies">40
v56@0:8@"WKWebView"16@"WKNavigationAction"24@"WKWebpagePreferences"32@"<NSSecureCoding>"40@?<v@?q@"WKWebpagePreferences">48
v40@0:8@"WKWebView"16@"WKNavigation"24@"<NSSecureCoding>"32
v48@0:8@"WKWebView"16@"WKNavigation"24@"NSError"32@"<NSSecureCoding>"40
v48@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"NSArray"40
v48@0:8@"WKWebView"16@"NSString"24@"_WKContentRuleListAction"32@"NSURL"40
v32@0:8@"WKWebView"16q24
v40@0:8@"WKWebView"16@"NSURLRequest"24@"WKFrameInfo"32
v48@0:8@"WKWebView"16@"NSURLRequest"24@"WKFrameInfo"32@"NSError"40
v40@0:8@"WKWebView"16@"NSString"24@"NSString"32
v32@0:8@"WKWebView"16@"NSData"24
v36@0:8@"WKWebView"16@"WKBackForwardListItem"24B32
v48@0:8@"WKWebView"16q24@"NSString"32@?<v@?q>40
@48@0:8@16@24@32@40
@"WKWebView"48@0:8@"WKWebView"16@"WKWebViewConfiguration"24@"WKNavigationAction"32@"WKWindowFeatures"40
v48@0:8@"WKWebView"16@"NSString"24@"WKFrameInfo"32@?<v@?>40
v48@0:8@"WKWebView"16@"NSString"24@"WKFrameInfo"32@?<v@?B>40
v56@0:8@"WKWebView"16@"NSString"24@"NSString"32@"WKFrameInfo"40@?<v@?@"NSString">48
B32@0:8@"WKWebView"16@"WKPreviewElementInfo"24
@"UIViewController"40@0:8@"WKWebView"16@"WKPreviewElementInfo"24@"NSArray"32
v32@0:8@"WKWebView"16@"UIViewController"24
v40@0:8@"WKWebView"16@"WKContextMenuElementInfo"24@?<v@?@"UIContextMenuConfiguration">32
v32@0:8@"WKWebView"16@"WKContextMenuElementInfo"24
v40@0:8@"WKWebView"16@"WKContextMenuElementInfo"24@"<UIContextMenuInteractionCommitAnimating>"32
v72@0:8@16@24Q32Q40Q48Q56@?64
v88@0:8@16@24@32@40Q48Q56Q64Q72@?80
v56@0:8@16@24Q32Q40@?48
v28@0:8@16B24
v40@0:8@16{CGSize=dd}24
v40@0:8@16Q24@?32
v56@0:8@16Q24@32@40@?48
v56@0:8@16@24@32Q40@?48
Q32@0:8@16@24
v40@0:8@16q24Q32
v40@0:8@16{CGPoint=dd}24
B44@0:8@16@24B32@36
@32@0:8@16^B24
{UIEdgeInsets=dddd}56@0:8@16@24{CGPoint=dd}32N^{CGPoint=dd}48
@64@0:8@16@24@32@40{CGSize=dd}48
@40@0:8@16@24^@32
@56@0:8@16@24@32@40@48
v48@0:8@16@24@32Q40
v44@0:8@16B24@28@36
Q40@0:8@16Q24@32
v72@0:8@"WKWebView"16@"WKSecurityOrigin"24Q32Q40Q48Q56@?<v@?Q>64
v88@0:8@"WKWebView"16@"WKSecurityOrigin"24@"NSString"32@"NSString"40Q48Q56Q64Q72@?<v@?Q>80
v56@0:8@"WKWebView"16@"WKSecurityOrigin"24Q32Q40@?<v@?Q>48
v32@0:8@"WKWebView"16@"_WKFrameHandle"24
v40@0:8@"WKWebView"16@"_WKFrameHandle"24@?<v@?>32
v32@0:8@"WKWebView"16@?<v@?B>24
v28@0:8@"WKWebView"16B24
v48@0:8@"WKWebView"16@"NSURL"24@"WKFrameInfo"32@?<v@?B>40
v40@0:8@"WKWebView"16{CGSize=dd}24
v40@0:8@"WKWebView"16Q24@?<v@?B>32
v56@0:8@"WKWebView"16Q24@"NSURL"32@"NSURL"40@?<v@?B>48
v56@0:8@"WKWebView"16@"NSURL"24@"NSURL"32Q40@?<v@?@"NSString"B>48
Q32@0:8@"WKWebView"16@24
v56@0:8@"WKWebView"16@"WKWebViewConfiguration"24@"WKNavigationAction"32@"WKWindowFeatures"40@?<v@?@"WKWebView">48
v40@0:8@"WKWebView"16@"WKFrameInfo"24@?<v@?B>32
v32@0:8@"WKWebView"16@"NSDictionary"24
v32@0:8@"WKWebView"16@"_WKAttachment"24
v40@0:8@"WKWebView"16@"_WKAttachment"24@"NSString"32
v32@0:8@"WKWebView"16@"<NSSecureCoding>"24
v48@0:8@"WKWebView"16@"NSString"24@"NSString"32@?<v@?B>40
v48@0:8@"WKWebView"16@"_WKWebAuthenticationPanel"24@"WKFrameInfo"32@?<v@?q>40
v40@0:8@"WKWebView"16q24Q32
v32@0:8@"WKWebView"16@"NSArray"24
B32@0:8@"WKWebView"16@"_WKActivatedElementInfo"24
@"NSArray"40@0:8@"WKWebView"16@"_WKActivatedElementInfo"24@"NSArray"32
v40@0:8@"WKWebView"16{CGPoint=dd}24
B44@0:8@"WKWebView"16@"NSURL"24B32@"NSURL"36
B32@0:8@"WKWebView"16@"WKFrameInfo"24
@"UIViewController"32@0:8@"WKWebView"16@"NSURL"24
v32@0:8@"WKWebView"16@"NSURL"24
v36@0:8@"WKWebView"16@"UIViewController"24B32
@"NSArray"24@0:8@"WKWebView"16
@"NSArray"32@0:8@"WKWebView"16^B24
Q32@0:8@"WKWebView"16@"_WKActivatedElementInfo"24
{UIEdgeInsets=dddd}56@0:8@"WKWebView"16@"UIScrollView"24{CGPoint=dd}32N^{CGPoint=dd}48
@"UIViewController"48@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"_WKActivatedElementInfo"40
@"UIViewController"64@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"_WKActivatedElementInfo"40{CGSize=dd}48
@"UIViewController"24@0:8@"WKWebView"16
v40@0:8@"WKWebView"16@"UIImage"24@?<v@?@"NSURL"@"NSDictionary">32
@"NSURL"40@0:8@"WKWebView"16@"UIImage"24^@32
@"UIViewController"56@0:8@"WKWebView"16@"UIImage"24@"NSURL"32@"NSArray"40@"_WKActivatedElementInfo"48
@"NSArray"32@0:8@"WKWebView"16@"NSArray"24
@"NSArray"48@0:8@"WKWebView"16@24@"NSArray"32@"NSDictionary"40
B32@0:8@"WKWebView"16@"NSArray"24
v40@0:8@"WKWebView"16@24@32
v48@0:8@"WKWebView"16@24@32Q40
v44@0:8@"WKWebView"16B24@28@"NSArray"36
Q40@0:8@"WKWebView"16Q24@32
@"UIDropProposal"40@0:8@"WKWebView"16@"UIDropProposal"24@"<UIDropSession>"32
@"UITargetedDragPreview"40@0:8@"WKWebView"16@"UIDragItem"24@"<UIDragSession>"32
@"UITargetedDragPreview"40@0:8@"WKWebView"16@"UIDragItem"24@"UITargetedDragPreview"32
@"NSArray"32@0:8@"WKWebView"16@"<UIDropSession>"24
q32@0:8@"WKWebView"16@"<UIDropSession>"24
q32@0:8@"WKWebView"16@"<UIDragSession>"24
B32@0:8@"WKWebView"16@"UIGestureRecognizer"24
v24@0:8@"MFHasMoreContentBannerView"16
v24@0:8@"MFLoadBlockedContentBannerView"16
v24@0:8@"MFBlockedSenderBannerView"16
v24@0:8@"MFMessageHeaderView"16
v24@0:8@"MFConversationItemFooterView"16
v24@0:8@"MFMailDropBannerView"16
v48@0:8@16{CGPoint=dd}24N^{CGPoint=dd}40
v24@0:8@"UIScrollView"16
v48@0:8@"UIScrollView"16{CGPoint=dd}24N^{CGPoint=dd}40
v28@0:8@"UIScrollView"16B24
@"UIView"24@0:8@"UIScrollView"16
v32@0:8@"UIScrollView"16@"UIView"24
v40@0:8@"UIScrollView"16@"UIView"24d32
B24@0:8@"UIScrollView"16
v24@0:8@"NSURL"16
B32@0:8:16@24
v24@0:8B16B20
@52@0:8{UIEdgeInsets=dddd}16B48
@32@0:8#16@24
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v32@0:8d16d24
v32@0:8{CGSize=dd}16
@"MessageContentItemsHelper"
@"MFMessageHeaderView"
@"MFMailDropBannerView"
@"MFHasMoreContentBannerView"
@"MFLoadBlockedContentBannerView"
@"MFBlockedSenderBannerView"
@"UIView"
@"NSMutableArray"
@"UIBarButtonItem"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"<EFCancelable>"
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
@"MFConversationItemFooterView"
{?="delegateRespondsToDidFinishLoadingMessages"b1"delegateRespondsToDidFinishFirstPaint"b1"delegateRespondsToDidDisplayContent"b1"delegateRespondsToDidFinishRenderingWithHeight"b1"delegateRespondsToExpandQuoteAtScrollOffset"b1"delegateRespondsToWillBeginZoomingMessage"b1"delegateRespondsToDidEndZoomingMessage"b1"delegateRespondsToDidTapRevealActionsButton"b1"delegateRespondsToLoadingIndicatorDidChangeVisibility"b1"delegateRespondsToDidLoadSecurityInformation"b1}
@"<MFMessageContentViewDelegate>"
@"<MFMessageContentViewDataSource>"
@"MessageContentRepresentationRequest"
@"MFMailboxProvider"
@"EMDaemonInterface"
@"MFMessageContentLoadingView"
@"MFWebViewLoadingController"
@"NSDictionary"
{CGPoint="x"d"y"d}
v32@0:8@"WKUserContentController"16@"WKScriptMessage"24
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@96@0:8@16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56q88
@104@0:8@16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56q88@96
d32@0:8d16@24
d40@0:8d16@24@32
{UIEdgeInsets=dddd}16@0:8
@"UITraitCollection"
@"ConversationFooterViewDisplayMetrics"
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v36@0:8@16Q24B32
@24@0:8Q16
v32@0:8Q16Q24
@"<MFMessageHeaderViewDelegate>"
@"MFMessageHeaderViewBlock"
@"MessageHeaderViewModel"
@"SeparatorLayer"
@"UILayoutGuide"
@32@0:8q16@24
{UIEdgeInsets=dddd}88@0:8d16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56
@36@0:8Q16@24B32
@"SGBanner"
v32@0:8@"NSDictionary"16@"NSString"24
@32@0:8@16Q24
v40@0:8^@16^@24Q32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
v32@0:8Q16@?24
@"<MFMailWebProcessProxy>"
@"MFWebViewDictionary"
@"<MFMailWebProcessDelegate>"
@"_WKRemoteObjectInterface"
@"EMContentRepresentation"
@"EFQueue"
@"WKProcessPool"
{CGSize=dd}32@0:8{CGSize=dd}16
{CGSize=dd}16@0:8
@24@0:8q16
@36@0:8@16@24f32
^{os_unfair_lock_s=I}16@0:8
B24@0:8@"NSString"16
@"EMVIP"24@0:8@"NSString"16
v24@0:8@"NSSet"16
v24@0:8@"EAEmailAddressSet"16
@"NSSet"16@0:8
@"EAEmailAddressSet"16@0:8
r^v32@0:8@16^v24
^{__CFDictionary=}
@"NSObject<OS_dispatch_queue>"
@"<EMVIPManager>"
