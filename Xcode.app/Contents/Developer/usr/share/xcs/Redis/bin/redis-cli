fcntl(F_GETFL): %s
fcntl(F_SETFL,O_NONBLOCK): %s
setsockopt SO_KEEPALIVE: %s
setsockopt SO_SNDBUF: %s
connect: %s
setsockopt TCP_NODELAY: %s
creating socket: %s
setsockopt SO_REUSEADDR: %s
unable to bind socket
setsockopt: %s
bind: %s
listen: %s
accept: %s
sdsIncrLen
sds.c
sh->free >= incr
sh->free >= 0
\x%02x
APPEND
key value
Append a value to a key
2.0.0
AUTH
password
Authenticate to the server
1.0.0
BGREWRITEAOF
Asynchronously rewrite the append-only file
BGSAVE
Asynchronously save the dataset to disk
BITCOUNT
key [start] [end]
Count set bits in a string
2.6.0
BITOP
operation destkey key [key ...]
Perform bitwise operations between strings
BITPOS
key bit [start] [end]
Find first bit set or clear in a string
2.8.7
BLPOP
key [key ...] timeout
Remove and get the first element in a list, or block until one is available
BRPOP
Remove and get the last element in a list, or block until one is available
BRPOPLPUSH
source destination timeout
Pop a value from a list, push it to another list and return it; or block until one is available
2.2.0
CLIENT GETNAME
Get the current connection name
2.6.9
CLIENT KILL
ip:port
Kill the connection of a client
2.4.0
CLIENT LIST
Get the list of client connections
CLIENT PAUSE
timeout
Stop processing commands from clients for some time
2.9.50
CLIENT SETNAME
connection-name
Set the current connection name
CONFIG GET
parameter
Get the value of a configuration parameter
CONFIG RESETSTAT
Reset the stats returned by INFO
CONFIG REWRITE
Rewrite the configuration file with the in memory configuration
2.8.0
CONFIG SET
parameter value
Set a configuration parameter to the given value
DBSIZE
Return the number of keys in the selected database
DEBUG OBJECT
Get debugging information about a key
DEBUG SEGFAULT
Make the server crash
DECR
Decrement the integer value of a key by one
DECRBY
key decrement
Decrement the integer value of a key by the given number
key [key ...]
Delete a key
DISCARD
Discard all commands issued after MULTI
DUMP
Return a serialized version of the value stored at the specified key.
ECHO
message
Echo the given string
EVAL
script numkeys key [key ...] arg [arg ...]
Execute a Lua script server side
EVALSHA
sha1 numkeys key [key ...] arg [arg ...]
EXEC
Execute all commands issued after MULTI
1.2.0
EXISTS
Determine if a key exists
EXPIRE
key seconds
Set a key's time to live in seconds
EXPIREAT
key timestamp
Set the expiration for a key as a UNIX timestamp
FLUSHALL
Remove all keys from all databases
FLUSHDB
Remove all keys from the current database
Get the value of a key
GETBIT
key offset
Returns the bit value at offset in the string value stored at key
GETRANGE
key start end
Get a substring of the string stored at a key
GETSET
Set the string value of a key and return its old value
HDEL
key field [field ...]
Delete one or more hash fields
HEXISTS
key field
Determine if a hash field exists
HGET
Get the value of a hash field
HGETALL
Get all the fields and values in a hash
HINCRBY
key field increment
Increment the integer value of a hash field by the given number
HINCRBYFLOAT
Increment the float value of a hash field by the given amount
HKEYS
Get all the fields in a hash
HLEN
Get the number of fields in a hash
HMGET
Get the values of all the given hash fields
HMSET
key field value [field value ...]
Set multiple hash fields to multiple values
HSCAN
key cursor [MATCH pattern] [COUNT count]
Incrementally iterate hash fields and associated values
HSET
key field value
Set the string value of a hash field
HSETNX
Set the value of a hash field, only if the field does not exist
HVALS
Get all the values in a hash
INCR
Increment the integer value of a key by one
INCRBY
key increment
Increment the integer value of a key by the given amount
INCRBYFLOAT
Increment the float value of a key by the given amount
INFO
[section]
Get information and statistics about the server
KEYS
pattern
Find all keys matching the given pattern
LASTSAVE
Get the UNIX time stamp of the last successful save to disk
LINDEX
key index
Get an element from a list by its index
LINSERT
key BEFORE|AFTER pivot value
Insert an element before or after another element in a list
LLEN
Get the length of a list
LPOP
Remove and get the first element in a list
LPUSH
key value [value ...]
Prepend one or multiple values to a list
LPUSHX
Prepend a value to a list, only if the list exists
LRANGE
key start stop
Get a range of elements from a list
LREM
key count value
Remove elements from a list
LSET
key index value
Set the value of an element in a list by its index
LTRIM
Trim a list to the specified range
MGET
Get the values of all the given keys
MIGRATE
host port key destination-db timeout [COPY] [REPLACE]
Atomically transfer a key from a Redis instance to another one.
MONITOR
Listen for all requests received by the server in real time
MOVE
key db
Move a key to another database
MSET
key value [key value ...]
Set multiple keys to multiple values
1.0.1
MSETNX
Set multiple keys to multiple values, only if none of the keys exist
MULTI
Mark the start of a transaction block
OBJECT
subcommand [arguments [arguments ...]]
Inspect the internals of Redis objects
2.2.3
PERSIST
Remove the expiration from a key
PEXPIRE
key milliseconds
Set a key's time to live in milliseconds
PEXPIREAT
key milliseconds-timestamp
Set the expiration for a key as a UNIX timestamp specified in milliseconds
PFADD
key element [element ...]
Adds the specified elements to the specified HyperLogLog.
2.8.9
PFCOUNT
Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).
PFMERGE
destkey sourcekey [sourcekey ...]
Merge N different HyperLogLogs into a single one.
PING
Ping the server
PSETEX
key milliseconds value
Set the value and expiration in milliseconds of a key
PSUBSCRIBE
pattern [pattern ...]
Listen for messages published to channels matching the given patterns
PTTL
Get the time to live for a key in milliseconds
PUBLISH
channel message
Post a message to a channel
PUBSUB
subcommand [argument [argument ...]]
Inspect the state of the Pub/Sub subsystem
PUNSUBSCRIBE
[pattern [pattern ...]]
Stop listening for messages posted to channels matching the given patterns
QUIT
Close the connection
RANDOMKEY
Return a random key from the keyspace
RENAME
key newkey
Rename a key
RENAMENX
Rename a key, only if the new key does not exist
RESTORE
key ttl serialized-value
Create a key using the provided serialized value, previously obtained using DUMP.
RPOP
Remove and get the last element in a list
RPOPLPUSH
source destination
Remove the last element in a list, append it to another list and return it
RPUSH
Append one or multiple values to a list
RPUSHX
Append a value to a list, only if the list exists
SADD
key member [member ...]
Add one or more members to a set
SAVE
Synchronously save the dataset to disk
SCAN
cursor [MATCH pattern] [COUNT count]
Incrementally iterate the keys space
SCARD
Get the number of members in a set
SCRIPT EXISTS
script [script ...]
Check existence of scripts in the script cache.
SCRIPT FLUSH
Remove all the scripts from the script cache.
SCRIPT KILL
Kill the script currently in execution.
SCRIPT LOAD
script
Load the specified Lua script into the script cache.
SDIFF
Subtract multiple sets
SDIFFSTORE
destination key [key ...]
Subtract multiple sets and store the resulting set in a key
SELECT
index
Change the selected database for the current connection
key value [EX seconds] [PX milliseconds] [NX|XX]
Set the string value of a key
SETBIT
key offset value
Sets or clears the bit at offset in the string value stored at key
SETEX
key seconds value
Set the value and expiration of a key
SETNX
Set the value of a key, only if the key does not exist
SETRANGE
Overwrite part of a string at key starting at the specified offset
SHUTDOWN
[NOSAVE] [SAVE]
Synchronously save the dataset to disk and then shut down the server
SINTER
Intersect multiple sets
SINTERSTORE
Intersect multiple sets and store the resulting set in a key
SISMEMBER
key member
Determine if a given value is a member of a set
SLAVEOF
host port
Make the server a slave of another instance, or promote it as master
SLOWLOG
subcommand [argument]
Manages the Redis slow queries log
2.2.12
SMEMBERS
Get all the members in a set
SMOVE
source destination member
Move a member from one set to another
SORT
key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]
Sort the elements in a list, set or sorted set
SPOP
Remove and return a random member from a set
SRANDMEMBER
key [count]
Get one or multiple random members from a set
SREM
Remove one or more members from a set
SSCAN
Incrementally iterate Set elements
STRLEN
Get the length of the value stored in a key
SUBSCRIBE
channel [channel ...]
Listen for messages published to the given channels
SUNION
Add multiple sets
SUNIONSTORE
Add multiple sets and store the resulting set in a key
SYNC
Internal command used for replication
TIME
Return the current server time
Get the time to live for a key
TYPE
Determine the type stored at key
UNSUBSCRIBE
[channel [channel ...]]
Stop listening for messages posted to the given channels
UNWATCH
Forget about all watched keys
WATCH
Watch the given keys to determine execution of the MULTI/EXEC block
ZADD
key score member [score member ...]
Add one or more members to a sorted set, or update its score if it already exists
ZCARD
Get the number of members in a sorted set
ZCOUNT
key min max
Count the members in a sorted set with scores within the given values
ZINCRBY
key increment member
Increment the score of a member in a sorted set
ZINTERSTORE
destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
Intersect multiple sorted sets and store the resulting sorted set in a new key
ZLEXCOUNT
Count the number of members in a sorted set between a given lexicographical range
ZRANGE
key start stop [WITHSCORES]
Return a range of members in a sorted set, by index
ZRANGEBYLEX
key min max [LIMIT offset count]
Return a range of members in a sorted set, by lexicographical range
ZRANGEBYSCORE
key min max [WITHSCORES] [LIMIT offset count]
Return a range of members in a sorted set, by score
1.0.5
ZRANK
Determine the index of a member in a sorted set
ZREM
Remove one or more members from a sorted set
ZREMRANGEBYLEX
Remove all members in a sorted set between the given lexicographical range
ZREMRANGEBYRANK
Remove all members in a sorted set within the given indexes
ZREMRANGEBYSCORE
Remove all members in a sorted set within the given scores
ZREVRANGE
Return a range of members in a sorted set, by index, with scores ordered from high to low
ZREVRANGEBYSCORE
key max min [WITHSCORES] [LIMIT offset count]
Return a range of members in a sorted set, by score, with scores ordered from high to low
ZREVRANK
Determine the index of a member in a sorted set, with scores ordered from high to low
ZSCAN
Incrementally iterate sorted sets elements and associated scores
ZSCORE
Get the score associated with the given member in a sorted set
ZUNIONSTORE
Add multiple sorted sets and store the resulting sorted set in a new key
SYNC
Error writing to master
Error reading bulk length while SYNCing
SYNC with master failed: %s
%lluB
%.2fK
%.2fM
%.2fG
127.0.0.1
FAKETTY
generic
string
list
sorted_set
hash
pubsub
transactions
connection
server
scripting
hyperloglog
--help
--raw
--csv
--latency
--latency-history
--slave
--stat
--scan
--pattern
--intrinsic-latency
--rdb
--pipe
--pipe-timeout
--bigkeys
--eval
--version
redis-cli %s
Unrecognized option or bad number of args for: '%s'
redis-cli %s
Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
  -h <hostname>      Server hostname (default: 127.0.0.1).
  -p <port>          Server port (default: 6379).
  -s <socket>        Server socket (overrides hostname and port).
  -a <password>      Password to use when connecting to the server.
  -r <repeat>        Execute specified command N times.
  -i <interval>      When -r is used, waits <interval> seconds per command.
                     It is possible to specify sub-second times like -i 0.1.
  -n <db>            Database number.
  -x                 Read last argument from STDIN.
  -d <delimiter>     Multi-bulk delimiter in for raw formatting (default: \n).
  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).
  --raw              Use raw formatting for replies (default when STDOUT is
                     not a tty).
  --csv              Output in CSV format.
  --latency          Enter a special mode continuously sampling latency.
  --latency-history  Like --latency but tracking latency changes over time.
                     Default time interval is 15 sec. Change it using -i.
  --slave            Simulate a slave showing commands received from the master.
  --rdb <filename>   Transfer an RDB dump from remote server to local file.
  --pipe             Transfer raw Redis protocol from stdin to server.
  --pipe-timeout <n> In --pipe mode, abort with error if after sending all data.
                     no reply is received within <n> seconds.
                     Default timeout: %d. Use 0 to wait forever.
  --bigkeys          Sample Redis keys looking for big keys.
  --scan             List all keys using the SCAN command.
  --pattern <pat>    Useful with --scan to specify a SCAN pattern.
  --intrinsic-latency <sec> Run a test to measure intrinsic system latency.
                     The test will run for the specified amount of seconds.
  --eval <file>      Send an EVAL command using the Lua script at <file>.
  --help             Output this help and exit.
  --version          Output version and exit.
Examples:
  cat /etc/passwd | redis-cli -x set mypasswd
  redis-cli get mypasswd
  redis-cli -r 100 lpush mylist x
  redis-cli -r 100 -i 1 info | grep used_memory_human:
  redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3
  redis-cli --scan --pattern '*:12345*'
  (Note: when using --eval the comma separates KEYS[] from ARGV[] items)
When no command is given, redis-cli starts in interactive mode.
Type "help" in interactive mode for information on available commands.
2.8.12
 (git:%s
-dirty
Could not connect to Redis at 
%s:%d: %s
%s: %s
AUTH %s
SELECT %d
I/O error
[2Kmin: %lld, max: %lld, avg: %.2f (%lld samples)
 -- %.2f seconds range
SYNC with master, discarding %llu bytes of bulk transfer...
Error reading RDB payload while SYNCing
SYNC done. Logging commands from master.
MOVED
-> Redirected to slot [%d] located at %s:%d
Error: %s
%lld
Unknown reply type: %d
(error) %s
(integer) %lld
(nil)
(empty list or set)
%%s%%%dd) 
ERROR,
SYNC sent to master, writing %llu bytes to '%s'
Error opening '%s': %s
I/O Error reading RDB payload from socket
Error writing data to file: %s
Transfer finished with success.
Can't set the socket in non blocking mode: %s
Error reading from the server: %s
Error reading replies from server
Error writing to the server: %s
ECHO
01234567890123456789
Error reading from stdin: %s
No replies for %d seconds: exiting.
errors: %lld, replies: %lld
zset
bytes
items
members
fields
Failed to allocate memory for largest key names!
Failed to allocate storage for keys!
[%05.2f%%] Biggest %-6s found so far '%s' with %llu %s
Failed to allocate memory for key!
[%05.2f%%] Sampled %llu keys so far
Sampled %llu keys in the keyspace!
Total key length in bytes is %llu (avg len %.2f)
Biggest %6s found '%s' has %llu %s
%llu %ss with %llu %s (%05.2f%% of keys, avg size %.2f)
Couldn't determine DBSIZE!
SCAN %llu
SCAN error: %s
Non ARRAY response from SCAN!
Invalid element count from SCAN!
sendScan
redis-cli.c
reply->element[0]->type == REDIS_REPLY_STRING
reply->element[1]->type == REDIS_REPLY_ARRAY
TYPE %s
Error getting type for key '%s' (%d: %s)
Invalid reply type (%d) for TYPE on key '%s'!
none
Unknown type '%s' for key '%s'
%s %s
Error getting size for key '%s' (%d: %s)
Warning:  %s on '%s' failed (may have changed type)
ERROR: %s
db%d:keys
%-11s
used_memory
%-8s
connected_clients
 %-8s
blocked_clients
total_commands_processed
%ld (+%ld)
%-19s
total_connections_received
 %-12s
bgsave_in_progress
aof_rewrite_in_progress
SAVE+AOF
reconnectingInfo
!c->err
Reconnecting (%d)...
SCAN %llu MATCH %s
Max latency so far: %lld microseconds.
%lld total runs (avg %lld microseconds per run).
Worst run took %.02fx times the average.
HOME
%s/.rediscli_history
not connected> 
quit
exit
connect
clear
(%.2fs)
help 
redis %s
[%s]:%d
%s:%d
[%d]
help
info
cluster
nodes
client
shutdown
monitor
subscribe
psubscribe
sync
psync
select
cliOutputHelp
argc > 0
redis-cli %s
Type: "help @<group>" to get a list of commands in <group>
      "help <command>" for help on <command>
      "help <tab>" to get a list of possible help topics
      "quit" to exit
[1m%s
[0m 
[90m%s
[33msummary:
[0m %s
[33msince:
[0m %s
[33mgroup:
[0m %s
Can't open file '%s': %s
Reading from standard input
All data transferred. Waiting for the last reply...
Last reply received from server.
# Scanning the entire keyspace to find biggest keys as well as
# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec
# per 100 SCAN commands (not usually needed).
-------- summary -------
------- data ------ --------------------- load -------------------- - child -
keys       mem      clients blocked requests            connections          
I/O error
Invalid argument(s)
Entering slave output mode...  (press Ctrl-C to quit)
Reading messages... (press Ctrl-C to quit)
zmalloc: Out of memory trying to allocate %zu bytes
00000000
       0
2.8.12dt26.sd.apple.com-1602142267       000000000
kqueue
getsockopt(SO_ERROR)
setsockopt(SO_RCVTIMEO)
setsockopt(SO_SNDTIMEO)
%s: 
Can't get addr: %s
Can't bind socket: %s
Can't create socket: %s
setsockopt(TCP_NODELAY)
fcntl(F_GETFL)
fcntl(F_SETFL)
poll(2)
redisReaderFeed
hiredis.c
r->buf != NULL
eEfFgGaA
$%zu
redisvFormatCommand
pos == totlen
redisFormatCommandArgv
__redisSetError
type == REDIS_ERR_IO
Server closed the connection
Out of memory
createStringObject
task->type == REDIS_REPLY_ERROR || task->type == REDIS_REPLY_STATUS || task->type == REDIS_REPLY_STRING
parent->type == REDIS_REPLY_ARRAY
createArrayObject
createIntegerObject
createNilObject
processItem
NULL
Protocol error, got %s as reply type byte
"\%c"
"\n"
"\r"
"\t"
"\a"
"\b"
"%c"
"\x%02x"
moveToNextTask
prv->type == REDIS_REPLY_ARRAY
cur->idx < prv->elements
No support for nested multi bulk replies with depth > 7
'%c' %02x (%d) (type quit to exit)
[%dB
[%dA
[%dG
[%dC
TERM
dumb
cons25
emacs
[999C
[%dD
%d;%d
Linenoise key codes debugging mode.
Press keys to see scan codes. Type 'quit' at any time to exit.
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
+tPOu
w!X|
HY{'
{VI!
D"A/oyu
w!hy
dsw
QguI
aco-nz
6RtcZO"
H$BQ
XS&Y+
s3o\
\D2%4
u<~{
,6a<
;(uu
z`%1Is}
KM^bM
='2T
URdN
.wM^
p&S@
!Y%E
>?Wn
sVwES
-oX"'
+7a_
"s7$
Rg|/
)diouxX
