@(#)PROGRAM:malloc_history  PROJECT:SamplingTools-64541.7.1
ffff
DYLD_INSERT_LIBRARIES=
setPurposeDescription:
setSyntaxDescription:
setDiscussion:
setSingleHyphenLongNames:
sharedTimer
startWithMessage:
hasPrefix:
UTF8String
length
initWithPattern:forArgument:error:
parseArguments:withBlock:
usage:
directedGraphWithData:error:
localizedDescription
stackLogReader
processDescriptionString
binaryImagesDescription
symbolicatorFromBinaryImagesDescription:
currentHandler
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
initWithTask:symbolicator:
usesLiteMode
initWithTask:getBinariesList:
description
initWithTask:options:
addRootNodesFromTask
addMallocNodesFromTask
setObjectContentLevel:
zoneCount
setObject:atIndexedSubscript:
objectAtIndexedSubscript:
addRange:
zoneNameForIndex:
count
rangeAtIndex:
getFramesForAddress:size:inLiteZone:stackFramesBuffer:
functionNameForPCaddress:
nodesInUniquingTable
mapTableWithKeyOptions:valueOptions:
type
stringByAppendingString:
matchesNodeDetails:orNodeDescription:
enumerateMSLRecordsAndPayloads:
name
isEqualToString:
objectForKey:
setObject:forKey:
coldestFrameIsNotThreadId
initWithSymbolicator:sampler:options:
setStackLogReader:
nodeDetails:
getFramesForStackID:stackFramesBuffer:
addBacktrace:count:numBytes:
sort
addChildWithName:address:count:numBytes:toNode:
allBacktracesHaveBeenAdded
invertedNode
stringFromCallTreeIndentIfNoBranches:
stop
exceptionWithName:reason:userInfo:
labelForNode:
newlineCharacterSet
rangeOfCharacterFromSet:options:
componentsSeparatedByCharactersInSet:
stringByAppendingFormat:
displayName
typeName
binaryName
stringWithFormat:
vmuVMRegionForNode:
stringByReplacingOccurrencesOfString:withString:
member:
addObject:
symbolicatedBacktraceForStackID:options:
enumerateObjectsWithBlock:
setCountStyle:
stringFromByteCount:
setNumberStyle:
numberWithLongLong:
stringFromNumber:
init
letterCharacterSet
addCharactersInString:
rangeOfCharacterFromSet:
hasSuffix:
rangeOfString:options:
substringFromIndex:
substringToIndex:
_parseMallocSizePattern:error:
dealloc
className
_regex:matchesName:
superclassInfo
_matchesClassInfo:
classInfoWithClassName:binaryPath:type:
isMatchingKindOfClass
setMatchingKindOfClass:
resetCachedMatches
_classesRegex
_vmRegionsRegex
_memoizedRegexResult
_matchingKindOfClass
_patternMatchesNonObjects
_allocationSizeLowerBound
_allocationSizeUpperBound
containsString:
stringByResolvingSymlinksInPath
defaultManager
fileExistsAtPath:isDirectory:
isExecutableFileAtPath:
attributesOfItemAtPath:error:
fileSize
dataWithContentsOfFile:options:error:
string
processInfo
arguments
arrayWithArray:
lastPathComponent
componentsJoinedByString:
appendFormat:
executablePath
parentPid
parentProcessPath
processName
mainBundle
stringByDeletingLastPathComponent
stringByAppendingPathComponent:
stringByStandardizingPath
fileExistsAtPath:
class
isKindOfClass:
intValue
arrayWithObjects:count:
initWithPid:
containsObject:
is64Bit
valueForEnvVar:
numberWithUnsignedInt:
stringValue
numberWithInt:
sharedTimerIfCreated
reason
callStackSymbols
Displays/aggregates allocation histories in a process
<pid | partial-process-name> [options] <mode> [<address> ... | <classes-pattern>]
'mode' should be one of -callTree, -allBySize, -allByCount, -allEvents, or one or more addresses.
The <classes-pattern> for -callTree can be followed by a malloc size specification
of the form [size] or [lowerBound-upperBound], such as 'malloc[1024]' or 'CFData[16k-]'.
allBySize
[mode]
v8@?0
allByCount
allEvents
fullStacks
print backtraces with one line per frame
callTree
debug
uniquingTableStats
Print debug information about the stack uniquing table.
highWaterMark
Show information about allocations and VM regions that were live at the point of peak memory allocation, rather than currently alive. Not available for memory graphs.
machineReadableOutput
showContent
(-allEvents, -calltree only)
readonlyContent
noContent
invert
(-calltree only)
ignoreThreads
collapseRecursion
chargeSystemLibraries
consolidateAllBySymbol
consolidateSystemFramesBySymbol
virtual
(-calltree only -- show virtual size of VM regions rather than dirty+swapped-purgableVolatile
forkCorpse
generate a corpse fork from process and run malloc_history on it
getCorpseFromParent
quiet
suppress the process description header and footer
showTiming
initialization
bad address %@ specified
v24@?0@"NSString"8^@16
no process id or name specified
specify only one mode (-callTree, -allBySize, -allByCount, -allEvents, or one or more addresses)
cannot use -showContent or -readonlyContent with -highWaterMark, since the malloc heap has probably changed since high water mark
<classes-pattern> is only supported by -callTree
do not pass specific addresses or <classes-pattern> with -allEvents
only call tree / all events mode support -showContent or -readonlyContent
cannot use call tree options when not passing -callTree
no mode, address, or <classes-pattern> specified
can't use -highWaterMark with memory graph files since they only contain stack logs for active allocations, not full history
%s[%d]: [fatal] unable to read input graph: %s
The target process has no stack logs.  Run it with the MallocStackLogging environment variable set to get stack logs.
int main(int, char **)
malloc_history_main.m
expected no addresses to be passed with -allEvents
v16@?0^v8
generate corpse
create symbolicator for task
malloc_history was unable to acquire a symbolicator for the target process.
Can't show high water mark when target process is run in lite mode of malloc stack logging.
create process description
finding high water mark
%s[%d]: [fatal] unable to introspect malloc zones to get allocation information
Process %d is not debuggable. Due to security restrictions, malloc_history can only show contents of readonly memory of restricted processes.
int main(int, char **)_block_invoke_2
v16@?0i8I12
VM Regions
v52@?0I8{?=Qb60b4@}12@"DVT_VMUVMRegion"36^c44
%d blocks in zone %s
%i: %#qx %s -- 
%ld stack frames
 -- NO STACK !!!
 -- SHORT STACK
  %s
  0x%qx 
%d total blocks
MallocStackLoggingLite
Nodes in Uniquing Table: %llu
step 1 -- build map table with live malloc block addresses as keys
VM: 
step 2 -- enumerate stack log records to record unique backtrace IDs for objects of interest
stack log enumeration callbacks
v36@?0I8Q12Q20{?=Q}28
skipping step 1 of building map table with live malloc block addresses as keys since we're looking for high water mark
step 2 -- enumerate stack log records to record unique backtrace IDs for objects that were live at high water mark
HighWaterMarkException
void printCallTree(__strong id<VMUCommonGraphInterface>, CSSymbolicatorRef, HighWaterMarkInfo *, VMUCallTreeOptions, VMUObjectContentLevel, BOOL, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
Unexpected exception
step 3 -- from uniqueBacktraceToObjectsMap, create uniqueBacktraceToObjectsMap
step 4 -- build call tree by iterating the uniqueBacktraceToObjectsMap
%qu unique stacks
CONTENT:  
freeing up call-tree memory
releasing objectIdentifier
step 5 -- print call tree
VM region sizes shown as %s.
virtual size
dirty + swapped/compressed - purgableVolatile
Stack backtrace%s for allocation%s
Stack backtraces for allocations that match pattern '%s'
Malloc blocks with no stack: %6u   total size: %s
   VM regions with no stack: %6u   total size: %s
releasing call tree/autorelease pool
" PLUS %lu MORE LINES
%@  %@  %@
malloc<%llu>
NSString *generateContentAndTypeLabel(__strong id<VMUCommonGraphInterface>, uint32_t, BOOL)
expected to get vmRegionTypeString for VM region
    
error acquiring stack with identifier: %llu (frame count %u)
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)_block_invoke
unexpected stack logging event type
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
%d call%s for %qd bytes: 
v44@?0I8{?=Qb60b4@}12^c36
0x%qx
0x%qx
%s 0x%qx-0x%qx [size=%qu]: %s 
ALLOC
VM_ALLOC
FREE
VM_DEALLOC
0x%qx
%s  0x%qx: 
%s  0x%qx-0x%qx [size=%qu]: 
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, VMUObjectContentLevel, BOOL)_block_invoke
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, VMUObjectContentLevel, BOOL)
no stack logs found for 0x%qx
High water mark of allocated heap + VM memory: %*s  at malloc stack log record index %*s
     Current total allocated heap + VM memory: %*s  at malloc stack log record index %*s
  Cumulative total allocated heap + VM memory: %*s
            Total heap + VM memory operations: %*s  allocations: %*s  deallocations: %*s
High water mark of allocated heap memory
High water mark at malloc stack log record index
Current total allocated heap memory
Current total at malloc stack log record index
Cumulative total allocated heap memory
Total heap memory operations (count)
Total heap memory allocations (count)
Total heap memory deallocations (count)
not lite zone
Call graph:
Total number in stack -- this line is here to get the correct format for importing with the Sampler instrument in Instruments.app
Stack logging was dynamically enabled in target process, after it was launched,
so no backtraces are available for earlier allocations.
malloc_history Report Version:  2.0
----
_.([@
error in %@ <classes> pattern '%@' - cannot match the start of a class name
error in %@ <classes> pattern '%@' - no starting bracket [: %s
malloc
non-object
error in %@ <classes> pattern '%@': %s
Region
Thread
.*%@
%@.*
error in % <region-description> pattern '%@': %s
malloc size pattern '%@' was not of expected format '[size]' or '[lowerSizeBound-upperSizeBound]'
error in malloc size pattern '%@':  if upper bound of size is given, it must be %llu or more
error in malloc size pattern '%@': lower bound of size (%llu) should be <= upper bound of size (%llu)
error in malloc size pattern '%@':  size must be %llu or more
error in malloc size pattern '%@':  size must be a multiple of %llu, or a range like '[lowerSizeBound-upperSizeBound]'
%s[%d]: [fatal] %s
-[VMUClassPatternMatcher matchesNodeDetails:orNodeDescription:]
VMUClassPatternMatcher.m
malloc size lower bound (%llu) expected to be <= upper bound (%llu)
matchingKindOfClass
Tc,N,GisMatchingKindOfClass
.memgraph
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
Target process of memgraph:  %@ [%u]
../lib/libLeaksAtExit.dylib
%s[%d]: [fatal] unable to locate required library: %s
DYLD_INSERT_LIBRARIES
DYLD_INSERT_LIBRARIES=%s:%s
DYLD_INSERT_LIBRARIES=%s
%s[%d]: [fatal] --atExit must be followed by " -- <command>"
%s[%d]: [fatal] No command specified after '--atExit -- '
%s[%d]: [fatal] Unable to launch --atExit command '%s': %s
%s[%d]: [fatal] Couldn't get task port for pid %u immediately after launch
%s[%d]: Unable to deallocate target task port: %d (%s)
%s[%d]: [fatal] Couldn't get task port for pid %u after receiving STOP signal
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
launchd
coresymbolicationd
coreservicesd
UserEventAgent
rpc.lockd
launchservicesd
Activity Monitor
mdworker
spindump_agent
WindowServer
hidd
bluetoothd
logd
loginwindow
usbd
TouchBarServer
sysdiagnose
coreaudiod
kextd
notifyd
powerd
ReportCrash
ReportMemoryException
ReportPanic
watchdogd
cfprefsd
Process exists but has not started -- it is launched-suspended
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
x86_64
i386
arm64
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v20@?0I8I12I16
v12@?0I8
i24@?0r^v8r^v16
%s-%d-%s
/tmp/%s-allProcesses[%d].XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing output files into %s
Skipping process of wrong architecture:  %d %s
%5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
generate corpse in analyzeAllProcesses()
Exception '%s', reason: '%s'
v40@?0i8r*12B20I24I28^c32
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
: terminated; resuming target task
: interrupted; resuming target task
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
Target process is using %s so not generating corpse for better performance.
Failed to generate corpse from the process: %d (%s)
%s[%d]: [fatal] %s, exiting
%s[%d]: %s
%s[%d]: [fatal] Corpse generated for the process is incomplete, which can happen with processes that use a lot of memory
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
%s/usr/bin/%s
v20@?0I8@?<v@?>12
__isPlatformOrVariantPlatformVersionAtLeast
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/clang/clang-1200.0.32.6/compiler-rt/lib/builtins/os_version_check.c
Platform2 == PLATFORM_MACOS && "unexpected platform"
_availability_version_check
kCFAllocatorNull
CFDataCreateWithBytesNoCopy
CFPropertyListCreateWithData
CFPropertyListCreateFromXMLData
CFStringCreateWithCStringNoCopy
CFDictionaryGetValue
CFGetTypeID
CFStringGetTypeID
CFStringGetCString
CFRelease
/System/Library/CoreServices/SystemVersion.plist
ProductVersion
%d.%d.%d
VMUClassPatternMatcher
c16@0:8
v20@0:8c16
@40@0:8@16@24^@32
v16@0:8
c32@0:8@16^@24
c32@0:8^{?=iQ*^{re_guts}}16@24
c24@0:8@16
c48@0:8{?=Qb60b4@}16@40
^{?=iQ*^{re_guts}}
^{__CFDictionary=}
examining %@ [%u]
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A2371</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.SamplingTools.malloc-history</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>12B5035e</string>
<key>DTPlatformName</key>
<string>macosx</string>
<key>DTPlatformVersion</key>
<string>11.0</string>
<key>DTSDKBuild</key>
<string>20A2381</string>
<key>DTSDKName</key>
<string>macosx11.0internal</string>
<key>DTXcode</key>
<string>1220</string>
<key>DTXcodeBuild</key>
<string>12B5035e</string>
<key>LSMinimumSystemVersion</key>
<string>10.14.6</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>safe</string>
</array>
</dict>
</plist>
zPLR
zPLR
